<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Umbraco.Infrastructure</name>
    </assembly>
    <members>
        <member name="M:Umbraco.Cms.Infrastructure.BackgroundJobs.DelayCalculator.GetDelay(System.String,Umbraco.Cms.Core.Configuration.ICronTabParser,Microsoft.Extensions.Logging.ILogger,System.TimeSpan)">
            <summary>
            Determines the delay before the first run of a recurring task implemented as a hosted service when an optonal
            configuration for the first run time is available.
            </summary>
            <param name="firstRunTime">The configured time to first run the task in crontab format.</param>
            <param name="cronTabParser">An instance of <see cref="T:Umbraco.Cms.Core.Configuration.ICronTabParser"/></param>
            <param name="logger">The logger.</param>
            <param name="defaultDelay">The default delay to use when a first run time is not configured.</param>
            <returns>The delay before first running the recurring task.</returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.BackgroundJobs.DelayCalculator.GetDelay(System.String,Umbraco.Cms.Core.Configuration.ICronTabParser,Microsoft.Extensions.Logging.ILogger,System.DateTime,System.TimeSpan)">
            <summary>
            Determines the delay before the first run of a recurring task implemented as a hosted service when an optonal
            configuration for the first run time is available.
            </summary>
            <param name="firstRunTime">The configured time to first run the task in crontab format.</param>
            <param name="cronTabParser">An instance of <see cref="T:Umbraco.Cms.Core.Configuration.ICronTabParser"/></param>
            <param name="logger">The logger.</param>
            <param name="now">The current datetime.</param>
            <param name="defaultDelay">The default delay to use when a first run time is not configured.</param>
            <returns>The delay before first running the recurring task.</returns>
            <remarks>Internal to expose for unit tests.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.BackgroundJobs.IRecurringBackgroundJob">
            <summary>
                A recurring background job
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.BackgroundJobs.IRecurringBackgroundJob.Period">
            <summary>
            Timespan representing how often the task should recur.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.BackgroundJobs.IRecurringBackgroundJob.Delay">
            <summary>
            Timespan representing the initial delay after application start-up before the first run of the task
            occurs.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.ContentVersionCleanupJob">
            <summary>
                Recurring hosted service that executes the content history cleanup.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.ContentVersionCleanupJob.#ctor(Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.ContentVersionCleanupJob},Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.ContentSettings},Umbraco.Cms.Core.Services.IContentVersionService)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.ContentVersionCleanupJob" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.ContentVersionCleanupJob.RunJobAsync">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.HealthCheckNotifierJob">
            <summary>
                Hosted service implementation for recurring health check notifications.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.HealthCheckNotifierJob.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.HealthChecksSettings},Umbraco.Cms.Core.HealthChecks.HealthCheckCollection,Umbraco.Cms.Core.HealthChecks.HealthCheckNotificationMethodCollection,Umbraco.Cms.Core.Scoping.ICoreScopeProvider,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.HealthCheckNotifierJob},Umbraco.Cms.Core.Logging.IProfilingLogger,Umbraco.Cms.Core.Configuration.ICronTabParser,Umbraco.Cms.Core.Events.IEventAggregator)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.HealthCheckNotifierJob" /> class.
            </summary>
            <param name="healthChecksSettings">The configuration for health check settings.</param>
            <param name="healthChecks">The collection of healthchecks.</param>
            <param name="notifications">The collection of healthcheck notification methods.</param>
            <param name="scopeProvider">Provides scopes for database operations.</param>
            <param name="logger">The typed logger.</param>
            <param name="profilingLogger">The profiling logger.</param>
            <param name="cronTabParser">Parser of crontab expressions.</param>
            <param name="eventAggregator"></param>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.LogScrubberJob">
            <summary>
                Log scrubbing hosted service.
            </summary>
            <remarks>
                Will only run on non-replica servers.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.LogScrubberJob.#ctor(Umbraco.Cms.Core.Services.IAuditService,Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.LoggingSettings},Umbraco.Cms.Core.Scoping.ICoreScopeProvider,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.LogScrubberJob},Umbraco.Cms.Core.Logging.IProfilingLogger)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.LogScrubberJob" /> class.
            </summary>
            <param name="auditService">Service for handling audit operations.</param>
            <param name="settings">The configuration for logging settings.</param>
            <param name="scopeProvider">Provides scopes for database operations.</param>
            <param name="logger">The typed logger.</param>
            <param name="profilingLogger">The profiling logger.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.ReportSiteJob.RunJobAsync">
            <summary>
            Runs the background task to send the anonymous ID
            to telemetry service
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.ScheduledPublishingJob">
            <summary>
                Hosted service implementation for scheduled publishing feature.
            </summary>
            <remarks>
                Runs only on non-replica servers.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.ScheduledPublishingJob.#ctor(Umbraco.Cms.Core.Services.IContentService,Umbraco.Cms.Core.Web.IUmbracoContextFactory,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.ScheduledPublishingJob},Umbraco.Cms.Core.Sync.IServerMessenger,Umbraco.Cms.Core.Scoping.ICoreScopeProvider,System.TimeProvider)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.ScheduledPublishingJob" /> class.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.ServerRegistration.InstructionProcessJob">
            <summary>
                Implements periodic database instruction processing as a hosted service.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.ServerRegistration.InstructionProcessJob.#ctor(Umbraco.Cms.Core.Sync.IServerMessenger,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.ServerRegistration.InstructionProcessJob},Microsoft.Extensions.Options.IOptions{Umbraco.Cms.Core.Configuration.Models.GlobalSettings})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.ServerRegistration.InstructionProcessJob" /> class.
            </summary>
            <param name="messenger">Service broadcasting cache notifications to registered servers.</param>
            <param name="logger">The typed logger.</param>
            <param name="globalSettings">The configuration for global settings.</param>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.ServerRegistration.TouchServerJob">
            <summary>
                Implements periodic server "touching" (to mark as active/deactive) as a hosted service.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.ServerRegistration.TouchServerJob.#ctor(Umbraco.Cms.Core.Services.IServerRegistrationService,Umbraco.Cms.Core.Hosting.IHostingEnvironment,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.ServerRegistration.TouchServerJob},Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.GlobalSettings},Umbraco.Cms.Core.Sync.IServerRoleAccessor)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.ServerRegistration.TouchServerJob" /> class.
            </summary>
            <param name="serverRegistrationService">Services for server registrations.</param>
            <param name="logger">The typed logger.</param>
            <param name="globalSettings">The configuration for global settings.</param>
            <param name="hostingEnvironment">The hostingEnviroment.</param>
            <param name="serverRoleAccessor">The accessor for the server role</param>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.TempFileCleanupJob">
            <summary>
                Used to cleanup temporary file locations.
            </summary>
            <remarks>
                Will run on all servers - even though file upload should only be handled on the scheduling publisher, this will
                ensure that in the case it happens on subscribers that they are cleaned up too.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.TempFileCleanupJob.#ctor(Umbraco.Cms.Core.IO.IIOHelper,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.TempFileCleanupJob})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.TempFileCleanupJob" /> class.
            </summary>
            <param name="ioHelper">Helper service for IO operations.</param>
            <param name="logger">The typed logger.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.TemporaryFileCleanupJob.#ctor(Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.TemporaryFileCleanupJob},Umbraco.Cms.Core.Services.ITemporaryFileService)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.TemporaryFileCleanupJob" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.TemporaryFileCleanupJob.RunJobAsync">
            <summary>
            Runs the background task to send the anonymous ID
            to telemetry service
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.WebhookLoggingCleanup">
            <summary>
            Daily background job that removes all webhook log data older than x days as defined by <see cref="P:Umbraco.Cms.Core.Configuration.Models.WebhookSettings.KeepLogsForDays"/>
            </summary>
        </member>
        <member name="E:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.WebhookLoggingCleanup.PeriodChanged">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.WebhookLoggingCleanup.Period">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.WebhookLoggingCleanup.Delay">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.BackgroundJobs.Jobs.WebhookLoggingCleanup.RunJobAsync">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.BackgroundJobs.RecurringBackgroundJobHostedService`1">
            <summary>
            Runs a recurring background job inside a hosted service.
            Generic version for DependencyInjection
            </summary>
            <typeparam name="TJob">Type of the Job</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.BackgroundJobs.RecurringBackgroundJobHostedService`1.PerformExecuteAsync(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.BackgroundJobs.RecurringBackgroundJobHostedServiceRunner">
            <summary>
                A hosted service that discovers and starts hosted services for any recurring background jobs in the DI container.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Configuration.JsonConfigManipulator.RemoveConnectionStringAsync">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Configuration.JsonConfigManipulator.SaveConnectionStringAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Configuration.JsonConfigManipulator.SaveConfigValueAsync(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Configuration.JsonConfigManipulator.SaveDisableRedirectUrlTrackingAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Configuration.JsonConfigManipulator.SetGlobalIdAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Configuration.JsonConfigManipulator.CreateOrUpdateConfigValueAsync(System.String,System.Object)">
            <summary>
            Creates or updates a config value at the specified path.
            <remarks>This causes a rewrite of the configuration file.</remarks>
            </summary>
            <param name="itemPath">Path to update, uses : as the separator.</param>
            <param name="value">The value of the node.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Configuration.JsonConfigManipulator.CreateOrUpdateJsonNode(System.Text.Json.Nodes.JsonNode,System.String,System.Object)">
            <summary>
            Updates or creates a json node at the specified path.
            <remarks>
            Will also create any missing nodes in the path.
            </remarks>
            </summary>
            <param name="node">Node to create or update.</param>
            <param name="itemPath">Path to create or update, uses : as the separator.</param>
            <param name="value">The value of the node.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Configuration.JsonConfigManipulator.FindChildNode(System.Text.Json.Nodes.JsonNode,System.String)">
            <summary>
            Finds the immediate child with the specified name, in a case insensitive manner.
            </summary>
            <remarks>
            This is required since keys are case insensitive in IConfiguration.
            But not in JsonNode.
            </remarks>
            <param name="node">The node to search.</param>
            <param name="key">The key to search for.</param>
            <returns>The found node, null if no match is found.</returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DeliveryApi.ApiRichTextParserBase.LegacyLocalLinkRegex">
            <remarks>
            Pattern:<br/>
            <code>{localLink:(?&lt;udi&gt;umb:.+)}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match the string "{localLink:".<br/>
            ○ "udi" capture group.<br/>
                ○ Match the string "umb:".<br/>
                ○ Match a character other than '\n' greedily at least once.<br/>
            ○ Match '}'.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DeliveryApi.ApiRichTextParserBase.LocalLinkRegex">
            <remarks>
            Pattern:<br/>
            <code>{localLink:(?&lt;guid&gt;.+)}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match the string "{localLink:".<br/>
            ○ "guid" capture group.<br/>
                ○ Match a character other than '\n' greedily at least once.<br/>
            ○ Match '}'.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions">
            <summary>
                Provides extension methods to the <see cref="T:Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder" /> class.
            </summary>
            <summary>
                Provides extension methods to the <see cref="T:Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder" /> class.
            </summary>
            <summary>
                Composes repositories.
            </summary>
            <summary>
                Provides extension methods to the <see cref="T:Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.AddCoreInitialServices(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Adds all core Umbraco services required to run which may be replaced later in the pipeline.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.AddLogging(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
                Adds logging requirements for Umbraco
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.AddDistributedCache(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
                Adds distributed cache support
            </summary>
            <remarks>
                This is still required for websites that are not load balancing because this ensures that sites hosted
                with managed hosts like IIS/etc... work correctly when AppDomains are running in parallel.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.SetServerRegistrar``1(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
                Sets the server registrar.
            </summary>
            <typeparam name="T">The type of the server registrar.</typeparam>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.SetServerRegistrar(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder,System.Func{System.IServiceProvider,Umbraco.Cms.Core.Sync.IServerRoleAccessor})">
            <summary>
                Sets the server registrar.
            </summary>
            <param name="builder">The builder.</param>
            <param name="factory">A function creating a server registrar.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.SetServerRegistrar(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder,Umbraco.Cms.Core.Sync.IServerRoleAccessor)">
            <summary>
                Sets the server registrar.
            </summary>
            <param name="builder">The builder.</param>
            <param name="registrar">A server registrar.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.SetServerMessenger``1(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
                Sets the server messenger.
            </summary>
            <typeparam name="T">The type of the server registrar.</typeparam>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.SetServerMessenger(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder,System.Func{System.IServiceProvider,Umbraco.Cms.Core.Sync.IServerMessenger})">
            <summary>
                Sets the server messenger.
            </summary>
            <param name="builder">The builder.</param>
            <param name="factory">A function creating a server messenger.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.SetServerMessenger(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder,Umbraco.Cms.Core.Sync.IServerMessenger)">
            <summary>
                Sets the server messenger.
            </summary>
            <param name="builder">The builder.</param>
            <param name="registrar">A server messenger.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.AddInstaller(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
                Adds the services for the Umbraco installer
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.AddCoreMappingProfiles(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
                Registers the core Umbraco mapper definitions
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.AddRepositories(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
                Adds the Umbraco repositories
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.AddServices(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
                Adds Umbraco services
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.SetCultureDictionaryFactory``1(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
                Sets the culture dictionary factory.
            </summary>
            <typeparam name="T">The type of the factory.</typeparam>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.SetDefaultViewContentProvider``1(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
                Sets the default view content provider
            </summary>
            <typeparam name="T">The type of the provider.</typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.SetCultureDictionaryFactory(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder,System.Func{System.IServiceProvider,Umbraco.Cms.Core.Dictionary.ICultureDictionaryFactory})">
            <summary>
                Sets the culture dictionary factory.
            </summary>
            <param name="builder">The builder.</param>
            <param name="factory">A function creating a culture dictionary factory.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.SetCultureDictionaryFactory(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder,Umbraco.Cms.Core.Dictionary.ICultureDictionaryFactory)">
            <summary>
                Sets the culture dictionary factory.
            </summary>
            <param name="builder">The builder.</param>
            <param name="factory">A factory.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.SetPublishedContentModelFactory``1(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
                Sets the published content model factory.
            </summary>
            <typeparam name="T">The type of the factory.</typeparam>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.SetPublishedContentModelFactory(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder,System.Func{System.IServiceProvider,Umbraco.Cms.Core.Models.PublishedContent.IPublishedModelFactory})">
            <summary>
                Sets the published content model factory.
            </summary>
            <param name="builder">The builder.</param>
            <param name="factory">A function creating a published content model factory.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.SetPublishedContentModelFactory(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder,Umbraco.Cms.Core.Models.PublishedContent.IPublishedModelFactory)">
            <summary>
                Sets the published content model factory.
            </summary>
            <param name="builder">The builder.</param>
            <param name="factory">A published content model factory.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.SetShortStringHelper``1(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
                Sets the short string helper.
            </summary>
            <typeparam name="T">The type of the short string helper.</typeparam>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.SetShortStringHelper(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder,System.Func{System.IServiceProvider,Umbraco.Cms.Core.Strings.IShortStringHelper})">
            <summary>
                Sets the short string helper.
            </summary>
            <param name="builder">The builder.</param>
            <param name="factory">A function creating a short string helper.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.SetShortStringHelper(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder,Umbraco.Cms.Core.Strings.IShortStringHelper)">
            <summary>
                Sets the short string helper.
            </summary>
            <param name="builder">A builder.</param>
            <param name="helper">A short string helper.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.SetMediaFileSystem(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder,System.Func{System.IServiceProvider,Umbraco.Cms.Core.IO.IFileSystem})">
            <summary>
                Sets the filesystem used by the MediaFileManager
            </summary>
            <param name="builder">A builder.</param>
            <param name="filesystemFactory">Factory method to create an IFileSystem implementation used in the MediaFileManager</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.ConfigureFileSystems(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder,System.Action{System.IServiceProvider,Umbraco.Cms.Core.IO.FileSystems})">
            <summary>
                Register FileSystems with a method to configure the <see cref="T:Umbraco.Cms.Core.IO.FileSystems" />.
            </summary>
            <param name="builder">A builder.</param>
            <param name="configure">Method that configures the <see cref="T:Umbraco.Cms.Core.IO.FileSystems" />.</param>
            <exception cref="T:System.ArgumentNullException">Throws exception if <paramref name="configure" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Throws exception if full path can't be resolved successfully.</exception>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.SetLogViewer``1(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
                Sets the log viewer.
            </summary>
            <typeparam name="T">The type of the log viewer.</typeparam>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.SetLogViewer(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder,System.Func{System.IServiceProvider,Umbraco.Cms.Core.Logging.Viewer.ILogViewer})">
            <summary>
                Sets the log viewer.
            </summary>
            <param name="builder">The builder.</param>
            <param name="factory">A function creating a log viewer.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.DependencyInjection.UmbracoBuilderExtensions.SetLogViewer(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder,Umbraco.Cms.Core.Logging.Viewer.ILogViewer)">
            <summary>
                Sets the log viewer.
            </summary>
            <param name="builder">A builder.</param>
            <param name="viewer">A log viewer.</param>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.BaseValueSetBuilder`1">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.BaseValueSetBuilder`1.GetValueSets(`0[])">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.ContentIndexPopulator">
            <summary>
                Performs the data lookups required to rebuild a content index
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Examine.ContentIndexPopulator._publishedQuery">
            <summary>
                This is a static query, it's parameters don't change so store statically
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.ContentIndexPopulator.#ctor(Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.Examine.ContentIndexPopulator},Umbraco.Cms.Core.Services.IContentService,Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabaseFactory,Umbraco.Cms.Infrastructure.Examine.IContentValueSetBuilder)">
            <summary>
                Default constructor to lookup all content data
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.ContentIndexPopulator.#ctor(Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.Examine.ContentIndexPopulator},System.Boolean,System.Nullable{System.Int32},Umbraco.Cms.Core.Services.IContentService,Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabaseFactory,Umbraco.Cms.Infrastructure.Examine.IValueSetBuilder{Umbraco.Cms.Core.Models.IContent})">
            <summary>
                Optional constructor allowing specifying custom query parameters
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.ContentValueSetBuilder">
            <summary>
                Builds <see cref="T:Examine.ValueSet" />s for <see cref="T:Umbraco.Cms.Core.Models.IContent" /> items
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.ContentValueSetBuilder.GetValueSets(Umbraco.Cms.Core.Models.IContent[])">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.ContentValueSetValidator">
            <summary>
                Used to validate a ValueSet for content/media - based on permissions, parent id, etc....
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.DeliveryApiContentIndexValueSetBuilder.GetValueSets(Umbraco.Cms.Core.Models.IContent[])">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Examine.DeliveryApiIndexingHandler.Enabled">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.DeliveryApiIndexingHandler.HandleContentChanges(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.Int32,Umbraco.Cms.Core.Services.Changes.TreeChangeTypes}})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.DeliveryApiIndexingHandler.HandleContentTypeChanges(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.Int32,Umbraco.Cms.Core.Services.Changes.ContentTypeChangeTypes}})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.DeliveryApiIndexingHandler.HandlePublicAccessChanges">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.ExamineIndexRebuilder.#ctor(Umbraco.Cms.Core.Runtime.IMainDom,Umbraco.Cms.Core.Services.IRuntimeState,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.Examine.ExamineIndexRebuilder},Examine.IExamineManager,System.Collections.Generic.IEnumerable{Umbraco.Cms.Infrastructure.Examine.IIndexPopulator},Umbraco.Cms.Infrastructure.HostedServices.IBackgroundTaskQueue)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Examine.ExamineIndexRebuilder" /> class.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.ExamineUmbracoIndexingHandler">
            <summary>
                Indexing handler for Examine indexes
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Examine.ExamineUmbracoIndexingHandler.Enabled">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.ExamineUmbracoIndexingHandler.DeleteIndexForEntity(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.ExamineUmbracoIndexingHandler.DeleteIndexForEntities(System.Collections.Generic.IReadOnlyCollection{System.Int32},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.ExamineUmbracoIndexingHandler.ReIndexForContent(Umbraco.Cms.Core.Models.IContent,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.ExamineUmbracoIndexingHandler.ReIndexForMedia(Umbraco.Cms.Core.Models.IMedia,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.ExamineUmbracoIndexingHandler.ReIndexForMember(Umbraco.Cms.Core.Models.IMember)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.ExamineUmbracoIndexingHandler.RemoveProtectedContent">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.ExamineUmbracoIndexingHandler.DeleteDocumentsForContentTypes(System.Collections.Generic.IReadOnlyCollection{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.ExamineUmbracoIndexingHandler.IsEnabled">
            <summary>
                Used to lazily check if Examine Index handling is enabled
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.ExamineUmbracoIndexingHandler.DeferredReIndexForContent">
            <summary>
                Re-indexes an <see cref="T:Umbraco.Cms.Core.Models.IContent" /> item on a background thread
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.ExamineUmbracoIndexingHandler.DeferredReIndexForMedia">
            <summary>
                Re-indexes an <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> item on a background thread
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.ExamineUmbracoIndexingHandler.DeferredReIndexForMember">
            <summary>
                Re-indexes an <see cref="T:Umbraco.Cms.Core.Models.IMember" /> item on a background thread
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.ExamineUmbracoIndexingHandler.DeferredRemoveProtectedContent">
            <summary>
                Removes all protected content from applicable indexes on a background thread
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.GenericIndexDiagnostics">
            <summary>
                Used to return diagnostic data for any index
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.IBackOfficeExamineSearcher">
            <summary>
                Used to search the back office for Examine indexed entities (Documents, Media and Members)
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.IContentValueSetBuilder">
            <inheritdoc />
            <summary>
                Marker interface for a <see cref="T:Examine.ValueSet" /> builder for supporting unpublished content
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.IContentValueSetValidator">
            <summary>
                An extended <see cref="T:Examine.IValueSetValidator" /> for content indexes
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Examine.IContentValueSetValidator.PublishedValuesOnly">
            <summary>
                When set to true the index will only retain published values
            </summary>
            <remarks>
                Any non-published values will not be put or kept in the index:
                * Deleted, Trashed, non-published Content items
                * non-published Variants
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Examine.IContentValueSetValidator.SupportProtectedContent">
            <summary>
                If true, protected content will be indexed otherwise it will not be put or kept in the index
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.IIndexDiagnostics">
            <summary>
                Exposes diagnostic information about an index
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Examine.IIndexDiagnostics.Metadata">
            <summary>
                A key/value collection of diagnostic properties for the index
            </summary>
            <remarks>
                Used to display in the UI
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.IIndexDiagnostics.IsHealthy">
            <summary>
                If the index can be open/read
            </summary>
            <returns>
                A successful attempt if it is healthy, else a failed attempt with a message if unhealthy
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.IIndexDiagnosticsFactory">
            <summary>
                Creates <see cref="T:Umbraco.Cms.Infrastructure.Examine.IIndexDiagnostics" /> for an index if it doesn't implement <see cref="T:Umbraco.Cms.Infrastructure.Examine.IIndexDiagnostics" />
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.IIndexPopulator.IsRegistered(Examine.IIndex)">
            <summary>
                If this index is registered with this populator
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.IIndexPopulator.Populate(Examine.IIndex[])">
            <summary>
                Populate indexers
            </summary>
            <param name="indexes"></param>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.IndexDiagnosticsFactory">
            <summary>
                Default implementation of <see cref="T:Umbraco.Cms.Infrastructure.Examine.IIndexDiagnosticsFactory" /> which returns
                <see cref="T:Umbraco.Cms.Infrastructure.Examine.GenericIndexDiagnostics" /> for indexes that don't have an implementation
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.IndexPopulator`1">
            <summary>
                An <see cref="T:Umbraco.Cms.Infrastructure.Examine.IIndexPopulator" /> that is automatically associated to any index of type <typeparamref name="TIndex"/>
            </summary>
            <typeparam name="TIndex"></typeparam>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.IndexPopulator.RegisterIndex(System.String)">
            <summary>
                Registers an index for this populator
            </summary>
            <param name="indexName"></param>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.IndexTypes">
            <summary>
                The index types stored in the Lucene Index
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Examine.IndexTypes.Content">
            <summary>
                The content index type
            </summary>
            <remarks>
                Is lower case because the Standard Analyzer requires lower case
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Examine.IndexTypes.Media">
            <summary>
                The media index type
            </summary>
            <remarks>
                Is lower case because the Standard Analyzer requires lower case
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Examine.IndexTypes.Member">
            <summary>
                The member index type
            </summary>
            <remarks>
                Is lower case because the Standard Analyzer requires lower case
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.IPublishedContentValueSetBuilder">
            <summary>
                Marker interface for a <see cref="T:Examine.ValueSet" /> builder for only published content
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.IUmbracoContentIndex">
            <summary>
                Marker interface for indexes of Umbraco content
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.IUmbracoIndex">
            <summary>
                A Marker interface for defining an Umbraco indexer
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Examine.IUmbracoIndex.EnableDefaultEventHandler">
            <summary>
                When set to true Umbraco will keep the index in sync with Umbraco data automatically
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Examine.IUmbracoIndex.PublishedValuesOnly">
            <summary>
                When set to true the index will only retain published values
            </summary>
            <remarks>
                Any non-published values will not be put or kept in the index:
                * Deleted, Trashed, non-published Content items
                * non-published Variants
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Examine.IUmbracoIndex.SupportProtectedContent">
            <summary>
                Whether the index can contain protected content
            </summary>
            <remarks>
                To retain backwards compatability, the default value is true
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.IUmbracoTreeSearcherFields">
            <summary>
                Used to propagate hardcoded internal Field lists
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.IUmbracoTreeSearcherFields.GetBackOfficeFields">
            <summary>
                The default index fields that are searched on in the back office search for umbraco content entities.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.IUmbracoTreeSearcherFields.GetBackOfficeMembersFields">
            <summary>
                The additional index fields that are searched on in the back office for member entities.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.IUmbracoTreeSearcherFields.GetBackOfficeMediaFields">
            <summary>
                The additional index fields that are searched on in the back office for media entities.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.IUmbracoTreeSearcherFields.GetBackOfficeDocumentFields">
            <summary>
                The additional index fields that are searched on in the back office for document entities.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.IValueSetBuilder`1">
            <summary>
                Creates a collection of <see cref="T:Examine.ValueSet" /> to be indexed based on a collection of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.IValueSetBuilder`1.GetValueSets(`0[])">
            <summary>
                Creates a collection of <see cref="T:Examine.ValueSet" /> to be indexed based on a collection of <typeparamref name="T"/>.
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.MediaIndexPopulator">
            <summary>
                Performs the data lookups required to rebuild a media index
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.MediaIndexPopulator.#ctor(Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.Examine.MediaIndexPopulator},Umbraco.Cms.Core.Services.IMediaService,Umbraco.Cms.Infrastructure.Examine.IValueSetBuilder{Umbraco.Cms.Core.Models.IMedia})">
            <summary>
                Default constructor to lookup all content data
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.MediaIndexPopulator.#ctor(Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.Examine.MediaIndexPopulator},System.Nullable{System.Int32},Umbraco.Cms.Core.Services.IMediaService,Umbraco.Cms.Infrastructure.Examine.IValueSetBuilder{Umbraco.Cms.Core.Models.IMedia})">
            <summary>
                Optional constructor allowing specifying custom query parameters
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.MediaValueSetBuilder.GetValueSets(Umbraco.Cms.Core.Models.IMedia[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.MemberValueSetBuilder.GetValueSets(Umbraco.Cms.Core.Models.IMember[])">
            <inheritdoc />
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Examine.MemberValueSetValidator.DefaultMemberIndexFields">
            <summary>
                By default these are the member fields we index
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.PublishedContentIndexPopulator">
            <summary>
                Performs the data lookups required to rebuild a content index containing only published content
            </summary>
            <remarks>
                The published (external) index will still rebuild just fine using the default <see cref="T:Umbraco.Cms.Infrastructure.Examine.ContentIndexPopulator" />
                which is what is used when rebuilding all indexes,
                but this will be used when the single index is rebuilt and will go a little bit faster since the data query is more specific.
                since the data query is more specific.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.RebuildOnStartupHandler">
            <summary>
                Handles how the indexes are rebuilt on startup
            </summary>
            <remarks>
                On the first HTTP request this will rebuild the Examine indexes if they are empty.
                If it is a cold boot, they are all rebuilt.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.RebuildOnStartupHandler.Handle(Umbraco.Cms.Core.Notifications.UmbracoRequestBeginNotification)">
            <summary>
                On first http request schedule an index rebuild for any empty indexes (or all if it's a cold boot)
            </summary>
            <param name="notification"></param>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Examine.UmbracoExamineFieldNames.IndexPathFieldName">
            <summary>
                Used to store the path of a content object
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Examine.UmbracoExamineFieldNames.RawFieldPrefix">
            <summary>
                The prefix added to a field when it is duplicated in order to store the original raw value.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.UmbracoExamineFieldNames.DeliveryApiContentIndex">
            <summary>
                Field names specifically used in the Delivery API content index
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Examine.UmbracoExamineFieldNames.DeliveryApiContentIndex.Id">
            <summary>
                The content ID
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Examine.UmbracoExamineFieldNames.DeliveryApiContentIndex.ContentTypeId">
            <summary>
                The content type ID
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Examine.UmbracoExamineFieldNames.DeliveryApiContentIndex.Culture">
            <summary>
                The content culture
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Examine.UmbracoExamineFieldNames.DeliveryApiContentIndex.Published">
            <summary>
                Whether or not the content exists in a published state
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Examine.UmbracoExamineFieldNames.DeliveryApiContentIndex.Protected">
            <summary>
                Whether or not the content is protected
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Examine.UmbracoExamineFieldNames.DeliveryApiContentIndex.ProtectedAccess">
            <summary>
                The allowed members and member roles (for protected content)
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.UmbracoFieldDefinitionCollection">
            <summary>
                Custom <see cref="T:Examine.FieldDefinitionCollection" /> allowing dynamic creation of <see cref="T:Examine.FieldDefinition" />
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Examine.UmbracoFieldDefinitionCollection.UmbracoIndexFieldDefinitions">
            <summary>
                A type that defines the type of index for each Umbraco field (non user defined fields)
                Alot of standard umbraco fields shouldn't be tokenized or even indexed, just stored into lucene
                for retreival after searching.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.UmbracoFieldDefinitionCollection.TryGetValue(System.String,Examine.FieldDefinition@)">
            <summary>
                Overridden to dynamically add field definitions for culture variations
            </summary>
            <param name="fieldName"></param>
            <param name="fieldDefinition"></param>
            <returns></returns>
            <remarks>
                We need to do this so that we don't have to maintain a huge static list of all field names and their definitions
                otherwise we'd have to dynamically add/remove definitions anytime languages are added/removed, etc...
                For example, we have things like `nodeName` and `__Published` which are also used for culture fields like
                `nodeName_en-us`
                and we don't want to have a full static list of all of these definitions when we can just define the one definition
                and then
                dynamically apply that to culture specific fields.
                There is a caveat to this however, when a field definition is found for a non-culture field we will create and
                store a new field
                definition for that culture so that the next time it needs to be looked up and used we are not allocating more
                objects. This does mean
                however that if a language is deleted, the field definitions for that language will still exist in memory. This
                isn't going to cause any
                problems and the mem will be cleared on next site restart but it's worth pointing out.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Examine.UmbracoIndexConfig.GetMemberValueSetValidator">
            <summary>
                Returns the <see cref="T:Examine.IValueSetValidator" /> for the member indexer
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Examine.ValueSetValidator">
            <summary>
                Performing basic validation of a value set
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Examine.ValueSetValidator.IncludeItemTypes">
            <summary>
                Optional inclusion list of content types to index
            </summary>
            <remarks>
                All other types will be ignored if they do not match this list
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Examine.ValueSetValidator.ExcludeItemTypes">
            <summary>
                Optional exclusion list of content types to ignore
            </summary>
            <remarks>
                Any content type alias matched in this will not be included in the index
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Examine.ValueSetValidator.IncludeFields">
            <summary>
                Optional inclusion list of index fields to index
            </summary>
            <remarks>
                If specified, all other fields in a <see cref="T:Examine.ValueSet" /> will be filtered
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Examine.ValueSetValidator.ExcludeFields">
            <summary>
                Optional exclusion list of index fields
            </summary>
            <remarks>
                If specified, all fields matching these field names will be filtered from the <see cref="T:Examine.ValueSet" />
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Factories.Installer.DatabaseSettingsFactory.GetDatabaseSettings">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.HostedServices.BackgroundTaskQueue">
            <summary>
                A Background Task Queue, to enqueue tasks for executing in the background.
            </summary>
            <remarks>
                Borrowed from https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-5.0
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.HostedServices.BackgroundTaskQueue.QueueBackgroundWorkItem(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.HostedServices.BackgroundTaskQueue.DequeueAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.HostedServices.IBackgroundTaskQueue">
            <summary>
                A Background Task Queue, to enqueue tasks for executing in the background.
            </summary>
            <remarks>
                Borrowed from https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-5.0
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.HostedServices.IBackgroundTaskQueue.QueueBackgroundWorkItem(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
                Enqueue a work item to be executed in the background.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.HostedServices.IBackgroundTaskQueue.DequeueAsync(System.Threading.CancellationToken)">
            <summary>
                Dequeue the first item on the queue.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.HostedServices.QueuedHostedService">
            <summary>
                A queue based hosted service used to executing tasks on a background thread.
            </summary>
            <remarks>
                Borrowed from https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-5.0
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.HostedServices.RecurringHostedServiceBase">
            <summary>
                Provides a base class for recurring background tasks implemented as hosted services.
            </summary>
            <remarks>
                See: <see href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-3.1&amp;tabs=visual-studio#timed-background-tasks"/>.
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.HostedServices.RecurringHostedServiceBase.DefaultDelay">
            <summary>
                The default delay to use for recurring tasks for the first run after application start-up if no alternative is
                configured.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.HostedServices.RecurringHostedServiceBase.#ctor(Microsoft.Extensions.Logging.ILogger,System.TimeSpan,System.TimeSpan)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.HostedServices.RecurringHostedServiceBase" /> class.
            </summary>
            <param name="logger">Logger.</param>
            <param name="period">Timespan representing how often the task should recur.</param>
            <param name="delay">
                Timespan representing the initial delay after application start-up before the first run of the task
                occurs.
            </param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.HostedServices.RecurringHostedServiceBase.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.HostedServices.RecurringHostedServiceBase.GetDelay(System.String,Umbraco.Cms.Core.Configuration.ICronTabParser,Microsoft.Extensions.Logging.ILogger,System.TimeSpan)">
            <summary>
            Determines the delay before the first run of a recurring task implemented as a hosted service when an optonal
            configuration for the first run time is available.
            </summary>
            <param name="firstRunTime">The configured time to first run the task in crontab format.</param>
            <param name="cronTabParser">An instance of <see cref="T:Umbraco.Cms.Core.Configuration.ICronTabParser"/></param>
            <param name="logger">The logger.</param>
            <param name="defaultDelay">The default delay to use when a first run time is not configured.</param>
            <returns>The delay before first running the recurring task.</returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.HostedServices.RecurringHostedServiceBase.GetDelay(System.String,Umbraco.Cms.Core.Configuration.ICronTabParser,Microsoft.Extensions.Logging.ILogger,System.DateTime,System.TimeSpan)">
            <summary>
            Determines the delay before the first run of a recurring task implemented as a hosted service when an optonal
            configuration for the first run time is available.
            </summary>
            <param name="firstRunTime">The configured time to first run the task in crontab format.</param>
            <param name="cronTabParser">An instance of <see cref="T:Umbraco.Cms.Core.Configuration.ICronTabParser"/></param>
            <param name="logger">The logger.</param>
            <param name="now">The current datetime.</param>
            <param name="defaultDelay">The default delay to use when a first run time is not configured.</param>
            <returns>The delay before first running the recurring task.</returns>
            <remarks>Internal to expose for unit tests.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.HostedServices.RecurringHostedServiceBase.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.HostedServices.RecurringHostedServiceBase.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.HostedServices.RecurringHostedServiceBase.ExecuteAsync(System.Object)">
            <summary>
                Executes the task.
            </summary>
            <param name="state">The task state.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.HostedServices.RecurringHostedServiceBase.ChangePeriod(System.TimeSpan)">
            <summary>
                Change the period between operations.
            </summary>
            <param name="newPeriod">The new period between tasks</param>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Install.FilePermissionHelper">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Install.FilePermissionHelper.#ctor(Microsoft.Extensions.Options.IOptions{Umbraco.Cms.Core.Configuration.Models.GlobalSettings},Umbraco.Cms.Core.IO.IIOHelper,Umbraco.Cms.Core.Hosting.IHostingEnvironment)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Install.FilePermissionHelper" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Install.FilePermissionHelper.RunFilePermissionTestSuite(System.Collections.Generic.Dictionary{Umbraco.Cms.Core.Install.FilePermissionTest,System.Collections.Generic.IEnumerable{System.String}}@)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Install.InstallHelper.IsBrandNewInstall">
            <summary>
            Checks if this is a brand new install, meaning that there is no configured database connection or the database is empty.
            </summary>
            <value>
              <c>true</c> if this is a brand new install; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Install.PackageMigrationRunner">
            <summary>
                Runs the package migration plans
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Install.PackageMigrationRunner.RunPackageMigrationsIfPendingAsync(System.String)">
            <summary>
                Runs all migration plans for a package name if any are pending.
            </summary>
            <param name="packageName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Install.PackageMigrationRunner.RunPendingPackageMigrations(System.String)">
            <summary>
                Checks if all executed package migrations succeeded for a package.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Install.PackageMigrationRunner.RunPackagePlansAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Runs the all specified package migration plans and publishes a <see cref="T:Umbraco.Cms.Infrastructure.Migrations.Notifications.MigrationPlansExecutedNotification" />
                if all are successful.
            </summary>
            <param name="plansToRun"></param>
            <returns></returns>
            <exception cref="T:System.Exception">If any plan fails it will throw an exception.</exception>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Install.PremigrationUpgrader">
            <summary>
                Handles <see cref="T:Umbraco.Cms.Core.Notifications.RuntimePremigrationsUpgradeNotification" /> to execute the unattended Umbraco upgrader
                or the unattended Package migrations runner.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Install.UnattendedUpgrader">
            <summary>
                Handles <see cref="T:Umbraco.Cms.Core.Notifications.RuntimeUnattendedUpgradeNotification" /> to execute the unattended Umbraco upgrader
                or the unattended Package migrations runner.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Installer.Steps.CreateUserStep.RequiresExecutionAsync(Umbraco.Cms.Core.Models.Installer.InstallData)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Logging.Viewer.SerilogLegacyNameResolver">
            <summary>
                Inherits Serilog's StaticMemberNameResolver to ensure we get same functionality
                Of easily allowing any static methods definied in the passed in class/type
                To extend as functions to use for filtering logs such as Has() and any other custom ones
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Logging.Viewer.SerilogLegacyNameResolver.TryResolveBuiltInPropertyName(System.String,System.String@)">
            <summary>
                Allows us to fix the gap from migrating away from Serilog.Filters.Expressions
                So we can still support the more verbose built in property names such as
                Exception, Level, MessageTemplate etc
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Mail.BasicSmtpEmailSenderClient">
            <summary>
               A basic SMTP email sender client using MailKits SMTP client.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Mail.EmailSender">
            <summary>
                A utility class for sending emails
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Mail.EmailSender.SendAsync(Umbraco.Cms.Core.Models.Email.EmailMessage,System.String)">
            <summary>
                Sends the message async
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Mail.EmailSender.CanSendRequiredEmail">
            <summary>
                Returns true if the application should be able to send a required application email
            </summary>
            <remarks>
                We assume this is possible if either an event handler is registered or an smtp server is configured
                or a pickup directory location is configured
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Mail.Interfaces.IEmailSenderClient">
            <summary>
            Client for sending an email from a MimeMessage
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Mail.Interfaces.IEmailSenderClient.SendAsync(Umbraco.Cms.Core.Models.Email.EmailMessage)">
            <summary>
            Sends the email message
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Manifest.AppPluginsPackageManifestReader">
            <summary>
                Reads package manifests from the <see cref="F:Umbraco.Cms.Core.Constants.SystemDirectories.AppPlugins" /> directory.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Manifest.BackOfficePackageManifestReader">
            <summary>
                Reads package manifests from the <see cref="F:Umbraco.Cms.Core.Constants.SystemDirectories.BackOfficePath" /> directory.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.AsyncMigrationBase">
            <summary>
            Provides a base class to all migrations.
            </summary>
            <summary>
            Provides a base class to all migrations.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.AsyncMigrationBase.#ctor(Umbraco.Cms.Infrastructure.Migrations.IMigrationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Migrations.AsyncMigrationBase" /> class.
            </summary>
            <param name="context">A migration context.</param>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.AsyncMigrationBase.Alter">
            <summary>
            Builds an Alter expression.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.AsyncMigrationBase.Context">
            <summary>
            Gets the migration context.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.AsyncMigrationBase.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.AsyncMigrationBase.SqlSyntax">
            <summary>
            Gets the SQL syntax.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.AsyncMigrationBase.Database">
            <summary>
            Gets the database instance.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.AsyncMigrationBase.DatabaseType">
            <summary>
            Gets the database type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.AsyncMigrationBase.Create">
            <summary>
            Builds a Create expression.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.AsyncMigrationBase.Delete">
            <summary>
            Builds a Delete expression.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.AsyncMigrationBase.Execute">
            <summary>
            Builds an Execute expression.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.AsyncMigrationBase.Insert">
            <summary>
            Builds an Insert expression.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.AsyncMigrationBase.Rename">
            <summary>
            Builds a Rename expression.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.AsyncMigrationBase.Update">
            <summary>
            Builds an Update expression.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.AsyncMigrationBase.RebuildCache">
            <summary>
            If this is set to true, the published cache will be rebuild upon successful completion of the migration.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.AsyncMigrationBase.InvalidateBackofficeUserAccess">
            <summary>
            If this is set to true, all back-office client tokens will be revoked upon successful completion of the migration.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.AsyncMigrationBase.RunAsync">
            <summary>
            Runs the migration.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.AsyncMigrationBase.Sql">
            <summary>
            Creates a new Sql statement.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.AsyncMigrationBase.Sql(System.String,System.Object[])">
            <summary>
            Creates a new Sql statement with arguments.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.AsyncMigrationBase.MigrateAsync">
            <summary>
            Executes the migration.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.ExecutedMigrationPlan.Plan">
            <summary>
            The Migration plan itself.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.ExecutedMigrationPlan.InitialState">
            <summary>
            The initial state the plan started from, is null if the plan started from the beginning.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.ExecutedMigrationPlan.FinalState">
            <summary>
            The final state after the migrations has ran.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.ExecutedMigrationPlan.Successful">
            <summary>
            Determines if the migration plan was a success, that is that all migrations ran successfully.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.ExecutedMigrationPlan.Exception">
            <summary>
            The exception that caused the plan to fail.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.ExecutedMigrationPlan.CompletedTransitions">
            <summary>
            A collection of all the succeeded transition.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Alter.AlterBuilder">
            <summary>
                Implements <see cref="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Alter.IAlterBuilder" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Alter.AlterBuilder.Table(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Alter.IAlterBuilder">
            <summary>
                Builds an Alter expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Alter.IAlterBuilder.Table(System.String)">
            <summary>
                Specifies the table to alter.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Alter.Table.IAlterTableBuilder">
            <summary>
                Builds an Alter Table expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Alter.Table.IAlterTableBuilder.AddColumn(System.String)">
            <summary>
                Specifies a column to add.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Alter.Table.IAlterTableBuilder.AlterColumn(System.String)">
            <summary>
                Specifies a column to alter.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Common.ExecutableBuilder.Do">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Common.IColumnTypeBuilder`1">
            <summary>
                Builds a column type expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Common.IExecutableBuilder.Do">
            <summary>
                Executes.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Common.IForeignKeyCascadeBuilder`2.OnDelete(System.Data.Rule)">
            <summary>
                Specifies a rule on deletes.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Common.IForeignKeyCascadeBuilder`2.OnUpdate(System.Data.Rule)">
            <summary>
                Specifies a rule on updates.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Common.IForeignKeyCascadeBuilder`2.OnDeleteOrUpdate(System.Data.Rule)">
            <summary>
                Specifies a rule on deletes and updates.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Column.ICreateColumnOnTableBuilder.OnTable(System.String)">
            <summary>
                Specifies the name of the table.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Constraint.CreateConstraintBuilder.Column(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Constraint.CreateConstraintBuilder.Columns(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Constraint.CreateConstraintBuilder.OnTable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Constraint.ICreateConstraintColumnsBuilder.Column(System.String)">
            <summary>
                Specifies the constraint column.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Constraint.ICreateConstraintColumnsBuilder.Columns(System.String[])">
            <summary>
                Specifies the constraint columns.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Constraint.ICreateConstraintOnTableBuilder.OnTable(System.String)">
            <summary>
                Specifies the table name.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.CreateBuilder.Table``1(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.CreateBuilder.KeysAndIndexes``1">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.CreateBuilder.KeysAndIndexes(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.CreateBuilder.Table(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.CreateBuilder.Column(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.CreateBuilder.ForeignKey">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.CreateBuilder.ForeignKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.CreateBuilder.Index">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.CreateBuilder.Index(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.CreateBuilder.PrimaryKey">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.CreateBuilder.PrimaryKey(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.CreateBuilder.PrimaryKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.CreateBuilder.PrimaryKey(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.CreateBuilder.UniqueConstraint">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.CreateBuilder.UniqueConstraint(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.CreateBuilder.Constraint(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ForeignKey.CreateForeignKeyBuilder.Do">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ForeignKey.CreateForeignKeyBuilder.OnDelete(System.Data.Rule)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ForeignKey.CreateForeignKeyBuilder.OnUpdate(System.Data.Rule)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ForeignKey.CreateForeignKeyBuilder.OnDeleteOrUpdate(System.Data.Rule)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ForeignKey.CreateForeignKeyBuilder.ForeignColumn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ForeignKey.CreateForeignKeyBuilder.ForeignColumns(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ForeignKey.CreateForeignKeyBuilder.FromTable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ForeignKey.CreateForeignKeyBuilder.PrimaryColumn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ForeignKey.CreateForeignKeyBuilder.PrimaryColumns(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ForeignKey.CreateForeignKeyBuilder.ToTable(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ICreateBuilder">
            <summary>
                Builds a Create expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ICreateBuilder.Table``1(System.Boolean)">
            <summary>
                Builds a Create Table expression, and executes.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ICreateBuilder.KeysAndIndexes``1">
            <summary>
                Builds a Create Keys and Indexes expression, and executes.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ICreateBuilder.KeysAndIndexes(System.Type)">
            <summary>
                Builds a Create Keys and Indexes expression, and executes.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ICreateBuilder.Table(System.String)">
            <summary>
                Builds a Create Table expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ICreateBuilder.Column(System.String)">
            <summary>
                Builds a Create Column expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ICreateBuilder.ForeignKey">
            <summary>
                Builds a Create Foreign Key expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ICreateBuilder.ForeignKey(System.String)">
            <summary>
                Builds a Create Foreign Key expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ICreateBuilder.Index">
            <summary>
                Builds a Create Index expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ICreateBuilder.Index(System.String)">
            <summary>
                Builds a Create Index expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ICreateBuilder.PrimaryKey">
            <summary>
                Builds a Create Primary Key expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ICreateBuilder.PrimaryKey(System.String)">
            <summary>
                Builds a Create Primary Key expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ICreateBuilder.PrimaryKey(System.Boolean)">
            <summary>
                Builds a Create Primary Key expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ICreateBuilder.PrimaryKey(System.String,System.Boolean)">
            <summary>
                Builds a Create Primary Key expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ICreateBuilder.UniqueConstraint">
            <summary>
                Builds a Create Unique Constraint expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ICreateBuilder.UniqueConstraint(System.String)">
            <summary>
                Builds a Create Unique Constraint expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.ICreateBuilder.Constraint(System.String)">
            <summary>
                Builds a Create Constraint expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Index.CreateIndexBuilder.Ascending">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Index.CreateIndexBuilder.Descending">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Index.CreateIndexBuilder.Umbraco#Cms#Infrastructure#Migrations#Expressions#Create#Index#ICreateIndexColumnOptionsBuilder#Unique">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Index.CreateIndexBuilder.OnTable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Index.CreateIndexBuilder.Do">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Index.CreateIndexBuilder.OnColumn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Index.CreateIndexBuilder.WithOptions">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Index.CreateIndexBuilder.NonClustered">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Index.CreateIndexBuilder.Clustered">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Index.CreateIndexBuilder.Umbraco#Cms#Infrastructure#Migrations#Expressions#Create#Index#ICreateIndexOptionsBuilder#Unique">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Index.ICreateIndexOnColumnBuilder.OnColumn(System.String)">
            <summary>
                Specifies the index column.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Index.ICreateIndexOnColumnBuilder.WithOptions">
            <summary>
                Specifies options.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.KeysAndIndexes.CreateKeysAndIndexesBuilder.Do">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Table.CreateTableBuilder.Do">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Table.CreateTableBuilder.WithColumn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Table.CreateTableBuilder.WithDefault(Umbraco.Cms.Infrastructure.Persistence.DatabaseModelDefinitions.SystemMethods)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Table.CreateTableBuilder.Identity">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Table.CreateTableBuilder.Indexed">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Table.CreateTableBuilder.Indexed(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Table.CreateTableBuilder.PrimaryKey">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Table.CreateTableBuilder.PrimaryKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Table.CreateTableBuilder.Nullable">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Table.CreateTableBuilder.NotNullable">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Table.CreateTableBuilder.Unique">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Table.CreateTableBuilder.Unique(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Table.CreateTableBuilder.ForeignKey(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Table.CreateTableBuilder.ForeignKey(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Table.CreateTableBuilder.ForeignKey(System.String,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Table.CreateTableBuilder.ForeignKey">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Table.CreateTableBuilder.ReferencedBy(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Table.CreateTableBuilder.ReferencedBy(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Table.CreateTableBuilder.ReferencedBy(System.String,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Table.CreateTableBuilder.OnDelete(System.Data.Rule)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Table.CreateTableBuilder.OnUpdate(System.Data.Rule)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Table.CreateTableBuilder.OnDeleteOrUpdate(System.Data.Rule)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Create.Table.CreateTableOfDtoBuilder.Do">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.Column.DeleteColumnBuilder.FromTable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.Column.DeleteColumnBuilder.Column(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.Column.IDeleteColumnBuilder">
            <summary>
                Builds a Delete Column expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.Column.IDeleteColumnBuilder.FromTable(System.String)">
            <summary>
                Specifies the table of the column to delete.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.Column.IDeleteColumnBuilder.Column(System.String)">
            <summary>
                Specifies the column to delete.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.Constraint.DeleteConstraintBuilder.FromTable(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.Constraint.IDeleteConstraintBuilder">
            <summary>
                Builds a Delete Constraint expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.Constraint.IDeleteConstraintBuilder.FromTable(System.String)">
            <summary>
                Specifies the table of the constraint to delete.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.Data.DeleteDataBuilder.IsNull(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.Data.DeleteDataBuilder.Row(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.Data.DeleteDataBuilder.AllRows">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.Data.DeleteDataBuilder.Do">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.Data.IDeleteDataBuilder">
            <summary>
                Builds a Delete expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.Data.IDeleteDataBuilder.Row(System.Object)">
            <summary>
                Specifies a row to be deleted.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.Data.IDeleteDataBuilder.AllRows">
            <summary>
                Specifies that all rows must be deleted.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.Data.IDeleteDataBuilder.IsNull(System.String)">
            <summary>
                Specifies that rows with a specified column being null must be deleted.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.DefaultConstraint.DeleteDefaultConstraintBuilder">
            <summary>
                Implements <see cref="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.DefaultConstraint.IDeleteDefaultConstraintOnTableBuilder" />,
                <see cref="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.DefaultConstraint.IDeleteDefaultConstraintOnColumnBuilder" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.DefaultConstraint.DeleteDefaultConstraintBuilder.OnColumn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.DefaultConstraint.DeleteDefaultConstraintBuilder.OnTable(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.DefaultConstraint.IDeleteDefaultConstraintOnColumnBuilder">
            <summary>
                Builds a Delete expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.DefaultConstraint.IDeleteDefaultConstraintOnColumnBuilder.OnColumn(System.String)">
            <summary>
                Specifies the column of the constraint to delete.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.DefaultConstraint.IDeleteDefaultConstraintOnTableBuilder">
            <summary>
                Builds a Delete expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.DefaultConstraint.IDeleteDefaultConstraintOnTableBuilder.OnTable(System.String)">
            <summary>
                Specifies the table of the constraint to delete.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.DeleteBuilder.Table(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.DeleteBuilder.KeysAndIndexes``1(System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.DeleteBuilder.KeysAndIndexes(System.String,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.DeleteBuilder.Column(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.DeleteBuilder.ForeignKey">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.DeleteBuilder.ForeignKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.DeleteBuilder.FromTable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.DeleteBuilder.Index">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.DeleteBuilder.Index(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.DeleteBuilder.PrimaryKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.DeleteBuilder.UniqueConstraint(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.DeleteBuilder.DefaultConstraint">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.ForeignKey.DeleteForeignKeyBuilder">
            <summary>
                Implements IDeleteForeignKey...
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.ForeignKey.DeleteForeignKeyBuilder.ForeignColumn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.ForeignKey.DeleteForeignKeyBuilder.ForeignColumns(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.ForeignKey.DeleteForeignKeyBuilder.FromTable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.ForeignKey.DeleteForeignKeyBuilder.OnTable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.ForeignKey.DeleteForeignKeyBuilder.PrimaryColumn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.ForeignKey.DeleteForeignKeyBuilder.PrimaryColumns(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.ForeignKey.DeleteForeignKeyBuilder.ToTable(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyForeignColumnBuilder">
            <summary>
                Builds a Delete expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyForeignColumnBuilder.ForeignColumn(System.String)">
            <summary>
                Specifies the foreign column.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyForeignColumnBuilder.ForeignColumns(System.String[])">
            <summary>
                Specifies the foreign columns.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyFromTableBuilder">
            <summary>
                Builds a Delete expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyFromTableBuilder.FromTable(System.String)">
            <summary>
                Specifies the source table of the foreign key.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyOnTableBuilder">
            <summary>
                Builds a Delete expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyOnTableBuilder.OnTable(System.String)">
            <summary>
                Specifies the table of the foreign key.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyPrimaryColumnBuilder">
            <summary>
                Builds a Delete expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyPrimaryColumnBuilder.PrimaryColumn(System.String)">
            <summary>
                Specifies the target primary column.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyPrimaryColumnBuilder.PrimaryColumns(System.String[])">
            <summary>
                Specifies the target primary columns.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyToTableBuilder">
            <summary>
                Builds a Delete expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyToTableBuilder.ToTable(System.String)">
            <summary>
                Specifies the target table of the foreign key.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.IDeleteBuilder">
            <summary>
                Builds a Delete expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.IDeleteBuilder.Table(System.String)">
            <summary>
                Specifies the table to delete.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.IDeleteBuilder.KeysAndIndexes``1(System.Boolean,System.Boolean)">
            <summary>
                Builds a Delete Keys and Indexes expression, and executes.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.IDeleteBuilder.KeysAndIndexes(System.String,System.Boolean,System.Boolean)">
            <summary>
                Builds a Delete Keys and Indexes expression, and executes.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.IDeleteBuilder.Column(System.String)">
            <summary>
                Specifies the column to delete.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.IDeleteBuilder.ForeignKey">
            <summary>
                Specifies the foreign key to delete.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.IDeleteBuilder.ForeignKey(System.String)">
            <summary>
                Specifies the foreign key to delete.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.IDeleteBuilder.FromTable(System.String)">
            <summary>
                Specifies the table to delete data from.
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.IDeleteBuilder.Index">
            <summary>
                Specifies the index to delete.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.IDeleteBuilder.Index(System.String)">
            <summary>
                Specifies the index to delete.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.IDeleteBuilder.PrimaryKey(System.String)">
            <summary>
                Specifies the primary key to delete.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.IDeleteBuilder.UniqueConstraint(System.String)">
            <summary>
                Specifies the unique constraint to delete.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.IDeleteBuilder.DefaultConstraint">
            <summary>
                Specifies the default constraint to delete.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.Index.DeleteIndexBuilder.Do">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.Index.IDeleteIndexForTableBuilder">
            <summary>
                Builds a Delete expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.Index.IDeleteIndexForTableBuilder.OnTable(System.String)">
            <summary>
                Specifies the table of the index to delete.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.KeysAndIndexes.DeleteKeysAndIndexesBuilder">
            <remarks>
                <para>
                    Assuming we stick with the current migrations setup this will need to be altered to
                    delegate to SQL syntax provider (we can drop indexes but not PK/FK).
                </para>
                <para>
                    1. For SQLite, rename table.<br />
                    2. Create new table with expected keys.<br />
                    3. Insert into new from renamed<br />
                    4. Drop renamed.<br />
                </para>
                <para>
                    Read more <a href="https://www.sqlite.org/omitted.html">SQL Features That SQLite Does Not Implement</a>
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Delete.KeysAndIndexes.DeleteKeysAndIndexesBuilder.Do">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Execute.ExecuteBuilder.Do">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Execute.ExecuteBuilder.Sql(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Execute.ExecuteBuilder.Sql(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Execute.IExecuteBuilder">
            <summary>
                Builds and executes an Sql statement.
            </summary>
            <remarks>Deals with multi-statements Sql.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Execute.IExecuteBuilder.Sql(System.String)">
            <summary>
                Specifies the Sql statement to execute.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Execute.IExecuteBuilder.Sql(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext})">
            <summary>
                Specifies the Sql statement to execute.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.ExpressionBuilderBase`1">
            <summary>
                Provides a base class for expression builders.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.ExpressionBuilderBase`1.#ctor(`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.ExpressionBuilderBase`1" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Expressions.ExpressionBuilderBase`1.Expression">
            <summary>
                Gets the expression.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.ExpressionBuilderBase`2">
            <summary>
                Provides a base class for expression builders.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.ExpressionBuilderBase`2.#ctor(`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.ExpressionBuilderBase`2" /> class.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Insert.IInsertBuilder">
            <summary>
                Builds an Insert expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Insert.IInsertBuilder.IntoTable(System.String)">
            <summary>
                Specifies the table to insert into.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Insert.IInsertIntoBuilder">
            <summary>
                Builds an Insert Into expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Insert.IInsertIntoBuilder.EnableIdentityInsert">
            <summary>
                Enables identity insert.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Insert.IInsertIntoBuilder.Row(System.Object)">
            <summary>
                Specifies a row to be inserted.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Insert.InsertBuilder">
            <summary>
                Implements <see cref="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Insert.IInsertBuilder" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Insert.InsertBuilder.IntoTable(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Insert.InsertIntoBuilder">
            <summary>
                Implements <see cref="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Insert.IInsertIntoBuilder" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Insert.InsertIntoBuilder.Do">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Insert.InsertIntoBuilder.EnableIdentityInsert">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Insert.InsertIntoBuilder.Row(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Rename.Column.IRenameColumnBuilder">
            <summary>
                Builds a Rename Column expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Rename.Column.IRenameColumnBuilder.OnTable(System.String)">
            <summary>
                Specifies the table name.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Rename.Column.IRenameColumnToBuilder">
            <summary>
                Builds a Rename Column expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Rename.Column.IRenameColumnToBuilder.To(System.String)">
            <summary>
                Specifies the new name of the column.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Rename.Column.RenameColumnBuilder.Do">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Rename.Column.RenameColumnBuilder.OnTable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Rename.Column.RenameColumnBuilder.To(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Rename.Expressions.RenameColumnExpression.GetSql">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Rename.Expressions.RenameTableExpression">
            <summary>
                Represents a Rename Table expression.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Expressions.Rename.Expressions.RenameTableExpression.OldName">
            <summary>
                Gets or sets the source name.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Expressions.Rename.Expressions.RenameTableExpression.NewName">
            <summary>
                Gets or sets the target name.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Rename.Expressions.RenameTableExpression.GetSql">
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Rename.IRenameBuilder">
            <summary>
                Builds a Rename expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Rename.IRenameBuilder.Table(System.String)">
            <summary>
                Specifies the table to rename.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Rename.IRenameBuilder.Column(System.String)">
            <summary>
                Specifies the column to rename.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Rename.RenameBuilder.Table(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Rename.RenameBuilder.Column(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Rename.Table.IRenameTableBuilder">
            <summary>
                Builds a Rename Table expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Rename.Table.IRenameTableBuilder.To(System.String)">
            <summary>
                Specifies the new name of the table.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Rename.Table.RenameTableBuilder.Do">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Rename.Table.RenameTableBuilder.To(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Update.IUpdateBuilder">
            <summary>
                Builds an Update expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Update.IUpdateBuilder.Table(System.String)">
            <summary>
                Specifies the table to update.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Update.IUpdateTableBuilder">
            <summary>
                Builds an Update expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Update.IUpdateTableBuilder.Set(System.Object)">
            <summary>
                Specifies the data.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Expressions.Update.IUpdateWhereBuilder">
            <summary>
                Builds an Update expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Update.IUpdateWhereBuilder.Where(System.Object)">
            <summary>
                Specifies rows to update.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Update.IUpdateWhereBuilder.AllRows">
            <summary>
                Specifies that all rows must be updated.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Update.UpdateBuilder.Table(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Update.UpdateDataBuilder.Do">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Update.UpdateDataBuilder.Set(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Update.UpdateDataBuilder.Where(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Expressions.Update.UpdateDataBuilder.AllRows">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.IMigrationContext">
            <summary>
                Provides context to migrations.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.IMigrationContext.Plan">
            <summary>
                Gets the current migration plan
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.IMigrationContext.Logger">
            <summary>
                Gets the logger.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.IMigrationContext.Database">
            <summary>
                Gets the database instance.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.IMigrationContext.SqlContext">
            <summary>
                Gets the Sql context.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.IMigrationContext.Index">
            <summary>
                Gets or sets the expression index.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.IMigrationContext.BuildingExpression">
            <summary>
                Gets or sets a value indicating whether an expression is being built.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.IMigrationExpression">
            <summary>
                Marker interface for migration expressions
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.IncompleteMigrationExpressionException">
            <summary>
                The exception that is thrown when a migration expression is not executed.
            </summary>
            <remarks>
                Migration expressions such as Alter.Table(...).Do() must end with Do(), else they are not executed.
                When a non-executed expression is detected, an IncompleteMigrationExpressionException is thrown.
            </remarks>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.IncompleteMigrationExpressionException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Migrations.IncompleteMigrationExpressionException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.IncompleteMigrationExpressionException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Migrations.IncompleteMigrationExpressionException" /> class with a message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.IncompleteMigrationExpressionException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Migrations.IncompleteMigrationExpressionException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null reference (
                <see langword="Nothing" /> in Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.IncompleteMigrationExpressionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Migrations.IncompleteMigrationExpressionException" /> class.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseBuilder">
            <summary>
            Supports building and configuring the database.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseBuilder.#ctor(Umbraco.Cms.Core.Scoping.ICoreScopeProvider,Umbraco.Cms.Infrastructure.Scoping.IScopeAccessor,Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabaseFactory,Umbraco.Cms.Core.Services.IRuntimeState,Microsoft.Extensions.Logging.ILoggerFactory,Umbraco.Cms.Core.Services.IKeyValueService,Umbraco.Cms.Infrastructure.Persistence.IDbProviderFactoryCreator,Umbraco.Cms.Core.Configuration.IConfigManipulator,Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.GlobalSettings},Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.ConnectionStrings},Umbraco.Cms.Core.Migrations.IMigrationPlanExecutor,Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseSchemaCreatorFactory,System.Collections.Generic.IEnumerable{Umbraco.Cms.Infrastructure.Persistence.IDatabaseProviderMetadata},Umbraco.Cms.Core.Events.IEventAggregator)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseBuilder"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseBuilder.IsDatabaseConfigured">
            <summary>
            Gets a value indicating whether the database is configured. It does not necessarily
            mean that it is possible to connect, nor that Umbraco is installed, nor up-to-date.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseBuilder.CanConnectToDatabase">
            <summary>
            Gets a value indicating whether it is possible to connect to the configured database.
            It does not necessarily mean that Umbraco is installed, nor up-to-date.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseBuilder.CanConnect(System.String,System.String)">
            <summary>
            Verifies whether a it is possible to connect to a database.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseBuilder.ValidateSchema">
            <summary>
            Validates the database schema.
            </summary>
            <remarks>
            <para>This assumes that the database exists and the connection string is
            configured and it is possible to connect to the database.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseBuilder.CreateSchemaAndData">
            <summary>
            Creates the database schema and inserts initial data.
            </summary>
            <remarks>
            <para>This assumes that the database exists and the connection string is
            configured and it is possible to connect to the database.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseBuilder.UpgradeSchemaAndDataAsync(Umbraco.Cms.Infrastructure.Migrations.MigrationPlan)">
            <summary>
            Upgrades the database schema and data by running migrations.
            </summary>
            <remarks>
            <para>This assumes that the database exists and the connection string is
            configured and it is possible to connect to the database.</para>
            <para>Runs whichever migrations need to run.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseBuilder.Result">
            <summary>
            Represents the result of a database creation or upgrade.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseBuilder.Result.RequiresUpgrade">
            <summary>
            Gets or sets a value indicating whether an upgrade is required.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseBuilder.Result.Message">
            <summary>
            Gets or sets the message returned by the operation.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseBuilder.Result.Success">
            <summary>
            Gets or sets a value indicating whether the operation succeeded.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseBuilder.Result.Percentage">
            <summary>
            Gets or sets an install progress pseudo-percentage.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseDataCreator">
            <summary>
                Creates the initial database data during install.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseDataCreator.InitializeBaseData(System.String)">
            <summary>
                Initialize the base data creation by inserting the data foundation for umbraco
                specific to a table
            </summary>
            <param name="tableName">Name of the table to create base data for</param>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseSchemaCreator">
            <summary>
                Creates the initial database schema during install.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseSchemaCreator.UninstallDatabaseSchema">
            <summary>
                Drops all Umbraco tables in the db.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseSchemaCreator.InitializeDatabaseSchema">
            <summary>
                Initializes the database by creating the umbraco db schema.
            </summary>
            <remarks>This needs to execute as part of a transaction.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseSchemaCreator.ValidateSchema">
            <summary>
                Validates the schema of the current database.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseSchemaCreator.ValidateDbConstraints(Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseSchemaResult)">
            <summary>
                This validates the Primary/Foreign keys in the database
            </summary>
            <param name="result"></param>
            <remarks>
                This does not validate any database constraints that are not PKs or FKs because Umbraco does not create a database
                with non PK/FK constraints.
                Any unique "constraints" in the database are done with unique indexes.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseSchemaCreator.FireBeforeCreation(Umbraco.Cms.Infrastructure.Migrations.Notifications.DatabaseSchemaCreatingNotification)">
            <summary>
                Publishes the <see cref="T:Umbraco.Cms.Infrastructure.Migrations.Notifications.DatabaseSchemaCreatingNotification" /> notification.
            </summary>
            <param name="notification">Cancelable notification marking the creation having begun.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseSchemaCreator.FireAfterCreation(Umbraco.Cms.Infrastructure.Migrations.Notifications.DatabaseSchemaCreatedNotification)">
            <summary>
                Publishes the <see cref="T:Umbraco.Cms.Infrastructure.Migrations.Notifications.DatabaseSchemaCreatedNotification" /> notification.
            </summary>
            <param name="notification">Notification marking the creation having completed.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseSchemaCreator.TableExists(System.String)">
            <summary>
                Returns whether a table with the specified <paramref name="tableName" /> exists in the database.
            </summary>
            <param name="tableName">The name of the table.</param>
            <returns><c>true</c> if the table exists; otherwise <c>false</c>.</returns>
            <example>
                <code>
            if (schemaHelper.TableExist("MyTable"))
            {
                // do something when the table exists
            }
            </code>
            </example>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseSchemaCreator.TableExists``1">
            <summary>
                Returns whether the table for the specified <typeparamref name="T" /> exists in the database.
            </summary>
            <typeparam name="T">The type representing the DTO/table.</typeparam>
            <returns><c>true</c> if the table exists; otherwise <c>false</c>.</returns>
            <example>
                <code>
            if (schemaHelper.TableExist&lt;MyDto&gt;)
            {
                // do something when the table exists
            }
            </code>
            </example>
            <remarks>
                If <typeparamref name="T" /> has been decorated with an <see cref="T:NPoco.TableNameAttribute" />, the name from that
                attribute will be used for the table name. If the attribute is not present, the name
                <typeparamref name="T" /> will be used instead.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseSchemaCreator.CreateTable``1(System.Boolean)">
            <summary>
                Creates a new table in the database based on the type of <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type representing the DTO/table.</typeparam>
            <param name="overwrite">Whether the table should be overwritten if it already exists.</param>
            <remarks>
                If <typeparamref name="T" /> has been decorated with an <see cref="T:NPoco.TableNameAttribute" />, the name from that
                attribute will be used for the table name. If the attribute is not present, the name
                <typeparamref name="T" /> will be used instead.
                If a table with the same name already exists, the <paramref name="overwrite" /> parameter will determine
                whether the table is overwritten. If <c>true</c>, the table will be overwritten, whereas this method will
                not do anything if the parameter is <c>false</c>.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseSchemaCreator.CreateTable(System.Boolean,System.Type,Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseDataCreator)">
            <summary>
                Creates a new table in the database for the specified <paramref name="modelType" />.
            </summary>
            <param name="overwrite">Whether the table should be overwritten if it already exists.</param>
            <param name="modelType">The representing the table.</param>
            <param name="dataCreation"></param>
            <remarks>
                If <paramref name="modelType" /> has been decorated with an <see cref="T:NPoco.TableNameAttribute" />, the name from
                that  attribute will be used for the table name. If the attribute is not present, the name
                <paramref name="modelType" /> will be used instead.
                If a table with the same name already exists, the <paramref name="overwrite" /> parameter will determine
                whether the table is overwritten. If <c>true</c>, the table will be overwritten, whereas this method will
                not do anything if the parameter is <c>false</c>.
                This need to execute as part of a transaction.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseSchemaCreator.DropTable(System.String)">
            <summary>
                Drops the table for the specified <paramref name="tableName"/>
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseSchemaCreatorFactory">
            <summary>
                Creates the initial database schema during install.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseSchemaResult">
            <summary>
                Represents ...
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseSchemaResult.DetermineHasInstalledVersion">
            <summary>
                Determines whether the database contains an installed version.
            </summary>
            <remarks>
                <para>A database contains an installed version when it contains at least one valid table.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseSchemaResult.GetSummary">
            <summary>
                Gets a summary of the schema validation result
            </summary>
            <returns>A string containing a human readable string with a summary message</returns>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.MergeBuilder">
            <summary>
                Represents a migration plan builder for merges.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MergeBuilder.#ctor(Umbraco.Cms.Infrastructure.Migrations.MigrationPlan)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Migrations.MergeBuilder" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MergeBuilder.To(System.String)">
            <summary>
                Adds a transition to a target state through an empty migration.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MergeBuilder.To``1(System.String)">
            <summary>
                Adds a transition to a target state through a migration.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MergeBuilder.To(System.String,System.Type)">
            <summary>
                Adds a transition to a target state through a migration.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MergeBuilder.With">
            <summary>
                Begins the second branch of the merge.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MergeBuilder.As(System.String)">
            <summary>
                Completes the merge.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.MigrationBase">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MigrationBase.#ctor(Umbraco.Cms.Infrastructure.Migrations.IMigrationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Migrations.MigrationBase"/> class.
            </summary>
            <param name="context">A migration context.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MigrationBase.MigrateAsync">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MigrationBase.Migrate">
            <summary>
            Executes the migration.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.MigrationContext">
            <summary>
                Implements <see cref="T:Umbraco.Cms.Infrastructure.Migrations.IMigrationContext" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MigrationContext.#ctor(Umbraco.Cms.Infrastructure.Migrations.MigrationPlan,Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabase,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.Migrations.MigrationContext},System.Action)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Migrations.MigrationContext" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.MigrationContext.Logger">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.MigrationContext.Database">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.MigrationContext.SqlContext">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.MigrationContext.Index">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.MigrationContext.BuildingExpression">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.MigrationExpressionBase">
            <summary>
                Provides a base class for migration expressions.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.MigrationExpressionBase.Name">
            <summary>
            This might be useful in the future if we add it to the interface, but for now it's used to hack the DeleteAppTables &amp; DeleteForeignKeyExpression
            to ensure they are not executed twice.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan">
            <summary>
                Represents a migration plan.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan" /> class.
            </summary>
            <param name="name">The name of the plan.</param>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan.IgnoreCurrentState">
            <summary>
                If set to true the plan executor will ignore any current state persisted and
                run the plan from its initial state to its end state.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan.Transitions">
            <summary>
                Gets the transitions.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan.Name">
            <summary>
                Gets the name of the plan.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan.InitialState">
            <summary>
                Gets the initial state.
            </summary>
            <remarks>
                The initial state is the state when the plan has never
                run. By default, it is the empty string, but plans may override
                it if they have other ways of determining where to start from.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan.FinalState">
            <summary>
                Gets the final state.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan.To(System.String)">
            <summary>
                Adds a transition to a target state through an empty migration.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan.To``1(System.String)">
            <summary>
                Adds a transition to a target state through a migration.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan.To(System.String,System.Type)">
            <summary>
                Adds a transition to a target state through a migration.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan.From(System.String)">
            <summary>
                Sets the starting state.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan.ToWithReplace``2(System.String,System.String)">
            <summary>
                Adds a transition to a target state through a migration, replacing a previous migration.
            </summary>
            <typeparam name="TMigrationNew">The new migration.</typeparam>
            <typeparam name="TMigrationRecover">The migration to use to recover from the previous target state.</typeparam>
            <param name="recoverState">
                The previous target state, which we need to recover from through
                <typeparamref name="TMigrationRecover" />.
            </param>
            <param name="targetState">The new target state.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan.ToWithReplace``1(System.String,System.String)">
            <summary>
                Adds a transition to a target state through a migration, replacing a previous migration.
            </summary>
            <typeparam name="TMigrationNew">The new migration.</typeparam>
            <param name="recoverState">The previous target state, which we can recover from directly.</param>
            <param name="targetState">The new target state.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan.ToWithClone(System.String,System.String,System.String)">
            <summary>
                Adds transitions to a target state by cloning transitions from a start state to an end state.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan.CreateRandomState">
            <summary>
                Creates a random, unique state.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan.Merge">
            <summary>
                Begins a merge.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan.Validate">
            <summary>
                Validates the plan.
            </summary>
            <returns>The plan's final state.</returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan.ThrowOnUnknownInitialState(System.String)">
            <summary>
                Throws an exception when the initial state is unknown.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan.FollowPath(System.String,System.String)">
            <summary>
                Follows a path (for tests and debugging).
            </summary>
            <remarks>Does the same thing Execute does, but does not actually execute migrations.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan.Transition">
            <summary>
                Represents a plan transition.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan.Transition.#ctor(System.String,System.String,System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan.Transition" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan.Transition.SourceState">
            <summary>
                Gets the source state.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan.Transition.TargetState">
            <summary>
                Gets the target state.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan.Transition.MigrationType">
            <summary>
                Gets the migration type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan.Transition.ToString">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MigrationPlanExecutor.ExecutePlan(Umbraco.Cms.Infrastructure.Migrations.MigrationPlan,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.MigrationPlanExecutor.ExecutePlanAsync(Umbraco.Cms.Infrastructure.Migrations.MigrationPlan,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Notifications.MigrationPlansExecutedNotification">
            <summary>
                Published when one or more migration plans has been executed.
            </summary>
            <remarks>
            <para>
                Each migration plan may or may not have succeeded, signaled by the Successful property.
            </para>
            <para>
                A failed migration plan may have partially completed, in which case the successful transition are located in the CompletedTransitions collection.
            </para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Notifications.UmbracoPlanExecutedNotification">
            <summary>
                Published the umbraco migration plan has been executed.
            </summary>
            <remarks>
            <para>
                The migration plan may or may not have succeeded, signaled by the Successful property.
            </para>
            <para>
                A failed migration plan may have partially completed, in which case the successful transition are located in the CompletedTransitions collection.
            </para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.PostMigrations.CacheRebuilder">
            <summary>
                Implements <see cref="T:Umbraco.Cms.Infrastructure.Migrations.PostMigrations.ICacheRebuilder" /> in Umbraco.Web (rebuilding).
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.PostMigrations.CacheRebuilder.#ctor(Umbraco.Cms.Core.Cache.DistributedCache,Umbraco.Cms.Core.PublishedCache.IDatabaseCacheRebuilder)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Migrations.PostMigrations.CacheRebuilder" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.PostMigrations.CacheRebuilder.Rebuild">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.PostMigrations.ICacheRebuilder">
            <summary>
                Rebuilds the published snapshot.
            </summary>
            <remarks>
                <para>
                    This interface exists because the entire published snapshot lives in Umbraco.Web
                    but we may want to trigger rebuilds from Umbraco.Core. These two assemblies should
                    be refactored, really.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.PostMigrations.ICacheRebuilder.Rebuild">
            <summary>
                Rebuilds.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.UnscopedAsyncMigrationBase">
            <summary>
            Base class for creating a migration that does not have a scope provided for it.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.UnscopedAsyncMigrationBase.#ctor(Umbraco.Cms.Infrastructure.Migrations.IMigrationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Migrations.UnscopedAsyncMigrationBase" /> class.
            </summary>
            <param name="context">A migration context.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.UnscopedAsyncMigrationBase.ScopeDatabase(Umbraco.Cms.Infrastructure.Scoping.IScope)">
            <summary>
            <para>Scope the database used by the migration builder.</para>
            <para>This is used with <see cref="T:Umbraco.Cms.Infrastructure.Migrations.UnscopedAsyncMigrationBase"/> when you need to execute something before the scope is created
            but later need to have your queries scoped in a transaction.</para>
            </summary>
            <param name="scope">The scope to get the database from.</param>
            <exception cref="T:System.InvalidOperationException">If the migration is missing or has a malformed MigrationContext, this exception is thrown.</exception>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.UnscopedMigrationBase">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.UnscopedMigrationBase.#ctor(Umbraco.Cms.Infrastructure.Migrations.IMigrationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Migrations.UnscopedMigrationBase" /> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.UnscopedMigrationBase.MigrateAsync">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.UnscopedMigrationBase.Migrate">
            <summary>
            Executes the migration.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Upgrade.UmbracoPlan">
            <summary>
            Represents the Umbraco CMS migration plan.
            </summary>
            <seealso cref="T:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan" />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Upgrade.UmbracoPlan.#ctor(Umbraco.Cms.Core.Configuration.IUmbracoVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Migrations.Upgrade.UmbracoPlan" /> class.
            </summary>
            <param name="umbracoVersion">The Umbraco version.</param>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.UmbracoPlan.InitialState">
            <inheritdoc />
            <remarks>
            This is set to the final migration state of 9.4, making that the lowest supported version to upgrade from.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Upgrade.UmbracoPlan.DefinePlan">
            <summary>
            Defines the plan.
            </summary>
            <remarks>
            This is virtual for testing purposes.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Upgrade.UmbracoPremigrationPlan">
            <summary>
            Represents the Umbraco CMS pre-migration plan. - Migrations that always runs unattended before the main migration plan.
            </summary>
            <seealso cref="T:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan" />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Upgrade.UmbracoPremigrationPlan.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Migrations.Upgrade.UmbracoPlan" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.UmbracoPremigrationPlan.InitialState">
            <inheritdoc />
            <remarks>
            This is set to the final migration state of 13.0, making that the lowest supported version to upgrade from.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Upgrade.UmbracoPremigrationPlan.DefinePlan">
            <summary>
            Defines the plan.
            </summary>
            <remarks>
            This is virtual for testing purposes.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Upgrade.Upgrader">
            <summary>
                Used to run a <see cref="T:Umbraco.Cms.Infrastructure.Migrations.MigrationPlan" />
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Upgrade.Upgrader.#ctor(Umbraco.Cms.Infrastructure.Migrations.MigrationPlan)">
            <summary>
                Initializes a new instance of the <see ref="Upgrader" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.Upgrader.Name">
            <summary>
                Gets the name of the migration plan.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.Upgrader.Plan">
            <summary>
                Gets the migration plan.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.Upgrader.StateValueKey">
            <summary>
                Gets the key for the state value.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Upgrade.Upgrader.ExecuteAsync(Umbraco.Cms.Core.Migrations.IMigrationPlanExecutor,Umbraco.Cms.Core.Scoping.ICoreScopeProvider,Umbraco.Cms.Core.Services.IKeyValueService)">
            <summary>
                Executes.
            </summary>
            <param name="migrationPlanExecutor"></param>
            <param name="scopeProvider">A scope provider.</param>
            <param name="keyValueService">A key-value service.</param>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_13_3_0.AlignUpgradedDatabase">
            <summary>
            We see some differences between an updated database and a fresh one,
            the purpose of this migration is to align the two.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_14_0_0.AddGuidsToUserGroups.OldUserGroupDto.UserCount">
            <summary>
                This is only relevant when this column is included in the results (i.e. GetUserGroupsWithUserCounts).
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_14_0_0.AddGuidsToUsers">
            <summary>
            This is an unscoped migration to support migrating sqlite, since it doesn't support adding columns.
            See <see cref="T:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_14_0_0.AddGuidsToUserGroups"/> for more information.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_14_0_0.AddGuidsToUsers.OldUserDto.PasswordConfig">
            <summary>
                This will represent a JSON structure of how the password has been created (i.e hash algorithm, iterations)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_14_0_0.AddGuidsToUsers.OldUserDto.Avatar">
            <summary>
                Will hold the media file system relative path of the users custom avatar if they uploaded one
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_14_0_0.AddGuidsToUsers.OldUserDto.TourData">
            <summary>
                A Json blob stored for recording tour data for a user
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_14_0_0.AddGuidsToUsers.NewUserDto.PasswordConfig">
            <summary>
                This will represent a JSON structure of how the password has been created (i.e hash algorithm, iterations)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_14_0_0.AddGuidsToUsers.NewUserDto.Avatar">
            <summary>
                Will hold the media file system relative path of the users custom avatar if they uploaded one
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_14_0_0.AddGuidsToUsers.NewUserDto.TourData">
            <summary>
                A Json blob stored for recording tour data for a user
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_14_0_0.MigrateTours.OldUserDto.PasswordConfig">
            <summary>
                This will represent a JSON structure of how the password has been created (i.e hash algorithm, iterations)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_14_0_0.MigrateTours.OldUserDto.Avatar">
            <summary>
                Will hold the media file system relative path of the users custom avatar if they uploaded one
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_14_0_0.MigrateTours.OldUserDto.TourData">
            <summary>
                A Json blob stored for recording tour data for a user
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_14_0_0.MigrateTours.NewUserDto.PasswordConfig">
            <summary>
                This will represent a JSON structure of how the password has been created (i.e hash algorithm, iterations)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_14_0_0.MigrateTours.NewUserDto.Avatar">
            <summary>
                Will hold the media file system relative path of the users custom avatar if they uploaded one
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_14_0_0.MigrateTours.TourData.Alias">
            <summary>
                The tour alias
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_14_0_0.MigrateTours.TourData.Completed">
            <summary>
                If the tour is completed
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_14_0_0.MigrateTours.TourData.Disabled">
            <summary>
                If the tour is disabled
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_14_0_0.MigrateTours.TourValue.Completed">
            <summary>
                If the tour is completed
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_14_0_0.MigrateTours.TourValue.Disabled">
            <summary>
                If the tour is disabled
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_15_0_0.AddKindToUser.OldUserDto.PasswordConfig">
            <summary>
                This will represent a JSON structure of how the password has been created (i.e hash algorithm, iterations)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_15_0_0.AddKindToUser.OldUserDto.Avatar">
            <summary>
                Will hold the media file system relative path of the users custom avatar if they uploaded one
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_15_0_0.ConvertBlockEditorPropertiesOptions.SkipBlockListEditors">
            <summary>
            Setting this property to true will cause the migration of Block List editors to be skipped.
            </summary>
            <remarks>
            If you choose to skip the migration, you're responsible for performing the content migration for Block Lists after the V15 upgrade has completed.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_15_0_0.ConvertBlockEditorPropertiesOptions.SkipBlockGridEditors">
            <summary>
            Setting this property to true will cause the migration of Block Grid editors to be skipped.
            </summary>
            <remarks>
            If you choose to skip the migration, you're responsible for performing the content migration for Block Grids after the V15 upgrade has completed.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_15_0_0.ConvertBlockEditorPropertiesOptions.SkipRichTextEditors">
            <summary>
            Setting this property to true will cause the migration of Rich Text editors to be skipped.
            </summary>
            <remarks>
            If you choose to skip the migration, you're responsible for performing the content migration for Rich Texts after the V15 upgrade has completed.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_15_0_0.ConvertBlockEditorPropertiesOptions.ParallelizeMigration">
            <summary>
            Setting this property to true will cause all block editor migrations to run as parallel operations.
            </summary>
            <remarks>
            While this greatly improves the speed of the migration, some content setups may experience issues and failing migrations as a result.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_15_0_0.ConvertRichTextEditorProperties.BlockRegex">
            <remarks>
            Pattern:<br/>
            <code>&lt;umb-rte-block.*(?&lt;attribute&gt;data-content-udi)="(?&lt;udi&gt;.[^"]*)".*&lt;\\/umb-rte-block</code><br/>
            Explanation:<br/>
            <code>
            ○ Match the string "&lt;umb-rte-block".<br/>
            ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ "attribute" capture group.<br/>
                ○ Match the string "data-content-udi".<br/>
            ○ Match the string "=\"".<br/>
            ○ "udi" capture group.<br/>
                ○ Match any character other than '\n'.<br/>
                ○ Match a character other than '"' atomically any number of times.<br/>
            ○ Match '"'.<br/>
            ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ Match the string "&lt;/umb-rte-block".<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_15_0_0.LocalLinks.RteBlockHelper.BlockRegex">
            <remarks>
            Pattern:<br/>
            <code>&lt;umb-rte-block.*(?&lt;attribute&gt;data-content-udi)="(?&lt;udi&gt;.[^"]*)".*&lt;\\/umb-rte-block</code><br/>
            Explanation:<br/>
            <code>
            ○ Match the string "&lt;umb-rte-block".<br/>
            ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ "attribute" capture group.<br/>
                ○ Match the string "data-content-udi".<br/>
            ○ Match the string "=\"".<br/>
            ○ "udi" capture group.<br/>
                ○ Match any character other than '\n'.<br/>
                ○ Match a character other than '"' atomically any number of times.<br/>
            ○ Match '"'.<br/>
            ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ Match the string "&lt;/umb-rte-block".<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_15_4_0.AddRelationTypeForMembers">
            <summary>
            Migration to add an automatic relation type for members if it doesn't already exist.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_15_4_0.AddRelationTypeForMembers.#ctor(Umbraco.Cms.Infrastructure.Migrations.IMigrationContext,Umbraco.Cms.Core.Services.IRelationService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_15_4_0.AddRelationTypeForMembers"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_15_4_0.AddRelationTypeForMembers.Migrate">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_15_4_0.UpdateDocumentUrlToPersistMultipleSegmentsPerDocument">
            <summary>
            Migration to make necessary schema updates to support multiple segments per document.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_15_4_0.UpdateDocumentUrlToPersistMultipleSegmentsPerDocument.#ctor(Umbraco.Cms.Infrastructure.Migrations.IMigrationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_15_4_0.UpdateDocumentUrlToPersistMultipleSegmentsPerDocument"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Migrations.Upgrade.V_15_4_0.UpdateDocumentUrlToPersistMultipleSegmentsPerDocument.Migrate">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.ModelsBuilder.ApiVersion">
            <summary>
                Manages API version handshake between client and server.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.ModelsBuilder.ApiVersion.#ctor(Umbraco.Cms.Core.Semver.SemVersion)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.ModelsBuilder.ApiVersion" /> class.
            </summary>
            <param name="executingVersion">The currently executing version.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.ModelsBuilder.ApiVersion.Current">
            <summary>
                Gets the currently executing API version.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.ModelsBuilder.ApiVersion.Version">
            <summary>
                Gets the executing version of the API.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.ModelsBuilder.AutoModelsNotificationHandler">
            <summary>
                Notification handlers used by <see cref="F:Umbraco.Cms.Core.Configuration.ModelsMode.SourceCodeAuto" />.
            </summary>
            <remarks>
                supports <see cref="F:Umbraco.Cms.Core.Configuration.ModelsMode.SourceCodeAuto" /> mode but not <see cref="F:Umbraco.Cms.Core.Configuration.ModelsMode.InMemoryAuto" /> mode.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.ModelsBuilder.AutoModelsNotificationHandler.#ctor(Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.ModelsBuilder.AutoModelsNotificationHandler},Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.ModelsBuilderSettings},Umbraco.Cms.Infrastructure.ModelsBuilder.Building.IModelsGenerator,Umbraco.Cms.Infrastructure.ModelsBuilder.ModelsGenerationError,Umbraco.Cms.Core.Runtime.IMainDom)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.ModelsBuilder.AutoModelsNotificationHandler" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.ModelsBuilder.AutoModelsNotificationHandler.Handle(Umbraco.Cms.Core.Notifications.UmbracoApplicationStartingNotification)">
            <summary>
                Handles the <see cref="T:Umbraco.Cms.Core.Notifications.UmbracoApplicationStartingNotification" /> notification
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.Builder">
            <summary>
                Provides a base class for all builders.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.Builder.#ctor(Umbraco.Cms.Core.Configuration.Models.ModelsBuilderSettings,System.Collections.Generic.IList{Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.Builder" /> class with a list of models to generate,
                the result of code parsing, and a models namespace.
            </summary>
            <param name="typeModels">The list of models to generate.</param>
            <param name="config">Configuration for modelsbuilder settings</param>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.Builder.ModelsNamespace">
            <summary>
                Gets or sets a value indicating the namespace to use for the models.
            </summary>
            <remarks>May be overriden by code attributes.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.Builder.Using">
            <summary>
                Gets the list of assemblies to add to the set of 'using' assemblies in each model file.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.Builder.TypeModels">
            <summary>
                Gets the list of all models.
            </summary>
            <remarks>Includes those that are ignored.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.Builder.GetModelsToGenerate">
            <summary>
                Gets the list of models to generate.
            </summary>
            <returns>The models to generate</returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.Builder.Prepare">
            <summary>
                Prepares generation by processing the result of code parsing.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.PropertyModel">
            <summary>
                Represents a model property.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.PropertyModel.Alias">
            <summary>
                Gets the alias of the property.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.PropertyModel.ClrName">
            <summary>
                Gets the clr name of the property.
            </summary>
            <remarks>This is just the local name eg "Price".</remarks>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.PropertyModel.ClrTypeName">
            <summary>
                Gets the CLR type name of the property values.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.PropertyModel.Description">
            <summary>
                Gets the description of the property.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.PropertyModel.Errors">
            <summary>
                Gets the generation errors for the property.
            </summary>
            <remarks>
                This should be null, unless something prevents the property from being
                generated, and then the value should explain what. This can be used to generate
                commented out code eg in <see cref="F:Umbraco.Cms.Core.Configuration.ModelsMode.InMemoryAuto" /> mode.
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.PropertyModel.ModelClrType">
            <summary>
                Gets the Model Clr type of the property values.
            </summary>
            <remarks>
                As indicated by the <c>PublishedPropertyType</c>, ie by the <c>IPropertyValueConverter</c>
                if any, else <c>object</c>. May include some ModelType that will need to be mapped.
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.PropertyModel.Name">
            <summary>
                Gets the name of the property.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.PropertyModel.AddError(System.String)">
            <summary>
                Adds an error.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TextBuilder">
            <summary>
                Implements a builder that works by writing text.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TextBuilder.#ctor(Umbraco.Cms.Core.Configuration.Models.ModelsBuilderSettings,System.Collections.Generic.IList{Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TextBuilder" /> class with a list of models to generate
                and the result of code parsing.
            </summary>
            <param name="config">The models builder configuration.</param>
            <param name="typeModels">The list of models to generate.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TextBuilder.WriteHeader(System.Text.StringBuilder)">
            <summary>
                Outputs an "auto-generated" header to a string builder.
            </summary>
            <param name="sb">The string builder.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TextBuilder.WriteHeader(System.Text.StringBuilder,System.Boolean)">
            <summary>
                Outputs an "auto-generated" header to a string builder.
            </summary>
            <param name="sb">The string builder.</param>
            <param name="includeVersion">Flag indicating whether the tool version number should be included in the output.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TextBuilder.Generate(System.Text.StringBuilder,Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel)">
            <summary>
                Outputs a generated model to a string builder.
            </summary>
            <param name="sb">The string builder.</param>
            <param name="typeModel">The model to generate.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TextBuilder.Generate(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel})">
            <summary>
                Outputs generated models to a string builder.
            </summary>
            <param name="sb">The string builder.</param>
            <param name="typeModels">The models to generate.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TextHeaderWriter.WriteHeader(System.Text.StringBuilder)">
            <summary>
                Outputs an "auto-generated" header to a string builder.
            </summary>
            <param name="sb">The string builder.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TextHeaderWriter.WriteHeader(System.Text.StringBuilder,System.Boolean)">
            <summary>
                Outputs an "auto-generated" header to a string builder.
            </summary>
            <param name="sb">The string builder.</param>
            <param name="includeVersion">Flag indicating whether the tool version number should be included in the output.</param>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel">
            <summary>
                Represents a model.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel.DeclaringInterfaces">
            <summary>
                Gets the list of interfaces that this model needs to declare it implements.
            </summary>
            <remarks>
                Some of these interfaces may actually be implemented by a base model
                that this model inherits from.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel.ItemTypes">
            <summary>
                Represents the different model item types.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel.ItemTypes.Element">
            <summary>
                Element.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel.ItemTypes.Content">
            <summary>
                Content.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel.ItemTypes.Media">
            <summary>
                Media.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel.ItemTypes.Member">
            <summary>
                Member.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel.ImplementingInterfaces">
            <summary>
                Gets the list of interfaces that this model needs to actually implement.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel.MixinTypes">
            <summary>
                Gets the mixin models.
            </summary>
            <remarks>The current model implements mixins.</remarks>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel.Properties">
            <summary>
                Gets the list of properties that are defined by this model.
            </summary>
            <remarks>
                These are only those property that are defined locally by this model,
                and the list does not contain properties inherited from base models or from mixins.
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel.Alias">
            <summary>
                Gets the alias of the model.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel.BaseType">
            <summary>
                Gets the base model.
            </summary>
            <remarks>
                <para>If the content type does not have a base content type, then returns <c>null</c>.</para>
                <para>The current model inherits from its base model.</para>
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel.ClrName">
            <summary>
                Gets the clr name of the model.
            </summary>
            <remarks>This is the complete name eg "Foo.Bar.MyContent".</remarks>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel.Description">
            <summary>
                Gets the description of the content type.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel.HasBase">
            <summary>
                Gets a value indicating whether this model has a base class.
            </summary>
            <remarks>
                Can be either because the content type has a base content type declared in Umbraco,
                or because the existing user's code declares a base class for this model.
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel.Id">
            <summary>
                Gets the unique identifier of the corresponding content type.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel.IsMixin">
            <summary>
                Gets a value indicating whether this model is used as a mixin by another model.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel.IsParent">
            <summary>
                Gets a value indicating whether this model is the base model of another model.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel.Name">
            <summary>
                Gets the name of the content type.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel.ParentId">
            <summary>
                Gets the unique identifier of the parent.
            </summary>
            <remarks>
                The parent can either be a base content type, or a content types container. If the content
                type does not have a base content type, then returns <c>-1</c>.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel.IsElement">
            <summary>
                Gets a value indicating whether the type is an element.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel.ItemType">
            <summary>
                Gets or sets the model item type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel.EnumerateBaseTypes(System.Boolean)">
            <summary>
                Enumerates the base models starting from the current model up.
            </summary>
            <param name="andSelf">
                Indicates whether the enumeration should start with the current model
                or from its base model.
            </param>
            <returns>The base models.</returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel.CollectImplems(System.Collections.Generic.ICollection{Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel},Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel)">
            <summary>
                Recursively collects all types inherited, or implemented as interfaces, by a specified type.
            </summary>
            <param name="types">The collection.</param>
            <param name="type">The type.</param>
            <remarks>Includes the specified type.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel.MapModelTypes(System.Collections.Generic.IList{Umbraco.Cms.Infrastructure.ModelsBuilder.Building.TypeModel},System.String)">
            <summary>
                Maps ModelType.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.ModelsBuilder.ImplementPropertyTypeAttribute">
            <summary>
                Indicates that a property implements a given property alias.
            </summary>
            <remarks>And therefore it should not be generated.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.ModelsBuilder.ModelsBuilderAssemblyAttribute">
            <summary>
                Indicates that an Assembly is a Models Builder assembly.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.ModelsBuilder.ModelsBuilderAssemblyAttribute.IsInMemory">
            <summary>
                Gets or sets a value indicating whether the assembly is a InMemory assembly.
            </summary>
            <remarks>A Models Builder assembly can be either InMemory or a normal Dll.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.ModelsBuilder.ModelsBuilderAssemblyAttribute.SourceHash">
            <summary>
                Gets or sets a hash value representing the state of the custom source code files
                and the Umbraco content types that were used to generate and compile the assembly.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.ModelsBuilder.OutOfDateModelsStatus">
            <summary>
                Used to track if ModelsBuilder models are out of date/stale
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.ModelsBuilder.OutOfDateModelsStatus.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.ModelsBuilderSettings},Umbraco.Cms.Core.Hosting.IHostingEnvironment)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.ModelsBuilder.OutOfDateModelsStatus" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.ModelsBuilder.OutOfDateModelsStatus.IsEnabled">
            <summary>
                Gets a value indicating whether flagging out of date models is enabled
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.ModelsBuilder.OutOfDateModelsStatus.IsOutOfDate">
            <summary>
                Gets a value indicating whether models are out of date
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.ModelsBuilder.PublishedModelUtility">
            <summary>
                This is called from within the generated model classes
            </summary>
            <remarks>
                DO NOT REMOVE - although there are not code references this is used directly by the generated models.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.ModelsBuilder.RoslynCompiler.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.ModelsBuilder.RoslynCompiler" /> class.
            </summary>
            <remarks>
                Roslyn compiler which can be used to compile a c# file to a Dll assembly
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.ModelsBuilder.RoslynCompiler.CompileToFile(System.String,System.String)">
            <summary>
                Compile a source file to a dll
            </summary>
            <param name="pathToSourceFile">Path to the source file containing the code to be compiled.</param>
            <param name="savePath">The path where the output assembly will be saved.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.ModelsBuilder.TypeExtensions.CreateGenericInstance(System.Type,System.Object,System.Object[])">
            <summary>
                Creates a generic instance of a generic type with the proper actual type of an object.
            </summary>
            <param name="genericType">A generic type such as <c>Something{}</c></param>
            <param name="typeParmObj">An object whose type is used as generic type param.</param>
            <param name="ctorArgs">Arguments for the constructor.</param>
            <returns>A generic instance of the generic type with the proper type.</returns>
            <remarks>
                Usage... typeof (Something{}).CreateGenericInstance(object1, object2, object3) will return
                a Something{Type1} if object1.GetType() is Type1.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.ModelsBuilder.UmbracoServices.#ctor(Umbraco.Cms.Core.Services.IContentTypeService,Umbraco.Cms.Core.Services.IMediaTypeService,Umbraco.Cms.Core.Services.IMemberTypeService,Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentTypeFactory,Umbraco.Cms.Core.Strings.IShortStringHelper)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.ModelsBuilder.UmbracoServices" /> class.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Packaging.AutomaticPackageMigrationPlan">
            <summary>
            Represents a package migration plan that automatically imports an embedded package data manifest.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Packaging.AutomaticPackageMigrationPlan.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Packaging.AutomaticPackageMigrationPlan" /> class.
            </summary>
            <param name="packageName">The package name that the plan is for. If the package has a package.manifest these must match.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Packaging.AutomaticPackageMigrationPlan.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Packaging.AutomaticPackageMigrationPlan" /> class.
            </summary>
            <param name="packageName">The package name that the plan is for. If the package has a package.manifest these must match.</param>
            <param name="planName">The plan name for the package. This should be the same name as the package name, if there is only one plan in the package.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Packaging.AutomaticPackageMigrationPlan.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Packaging.AutomaticPackageMigrationPlan" /> class.
            </summary>
            <param name="packageId">The package identifier that the plan is for. If the package has a package.manifest these must match.</param>
            <param name="packageName">The package name that the plan is for. If the package has a package.manifest these must match.</param>
            <param name="planName">The plan name for the package. This should be the same name as the package name, if there is only one plan in the package.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Packaging.AutomaticPackageMigrationPlan.DefinePlan">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Packaging.AutomaticPackageMigrationPlan.MigrateToPackageData">
            <summary>
            Provides a migration that imports an embedded package data manifest.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Packaging.AutomaticPackageMigrationPlan.MigrateToPackageData.#ctor(Umbraco.Cms.Core.Services.IPackagingService,Umbraco.Cms.Core.Services.IMediaService,Umbraco.Cms.Core.IO.MediaFileManager,Umbraco.Cms.Core.PropertyEditors.MediaUrlGeneratorCollection,Umbraco.Cms.Core.Strings.IShortStringHelper,Umbraco.Cms.Core.Services.IContentTypeBaseServiceProvider,Umbraco.Cms.Infrastructure.Migrations.IMigrationContext,Microsoft.Extensions.Options.IOptions{Umbraco.Cms.Core.Configuration.Models.PackageMigrationSettings})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Packaging.AutomaticPackageMigrationPlan.MigrateToPackageData" /> class.
            </summary>
            <param name="packagingService">The packaging service.</param>
            <param name="mediaService">The media service.</param>
            <param name="mediaFileManager">The media file manager.</param>
            <param name="mediaUrlGenerators">The media URL generators.</param>
            <param name="shortStringHelper">The short string helper.</param>
            <param name="contentTypeBaseServiceProvider">The content type base service provider.</param>
            <param name="context">The migration context.</param>
            <param name="options">The package migration settings.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Packaging.AutomaticPackageMigrationPlan.MigrateToPackageData.MigrateAsync">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Packaging.ImportPackageBuilderExpression.EmbeddedResourceMigrationType">
            <summary>
                The type of the migration which dictates the namespace of the embedded resource
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Packaging.PackageDataInstallation.ImportMediaTypes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Int32)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Cms.Core.Models.IContentType"/>
            </summary>
            <param name="docTypeElements">Xml to import</param>
            <param name="userId">Optional id of the User performing the operation. Default is zero (admin).</param>
            <returns>An enumerable list of generated ContentTypes</returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Packaging.PackageDataInstallation.ImportMediaTypes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.EntityContainer}@)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Cms.Core.Models.IContentType"/>
            </summary>
            <param name="docTypeElements">Xml to import</param>
            <param name="userId">Optional id of the User performing the operation. Default is zero (admin).</param>
            <param name="entityContainersInstalled">Collection of entity containers installed by the package to be populated with those created in installing data types.</param>
            <returns>An enumerable list of generated ContentTypes</returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Packaging.PackageDataInstallation.ImportContentBase``2(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Int32,System.Collections.Generic.IDictionary{System.String,``1},System.Int32,Umbraco.Cms.Core.Services.IContentTypeBaseService{``1},Umbraco.Cms.Core.Services.IContentServiceBase{``0})">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Cms.Core.Models.IContent"/>
            </summary>
            <param name="roots">The root contents to import from</param>
            <param name="typeService">The content type base service</param>
            <param name="parentId">Optional parent Id for the content being imported</param>
            <param name="importedDocumentTypes">A dictionary of already imported document types (basically used as a cache)</param>
            <param name="userId">Optional Id of the user performing the import</param>
            <param name="service">The content service base</param>
            <returns>An enumerable list of generated content</returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Packaging.PackageDataInstallation.ImportDocumentTypes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Int32)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Cms.Core.Models.IContentType"/>
            </summary>
            <param name="docTypeElements">Xml to import</param>
            <param name="userId">Optional id of the User performing the operation. Default is zero (admin).</param>
            <returns>An enumerable list of generated ContentTypes</returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Packaging.PackageDataInstallation.ImportDocumentTypes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.EntityContainer}@)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Cms.Core.Models.IContentType"/>
            </summary>
            <param name="docTypeElements">Xml to import</param>
            <param name="userId">Optional id of the User performing the operation. Default is zero (admin).</param>
            <param name="entityContainersInstalled">Collection of entity containers installed by the package to be populated with those created in installing data types.</param>
            <returns>An enumerable list of generated ContentTypes</returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Packaging.PackageDataInstallation.ImportDocumentTypes``1(System.Collections.Generic.IReadOnlyCollection{System.Xml.Linq.XElement},System.Boolean,System.Int32,Umbraco.Cms.Core.Services.IContentTypeBaseService{``0})">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Cms.Core.Models.IContentType"/>
            </summary>
            <param name="unsortedDocumentTypes">Xml to import</param>
            <param name="importStructure">Boolean indicating whether or not to import the </param>
            <param name="userId">Optional id of the User performing the operation. Default is zero (admin).</param>
            <param name="service">The content type service.</param>
            <returns>An enumerable list of generated ContentTypes</returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Packaging.PackageDataInstallation.ImportDocumentTypes``1(System.Collections.Generic.IReadOnlyCollection{System.Xml.Linq.XElement},System.Boolean,System.Int32,Umbraco.Cms.Core.Services.IContentTypeBaseService{``0},System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.EntityContainer}@)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Cms.Core.Models.IContentType"/>
            </summary>
            <param name="unsortedDocumentTypes">Xml to import</param>
            <param name="importStructure">Boolean indicating whether or not to import the </param>
            <param name="userId">Optional id of the User performing the operation. Default is zero (admin).</param>
            <param name="service">The content type service</param>
            <param name="entityContainersInstalled">Collection of entity containers installed by the package to be populated with those created in installing data types.</param>
            <returns>An enumerable list of generated ContentTypes</returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Packaging.PackageDataInstallation.FindContentTypeByAlias``1(System.String,Umbraco.Cms.Core.Services.IContentTypeBaseService{``0})">
            <summary>
            Used during Content import to ensure that the ContentType of a content item exists
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Packaging.PackageDataInstallation.ImportDataTypes(System.Collections.Generic.IReadOnlyCollection{System.Xml.Linq.XElement},System.Int32)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Cms.Core.Models.IDataType"/>
            </summary>
            <param name="dataTypeElements">Xml to import</param>
            <param name="userId">Optional id of the user</param>
            <returns>An enumerable list of generated DataTypeDefinitions</returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Packaging.PackageDataInstallation.ImportDataTypes(System.Collections.Generic.IReadOnlyCollection{System.Xml.Linq.XElement},System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.EntityContainer}@)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Cms.Core.Models.IDataType"/>
            </summary>
            <param name="dataTypeElements">Xml to import</param>
            <param name="userId">Optional id of the user</param>
            <param name="entityContainersInstalled">Collection of entity containers installed by the package to be populated with those created in installing data types.</param>
            <returns>An enumerable list of generated DataTypeDefinitions</returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Packaging.PackageDataInstallation.ImportDictionaryItems(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Int32)">
            <summary>
            Imports and saves the 'DictionaryItems' part of the package xml as a list of <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem"/>
            </summary>
            <param name="dictionaryItemElementList">Xml to import</param>
            <param name="userId"></param>
            <returns>An enumerable list of dictionary items</returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Packaging.PackageDataInstallation.ImportLanguages(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Int32)">
            <summary>
            Imports and saves the 'Languages' part of a package xml as a list of <see cref="T:Umbraco.Cms.Core.Models.ILanguage"/>
            </summary>
            <param name="languageElements">Xml to import</param>
            <param name="userId">Optional id of the User performing the operation</param>
            <returns>An enumerable list of generated languages</returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Packaging.PackageDataInstallation.ImportTemplatesAsync(System.Collections.Generic.IReadOnlyCollection{System.Xml.Linq.XElement},System.Int32)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Cms.Core.Models.ITemplate"/>
            </summary>
            <param name="templateElements">Xml to import</param>
            <param name="userId">Optional user id</param>
            <returns>An enumerable list of generated Templates</returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Packaging.PackageInstallation.#ctor(Umbraco.Cms.Core.Services.IPackageDataInstallation,Umbraco.Cms.Core.Packaging.CompiledPackageXmlParser)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Packaging.PackageInstallation" /> class.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Packaging.PackageMigrationBase">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Packaging.PackageMigrationBase.MigrateAsync">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Packaging.PackageMigrationBase.Migrate">
            <summary>
            Executes the migration.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.CustomConnectionStringDatabaseProviderMetadata">
            <summary>
                Provider metadata for custom connection string setup.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.CustomConnectionStringDatabaseProviderMetadata.Id">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.CustomConnectionStringDatabaseProviderMetadata.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.CustomConnectionStringDatabaseProviderMetadata.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.CustomConnectionStringDatabaseProviderMetadata.DefaultDatabaseName">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.CustomConnectionStringDatabaseProviderMetadata.ProviderName">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.CustomConnectionStringDatabaseProviderMetadata.SupportsQuickInstall">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.CustomConnectionStringDatabaseProviderMetadata.IsAvailable">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.CustomConnectionStringDatabaseProviderMetadata.RequiresServer">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.CustomConnectionStringDatabaseProviderMetadata.ServerPlaceholder">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.CustomConnectionStringDatabaseProviderMetadata.RequiresCredentials">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.CustomConnectionStringDatabaseProviderMetadata.SupportsIntegratedAuthentication">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.CustomConnectionStringDatabaseProviderMetadata.RequiresConnectionTest">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.CustomConnectionStringDatabaseProviderMetadata.ForceCreateDatabase">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.CustomConnectionStringDatabaseProviderMetadata.GenerateConnectionString(Umbraco.Cms.Core.Install.Models.DatabaseModel)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.ConstraintAttribute">
            <summary>
                Attribute that represents a db constraint
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.ConstraintAttribute.Name">
            <summary>
                Gets or sets the name of the constraint
            </summary>
            <remarks>
                Overrides the default naming of a property constraint:
                DF_tableName_propertyName
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.ConstraintAttribute.Default">
            <summary>
                Gets or sets the Default value
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.ForeignKeyAttribute">
            <summary>
                Attribute that represents a Foreign Key reference
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.ForeignKeyAttribute.OnDelete">
            <summary>
                Gets or sets the cascade rule for deletions.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.ForeignKeyAttribute.OnUpdate">
            <summary>
                Gets or sets the cascade rule for updates.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.ForeignKeyAttribute.Name">
            <summary>
                Gets or sets the name of the foreign key reference
            </summary>
            <remarks>
                Overrides the default naming of a foreign key reference:
                FK_thisTableName_refTableName
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.ForeignKeyAttribute.Column">
            <summary>
                Gets or sets the name of the Column that this foreign key should reference.
            </summary>
            <remarks>PrimaryKey column is used by default</remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.IndexAttribute">
            <summary>
                Attribute that represents an Index
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.IndexAttribute.Name">
            <summary>
                Gets or sets the name of the Index
            </summary>
            <remarks>
                Overrides default naming of indexes:
                IX_tableName
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.IndexAttribute.IndexType">
            <summary>
                Gets or sets the type of index to create
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.IndexAttribute.ForColumns">
            <summary>
                Gets or sets the column name(s) for the current index
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.IndexAttribute.IncludeColumns">
            <summary>
                Gets or sets the column name(s) for the columns to include in the index
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.IndexTypes">
            <summary>
                Enum for the 3 types of indexes that can be created
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.LengthAttribute">
            <summary>
                Attribute that represents the length of a column
            </summary>
            <remarks>Used to define the length of fixed sized columns - typically used for nvarchar</remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.LengthAttribute.Length">
            <summary>
                Gets or sets the length of a column
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.NullSettingAttribute">
            <summary>
                Attribute that represents the Null-setting of a column
            </summary>
            <remarks>
                This should only be used for Columns that can be Null.
                By convention the Columns will be "NOT NULL".
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.NullSettingAttribute.NullSetting">
            <summary>
                Gets or sets the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.NullSettings" /> for a column
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.NullSettings">
            <summary>
                Enum with the 2 possible Null settings: Null or Not Null
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.PrimaryKeyColumnAttribute">
            <summary>
                Attribute that represents a Primary Key
            </summary>
            <remarks>
                By default, Clustered and AutoIncrement is set to true.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.PrimaryKeyColumnAttribute.Clustered">
            <summary>
                Gets or sets a boolean indicating whether the primary key is clustered.
            </summary>
            <remarks>Defaults to true</remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.PrimaryKeyColumnAttribute.AutoIncrement">
            <summary>
                Gets or sets a boolean indicating whether the primary key is auto incremented.
            </summary>
            <remarks>Defaults to true</remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.PrimaryKeyColumnAttribute.Name">
            <summary>
                Gets or sets the name of the PrimaryKey.
            </summary>
            <remarks>
                Overrides the default naming of a PrimaryKey constraint:
                PK_tableName
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.PrimaryKeyColumnAttribute.OnColumns">
            <summary>
                Gets or sets the names of the columns for this PrimaryKey.
            </summary>
            <remarks>
                Should only be used if the PrimaryKey spans over multiple columns.
                Usage: [nodeId], [otherColumn]
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.PrimaryKeyColumnAttribute.IdentitySeed">
            <summary>
                Gets or sets the Identity Seed, which is used for Sql Ce databases.
            </summary>
            <remarks>
                We'll only look for changes to seeding and apply them if the configured database
                is an Sql Ce database.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.ReferencesAttribute">
            <summary>
                Attribute that represents a reference between two tables/DTOs
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.ReferencesAttribute.Type">
            <summary>
                Gets or sets the Type of the referenced DTO/table
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.SpecialDbType">
            <summary>
                Allows for specifying custom DB types that are not natively mapped.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.SpecialDbTypeAttribute">
            <summary>
                Attribute that represents the usage of a special type
            </summary>
            <remarks>
                Should only be used when the .NET type can't be directly translated to a DbType.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.SpecialDbTypeAttribute.DatabaseType">
            <summary>
                Gets or sets the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.SpecialDbType" /> for this column
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.DatabaseAnnotations.SpecialDbTypes">
            <summary>
                Known special DB types required for Umbraco.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.DatabaseModelDefinitions.ColumnDefinition.CustomDbType">
            <summary>
                Used for column types that cannot be natively mapped.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.DatabaseModelDefinitions.DbIndexDefinition">
            <summary>
                Represents a database index definition retrieved by querying the database
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.DatabaseProviderMetadataExtensions">
            <summary>
            Extension methods for <see cref="T:Umbraco.Cms.Infrastructure.Persistence.IDatabaseProviderMetadata" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.DatabaseProviderMetadataExtensions.GetAvailable(System.Collections.Generic.IEnumerable{Umbraco.Cms.Infrastructure.Persistence.IDatabaseProviderMetadata},System.Boolean)">
            <summary>
            Gets the available database provider metadata.
            </summary>
            <param name="databaseProviderMetadata">The database provider metadata.</param>
            <param name="onlyQuickInstall">If set to <c>true</c> only returns providers that support quick install.</param>
            <returns>
            The available database provider metadata.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.DatabaseProviderMetadataExtensions.CanForceCreateDatabase(System.Collections.Generic.IEnumerable{Umbraco.Cms.Infrastructure.Persistence.IDatabaseProviderMetadata},Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabaseFactory)">
            <summary>
            Determines whether a database can be created for the specified provider name.
            </summary>
            <param name="databaseProviderMetadata">The database provider metadata.</param>
            <param name="umbracoDatabaseFactory">The database factory.</param>
            <returns>
              <c>true</c> if a database can be created for the specified database; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.DatabaseProviderMetadataExtensions.GenerateConnectionString(Umbraco.Cms.Infrastructure.Persistence.IDatabaseProviderMetadata,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Generates the connection string.
            </summary>
            <param name="databaseProviderMetadata">The database provider metadata.</param>
            <param name="databaseName">The name of the database, uses the default database name when <c>null</c>.</param>
            <param name="server">The server.</param>
            <param name="login">The login.</param>
            <param name="password">The password.</param>
            <param name="integratedAuth">Indicates whether integrated authentication should be used (when supported by the provider).</param>
            <returns>
            The generated connection string.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.DbCommandExtensions.UnwrapUmbraco(System.Data.IDbCommand)">
            <summary>
                Unwraps a database command.
            </summary>
            <remarks>
                UmbracoDatabase wraps the original database connection in various layers (see
                OnConnectionOpened); this unwraps and returns the original database command.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Dtos.ContentNuDto.Data">
            <summary>
                Stores serialized JSON representing the content item's property and culture name values
            </summary>
            <remarks>
                Pretty much anything that would require a 1:M lookup is serialized here
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Dtos.DomainDto.IsoCode">
            <summary>
            Used for a result on the query to get the associated language for a domain, if there is one.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Dtos.ExternalLoginDto.LoginProvider">
            <summary>
                Used to store the name of the provider (i.e. Facebook, Google)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Dtos.ExternalLoginDto.ProviderKey">
            <summary>
                Stores the key the provider uses to lookup the login
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Dtos.ExternalLoginDto.UserData">
            <summary>
                Used to store any arbitrary data for the user and external provider - like user tokens returned from the provider
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Dtos.LanguageDto.Id">
            <summary>
                Gets or sets the identifier of the language.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Dtos.LanguageDto.IsoCode">
            <summary>
                Gets or sets the ISO code of the language.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Dtos.LanguageDto.CultureName">
            <summary>
                Gets or sets the culture name of the language.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Dtos.LanguageDto.IsDefault">
            <summary>
                Gets or sets a value indicating whether the language is the default language.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Dtos.LanguageDto.IsMandatory">
            <summary>
                Gets or sets a value indicating whether the language is mandatory.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Dtos.LanguageDto.FallbackLanguageId">
            <summary>
                Gets or sets the identifier of a fallback language.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Dtos.LogDto.EntityType">
            <summary>
                This is the entity type associated with the log
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Dtos.LogDto.Parameters">
            <summary>
                Used to store additional data parameters for the log
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Dtos.MemberDto.PasswordConfig">
            <summary>
                This will represent a JSON structure of how the password has been created (i.e hash algorithm, iterations)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Dtos.NavigationDto.Id">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Dtos.NavigationDto.Key">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Dtos.NavigationDto.ParentId">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Dtos.NavigationDto.SortOrder">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Dtos.NavigationDto.Trashed">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Dtos.UserDto.PasswordConfig">
            <summary>
                This will represent a JSON structure of how the password has been created (i.e hash algorithm, iterations)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Dtos.UserDto.Avatar">
            <summary>
                Will hold the media file system relative path of the users custom avatar if they uploaded one
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Dtos.UserGroupDto.UserCount">
            <summary>
                This is only relevant when this column is included in the results (i.e. GetUserGroupsWithUserCounts)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Dtos.UserLoginDto.LoggedInUtc">
            <summary>
                Tracks when the session is created
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Dtos.UserLoginDto.LastValidatedUtc">
            <summary>
                Updated every time a user's session is validated
            </summary>
            <remarks>
                <para>
                    This allows us to guess if a session is timed out if a user doesn't actively
                    log out and also allows us to trim the data in the table.
                </para>
                <para>
                    The index is IMPORTANT as it prevents deadlocks during deletion of
                    old sessions (DELETE ... WHERE lastValidatedUtc &lt; date).
                </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Dtos.UserLoginDto.LoggedOutUtc">
            <summary>
                Tracks when the session is removed when the user's account is logged out
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Dtos.UserLoginDto.IpAddress">
            <summary>
                Logs the IP address of the session if available
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Factories.ContentBaseFactory.BuildEntity(Umbraco.Cms.Infrastructure.Persistence.Dtos.DocumentDto,Umbraco.Cms.Core.Models.IContentType)">
            <summary>
                Builds an IContent item from a dto and content type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Factories.ContentBaseFactory.BuildEntity(Umbraco.Cms.Infrastructure.Persistence.Dtos.ContentDto,Umbraco.Cms.Core.Models.IMediaType)">
            <summary>
                Builds a Media item from a dto and content type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Factories.ContentBaseFactory.BuildEntity(Umbraco.Cms.Infrastructure.Persistence.Dtos.MemberDto,Umbraco.Cms.Core.Models.IMemberType)">
            <summary>
                Builds a Member item from a dto and member type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Factories.ContentBaseFactory.BuildDto(Umbraco.Cms.Core.Models.IContent,System.Guid)">
            <summary>
                Builds a dto from an IContent item.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Factories.ContentBaseFactory.BuildDto(Umbraco.Cms.Core.PropertyEditors.MediaUrlGeneratorCollection,Umbraco.Cms.Core.Models.IMedia)">
            <summary>
                Builds a dto from an IMedia item.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Factories.ContentBaseFactory.BuildDto(Umbraco.Cms.Core.Models.IMember)">
            <summary>
                Builds a dto from an IMember item.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Factories.PropertyFactory.BuildDtos(Umbraco.Cms.Core.Models.ContentVariation,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IProperty},Umbraco.Cms.Core.Persistence.Repositories.ILanguageRepository,System.Boolean@,System.Collections.Generic.HashSet{System.String}@)">
            <summary>
                Creates a collection of <see cref="T:Umbraco.Cms.Infrastructure.Persistence.Dtos.PropertyDataDto" /> from a collection of <see cref="T:Umbraco.Cms.Core.Models.Property" />
            </summary>
            <param name="contentVariation">
                The <see cref="T:Umbraco.Cms.Core.Models.ContentVariation" /> of the entity containing the collection of <see cref="T:Umbraco.Cms.Core.Models.Property" />
            </param>
            <param name="currentVersionId"></param>
            <param name="publishedVersionId"></param>
            <param name="properties">The properties to map</param>
            <param name="languageRepository"></param>
            <param name="edited">out parameter indicating that one or more properties have been edited</param>
            <param name="editedCultures">
                Out parameter containing a collection of edited cultures when the contentVariation varies by culture.
                The value of this will be used to populate the edited cultures in the umbracoDocumentCultureVariation table.
            </param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.ITransientErrorDetectionStrategy">
            <summary>
                Defines an interface which must be implemented by custom components responsible for detecting specific transient
                conditions.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.ITransientErrorDetectionStrategy.IsTransient(System.Exception)">
            <summary>
                Determines whether the specified exception represents a transient failure that can be compensated by a retry.
            </summary>
            <param name="ex">The exception object to be verified.</param>
            <returns>True if the specified exception is considered as transient, otherwise false.</returns>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryingEventArgs">
            <summary>
                Contains information required for the <see cref="E:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryPolicy.Retrying" /> event.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryingEventArgs.#ctor(System.Int32,System.TimeSpan,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryingEventArgs" /> class.
            </summary>
            <param name="currentRetryCount">The current retry attempt count.</param>
            <param name="delay">
                The delay indicating how long the current thread will be suspended for before the next iteration
                will be invoked.
            </param>
            <param name="lastException">The exception which caused the retry conditions to occur.</param>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryingEventArgs.CurrentRetryCount">
            <summary>
                Gets the current retry count.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryingEventArgs.Delay">
            <summary>
                Gets the delay indicating how long the current thread will be suspended for before the next iteration will be
                invoked.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryingEventArgs.LastException">
            <summary>
                Gets the exception which caused the retry conditions to occur.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryLimitExceededException">
            <summary>
                The special type of exception that provides managed exit from a retry loop. The user code can use this exception to
                notify the retry policy that no further retry attempts are required.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryLimitExceededException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryLimitExceededException" /> class with a default error message.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryLimitExceededException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryLimitExceededException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryLimitExceededException.#ctor(System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryLimitExceededException" /> class with a reference to the inner
                exception that is the cause of this exception.
            </summary>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryLimitExceededException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryLimitExceededException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryLimitExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryLimitExceededException" /> class.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryPolicy">
            <summary>
                Provides the base implementation of the retry mechanism for unreliable actions and transient conditions.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryPolicy.NoRetry">
            <summary>
                Returns a default policy that does no retries, it just invokes action exactly once.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryPolicy.DefaultFixed">
            <summary>
                Returns a default policy that implements a fixed retry interval configured with the default
                <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.FixedInterval" /> retry strategy.
                The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryPolicy.DefaultProgressive">
            <summary>
                Returns a default policy that implements a progressive retry interval configured with the default
                <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.Incremental" /> retry strategy.
                The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryPolicy.DefaultExponential">
            <summary>
                Returns a default policy that implements a random exponential retry interval configured with the default
                <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.FixedInterval" /> retry strategy.
                The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryPolicy.#ctor(Umbraco.Cms.Infrastructure.Persistence.FaultHandling.ITransientErrorDetectionStrategy,Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy)">
            <summary>
                Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and parameters
                defining the progressive delay between retries.
            </summary>
            <param name="errorDetectionStrategy">
                The <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.ITransientErrorDetectionStrategy" /> that is responsible for
                detecting transient conditions.
            </param>
            <param name="retryStrategy">The retry strategy to use for this retry policy.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryPolicy.#ctor(Umbraco.Cms.Infrastructure.Persistence.FaultHandling.ITransientErrorDetectionStrategy,System.Int32)">
            <summary>
                Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and default fixed
                time interval between retries.
            </summary>
            <param name="errorDetectionStrategy">
                The <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.ITransientErrorDetectionStrategy" /> that is responsible for
                detecting transient conditions.
            </param>
            <param name="retryCount">The number of retry attempts.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryPolicy.#ctor(Umbraco.Cms.Infrastructure.Persistence.FaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan)">
            <summary>
                Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and fixed time
                interval between retries.
            </summary>
            <param name="errorDetectionStrategy">
                The <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.ITransientErrorDetectionStrategy" /> that is responsible for
                detecting transient conditions.
            </param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="retryInterval">The interval between retries.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryPolicy.#ctor(Umbraco.Cms.Infrastructure.Persistence.FaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
                Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and back-off
                parameters for calculating the exponential delay between retries.
            </summary>
            <param name="errorDetectionStrategy">
                The <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.ITransientErrorDetectionStrategy" /> that is responsible for
                detecting transient conditions.
            </param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="minBackoff">The minimum back-off time.</param>
            <param name="maxBackoff">The maximum back-off time.</param>
            <param name="deltaBackoff">
                The time value that will be used for calculating a random delta in the exponential delay
                between retries.
            </param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryPolicy.#ctor(Umbraco.Cms.Infrastructure.Persistence.FaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
                Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and parameters
                defining the progressive delay between retries.
            </summary>
            <param name="errorDetectionStrategy">
                The <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.ITransientErrorDetectionStrategy" /> that is responsible for
                detecting transient conditions.
            </param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="initialInterval">The initial interval that will apply for the first retry.</param>
            <param name="increment">
                The incremental time value that will be used for calculating the progressive delay between
                retries.
            </param>
        </member>
        <member name="E:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryPolicy.Retrying">
            <summary>
                An instance of a callback delegate that will be invoked whenever a retry condition is encountered.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryPolicy.RetryStrategy">
            <summary>
                Gets the retry strategy.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryPolicy.ErrorDetectionStrategy">
            <summary>
                Gets the instance of the error detection strategy.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryPolicy.ExecuteAction(System.Action)">
            <summary>
                Repetitively executes the specified action while it satisfies the current retry policy.
            </summary>
            <param name="action">A delegate representing the executable action which doesn't return any results.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryPolicy.ExecuteAction``1(System.Func{``0})">
            <summary>
                Repetitively executes the specified action while it satisfies the current retry policy.
            </summary>
            <typeparam name="TResult">The type of result expected from the executable action.</typeparam>
            <param name="func">A delegate representing the executable action which returns the result of type R.</param>
            <returns>The result from the action.</returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryPolicy.OnRetrying(System.Int32,System.Exception,System.TimeSpan)">
            <summary>
                Notifies the subscribers whenever a retry condition is encountered.
            </summary>
            <param name="retryCount">The current retry attempt count.</param>
            <param name="lastError">The exception which caused the retry conditions to occur.</param>
            <param name="delay">
                The delay indicating how long the current thread will be suspended for before the next iteration
                will be invoked.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryPolicy.TransientErrorIgnoreStrategy">
            <summary>
                Implements a strategy that ignores any transient errors.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryPolicy.TransientErrorIgnoreStrategy.IsTransient(System.Exception)">
            <summary>
                Always return false.
            </summary>
            <param name="ex">The exception.</param>
            <returns>Returns false.</returns>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryPolicy.TransientErrorCatchAllStrategy">
            <summary>
                Implements a strategy that treats all exceptions as transient errors.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryPolicy.TransientErrorCatchAllStrategy.IsTransient(System.Exception)">
            <summary>
                Always return true.
            </summary>
            <param name="ex">The exception.</param>
            <returns>Returns true.</returns>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.ShouldRetry">
            <summary>
            Defines a callback delegate that will be invoked whenever a retry condition is encountered.
            </summary>
            <param name="retryCount">The current retry attempt count.</param>
            <param name="lastException">The exception which caused the retry conditions to occur.</param>
            <param name="delay">The delay indicating how long the current thread will be suspended for before the next iteration will be invoked.</param>
            <returns>Returns a callback delegate that will be invoked whenever to retry should be attempt.</returns>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy">
            <summary>
            Represents a retry strategy that determines how many times should be retried and the interval between retries.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy.DefaultClientRetryCount">
            <summary>
            The default number of retry attempts.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy.DefaultClientBackoff">
            <summary>
            The default amount of time used when calculating a random delta in the exponential delay between retries.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy.DefaultMaxBackoff">
            <summary>
            The default maximum amount of time used when calculating the exponential delay between retries.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy.DefaultMinBackoff">
            <summary>
            The default minimum amount of time used when calculating the exponential delay between retries.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy.DefaultRetryInterval">
            <summary>
            The default amount of time defining an interval between retries.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy.DefaultRetryIncrement">
            <summary>
            The default amount of time defining a time increment between retry attempts in the progressive delay policy.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy.DefaultFirstFastRetry">
            <summary>
            The default flag indicating whether or not the very first retry attempt will be made immediately
            whereas the subsequent retries will remain subject to retry interval.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy.NoRetry">
            <summary>
            Returns a default policy that does no retries, it just invokes action exactly once.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy.DefaultFixed">
            <summary>
            Returns a default policy that implements a fixed retry interval configured with <see cref="F:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy.DefaultClientRetryCount"/> and <see cref="F:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy.DefaultRetryInterval"/> parameters.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy.DefaultProgressive">
            <summary>
            Returns a default policy that implements a progressive retry interval configured with <see cref="F:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy.DefaultClientRetryCount"/>, <see cref="F:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy.DefaultRetryInterval"/> and <see cref="F:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy.DefaultRetryIncrement"/> parameters.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy.DefaultExponential">
            <summary>
            Returns a default policy that implements a random exponential retry interval configured with <see cref="F:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy.DefaultClientRetryCount"/>, <see cref="F:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy.DefaultMinBackoff"/>, <see cref="F:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy.DefaultMaxBackoff"/> and <see cref="F:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy.DefaultClientBackoff"/> parameters.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy"/> class.
            </summary>
            <param name="name">The name of the retry strategy.</param>
            <param name="firstFastRetry">a value indicating whether or not the very first retry attempt will be made immediately
            whereas the subsequent retries will remain subject to retry interval.</param>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy.FastFirstRetry">
            <summary>
            Gets or sets a value indicating whether or not the very first retry attempt will be made immediately
            whereas the subsequent retries will remain subject to retry interval.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy.Name">
            <summary>
            Gets the name of the retry strategy.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryStrategy.GetShouldRetry">
            <summary>
            Returns the corresponding ShouldRetry delegate.
            </summary>
            <returns>The ShouldRetry delegate.</returns>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.ExponentialBackoff">
            <summary>
                A retry strategy with back-off parameters for calculating the exponential delay between retries.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.ExponentialBackoff.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.ExponentialBackoff" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.ExponentialBackoff.#ctor(System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.ExponentialBackoff" /> class.
            </summary>
            <param name="retryCount">The maximum number of retry attempts.</param>
            <param name="minBackoff">The minimum back-off time</param>
            <param name="maxBackoff">The maximum back-off time.</param>
            <param name="deltaBackoff">
                The value that will be used for calculating a random delta in the exponential delay between
                retries.
            </param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.ExponentialBackoff.#ctor(System.String,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.ExponentialBackoff" /> class.
            </summary>
            <param name="name">The name of the retry strategy.</param>
            <param name="retryCount">The maximum number of retry attempts.</param>
            <param name="minBackoff">The minimum back-off time</param>
            <param name="maxBackoff">The maximum back-off time.</param>
            <param name="deltaBackoff">
                The value that will be used for calculating a random delta in the exponential delay between
                retries.
            </param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.ExponentialBackoff.#ctor(System.String,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.ExponentialBackoff" /> class.
            </summary>
            <param name="name">The name of the retry strategy.</param>
            <param name="retryCount">The maximum number of retry attempts.</param>
            <param name="minBackoff">The minimum back-off time</param>
            <param name="maxBackoff">The maximum back-off time.</param>
            <param name="deltaBackoff">
                The value that will be used for calculating a random delta in the exponential delay between
                retries.
            </param>
            <param name="firstFastRetry">
                Indicates whether or not the very first retry attempt will be made immediately
                whereas the subsequent retries will remain subject to retry interval.
            </param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.ExponentialBackoff.GetShouldRetry">
            <summary>
                Returns the corresponding ShouldRetry delegate.
            </summary>
            <returns>The ShouldRetry delegate.</returns>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.FixedInterval">
            <summary>
                A retry strategy with a specified number of retry attempts and a default fixed time interval between retries.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.FixedInterval.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.FixedInterval" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.FixedInterval.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.FixedInterval" /> class.
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.FixedInterval.#ctor(System.Int32,System.TimeSpan)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.FixedInterval" /> class.
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="retryInterval">The time interval between retries.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.FixedInterval.#ctor(System.String,System.Int32,System.TimeSpan)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.FixedInterval" /> class.
            </summary>
            <param name="name">The retry strategy name.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="retryInterval">The time interval between retries.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.FixedInterval.#ctor(System.String,System.Int32,System.TimeSpan,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.FixedInterval" /> class.
            </summary>
            <param name="name">The retry strategy name.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="retryInterval">The time interval between retries.</param>
            <param name="firstFastRetry">
                a value indicating whether or not the very first retry attempt will be made immediately
                whereas the subsequent retries will remain subject to retry interval.
            </param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.FixedInterval.GetShouldRetry">
            <summary>
                Returns the corresponding ShouldRetry delegate.
            </summary>
            <returns>The ShouldRetry delegate.</returns>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.Incremental">
            <summary>
                A retry strategy with a specified number of retry attempts and an incremental time interval between retries.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.Incremental.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.Incremental" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.Incremental.#ctor(System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.Incremental" /> class.
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="initialInterval">The initial interval that will apply for the first retry.</param>
            <param name="increment">
                The incremental time value that will be used for calculating the progressive delay between
                retries.
            </param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.Incremental.#ctor(System.String,System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.Incremental" /> class.
            </summary>
            <param name="name">The retry strategy name.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="initialInterval">The initial interval that will apply for the first retry.</param>
            <param name="increment">
                The incremental time value that will be used for calculating the progressive delay between
                retries.
            </param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.Incremental.#ctor(System.String,System.Int32,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.Incremental" /> class.
            </summary>
            <param name="name">The retry strategy name.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="initialInterval">The initial interval that will apply for the first retry.</param>
            <param name="increment">
                The incremental time value that will be used for calculating the progressive delay between
                retries.
            </param>
            <param name="firstFastRetry">
                a value indicating whether or not the very first retry attempt will be made immediately
                whereas the subsequent retries will remain subject to retry interval.
            </param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.FaultHandling.Strategies.Incremental.GetShouldRetry">
            <summary>
                Returns the corresponding ShouldRetry delegate.
            </summary>
            <returns>The ShouldRetry delegate.</returns>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.IDatabaseProviderMetadata.Id">
            <summary>
                Gets a unique identifier for this set of metadata used for filtering.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.IDatabaseProviderMetadata.SortOrder">
            <summary>
                Gets a value to determine display order and quick install priority.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.IDatabaseProviderMetadata.DisplayName">
            <summary>
                Gets a friendly name to describe the provider.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.IDatabaseProviderMetadata.DefaultDatabaseName">
            <summary>
                Gets the default database name for the provider.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.IDatabaseProviderMetadata.ProviderName">
            <summary>
                Gets the database factory provider name.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.IDatabaseProviderMetadata.SupportsQuickInstall">
            <summary>
                Gets a value indicating whether can be used for one click install.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.IDatabaseProviderMetadata.IsAvailable">
            <summary>
                Gets a value indicating whether should be available for selection.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.IDatabaseProviderMetadata.RequiresServer">
            <summary>
                Gets a value indicating whether the server/hostname field must be populated.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.IDatabaseProviderMetadata.ServerPlaceholder">
            <summary>
                Gets a value used as input placeholder for server/hostnmae field.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.IDatabaseProviderMetadata.RequiresCredentials">
            <summary>
                Gets a value indicating whether a username and password are required (in general) to connect to the database
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.IDatabaseProviderMetadata.SupportsIntegratedAuthentication">
            <summary>
                Gets a value indicating whether integrated authentication is supported (e.g. SQL Server &amp; Oracle).
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.IDatabaseProviderMetadata.RequiresConnectionTest">
            <summary>
                Gets a value indicating whether the connection should be tested before continuing install process.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.IDatabaseProviderMetadata.ForceCreateDatabase">
            <summary>
                Gets a value indicating to ignore the value of GlobalSettings.InstallMissingDatabase
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.IDatabaseProviderMetadata.CanRecognizeConnectionString(System.String)">
            <summary>
            Gets a value indicating whether this connections could have been build using <see cref="M:Umbraco.Cms.Infrastructure.Persistence.IDatabaseProviderMetadata.GenerateConnectionString(Umbraco.Cms.Core.Install.Models.DatabaseModel)"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.IDatabaseProviderMetadata.GenerateConnectionString(Umbraco.Cms.Core.Install.Models.DatabaseModel)">
            <summary>
                Creates a connection string for this provider.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.IScalarMapper">
            <summary>
                Provides a mapping function for <see cref="M:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabase.ExecuteScalar``1(System.String,System.Object[])" />
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.IScalarMapper.Map(System.Object)">
            <summary>
                Performs a mapping operation for a scalar value.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.ISqlContext">
            <summary>
                Specifies the Sql context.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.ISqlContext.SqlSyntax">
            <summary>
                Gets the Sql syntax provider.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.ISqlContext.DatabaseType">
            <summary>
                Gets the database type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.ISqlContext.Templates">
            <summary>
                Gets the Sql templates.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.ISqlContext.PocoDataFactory">
            <summary>
                Gets the Poco data factory.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.ISqlContext.Mappers">
            <summary>
                Gets the mappers.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.ISqlContext.Sql">
            <summary>
                Creates a new Sql expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.ISqlContext.Sql(System.String,System.Object[])">
            <summary>
                Creates a new Sql expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.ISqlContext.Query``1">
            <summary>
                Creates a new query expression.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabase.SqlContext">
            <summary>
                Gets the Sql context.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabase.InstanceId">
            <summary>
                Gets the database instance unique identifier as a string.
            </summary>
            <remarks>
                UmbracoDatabase returns the first eight digits of its unique Guid and, in some
                debug mode, the underlying database connection identifier (if any).
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabase.InTransaction">
            <summary>
                Gets a value indicating whether the database is currently in a transaction.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabase.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <returns>The number of rows affected.</returns>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabaseFactory">
            <summary>
                Creates and manages the "ambient" database.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabaseFactory.Configured">
            <summary>
                Gets a value indicating whether the database factory is configured, i.e. whether
                its connection string and provider name have been set. The factory may however not
                be initialized (see <see cref="P:Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabaseFactory.Initialized" />).
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabaseFactory.Initialized">
            <summary>
                Gets a value indicating whether the database factory is initialized, i.e. whether
                its internal state is ready and it has been possible to connect to the database.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabaseFactory.ConnectionString">
            <summary>
                Gets the connection string.
            </summary>
            <remarks>May return <c>null</c> if the database factory is not configured.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabaseFactory.ProviderName">
            <summary>
                Gets the provider name.
            </summary>
            <remarks>May return <c>null</c> if the database factory is not configured.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabaseFactory.CanConnect">
            <summary>
                Gets a value indicating whether the database factory is configured (see <see cref="P:Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabaseFactory.Configured" />),
                and it is possible to connect to the database. The factory may however not be initialized (see
                <see cref="P:Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabaseFactory.Initialized" />).
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabaseFactory.SqlContext">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.ISqlContext" />.
            </summary>
            <remarks>
                <para>Getting the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.ISqlContext" /> causes the factory to initialize if it is not already initialized.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabaseFactory.BulkSqlInsertProvider">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.IBulkSqlInsertProvider" />.
            </summary>
            <remarks>
                <para>
                    Getting the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.IBulkSqlInsertProvider" /> causes the factory to initialize if it is not already
                    initialized.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabaseFactory.CreateDatabase">
            <summary>
                Creates a new database.
            </summary>
            <remarks>
                <para>The new database must be disposed after being used.</para>
                <para>Creating a database causes the factory to initialize if it is not already initialized.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabaseFactory.Configure(Umbraco.Cms.Core.Configuration.Models.ConnectionStrings)">
            <summary>
                Configures the database factory.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabaseFactory.ConfigureForUpgrade">
            <summary>
                Configures the database factory for upgrades.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Mappers.AuditEntryMapper">
            <summary>
                Represents a mapper for audit entry entities.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Mappers.ConsentMapper">
            <summary>
                Represents a mapper for consent entities.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Mappers.ContentMapper">
            <summary>
                Represents a <see cref="T:Umbraco.Cms.Core.Models.Content" /> to DTO mapper used to translate the properties of the public api
                implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Mappers.ContentTypeMapper">
            <summary>
                Represents a <see cref="T:Umbraco.Cms.Core.Models.ContentType" /> to DTO mapper used to translate the properties of the public api
                implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Mappers.DataTypeMapper">
            <summary>
                Represents a <see cref="T:Umbraco.Cms.Core.Models.DataType" /> to DTO mapper used to translate the properties of the public api
                implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Mappers.DictionaryMapper">
            <summary>
                Represents a <see cref="T:Umbraco.Cms.Core.Models.DictionaryItem" /> to DTO mapper used to translate the properties of the public api
                implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Mappers.DictionaryTranslationMapper">
            <summary>
                Represents a <see cref="T:Umbraco.Cms.Core.Models.DictionaryTranslation" /> to DTO mapper used to translate the properties of the public api
                implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Mappers.LanguageMapper">
            <summary>
                Represents a <see cref="T:Umbraco.Cms.Core.Models.Language" /> to DTO mapper used to translate the properties of the public api
                implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Mappers.MapperCollection.Item(System.Type)">
            <summary>
                Returns a mapper for this type, throw an exception if not found
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Mappers.MapperForAttribute">
            <summary>
                An attribute used to decorate mappers to be associated with entities
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Mappers.MediaMapper">
            <summary>
                Represents a <see cref="T:Umbraco.Cms.Core.Models.Media" /> to DTO mapper used to translate the properties of the public api
                implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Mappers.MediaTypeMapper">
            <summary>
                Represents a <see cref="T:Umbraco.Cms.Core.Models.MediaType" /> to DTO mapper used to translate the properties of the public api
                implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Mappers.MemberMapper">
            <summary>
                Represents a <see cref="T:Umbraco.Cms.Core.Models.Member" /> to DTO mapper used to translate the properties of the public api
                implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Mappers.MemberTypeMapper">
            <summary>
                Represents a <see cref="T:Umbraco.Cms.Core.Models.MemberType" /> to DTO mapper used to translate the properties of the public api
                implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Mappers.NullableDateMapper">
            <summary>
                Extends NPoco default mapper and ensures that nullable dates are not saved to the database.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Mappers.PropertyGroupMapper">
            <summary>
                Represents a <see cref="T:Umbraco.Cms.Core.Models.PropertyGroup" /> to DTO mapper used to translate the properties of the public api
                implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Mappers.PropertyTypeMapper">
            <summary>
                Represents a <see cref="T:Umbraco.Cms.Core.Models.IPropertyType" /> to DTO mapper used to translate the properties of the public api
                implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Mappers.RelationMapper">
            <summary>
                Represents a <see cref="T:Umbraco.Cms.Core.Models.Relation" /> to DTO mapper used to translate the properties of the public api
                implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Mappers.RelationTypeMapper">
            <summary>
                Represents a <see cref="T:Umbraco.Cms.Core.Models.RelationType" /> to DTO mapper used to translate the properties of the public api
                implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Mappers.TagMapper">
            <summary>
                Represents a <see cref="T:Umbraco.Cms.Core.Models.Tag" /> to DTO mapper used to translate the properties of the public api
                implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Mappers.TemplateMapper">
            <summary>
                Represents a <see cref="T:Umbraco.Cms.Core.Models.Template" /> to DTO mapper used to translate the properties of the public api
                implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Mappers.UserGroupMapper">
            <summary>
                Represents a <see cref="T:Umbraco.Cms.Core.Models.Membership.UserGroup" /> to DTO mapper used to translate the properties of the public api
                implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Querying.CachedExpression">
            <summary>
                Represents an expression which caches the visitor's result.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Querying.CachedExpression.InnerExpression">
            <summary>
                Gets or sets the inner Expression.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Querying.CachedExpression.VisitResult">
            <summary>
                Gets or sets the compiled SQL statement output.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Querying.CachedExpression.Visited">
            <summary>
                Gets or sets a value indicating whether the cache Expression has been compiled already.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Querying.CachedExpression.Wrap(System.Linq.Expressions.Expression)">
            <summary>
                Replaces the inner expression.
            </summary>
            <param name="expression">expression.</param>
            <remarks>The new expression is assumed to have different parameter but produce the same SQL statement.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Querying.ExpressionVisitorBase">
            <summary>
                An expression tree parser to create SQL statements and SQL parameters based on a strongly typed expression.
            </summary>
            <remarks>This object is stateful and cannot be re-used to parse an expression.</remarks>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Persistence.Querying.ExpressionVisitorBase.SqlParameters">
            <summary>
                Gets the list of SQL parameters.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Querying.ExpressionVisitorBase.Visited">
            <summary>
                Gets or sets a value indicating whether the visited expression has been visited already,
                in which case visiting will just populate the SQL parameters.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Querying.ExpressionVisitorBase.SqlSyntax">
            <summary>
                Gets or sets the SQL syntax provider for the current database.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Querying.ExpressionVisitorBase.GetSqlParameters">
            <summary>
                Gets the SQL parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Querying.ExpressionVisitorBase.Visit(System.Linq.Expressions.Expression)">
            <summary>
                Visits the expression and produces the corresponding SQL statement.
            </summary>
            <param name="expression">The expression</param>
            <returns>The SQL statement corresponding to the expression.</returns>
            <remarks>Also populates the SQL parameters.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Querying.ModelToSqlExpressionVisitor`1">
            <summary>
                An expression tree parser to create SQL statements and SQL parameters based on a strongly typed expression,
                based on Umbraco's business logic models.
            </summary>
            <remarks>This object is stateful and cannot be re-used to parse an expression.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Querying.ModelToSqlExpressionVisitor`1.EndsWithConstant(System.Linq.Expressions.MemberExpression)">
            <summary>
                Determines if the MemberExpression ends in a Constant value
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Querying.PocoToSqlExpressionVisitor`1">
            <summary>
                Represents an expression tree parser used to turn strongly typed expressions into SQL statements.
            </summary>
            <typeparam name="TDto">The type of the DTO.</typeparam>
            <remarks>This visitor is stateful and cannot be reused.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Querying.PocoToSqlExpressionVisitor`2">
            <summary>
                Represents an expression tree parser used to turn strongly typed expressions into SQL statements.
            </summary>
            <typeparam name="TDto1">The type of DTO 1.</typeparam>
            <typeparam name="TDto2">The type of DTO 2.</typeparam>
            <remarks>This visitor is stateful and cannot be reused.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Querying.PocoToSqlExpressionVisitor`3">
            <summary>
                Represents an expression tree parser used to turn strongly typed expressions into SQL statements.
            </summary>
            <typeparam name="TDto1">The type of DTO 1.</typeparam>
            <typeparam name="TDto2">The type of DTO 2.</typeparam>
            <typeparam name="TDto3">The type of DTO 3.</typeparam>
            <remarks>This visitor is stateful and cannot be reused.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Querying.Query`1">
            <summary>
                Represents a query builder.
            </summary>
            <remarks>A query builder translates Linq queries into Sql queries.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Querying.Query`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                Adds a where clause to the query.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Querying.Query`1.WhereIn(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.IEnumerable)">
            <summary>
                Adds a where-in clause to the query.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Querying.Query`1.WhereAny(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}})">
            <summary>
                Adds a set of OR-ed where clauses to the query.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Querying.Query`1.GetWhereClauses">
            <summary>
                Returns all translated where clauses and their sql parameters
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Querying.QueryExtensions">
            <summary>
                SD: This is a horrible hack but unless we break compatibility with anyone who's actually implemented IQuery{T}
                there's not much we can do.
                The IQuery{T} interface is useless without having a GetWhereClauses method and cannot be used for tests.
                We have to wait till v8 to make this change I suppose.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Querying.QueryExtensions.GetWhereClauses``1(Umbraco.Cms.Core.Persistence.Querying.IQuery{``0})">
            <summary>
                Returns all translated where clauses and their sql parameters
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Querying.SqlTranslator`1">
            <summary>
                Represents the Sql Translator for translating a IQuery object to Sql
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.IEntityRepositoryExtended.GetPagedResultsByQuery(Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.Entities.IUmbracoEntity},System.Guid[],System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.Entities.IUmbracoEntity},Umbraco.Cms.Core.Services.Ordering,System.Action{NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext}})">
            <summary>
                Gets paged entities for a query and a subset of object types
            </summary>
            <param name="query"></param>
            <param name="objectTypes"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="filter"></param>
            <param name="ordering"></param>
            <param name="sqlCustomization">
                A callback providing the ability to customize the generated SQL used to retrieve entities
            </param>
            <returns>
                A collection of mixed entity types which would be of type <see cref="T:Umbraco.Cms.Core.Models.Entities.IEntitySlim" />,
                <see cref="T:Umbraco.Cms.Core.Models.Entities.IDocumentEntitySlim" />, <see cref="T:Umbraco.Cms.Core.Models.Entities.IMediaEntitySlim" />,
                <see cref="T:Umbraco.Cms.Core.Models.Entities.IMemberEntitySlim" />
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.AuditEntryRepository">
            <summary>
                Represents the NPoco implementation of <see cref="T:Umbraco.Cms.Core.Persistence.Repositories.IAuditEntryRepository" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.AuditEntryRepository.#ctor(Umbraco.Cms.Infrastructure.Scoping.IScopeAccessor,Umbraco.Cms.Core.Cache.AppCaches,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.AuditEntryRepository})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.AuditEntryRepository" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.AuditEntryRepository.GetPage(System.Int64,System.Int32,System.Int64@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.AuditEntryRepository.IsAvailable">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.AuditEntryRepository.PerformGet(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.AuditEntryRepository.PerformGetAll(System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.AuditEntryRepository.PerformGetByQuery(Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IAuditEntry})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.AuditEntryRepository.GetBaseQuery(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.AuditEntryRepository.GetBaseWhereClause">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.AuditEntryRepository.GetDeleteClauses">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.AuditEntryRepository.PersistNewItem(Umbraco.Cms.Core.Models.IAuditEntry)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.AuditEntryRepository.PersistUpdatedItem(Umbraco.Cms.Core.Models.IAuditEntry)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.AuditRepository.GetPagedResultsByQuery(Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IAuditItem},System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Direction,Umbraco.Cms.Core.Models.AuditType[],Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IAuditItem})">
            <summary>
                Return the audit items as paged result
            </summary>
            <param name="query">
                The query coming from the service
            </param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="orderDirection"></param>
            <param name="auditTypeFilter">
                Since we currently do not have enum support with our expression parser, we cannot query on AuditType in the query
                or the custom filter
                so we need to do that here
            </param>
            <param name="customFilter">
                A user supplied custom filter
            </param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.CacheInstructionRepository">
            <summary>
                Represents the NPoco implementation of <see cref="T:Umbraco.Cms.Core.Persistence.Repositories.ICacheInstructionRepository" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.CacheInstructionRepository.CountAll">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.CacheInstructionRepository.CountPendingInstructions(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.CacheInstructionRepository.GetMaxId">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.CacheInstructionRepository.Exists(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.CacheInstructionRepository.Add(Umbraco.Cms.Core.Models.CacheInstruction)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.CacheInstructionRepository.GetPendingInstructions(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.CacheInstructionRepository.DeleteInstructionsOlderThan(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ConsentRepository">
            <summary>
                Represents the NPoco implementation of <see cref="T:Umbraco.Cms.Core.Persistence.Repositories.IConsentRepository" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ConsentRepository.#ctor(Umbraco.Cms.Infrastructure.Scoping.IScopeAccessor,Umbraco.Cms.Core.Cache.AppCaches,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ConsentRepository})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ConsentRepository" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ConsentRepository.ClearCurrent(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ConsentRepository.PerformGet(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ConsentRepository.PerformGetAll(System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ConsentRepository.PerformGetByQuery(Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IConsent})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ConsentRepository.GetBaseQuery(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ConsentRepository.GetBaseWhereClause">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ConsentRepository.GetDeleteClauses">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ConsentRepository.PersistNewItem(Umbraco.Cms.Core.Models.IConsent)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ConsentRepository.PersistUpdatedItem(Umbraco.Cms.Core.Models.IConsent)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentNavigationRepository.GetContentNodesByObjectType(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentNavigationRepository.GetTrashedContentNodesByObjectType(System.Guid)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentRepositoryBase.ThrowOnWarning">
            <summary>
            This is used for unit tests ONLY
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentRepositoryBase`3.#ctor(Umbraco.Cms.Infrastructure.Scoping.IScopeAccessor,Umbraco.Cms.Core.Cache.AppCaches,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepositoryBase{`0,`1}},Umbraco.Cms.Core.Persistence.Repositories.ILanguageRepository,Umbraco.Cms.Core.Persistence.Repositories.IRelationRepository,Umbraco.Cms.Core.Persistence.Repositories.IRelationTypeRepository,Umbraco.Cms.Core.PropertyEditors.PropertyEditorCollection,Umbraco.Cms.Core.PropertyEditors.DataValueReferenceFactoryCollection,Umbraco.Cms.Core.Services.IDataTypeService,Umbraco.Cms.Core.Events.IEventAggregator)">
             <summary>
            
             </summary>
             <param name="scopeAccessor"></param>
             <param name="cache"></param>
             <param name="logger"></param>
             <param name="languageRepository"></param>
             <param name="relationRepository"></param>
             <param name="relationTypeRepository"></param>
             <param name="dataValueReferenceFactories"></param>
             <param name="dataTypeService"></param>
             <param name="eventAggregator"></param>
             <param name="propertyEditors">
                 Lazy property value collection - must be lazy because we have a circular dependency since some property editors require services, yet these services require property editors
             </param>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentRepositoryBase`3.NodeObjectTypeId">
            <summary>
            Gets the node object type for the repository's entity
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentRepositoryBase`3.CountDescendants(System.Int32,System.String)">
            <summary>
            Count descendants of an item.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentRepositoryBase`3.CountChildren(System.Int32,System.String)">
            <summary>
            Count children of an item.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentRepositoryBase`3.Count(System.String)">
            <summary>
            Count items.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentRepositoryBase`3.SetEntityTags(Umbraco.Cms.Core.Models.IContentBase,Umbraco.Cms.Core.Persistence.Repositories.ITagRepository,Umbraco.Cms.Core.Serialization.IJsonSerializer)">
            <summary>
            Updates tags for an item.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentRepositoryBase`3.ClearEntityTags(Umbraco.Cms.Core.Models.IContentBase,Umbraco.Cms.Core.Persistence.Repositories.ITagRepository)">
            <summary>
            Clears tags for an item.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentRepositoryBase`3.OnUowRefreshedEntity(Umbraco.Cms.Core.Notifications.INotification)">
            <summary>
            Publishes a notification, used to publish <see cref="T:Umbraco.Cms.Core.Notifications.EntityRefreshNotification`1"/> for caching purposes.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentRepositoryBase`3.TempContent.Id">
            <summary>
            Gets or sets the identifier of the content.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentRepositoryBase`3.TempContent.VersionId">
            <summary>
            Gets or sets the version identifier of the content.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentRepositoryBase`3.TempContent.PublishedVersionId">
            <summary>
            Gets or sets the published version identifier of the content.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentRepositoryBase`3.TempContent.ContentType">
            <summary>
            Gets or sets the content type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentRepositoryBase`3.TempContent.Template1Id">
            <summary>
            Gets or sets the identifier of the template 1 of the content.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentRepositoryBase`3.TempContent.Template2Id">
            <summary>
            Gets or sets the identifier of the template 2 of the content.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentRepositoryBase`3.TempContent`1.Content">
            <summary>
            Gets or sets the associated actual content.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentRepositoryBase`3.GetBaseQuery(Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.QueryType)">
            <summary>
            For Paging, repositories must support returning different query for the query type specified
            </summary>
            <param name="queryType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentRepositoryBase`3.InsertPropertyValues(`1,System.Int32,System.Boolean@,System.Collections.Generic.HashSet{System.String}@)">
            <summary>
            Inserts property values for the content entity
            </summary>
            <param name="entity"></param>
            <param name="publishedVersionId"></param>
            <param name="edited"></param>
            <param name="editedCultures"></param>
            <remarks>
            Used when creating a new entity
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentRepositoryBase`3.ReplacePropertyValues(`1,System.Int32,System.Int32,System.Boolean@,System.Collections.Generic.HashSet{System.String}@)">
            <summary>
            Used to atomically replace the property values for the entity version specified
            </summary>
            <param name="entity"></param>
            <param name="versionId"></param>
            <param name="publishedVersionId"></param>
            <param name="edited"></param>
            <param name="editedCultures"></param>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeCommonRepository">
            <summary>
                Implements <see cref="T:Umbraco.Cms.Core.Persistence.Repositories.IContentTypeCommonRepository" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeCommonRepository.#ctor(Umbraco.Cms.Infrastructure.Scoping.IScopeAccessor,Umbraco.Cms.Core.Persistence.Repositories.ITemplateRepository,Umbraco.Cms.Core.Cache.AppCaches,Umbraco.Cms.Core.Strings.IShortStringHelper)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Persistence.Repositories.IContentTypeCommonRepository" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeCommonRepository.GetAllTypes">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeCommonRepository.ClearCache">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeRepository">
            <summary>
                Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Cms.Core.Models.IContentType" />
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeRepository.GetByQuery(Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.PropertyType})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeRepository.GetAllPropertyTypeAliases">
            <summary>
                Gets all property type aliases.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeRepository.GetAllContentTypeAliases(System.Guid[])">
            <summary>
                Gets all content type aliases
            </summary>
            <param name="objectTypes">
                If this list is empty, it will return all content type aliases for media, members and content, otherwise
                it will only return content type aliases for the object types specified
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeRepository.PersistDeletedItem(Umbraco.Cms.Core.Models.IContentType)">
            <summary>
                Deletes a content type
            </summary>
            <param name="entity"></param>
            <remarks>
                First checks for children and removes those first
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1">
            <summary>
                Represent an abstract Repository for ContentType based repositories
            </summary>
            <remarks>Exposes shared functionality</remarks>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.NodeObjectTypeId">
            <summary>
                Gets the node object type for the repository's entity
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.Get(System.Guid)">
            <summary>
                Gets an Entity by Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.Umbraco#Cms#Core#Persistence#IReadRepository{System#Guid,TEntity}#GetMany(System.Guid[])">
            <summary>
                Gets all entities of the specified type
            </summary>
            <param name="ids"></param>
            <returns></returns>
            <remarks>
                Ensure explicit implementation, we don't want to have any accidental calls to this since it is essentially the same
                signature as the main GetAll when there are no parameters
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.Exists(System.Guid)">
            <summary>
                Boolean indicating whether an Entity with the specified Id exists
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.Get(System.String)">
            <summary>
                Gets an Entity by alias
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.CorrectPropertyTypeVariations(Umbraco.Cms.Core.Models.IContentTypeComposition)">
            <summary>
                Corrects the property type variations for the given entity
                to make sure the property type variation is compatible with the
                variation set on the entity itself.
            </summary>
            <param name="entity">Entity to correct properties for</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.ValidateVariations(Umbraco.Cms.Core.Models.IContentTypeComposition)">
            <summary>
                Ensures that no property types are flagged for a variance that is not supported by the content type itself
            </summary>
            <param name="entity">The entity for which the property types will be validated</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.Clear301Redirects(Umbraco.Cms.Core.Models.IContentTypeComposition)">
            <summary>
                Clear any redirects associated with content for a content type
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.ClearScheduledPublishing(Umbraco.Cms.Core.Models.IContentTypeComposition)">
            <summary>
                Clear any scheduled publishing associated with content for a content type
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.GetDefaultLanguageId">
            <summary>
                Gets the default language identifier.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.MovePropertyTypeVariantData(System.Collections.Generic.IDictionary{System.Int32,System.ValueTuple{Umbraco.Cms.Core.Models.ContentVariation,Umbraco.Cms.Core.Models.ContentVariation}},System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IContentTypeComposition})">
            <summary>
                Moves variant data for property type variation changes.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.MoveContentTypeVariantData(Umbraco.Cms.Core.Models.IContentTypeComposition,Umbraco.Cms.Core.Models.ContentVariation,Umbraco.Cms.Core.Models.ContentVariation)">
            <summary>
                Moves variant data for a content type variation change.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.CopyTagData(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IReadOnlyCollection{System.Int32},System.Collections.Generic.IReadOnlyCollection{System.Int32})">
            
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.CopyPropertyData(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IReadOnlyCollection{System.Int32},System.Collections.Generic.IReadOnlyCollection{System.Int32})">
            <summary>
                Copies property data from one language to another.
            </summary>
            <param name="sourceLanguageId">The source language (can be null ie invariant).</param>
            <param name="targetLanguageId">The target language (can be null ie invariant)</param>
            <param name="propertyTypeIds">The property type identifiers.</param>
            <param name="contentTypeIds">The content type identifiers.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.RenormalizeDocumentEditedFlags(System.Collections.Generic.IReadOnlyCollection{System.Int32},System.Collections.Generic.IReadOnlyCollection{System.Int32})">
             <summary>
                 Re-normalizes the edited value in the umbracoDocumentCultureVariation and umbracoDocument table when variations are
                 changed
             </summary>
             <param name="propertyTypeIds"></param>
             <param name="contentTypeIds"></param>
             <remarks>
                 If this is not done, then in some cases the "edited" value for a particular culture for a document will remain true
                 when it should be false
                 if the property was changed to invariant. In order to do this we need to recalculate this value based on the values
                 stored for each property, culture and current/published version.
            
                 Some of the sql statements in this function have a tendency to take a lot of parameters (nodeIds)
                 as the WhereIn Npoco method translates all the nodeIds being passed in as parameters when using the SqlClient provider.
                 this results in to many parameters (>2100) error => We need to batch the calls
             </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.AssignDataTypeFromPropertyEditor(Umbraco.Cms.Core.Models.IPropertyType)">
            <summary>
                Try to set the data type id based on its ControlId
            </summary>
            <param name="propertyType"></param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1.HasContentNodes(System.Int32)">
            <summary>
                Returns true or false depending on whether content nodes have been created based on the provided content type id.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.CreatedPackageSchemaRepository">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.CreatedPackageSchemaRepository.#ctor(Umbraco.Cms.Core.Hosting.IHostingEnvironment,Umbraco.Cms.Core.IO.FileSystems,Umbraco.Cms.Core.Services.IEntityXmlSerializer,Umbraco.Cms.Core.Services.IDataTypeService,Umbraco.Cms.Core.Services.IFileService,Umbraco.Cms.Core.Services.IMediaService,Umbraco.Cms.Core.Services.IMediaTypeService,Umbraco.Cms.Core.Services.IContentService,Umbraco.Cms.Core.IO.MediaFileManager,Umbraco.Cms.Core.Services.IContentTypeService,Umbraco.Cms.Infrastructure.Scoping.IScopeAccessor,Umbraco.Cms.Core.Services.ITemplateService,Umbraco.Cms.Core.Services.IDictionaryItemService,Umbraco.Cms.Core.Services.ILanguageService,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.CreatedPackageSchemaRepository" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.CreatedPackageSchemaRepository.GetStylesheetXml(System.String,System.Boolean)">
            <summary>
                Converts a umbraco stylesheet to a package xml node
            </summary>
            <param name="path">The path of the stylesheet.</param>
            <param name="includeProperties">if set to <c>true</c> [include properties].</param>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.DataTypeRepository">
            <summary>
                Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Cms.Core.Models.DataType" />
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.DictionaryRepository">
            <summary>
                Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Cms.Core.Models.DictionaryItem" />
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.DocumentBlueprintRepository">
            <summary>
                Override the base content repository so we can change the node object type
            </summary>
            <remarks>
                It would be nicer if we could separate most of this down into a smaller version of the ContentRepository class,
                however to do that
                requires quite a lot of work since we'd need to re-organize the inheritance quite a lot or create a helper class to
                perform a lot of the underlying logic.
                TODO: Create a helper method to contain most of the underlying logic for the ContentRepository
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.DocumentRepository">
            <summary>
                Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Cms.Core.Models.IContent" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.DocumentRepository.#ctor(Umbraco.Cms.Infrastructure.Scoping.IScopeAccessor,Umbraco.Cms.Core.Cache.AppCaches,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.DocumentRepository},Microsoft.Extensions.Logging.ILoggerFactory,Umbraco.Cms.Core.Persistence.Repositories.IContentTypeRepository,Umbraco.Cms.Core.Persistence.Repositories.ITemplateRepository,Umbraco.Cms.Core.Persistence.Repositories.ITagRepository,Umbraco.Cms.Core.Persistence.Repositories.ILanguageRepository,Umbraco.Cms.Core.Persistence.Repositories.IRelationRepository,Umbraco.Cms.Core.Persistence.Repositories.IRelationTypeRepository,Umbraco.Cms.Core.PropertyEditors.PropertyEditorCollection,Umbraco.Cms.Core.PropertyEditors.DataValueReferenceFactoryCollection,Umbraco.Cms.Core.Services.IDataTypeService,Umbraco.Cms.Core.Serialization.IJsonSerializer,Umbraco.Cms.Core.Events.IEventAggregator)">
            <summary>
                Constructor
            </summary>
            <param name="scopeAccessor"></param>
            <param name="appCaches"></param>
            <param name="logger"></param>
            <param name="loggerFactory"></param>
            <param name="contentTypeRepository"></param>
            <param name="templateRepository"></param>
            <param name="tagRepository"></param>
            <param name="languageRepository"></param>
            <param name="relationRepository"></param>
            <param name="relationTypeRepository"></param>
            <param name="dataValueReferenceFactories"></param>
            <param name="dataTypeService"></param>
            <param name="serializer"></param>
            <param name="eventAggregator"></param>
            <param name="propertyEditors">
                Lazy property value collection - must be lazy because we have a circular dependency since some property editors
                require services, yet these services require property editors
            </param>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.DocumentRepository.EnsureUniqueNaming">
            <summary>
                Default is to always ensure all documents have unique names
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.DocumentRepository.GetContentSchedule(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.DocumentRepository.PersistContentSchedule(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Models.ContentScheduleCollection)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.DocumentRepository.AssignEntityPermission(Umbraco.Cms.Core.Models.IContent,System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Assigns a single permission to the current content item for the specified group ids
            </summary>
            <param name="entity"></param>
            <param name="permission"></param>
            <param name="groupIds"></param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.DocumentRepository.AddOrUpdatePermissions(Umbraco.Cms.Core.Models.Membership.ContentPermissionSet)">
            <summary>
                Used to add/update a permission for a content item
            </summary>
            <param name="permission"></param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.DocumentRepository.GetPage(Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IContent},System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IContent},Umbraco.Cms.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.DocumentRepository.ClearSchedule(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.DocumentRepository.ClearSchedule(System.DateTime,Umbraco.Cms.Core.Models.ContentScheduleAction)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.DocumentRepository.GetContentForRelease(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.DocumentRepository.GetContentForExpiration(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.DocumentVersionRepository.GetDocumentVersionsEligibleForCleanup">
            <inheritdoc />
            <remarks>
                Never includes current draft version. <br />
                Never includes current published version.<br />
                Never includes versions marked as "preventCleanup".<br />
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.DocumentVersionRepository.GetCleanupPolicies">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.DocumentVersionRepository.GetPagedItemsByContentId(System.Int32,System.Int64,System.Int32,System.Int64@,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.DocumentVersionRepository.DeleteVersions(System.Collections.Generic.IEnumerable{System.Int32})">
            <inheritdoc />
            <remarks>
                Deletes in batches of <see cref="F:Umbraco.Cms.Core.Constants.Sql.MaxParameterCount" />
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.DocumentVersionRepository.SetPreventCleanup(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.DocumentVersionRepository.Get(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityContainerRepository">
            <summary>
                An internal repository for managing entity containers such as doc type, media type, data type containers.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepository">
            <summary>
                Represents the EntityRepository used to query entity objects.
            </summary>
            <remarks>
                <para>Limited to objects that have a corresponding node (in umbracoNode table).</para>
                <para>Returns <see cref="T:Umbraco.Cms.Core.Models.Entities.IEntitySlim" /> objects, i.e. lightweight representation of entities.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepository.Exists(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepository.GenericContentEntityDto">
            <summary>
                The DTO used to fetch results for a generic content item which could be either a document, media or a member
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepository.DocumentEntityDto">
            <summary>
                The DTO used to fetch results for a document item with its variation info
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepository.MediaEntityDto">
            <summary>
                The DTO used to fetch results for a media item with its media path info
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepository.MemberEntityDto">
            <summary>
                The DTO used to fetch results for a member item
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepository.BaseDto">
            <summary>
                the DTO corresponding to fields selected by GetBase
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepositoryBase`2">
            <summary>
                Provides a base class to all <see cref="T:Umbraco.Cms.Core.Models.Entities.IEntity" /> based repositories.
            </summary>
            <typeparam name="TId">The type of the entity's unique identifier.</typeparam>
            <typeparam name="TEntity">The type of the entity managed by this repository.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepositoryBase`2.#ctor(Umbraco.Cms.Infrastructure.Scoping.IScopeAccessor,Umbraco.Cms.Core.Cache.AppCaches,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepositoryBase{`0,`1}})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepositoryBase`2" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepositoryBase`2.Logger">
            <summary>
                Gets the logger
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepositoryBase`2.GlobalIsolatedCache">
            <summary>
                Gets the isolated cache for the <typeparamref name="TEntity"/>
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepositoryBase`2.IsolatedCache">
            <summary>
                Gets the isolated cache.
            </summary>
            <remarks>Depends on the ambient scope cache mode.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepositoryBase`2.DefaultOptions">
            <summary>
                Gets the default <see cref="T:Umbraco.Cms.Core.Cache.RepositoryCachePolicyOptions" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepositoryBase`2.CachePolicy">
            <summary>
                Gets the repository cache policy
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepositoryBase`2.Save(`1)">
            <summary>
                Adds or Updates an entity of type TEntity
            </summary>
            <remarks>This method is backed by an <see cref="T:Umbraco.Cms.Core.Cache.IAppPolicyCache" /> cache</remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepositoryBase`2.Delete(`1)">
            <summary>
                Deletes the passed in entity
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepositoryBase`2.Get(`0)">
            <summary>
                Gets an entity by the passed in Id utilizing the repository's cache policy
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepositoryBase`2.GetMany(`0[])">
            <summary>
                Gets all entities of type TEntity or a list according to the passed in Ids
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepositoryBase`2.Get(Umbraco.Cms.Core.Persistence.Querying.IQuery{`1})">
            <summary>
                Gets a list of entities by the passed in query
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepositoryBase`2.Exists(`0)">
            <summary>
                Returns a boolean indicating whether an entity with the passed Id exists
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepositoryBase`2.Count(Umbraco.Cms.Core.Persistence.Querying.IQuery{`1})">
            <summary>
                Returns an integer with the count of entities found with the passed in query
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepositoryBase`2.GetEntityId(`1)">
            <summary>
                Get the entity id for the <typeparamref name="TEntity"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepositoryBase`2.CreateCachePolicy">
            <summary>
                Create the repository cache policy
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ExternalLoginRepository.Get(Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Security.IIdentityUserToken})">
            <summary>
                Query for user tokens
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ExternalLoginRepository.Count(Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Security.IIdentityUserToken})">
            <summary>
                Count for user tokens
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ExternalLoginRepository.DeleteUserLogins(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ExternalLoginRepository.DeleteUserLoginsForRemovedProviders(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ExternalLoginRepository.Save(System.Guid,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Security.IExternalLogin})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ExternalLoginRepository.Save(System.Guid,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Security.IExternalLoginToken})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.FileRepository`2.GetContentStream(System.String)">
            <summary>
                Gets a stream that is used to write to the file
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.FileRepository`2.FindAllFiles(System.String,System.String)">
            <summary>
                Returns all files in the file system
            </summary>
            <param name="path"></param>
            <param name="filter"></param>
            <returns>
                Returns a list of all files with their paths. For example:
                \hello.txt
                \folder1\test.txt
                \folder1\blah.csv
                \folder1\folder2\blahhhhh.svg
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.KeyValueRepository.FindByKeyPrefix(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.LanguageRepository">
            <summary>
                Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Cms.Core.Models.Language" />
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.MediaRepository">
            <summary>
                Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Cms.Core.Models.IMedia" />
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.MediaRepository.GetPage(Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IMedia},System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IMedia},Umbraco.Cms.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.MediaTypeRepository">
            <summary>
                Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Cms.Core.Models.IMediaType" />
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.MemberRepository">
            <summary>
                Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Cms.Core.Models.IMember" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.MemberRepository.DefaultPasswordConfigJson">
            <summary>
                Returns a serialized dictionary of the password configuration that is stored against the member in the database
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.MemberRepository.GetByMemberGroup(System.String)">
            <summary>
                Get all members in a specific group
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.MemberRepository.GetPage(Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IMember},System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IMember},Umbraco.Cms.Core.Services.Ordering)">
            <summary>
                Gets paged member results.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.MemberTypeContainerRepository">
            <summary>
            A no-op implementation of <see cref="T:Umbraco.Cms.Core.Persistence.Repositories.IMemberTypeContainerRepository"/>, as containers aren't supported for members.
            </summary>
            <remarks>
            Introduced to avoid inconsistencies with nullability of dependencies for type repositories for content, media and members.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.MemberTypeRepository">
            <summary>
                Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Cms.Core.Models.IMemberType" />
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.MemberTypeRepository.CreatePropertyType(System.String,Umbraco.Cms.Core.Models.ValueStorageType,System.String)">
            <summary>
                Override so we can specify explicit db type's on any property types that are built-in.
            </summary>
            <param name="propertyEditorAlias"></param>
            <param name="storageType"></param>
            <param name="propertyTypeAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.MemberTypeRepository.EnsureExplicitDataTypeForBuiltInProperties(Umbraco.Cms.Core.Models.IContentTypeBase)">
            <summary>
                Ensure that all the built-in membership provider properties have their correct data type
                and property editors assigned. This occurs prior to saving so that the correct values are persisted.
            </summary>
            <param name="memberType"></param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.NodeCountRepository.GetNodeCount(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.PartialViewRepository.GetContentStream(System.String)">
            <summary>
                Gets a stream that is used to write to the file
            </summary>
            <param name="content"></param>
            <returns></returns>
            <remarks>
                This ensures the stream includes a utf8 BOM
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.PermissionRepository`1">
            <summary>
                A (sub) repository that exposes functionality to modify assigned permissions to a node
            </summary>
            <typeparam name="TEntity"></typeparam>
            <remarks>
                This repo implements the base <see cref="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.EntityRepositoryBase`2" /> class so that permissions can be
                queued to be persisted
                like the normal repository pattern but the standard repository Get commands don't apply and will throw
                <see cref="T:System.NotImplementedException" />
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.PermissionRepository`1.GetPermissionsForEntities(System.Int32[],System.Int32[])">
            <summary>
                Returns explicitly defined permissions for a user group for any number of nodes
            </summary>
            <param name="userGroupIds">
                The group ids to lookup permissions for
            </param>
            <param name="entityIds"></param>
            <returns></returns>
            <remarks>
                This method will not support passing in more than 2000 group IDs when also passing in entity IDs.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.PermissionRepository`1.GetPermissionsForEntities(System.Int32[])">
            <summary>
                Returns permissions directly assigned to the content items for all user groups
            </summary>
            <param name="entityIds"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.PermissionRepository`1.GetPermissionsForEntity(System.Int32)">
            <summary>
                Returns permissions directly assigned to the content item for all user groups
            </summary>
            <param name="entityId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.PermissionRepository`1.ReplacePermissions(System.Int32,System.Collections.Generic.ISet{System.String},System.Int32[])">
            <summary>
                Assigns the same permission set for a single group to any number of entities
            </summary>
            <param name="groupId"></param>
            <param name="permissions">The permissions to assign or null to remove the connection between group and entityIds</param>
            <param name="entityIds"></param>
            <remarks>
                This will first clear the permissions for this user and entities and recreate them
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.PermissionRepository`1.AssignPermission(System.Int32,System.String,System.Int32[])">
            <summary>
                Assigns one permission for a user to many entities
            </summary>
            <param name="groupId"></param>
            <param name="permission"></param>
            <param name="entityIds"></param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.PermissionRepository`1.AssignEntityPermission(`0,System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Assigns one permission to an entity for multiple groups
            </summary>
            <param name="entity"></param>
            <param name="permission"></param>
            <param name="groupIds"></param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.PermissionRepository`1.ReplaceEntityPermissions(Umbraco.Cms.Core.Models.Membership.EntityPermissionSet)">
            <summary>
                Assigns permissions to an entity for multiple group/permission entries
            </summary>
            <param name="permissionSet">
            </param>
            <remarks>
                This will first clear the permissions for this entity then re-create them
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.PermissionRepository`1.PersistNewItem(Umbraco.Cms.Core.Models.Membership.ContentPermissionSet)">
            <summary>
                Used to add or update entity permissions during a content item being updated
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.PermissionRepository`1.PersistUpdatedItem(Umbraco.Cms.Core.Models.Membership.ContentPermissionSet)">
            <summary>
                Used to add or update entity permissions during a content item being updated
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.QueryType">
            <summary>
                Specifies the type of base query.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.QueryType.Single">
            <summary>
                Get one single complete item.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.QueryType.Many">
            <summary>
                Get many complete items.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.QueryType.Ids">
            <summary>
                Get item identifiers only.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.QueryType.Count">
            <summary>
                Count items.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.RelationRepository">
            <summary>
                Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Cms.Core.Models.Relation" />
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.RelationRepository.SqlJoinRelations(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext})">
            <summary>
                Used for joining the entity query with relations for the paging methods
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.RelationRepository.PopulateObjectTypes(Umbraco.Cms.Core.Models.IRelation[])">
            <summary>
                Used to populate the object types after insert/update
            </summary>
            <param name="entities"></param>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.RelationTypeRepository">
            <summary>
                Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Cms.Core.Models.RelationType" />
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.RepositoryBase">
            <summary>
                Base repository class for all <see cref="T:Umbraco.Cms.Core.Persistence.IRepository" /> instances
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.RepositoryBase.#ctor(Umbraco.Cms.Infrastructure.Scoping.IScopeAccessor,Umbraco.Cms.Core.Cache.AppCaches)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.RepositoryBase" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.RepositoryBase.AppCaches">
            <summary>
                Gets the <see cref="P:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.RepositoryBase.AppCaches" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.RepositoryBase.ScopeAccessor">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Infrastructure.Scoping.IScopeAccessor" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.RepositoryBase.AmbientScope">
            <summary>
                Gets the AmbientScope
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.RepositoryBase.Database">
            <summary>
                Gets the repository's database.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.RepositoryBase.SqlContext">
            <summary>
                Gets the Sql context.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.RepositoryBase.SqlSyntax">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.SqlSyntax.ISqlSyntaxProvider" />
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.RepositoryBase.Sql">
            <summary>
                Creates an<see cref="T:NPoco.Sql`1" /> expression
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.RepositoryBase.Sql(System.String,System.Object[])">
            <summary>
                Creates a <see cref="T:NPoco.Sql`1" /> expression
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.RepositoryBase.Query``1">
            <summary>
                Creates a new query expression
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.ScriptRepository">
            <summary>
                Represents the Script Repository
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.SimpleGetRepository`3">
            <summary>
                Simple abstract ReadOnly repository used to simply have PerformGet and PeformGetAll with an underlying cache
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.StylesheetRepository">
            <summary>
                Represents the Stylesheet Repository
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TagRepository.PerformGet(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TagRepository.PerformGetAll(System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TagRepository.PerformGetByQuery(Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.ITag})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TagRepository.GetBaseQuery(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TagRepository.GetBaseWhereClause">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TagRepository.GetDeleteClauses">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TagRepository.PersistNewItem(Umbraco.Cms.Core.Models.ITag)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TagRepository.PersistUpdatedItem(Umbraco.Cms.Core.Models.ITag)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TagRepository.Assign(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.ITag},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TagRepository.Remove(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.ITag})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TagRepository.RemoveAll(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TagRepository.RemoveAll(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TagRepository.GetTaggedEntityByKey(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TagRepository.GetTaggedEntityById(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TagRepository.GetTaggedEntitiesByTagGroup(Umbraco.Cms.Core.Models.TaggableObjectTypes,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TagRepository.GetTaggedEntitiesByTag(Umbraco.Cms.Core.Models.TaggableObjectTypes,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TagRepository.GetTagsForEntityType(Umbraco.Cms.Core.Models.TaggableObjectTypes,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TagRepository.GetTagsForEntity(System.Int32,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TagRepository.GetTagsForEntity(System.Guid,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TagRepository.GetTagsForProperty(System.Int32,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TagRepository.GetTagsForProperty(System.Guid,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TemplateRepository">
            <summary>
                Represents the Template Repository
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TemplateRepository.MapFromDto(Umbraco.Cms.Infrastructure.Persistence.Dtos.TemplateDto,Umbraco.Cms.Core.Models.Entities.IUmbracoEntity[])">
            <summary>
                Maps from a dto to an ITemplate
            </summary>
            <param name="dto"></param>
            <param name="axisDefinitions">
                This is a collection of template definitions ... either all templates, or the collection of child templates and
                it's parent template
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TemplateRepository.EnsureValidAlias(Umbraco.Cms.Core.Models.ITemplate)">
            <summary>
                Ensures that there are not duplicate aliases and if so, changes it to be a numbered version and also verifies the
                length
            </summary>
            <param name="template"></param>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TrackedReferencesRepository">
            <summary>
            Implements <see cref="T:Umbraco.Cms.Core.Persistence.Repositories.ITrackedReferencesRepository"/> to provide database access for tracked references."
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TrackedReferencesRepository.#ctor(Umbraco.Cms.Infrastructure.Scoping.IScopeAccessor,Umbraco.Cms.Core.Mapping.IUmbracoMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TrackedReferencesRepository"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TrackedReferencesRepository.GetPagedRelationsForItem(System.Guid,System.Int64,System.Int64,System.Boolean,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TrackedReferencesRepository.GetPagedRelationsForRecycleBin(System.Guid,System.Int64,System.Int64,System.Boolean,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TrackedReferencesRepository.GetPagedItemsWithRelations(System.Collections.Generic.ISet{System.Guid},System.Int64,System.Int64,System.Boolean,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TrackedReferencesRepository.GetPagedNodeKeysWithDependantReferencesAsync(System.Collections.Generic.ISet{System.Guid},System.Guid,System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TrackedReferencesRepository.GetPagedDescendantsInReferences(System.Guid,System.Int64,System.Int64,System.Boolean,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.UserGroupRepository">
            <summary>
                Represents the UserGroupRepository for doing CRUD operations for <see cref="T:Umbraco.Cms.Core.Models.Membership.IUserGroup" />
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.UserGroupRepository.GetPermissions(System.Int32[],System.Int32[])">
            <summary>
                Gets explicitly defined permissions for the group for specified entities
            </summary>
            <param name="groupIds"></param>
            <param name="entityIds">Array of entity Ids, if empty will return permissions for the group for all entities</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.UserGroupRepository.GetPermissions(Umbraco.Cms.Core.Models.Membership.IReadOnlyUserGroup[],System.Boolean,System.Int32[])">
            <summary>
                Gets explicit and default permissions (if requested) permissions for the group for specified entities
            </summary>
            <param name="groups"></param>
            <param name="fallbackToDefaultPermissions">
                If true will include the group's default permissions if no permissions are
                explicitly assigned
            </param>
            <param name="nodeIds">Array of entity Ids, if empty will return permissions for the group for all entities</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.UserGroupRepository.ReplaceGroupPermissions(System.Int32,System.Collections.Generic.ISet{System.String},System.Int32[])">
            <summary>
                Replaces the same permission set for a single group to any number of entities
            </summary>
            <param name="groupId">Id of group</param>
            <param name="permissions">
                Permissions as enumerable list of <see cref="T:System.Char" /> If nothing is specified all permissions
                are removed.
            </param>
            <param name="entityIds">Specify the nodes to replace permissions for. </param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.UserGroupRepository.AssignGroupPermission(System.Int32,System.String,System.Int32[])">
            <summary>
                Assigns the same permission set for a single group to any number of entities
            </summary>
            <param name="groupId">Id of group</param>
            <param name="permission">Permissions as enumerable list of <see cref="T:System.Char" /></param>
            <param name="entityIds">Specify the nodes to replace permissions for</param>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.UserGroupRepository.UserGroupWithUsers">
            <summary>
                used to persist a user group with associated users at once
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.UserGroupRepository.UserGroupWithUsersRepository">
            <summary>
                used to persist a user group with associated users at once
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.UserGroupRepository.UserGroupWithUsersRepository.RefreshUsersInGroup(System.Int32,System.Int32[])">
            <summary>
                Adds a set of users to a group, first removing any that exist
            </summary>
            <param name="groupId">Id of group</param>
            <param name="userIds">Ids of users</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.UserGroupRepository.UserGroupWithUsersRepository.RemoveAllUsersFromGroup(System.Int32)">
            <summary>
                Removes all users from a group
            </summary>
            <param name="groupId">Id of group</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.UserGroupRepository.UserGroupWithUsersRepository.AddUsersToGroup(System.Int32,System.Int32[])">
            <summary>
                Adds a set of users to a group
            </summary>
            <param name="groupId">Id of group</param>
            <param name="userIds">Ids of users</param>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.UserRepository">
            <summary>
            Represents the UserRepository for doing CRUD operations for <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser"/>
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.UserRepository.#ctor(Umbraco.Cms.Infrastructure.Scoping.IScopeAccessor,Umbraco.Cms.Core.Cache.AppCaches,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.UserRepository},Umbraco.Cms.Infrastructure.Persistence.Mappers.IMapperCollection,Microsoft.Extensions.Options.IOptions{Umbraco.Cms.Core.Configuration.Models.GlobalSettings},Microsoft.Extensions.Options.IOptions{Umbraco.Cms.Core.Configuration.Models.UserPasswordConfigurationSettings},Umbraco.Cms.Core.Serialization.IJsonSerializer,Umbraco.Cms.Core.Services.IRuntimeState,System.Collections.Generic.IEnumerable{Umbraco.Cms.Infrastructure.Persistence.Mappers.IPermissionMapper},Umbraco.Cms.Core.Cache.IAppPolicyCache)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.UserRepository" /> class.
            </summary>
            <param name="scopeAccessor">The scope accessor.</param>
            <param name="appCaches">The application caches.</param>
            <param name="logger">The logger.</param>
            <param name="mapperCollection">
                A dictionary specifying the configuration for user passwords. If this is null then no
                password configuration will be persisted or read.
            </param>
            <param name="globalSettings">The global settings.</param>
            <param name="passwordConfiguration">The password configuration.</param>
            <param name="jsonSerializer">The JSON serializer.</param>
            <param name="runtimeState">State of the runtime.</param>
            <param name="permissionMappers">The permission mappers.</param>
            <param name="globalCache">The app policy cache.</param>
            <exception cref="T:System.ArgumentNullException">
                mapperCollection
                or
                globalSettings
                or
                passwordConfiguration
            </exception>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.UserRepository.DefaultPasswordConfigJson">
            <summary>
                Returns a serialized dictionary of the password configuration that is stored against the user in the database
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.UserRepository.GetByUsername(System.String,System.Boolean)">
            <summary>
                Returns a user by username
            </summary>
            <param name="username"></param>
            <param name="includeSecurityData">
                Can be used for slightly faster user lookups if the result doesn't require security data (i.e. groups, apps &amp; start nodes).
                This is really only used for a shim in order to upgrade to 7.6.
            </param>
            <returns>
                A non cached <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> instance
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.UserRepository.Get(System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Returns a user by id
            </summary>
            <param name="id"></param>
            <param name="includeSecurityData">
                This is really only used for a shim in order to upgrade to 7.6 but could be used
                for slightly faster user lookups if the result doesn't require security data (i.e. groups, apps &amp; start nodes)
            </param>
            <returns>
                A non cached <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser"/> instance
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.UserRepository.GetAllInGroup(System.Int32)">
            <summary>
                Gets a list of <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> objects associated with a given group
            </summary>
            <param name="groupId">Id of group</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.UserRepository.GetAllNotInGroup(System.Int32)">
            <summary>
                Gets a list of <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> objects not associated with a given group
            </summary>
            <param name="groupId">Id of group</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.UserRepository.GetPagedResultsByQuery(Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.Membership.IUser},System.Int64,System.Int32,System.Int64@,System.Linq.Expressions.Expression{System.Func{Umbraco.Cms.Core.Models.Membership.IUser,System.Object}},Umbraco.Cms.Core.Direction,System.String[],System.String[],Umbraco.Cms.Core.Models.Membership.UserState[],Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.Membership.IUser})">
            <summary>
                Gets paged user results
            </summary>
            <param name="query"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="orderBy"></param>
            <param name="orderDirection"></param>
            <param name="includeUserGroups">
                A filter to only include user that belong to these user groups
            </param>
            <param name="excludeUserGroups">
                A filter to only include users that do not belong to these user groups
            </param>
            <param name="userState">Optional parameter to filter by specified user state</param>
            <param name="filter"></param>
            <returns></returns>
            <remarks>
                The query supplied will ONLY work with data specifically on the umbracoUser table because we are using NPoco paging
                (SQL paging)
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.UserRepository.InvalidateSessionsForRemovedProviders(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.ScalarMapper`1.Umbraco#Cms#Infrastructure#Persistence#IScalarMapper#Map(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.ScalarMapper`1.Map(System.Object)">
            <summary>
                Performs a strongly typed mapping operation for a scalar value.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.SqlContext">
            <summary>
                Implements <see cref="T:Umbraco.Cms.Infrastructure.Persistence.ISqlContext" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.SqlContext.#ctor(Umbraco.Cms.Infrastructure.Persistence.SqlSyntax.ISqlSyntaxProvider,NPoco.DatabaseType,NPoco.IPocoDataFactory,Umbraco.Cms.Infrastructure.Persistence.Mappers.IMapperCollection)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.SqlContext" /> class.
            </summary>
            <param name="sqlSyntax">The sql syntax provider.</param>
            <param name="pocoDataFactory">The Poco data factory.</param>
            <param name="databaseType">The database type.</param>
            <param name="mappers">The mappers.</param>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.SqlContext.SqlSyntax">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.SqlContext.DatabaseType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.SqlContext.Templates">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.SqlContext.PocoDataFactory">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.SqlContext.Mappers">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.SqlContext.Sql">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.SqlContext.Sql(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.SqlContext.Query``1">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.SqlSyntax.ISqlSyntaxProvider">
            <summary>
                Defines an SqlSyntaxProvider
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.SqlSyntax.ISqlSyntaxProvider.AliasRegex">
            <summary>
                Gets a regex matching aliased fields.
            </summary>
            <remarks>
                <para>Matches "(table.column) AS (alias)" where table, column and alias are properly escaped.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.SqlSyntax.ISqlSyntaxProvider.DefaultIsolationLevel">
            <summary>
                Returns the default isolation level for the database
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.SqlSyntax.ISqlSyntaxProvider.GetConstraintsPerTable(NPoco.IDatabase)">
            <summary>
                Returns all constraints defined in the database (Primary keys, foreign keys, unique constraints...) (does not
                include indexes)
            </summary>
            <param name="db"></param>
            <returns>
                A Tuple containing: TableName, ConstraintName
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.SqlSyntax.ISqlSyntaxProvider.GetConstraintsPerColumn(NPoco.IDatabase)">
            <summary>
                Returns all constraints defined in the database (Primary keys, foreign keys, unique constraints...) (does not
                include indexes)
            </summary>
            <param name="db"></param>
            <returns>
                A Tuple containing: TableName, ColumnName, ConstraintName
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.SqlSyntax.ISqlSyntaxProvider.GetDefinedIndexes(NPoco.IDatabase)">
            <summary>
                Returns all defined Indexes in the database excluding primary keys
            </summary>
            <param name="db"></param>
            <returns>
                A Tuple containing: TableName, IndexName, ColumnName, IsUnique
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.SqlSyntax.ISqlSyntaxProvider.TryGetDefaultConstraint(NPoco.IDatabase,System.String,System.String,System.String@)">
            <summary>
                Tries to gets the name of the default constraint on a column.
            </summary>
            <param name="db">The database.</param>
            <param name="tableName">The table name.</param>
            <param name="columnName">The column name.</param>
            <param name="constraintName">The constraint name.</param>
            <returns>A value indicating whether a default constraint was found.</returns>
            <remarks>
                <para>
                    Some database engines may not have names for default constraints,
                    in which case the function may return true, but <paramref name="constraintName" /> is
                    unspecified.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.SqlSyntax.ISqlSyntaxProvider.InsertForUpdateHint(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext})">
            <summary>
                Appends the relevant ForUpdate hint.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.SqlSyntax.ISqlSyntaxProvider.AppendForUpdateHint(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext})">
            <summary>
                Appends the relevant ForUpdate hint.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.SqlSyntax.ISqlSyntaxProvider.LeftJoinWithNestedJoin``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Func{NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext}},System.String)">
            <summary>
                Handles left join with nested join
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.SqlSyntax.SqlServerVersionName">
            <summary>
                Represents the version name of SQL server (i.e. the year 2008, 2005, etc...)
            </summary>
            <remarks>
                see: https://support.microsoft.com/en-us/kb/321185
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.SqlSyntax.SqlSyntaxProviderBase`1">
            <summary>
                Represents the Base Sql Syntax provider implementation.
            </summary>
            <remarks>
                All Sql Syntax provider implementations should derive from this abstract class.
            </remarks>
            <typeparam name="TSyntax"></typeparam>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.SqlSyntax.SqlSyntaxProviderBase`1.FormatDateTime(System.DateTime,System.Boolean)">
            <summary>
                This is used ONLY if we need to format datetime without using SQL parameters (i.e. during migrations)
            </summary>
            <param name="date"></param>
            <param name="includeTime"></param>
            <returns></returns>
            <remarks>
                MSSQL has a DateTime standard that is unambiguous and works on all servers:
                YYYYMMDD HH:mm:ss
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.SqlSyntax.SqlSyntaxProviderExtensions.GetQuotedColumn(Umbraco.Cms.Infrastructure.Persistence.SqlSyntax.ISqlSyntaxProvider,System.String,System.String)">
            <summary>
                Returns the quotes tableName.columnName combo
            </summary>
            <param name="sql"></param>
            <param name="tableName"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.SqlSyntax.SqlSyntaxProviderExtensions.GetDeleteSubquery(Umbraco.Cms.Infrastructure.Persistence.SqlSyntax.ISqlSyntaxProvider,System.String,System.String,NPoco.Sql,Umbraco.Cms.Infrastructure.Persistence.SqlSyntax.WhereInType)">
            <summary>
                This is used to generate a delete query that uses a sub-query to select the data, it is required because there's a
                very particular syntax that
                needs to be used to work for all servers
            </summary>
            <returns></returns>
            <remarks>
                See: http://issues.umbraco.org/issue/U4-3876
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.SqlTemplate.Arg(System.String)">
            <summary>
                Gets a named argument.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.SqlTemplate.Arg``1(System.String)">
            <summary>
                Gets a WHERE expression argument.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.SqlTemplate.ArgIn``1(System.String)">
            <summary>
                Gets a WHERE IN expression argument.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabase">
            <summary>
                Extends NPoco Database for Umbraco.
            </summary>
            <remarks>
                <para>
                    Is used everywhere in place of the original NPoco Database object, and provides additional features
                    such as profiling, retry policies, logging, etc.
                </para>
                <para>Is never created directly but obtained from the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabaseFactory" />.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabase.#ctor(System.String,Umbraco.Cms.Infrastructure.Persistence.ISqlContext,System.Data.Common.DbProviderFactory,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabase},Umbraco.Cms.Infrastructure.Persistence.IBulkSqlInsertProvider,Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseSchemaCreatorFactory,System.Collections.Generic.IEnumerable{NPoco.IMapper})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabase" /> class.
            </summary>
            <remarks>
                <para>Used by UmbracoDatabaseFactory to create databases.</para>
                <para>Also used by DatabaseBuilder for creating databases and installing/upgrading.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabase.#ctor(System.Data.Common.DbConnection,Umbraco.Cms.Infrastructure.Persistence.ISqlContext,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabase},Umbraco.Cms.Infrastructure.Persistence.IBulkSqlInsertProvider)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabase" /> class.
            </summary>
            <remarks>Internal for unit tests only.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabase.SqlContext">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabase.InstanceId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabase.InTransaction">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabase.EnableSqlTrace">
            <summary>
                Gets or sets a value indicating whether to log all executed Sql statements.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabase.EnableSqlCount">
            <summary>
                Gets or sets a value indicating whether to count all executed Sql statements.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabase.SqlCount">
            <summary>
                Gets the count of all executed Sql statements.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabase.ValidateSchema">
            <summary>
                Returns the <see cref="T:Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseSchemaResult" /> for the database
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabase.IsUmbracoInstalled">
            <summary>
                Returns true if Umbraco database tables are detected to be installed
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabase.ExecuteScalar``1(System.String,System.Object[])">
            <inheritdoc cref="M:NPoco.Database.ExecuteScalar``1(System.String,System.Object[])" />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabase.ExecuteScalar``1(NPoco.Sql)">
            <inheritdoc cref="M:NPoco.Database.ExecuteScalar``1(NPoco.Sql)" />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabase.ExecuteScalar``1(System.String,System.Data.CommandType,System.Object[])">
            <inheritdoc cref="M:NPoco.Database.ExecuteScalar``1(System.String,System.Data.CommandType,System.Object[])" />
            <remarks>
                Be nice if handled upstream <a href="https://github.com/schotime/NPoco/issues/653">GH issue</a>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabaseExtensions.GetFromKeyValueTable(Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabase,System.String)">
            <summary>
                Gets a dictionary of key/values directly from the database, no scope, nothing.
            </summary>
            <remarks>Used by <see cref="T:Umbraco.Cms.Infrastructure.Runtime.RuntimeState" /> to determine the runtime state.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabaseExtensions.HasTable(Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabase,System.String)">
            <summary>
                Returns true if the database contains the specified table
            </summary>
            <param name="database"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabaseExtensions.IsDatabaseEmpty(Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabase)">
            <summary>
                Returns true if the database contains no tables
            </summary>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabaseFactory">
            <summary>
                Default implementation of <see cref="T:Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabaseFactory" />.
            </summary>
            <remarks>
                <para>
                    This factory implementation creates and manages an "ambient" database connection. When running
                    within an Http context, "ambient" means "associated with that context". Otherwise, it means "static to
                    the current thread". In this latter case, note that the database connection object is not thread safe.
                </para>
                <para>
                    It wraps an NPoco UmbracoDatabaseFactory which is initializes with a proper IPocoDataFactory to ensure
                    that NPoco's plumbing is cached appropriately for the whole application.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabaseFactory.#ctor(Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabaseFactory},Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Options.IOptions{Umbraco.Cms.Core.Configuration.Models.GlobalSettings},Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.ConnectionStrings},Umbraco.Cms.Infrastructure.Persistence.Mappers.IMapperCollection,Umbraco.Cms.Infrastructure.Persistence.IDbProviderFactoryCreator,Umbraco.Cms.Infrastructure.Migrations.Install.DatabaseSchemaCreatorFactory,Umbraco.Cms.Infrastructure.Persistence.NPocoMapperCollection)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabaseFactory" />.
            </summary>
            <remarks>Used by the other ctor and in tests.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabaseFactory.Configured">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabaseFactory.Initialized">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabaseFactory.ConnectionString">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabaseFactory.ProviderName">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabaseFactory.CanConnect">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabaseFactory.SqlContext">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabaseFactory.BulkSqlInsertProvider">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabaseFactory.ConfigureForUpgrade">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabaseFactory.Configure(Umbraco.Cms.Core.Configuration.Models.ConnectionStrings)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabaseFactory.CreateDatabase">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Persistence.UmbracoPocoDataBuilder">
            <summary>
                Umbraco's implementation of NPoco <see cref="T:NPoco.PocoDataBuilder" />.
            </summary>
            <remarks>
                <para>
                    NPoco PocoDataBuilder analyzes DTO classes and returns infos about the tables and
                    their columns.
                </para>
                <para>
                    In some very special occasions, a class may expose a column that we do not want to
                    use. This is essentially when adding a column to the User table: if the code wants the
                    column to exist, and it does not exist yet in the database, because a given migration has
                    not run, then the user cannot log into the site, and cannot upgrade = catch 22.
                </para>
                <para>
                    So far, this is very manual. We don't try to be clever and figure out whether the
                    columns exist already. We just ignore it.
                </para>
                <para>Beware, the application MUST restart when this class behavior changes.</para>
                <para>You can override the GetColmunnInfo method to control which columns this includes</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.PropertyEditors.Validators.BlockListValueRequiredValidator">
            <summary>
            Custom validator for block value required validation.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.PropertyEditors.Validators.BlockListValueRequiredValidator.#ctor(Umbraco.Cms.Core.Serialization.IJsonSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.PropertyEditors.Validators.BlockListValueRequiredValidator"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.PropertyEditors.Validators.BlockListValueRequiredValidator.ValidateRequired(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.PropertyEditors.Validators.TrueFalseValueRequiredValidator">
            <summary>
            Custom validator for true/false (toggle) required validation.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.PropertyEditors.Validators.TrueFalseValueRequiredValidator.ValidateRequired(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.PublishedContentQuery">
            <summary>
                A class used to query for published content, media items
            </summary>
            <seealso cref="T:Umbraco.Cms.Core.IPublishedContentQuery" />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.PublishedContentQuery.#ctor(Umbraco.Cms.Core.Models.PublishedContent.IVariationContextAccessor,Examine.IExamineManager,Umbraco.Cms.Core.PublishedCache.IPublishedContentCache,Umbraco.Cms.Core.PublishedCache.IPublishedMediaCache)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.PublishedContentQuery" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.PublishedContentQuery.Search(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.PublishedContentQuery.Search(System.String,System.Int32,System.Int32,System.Int64@,System.String,System.String,System.Collections.Generic.ISet{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.PublishedContentQuery.Search(Examine.Search.IQueryExecutor)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.PublishedContentQuery.Search(Examine.Search.IQueryExecutor,System.Int32,System.Int32,System.Int64@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.PublishedContentQuery.Search(Examine.Search.IQueryExecutor,System.Int32,System.Int32,System.Int64@,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.PublishedContentQuery.CultureContextualSearchResults">
            <summary>
                This is used to contextualize the values in the search results when enumerating over them, so that the correct
                culture values are used.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.PublishedContentQuery.CultureContextualSearchResults.CultureContextualSearchResultsEnumerator">
            <summary>
                Resets the variation context when this is disposed.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Routing.RedirectTracker.StoreOldRoute(Umbraco.Cms.Core.Models.IContent,System.Collections.Generic.Dictionary{System.ValueTuple{System.Int32,System.String},System.ValueTuple{System.Guid,System.String}})">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Routing.RedirectTracker.CreateRedirects(System.Collections.Generic.IDictionary{System.ValueTuple{System.Int32,System.String},System.ValueTuple{System.Guid,System.String}})">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Runtime.CoreRuntime">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Runtime.CoreRuntime.#ctor(Umbraco.Cms.Core.Services.IRuntimeState,Microsoft.Extensions.Logging.ILoggerFactory,Umbraco.Cms.Core.Composing.ComponentCollection,Umbraco.Cms.Core.Hosting.IApplicationShutdownRegistry,Umbraco.Cms.Core.Logging.IProfilingLogger,Umbraco.Cms.Core.Runtime.IMainDom,Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabaseFactory,Umbraco.Cms.Core.Events.IEventAggregator,Umbraco.Cms.Core.Hosting.IHostingEnvironment,Umbraco.Cms.Core.Configuration.IUmbracoVersion,System.IServiceProvider,Microsoft.Extensions.Hosting.IHostApplicationLifetime)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Runtime.CoreRuntime" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Runtime.CoreRuntime.State">
            <summary>
                Gets the state of the Umbraco runtime.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Runtime.CoreRuntime.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Runtime.CoreRuntime.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Runtime.CoreRuntime.RestartAsync">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Runtime.FileSystemMainDomLock.Dispose">
            <summary>Releases the resources used by this <see cref="T:Umbraco.Cms.Infrastructure.Runtime.FileSystemMainDomLock" />.</summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Runtime.FileSystemMainDomLock.Dispose(System.Boolean)">
            <summary>Releases the resources used by this <see cref="T:Umbraco.Cms.Infrastructure.Runtime.FileSystemMainDomLock" />.</summary>
            <param name="disposing">true to release both managed resources.</param>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Runtime.IRuntimeModeValidationService">
            <summary>
            Provides a service to validate configuration based on the runtime mode.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Runtime.IRuntimeModeValidationService.Validate(System.String@)">
            <summary>
            Validates configuration based on the runtime mode.
            </summary>
            <param name="validationErrorMessage">The validation error message.</param>
            <returns>
              <c>true</c> when the validation passes; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Runtime.IRuntimeModeValidator">
            <summary>
            Validates configuration based on the runtime mode.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Runtime.IRuntimeModeValidator.Validate(Umbraco.Cms.Core.Configuration.Models.RuntimeMode,System.String@)">
            <summary>
            Validates configuration based on the specified <paramref name="runtimeMode" />.
            </summary>
            <param name="runtimeMode">The runtime mode.</param>
            <param name="validationErrorMessage">The validation error message.</param>
            <returns>
              <c>true</c> when the validation passes; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Runtime.RuntimeModeValidationService">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Runtime.RuntimeModeValidationService.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.RuntimeSettings},System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Runtime.RuntimeModeValidationService" /> class.
            </summary>
            <param name="runtimeSettings">The runtime settings.</param>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Runtime.RuntimeModeValidationService.Validate(System.String@)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Runtime.RuntimeModeValidators.JITOptimizerValidator">
            <summary>
            Validates whether the JIT/runtime optimizer of the entry assembly is enabled in production runtime mode.
            </summary>
            <remarks>
            This can be ensured by building the application using the Release configuration.
            </remarks>
            <seealso cref="T:Umbraco.Cms.Infrastructure.Runtime.RuntimeModeValidators.RuntimeModeProductionValidatorBase" />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Runtime.RuntimeModeValidators.JITOptimizerValidator.Validate(System.String@)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Runtime.RuntimeModeValidators.ModelsBuilderModeValidator">
            <summary>
            Validates whether the ModelsBuilder mode is not set to <see cref="F:Umbraco.Cms.Core.Configuration.ModelsMode.InMemoryAuto" /> when in development runtime mode and set to <see cref="F:Umbraco.Cms.Core.Configuration.ModelsMode.Nothing" /> when in production runtime mode.
            </summary>
            <seealso cref="T:Umbraco.Cms.Infrastructure.Runtime.IRuntimeModeValidator" />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Runtime.RuntimeModeValidators.ModelsBuilderModeValidator.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.ModelsBuilderSettings})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Runtime.RuntimeModeValidators.ModelsBuilderModeValidator" /> class.
            </summary>
            <param name="modelsBuilderSettings">The models builder settings.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Runtime.RuntimeModeValidators.ModelsBuilderModeValidator.Validate(Umbraco.Cms.Core.Configuration.Models.RuntimeMode,System.String@)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Runtime.RuntimeModeValidators.RuntimeModeProductionValidatorBase">
            <summary>
            Validates configuration based on the production runtime mode.
            </summary>
            <seealso cref="T:Umbraco.Cms.Infrastructure.Runtime.IRuntimeModeValidator" />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Runtime.RuntimeModeValidators.RuntimeModeProductionValidatorBase.Validate(Umbraco.Cms.Core.Configuration.Models.RuntimeMode,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Runtime.RuntimeModeValidators.RuntimeModeProductionValidatorBase.Validate(System.String@)">
            <summary>
            Validates configuration based on the production runtime mode.
            </summary>
            <param name="validationErrorMessage">The validation error message.</param>
            <returns>
              <c>true</c> when the validation passes; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Runtime.RuntimeModeValidators.UmbracoApplicationUrlValidator">
            <summary>
            Validates whether a fixed Umbraco application URL is set when in production runtime mode.
            </summary>
            <seealso cref="T:Umbraco.Cms.Infrastructure.Runtime.RuntimeModeValidators.RuntimeModeProductionValidatorBase" />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Runtime.RuntimeModeValidators.UmbracoApplicationUrlValidator.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.WebRoutingSettings})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Runtime.RuntimeModeValidators.UmbracoApplicationUrlValidator" /> class.
            </summary>
            <param name="webRoutingSettings">The web routing settings.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Runtime.RuntimeModeValidators.UmbracoApplicationUrlValidator.Validate(System.String@)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Runtime.RuntimeModeValidators.UseHttpsValidator">
            <summary>
            Validates whether HTTPS is enforced when in production runtime mode.
            </summary>
            <seealso cref="T:Umbraco.Cms.Infrastructure.Runtime.RuntimeModeValidators.RuntimeModeProductionValidatorBase" />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Runtime.RuntimeModeValidators.UseHttpsValidator.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.GlobalSettings})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Runtime.RuntimeModeValidators.UseHttpsValidator" /> class.
            </summary>
            <param name="globalSettings">The global settings.</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Runtime.RuntimeModeValidators.UseHttpsValidator.Validate(System.String@)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Runtime.RuntimeState">
            <summary>
            Represents the state of the Umbraco runtime.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Runtime.RuntimeState.Booting">
            <summary>
            The initial <see cref="T:Umbraco.Cms.Infrastructure.Runtime.RuntimeState"/>
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Runtime.RuntimeState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Runtime.RuntimeState" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Runtime.RuntimeState.#ctor(Microsoft.Extensions.Options.IOptions{Umbraco.Cms.Core.Configuration.Models.GlobalSettings},Microsoft.Extensions.Options.IOptions{Umbraco.Cms.Core.Configuration.Models.UnattendedSettings},Umbraco.Cms.Core.Configuration.IUmbracoVersion,Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabaseFactory,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.Runtime.RuntimeState},Umbraco.Cms.Core.Packaging.PendingPackageMigrations,Umbraco.Cms.Core.Services.IConflictingRouteService,System.Collections.Generic.IEnumerable{Umbraco.Cms.Infrastructure.Persistence.IDatabaseProviderMetadata},Umbraco.Cms.Infrastructure.Runtime.IRuntimeModeValidationService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Runtime.RuntimeState" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Runtime.RuntimeState.Version">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Runtime.RuntimeState.VersionComment">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Runtime.RuntimeState.SemanticVersion">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Runtime.RuntimeState.CurrentMigrationState">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Runtime.RuntimeState.FinalMigrationState">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Runtime.RuntimeState.Level">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Runtime.RuntimeState.Reason">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Runtime.RuntimeState.BootFailedException">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Runtime.RuntimeState.StartupState">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Runtime.RuntimeState.DetermineRuntimeLevel">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Runtime.SqlMainDomLock.MainDomKey">
            <summary>
                Returns the keyvalue table key for the current server/app
            </summary>
            <remarks>
                The key is the the normal MainDomId which takes into account the AppDomainAppId and the physical file path of the
                app and this is
                combined with the current machine name. The machine name is required because the default semaphore lock is machine
                wide so it implicitly
                takes into account machine name whereas this needs to be explicitly per machine.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Runtime.SqlMainDomLock.WaitForExistingAsync(System.String,System.Int32)">
            <summary>
                Wait for any existing MainDom to release so we can continue booting
            </summary>
            <param name="tempId"></param>
            <param name="millisecondsTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Runtime.SqlMainDomLock.InsertLockRecord(System.String,Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabase)">
            <summary>
                Inserts or updates the key/value row
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Runtime.SqlMainDomLock.IsMainDomValue(System.String,Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabase)">
            <summary>
                Checks if the DB row value is equals the value
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Scoping.IScope.Database">
            <summary>
                Gets the scope database.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Scoping.IScope.SqlContext">
            <summary>
                Gets the Sql context.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Scoping.IScopeAccessor.AmbientScope">
            <summary>
                Gets the ambient scope.
            </summary>
            <remarks>Returns <c>null</c> if there is no ambient scope.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Scoping.IScopeProvider">
            <summary>
                Provides scopes.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Scoping.IScopeProvider.Umbraco#Cms#Core#Scoping#ICoreScopeProvider#CreateCoreScope(System.Data.IsolationLevel,Umbraco.Cms.Core.Scoping.RepositoryCacheMode,Umbraco.Cms.Core.Events.IEventDispatcher,Umbraco.Cms.Core.Events.IScopedNotificationPublisher,System.Nullable{System.Boolean},System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Scoping.IScopeProvider.Umbraco#Cms#Core#Scoping#ICoreScopeProvider#CreateQuery``1">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Scoping.IScopeProvider.CreateScope(System.Data.IsolationLevel,Umbraco.Cms.Core.Scoping.RepositoryCacheMode,Umbraco.Cms.Core.Events.IEventDispatcher,Umbraco.Cms.Core.Events.IScopedNotificationPublisher,System.Nullable{System.Boolean},System.Boolean,System.Boolean)">
            <summary>
                Creates an ambient scope.
            </summary>
            <param name="isolationLevel">The transaction isolation level.</param>
            <param name="repositoryCacheMode">The repositories cache mode.</param>
            <param name="eventDispatcher">An optional events dispatcher.</param>
            <param name="scopedNotificationPublisher">An optional notification publisher.</param>
            <param name="scopeFileSystems">A value indicating whether to scope the filesystems.</param>
            <param name="callContext">A value indicating whether this scope should always be registered in the call context.</param>
            <param name="autoComplete">A value indicating whether this scope is auto-completed.</param>
            <returns>The created ambient scope.</returns>
            <remarks>
                <para>The created scope becomes the ambient scope.</para>
                <para>If an ambient scope already exists, it becomes the parent of the created scope.</para>
                <para>When the created scope is disposed, the parent scope becomes the ambient scope again.</para>
                <para>Parameters must be specified on the outermost scope, or must be compatible with the parents.</para>
                <para>
                    Auto-completed scopes should be used for read-only operations ONLY. Do not use them if you do not
                    understand the associated issues, such as the scope being completed even though an exception is thrown.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Scoping.IScopeProvider.CreateDetachedScope(System.Data.IsolationLevel,Umbraco.Cms.Core.Scoping.RepositoryCacheMode,Umbraco.Cms.Core.Events.IEventDispatcher,Umbraco.Cms.Core.Events.IScopedNotificationPublisher,System.Nullable{System.Boolean})">
            <summary>
                Creates a detached scope.
            </summary>
            <returns>A detached scope.</returns>
            <param name="isolationLevel">The transaction isolation level.</param>
            <param name="repositoryCacheMode">The repositories cache mode.</param>
            <param name="eventDispatcher">An optional events dispatcher.</param>
            <param name="scopedNotificationPublisher">An option notification publisher.</param>
            <param name="scopeFileSystems">A value indicating whether to scope the filesystems.</param>
            <remarks>
                <para>A detached scope is not ambient and has no parent.</para>
                <para>It is meant to be attached by <see cref="M:Umbraco.Cms.Infrastructure.Scoping.IScopeProvider.AttachScope(Umbraco.Cms.Infrastructure.Scoping.IScope,System.Boolean)" />.</para>
            </remarks>
            <remarks>
            This is not used by CMS but is used by Umbraco Deploy.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Scoping.IScopeProvider.AttachScope(Umbraco.Cms.Infrastructure.Scoping.IScope,System.Boolean)">
            <summary>
                Attaches a scope.
            </summary>
            <param name="scope">The scope to attach.</param>
            <param name="callContext">A value indicating whether to force usage of call context.</param>
            <remarks>
                <para>Only a scope created by <see cref="M:Umbraco.Cms.Infrastructure.Scoping.IScopeProvider.CreateDetachedScope(System.Data.IsolationLevel,Umbraco.Cms.Core.Scoping.RepositoryCacheMode,Umbraco.Cms.Core.Events.IEventDispatcher,Umbraco.Cms.Core.Events.IScopedNotificationPublisher,System.Nullable{System.Boolean})" /> can be attached.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Scoping.IScopeProvider.DetachScope">
            <summary>
                Detaches a scope.
            </summary>
            <returns>The detached scope.</returns>
            <remarks>
                <para>Only a scope previously attached by <see cref="M:Umbraco.Cms.Infrastructure.Scoping.IScopeProvider.AttachScope(Umbraco.Cms.Infrastructure.Scoping.IScope,System.Boolean)" /> can be detached.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Scoping.IScopeProvider.SqlContext">
            <summary>
                Gets the sql context.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Scoping.Scope">
            <summary>
                Implements <see cref="T:Umbraco.Cms.Infrastructure.Scoping.IScope" />.
            </summary>
            <remarks>Not thread-safe obviously.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Scoping.Scope.Database">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Scoping.Scope.Messages">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Scoping.Scope.Events">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Scoping.Scope.GetReadLocks">
            <summary>
                Used for testing. Ensures and gets any queued read locks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Scoping.Scope.GetWriteLocks">
            <summary>
                Used for testing. Ensures and gets and queued write locks.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Scoping.ScopeProvider">
            <summary>
            Implements <see cref="T:Umbraco.Cms.Infrastructure.Scoping.IScopeProvider"/>.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Scoping.ScopeProvider.AmbientContext">
            <summary>
            Get the Ambient (Current) <see cref="T:Umbraco.Cms.Core.Scoping.IScopeContext"/> for the current execution context.
            </summary>
            <remarks>
            The current execution context may be request based (HttpContext) or on a background thread (AsyncLocal)
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Scoping.ScopeProvider.AmbientScope">
            <summary>
            Gets or set the Ambient (Current) <see cref="T:Umbraco.Cms.Infrastructure.Scoping.Scope"/> for the current execution context.
            </summary>
            <remarks>
            The current execution context may be request based (HttpContext) or on a background thread (AsyncLocal)
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Scoping.ScopeProvider.CreateDetachedScope(System.Data.IsolationLevel,Umbraco.Cms.Core.Scoping.RepositoryCacheMode,Umbraco.Cms.Core.Events.IEventDispatcher,Umbraco.Cms.Core.Events.IScopedNotificationPublisher,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Scoping.ScopeProvider.AttachScope(Umbraco.Cms.Infrastructure.Scoping.IScope,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Scoping.ScopeProvider.DetachScope">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Scoping.ScopeProvider.CreateScope(System.Data.IsolationLevel,Umbraco.Cms.Core.Scoping.RepositoryCacheMode,Umbraco.Cms.Core.Events.IEventDispatcher,Umbraco.Cms.Core.Events.IScopedNotificationPublisher,System.Nullable{System.Boolean},System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Scoping.ScopeProvider.Context">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Scoping.ScopeProvider.Umbraco#Cms#Core#Scoping#IScopeProvider#CreateScope(System.Data.IsolationLevel,Umbraco.Cms.Core.Scoping.RepositoryCacheMode,Umbraco.Cms.Core.Events.IEventDispatcher,Umbraco.Cms.Core.Events.IScopedNotificationPublisher,System.Nullable{System.Boolean},System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Scoping.ScopeProvider.Umbraco#Cms#Core#Scoping#IScopeProvider#CreateDetachedScope(System.Data.IsolationLevel,Umbraco.Cms.Core.Scoping.RepositoryCacheMode,Umbraco.Cms.Core.Events.IEventDispatcher,Umbraco.Cms.Core.Events.IScopedNotificationPublisher,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Scoping.ScopeProvider.Umbraco#Cms#Core#Scoping#IScopeProvider#AttachScope(Umbraco.Cms.Core.Scoping.IScope,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Scoping.ScopeProvider.Umbraco#Cms#Core#Scoping#IScopeProvider#DetachScope">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Search.IDeliveryApiIndexingHandler.Enabled">
            <summary>
                Returns true if the indexing handler is enabled
            </summary>
            <remarks>
                If this is false then there will be no data lookups executed to populate indexes
                when service changes are made.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Search.IDeliveryApiIndexingHandler.HandleContentChanges(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.Int32,Umbraco.Cms.Core.Services.Changes.TreeChangeTypes}})">
            <summary>
                Handles index updates for content changes
            </summary>
            <param name="changes">The list of changes by content ID</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Search.IDeliveryApiIndexingHandler.HandleContentTypeChanges(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.Int32,Umbraco.Cms.Core.Services.Changes.ContentTypeChangeTypes}})">
            <summary>
                Handles index updates for content type changes
            </summary>
            <param name="changes">The list of changes by content type ID</param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Search.IDeliveryApiIndexingHandler.HandlePublicAccessChanges">
            <summary>
                Handles index updates for public access changes
            </summary>
            <remarks>
                Given the current limitations to the distributed public access notifications, this
                will remove any protected content from the index without being clever about it.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Search.ContentIndexingNotificationHandler.Handle(Umbraco.Cms.Core.Notifications.ContentCacheRefresherNotification)">
            <summary>
                Updates indexes based on content changes
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Search.ContentTypeIndexingNotificationHandler.Handle(Umbraco.Cms.Core.Notifications.ContentTypeCacheRefresherNotification)">
            <summary>
                Updates indexes based on content type changes
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Search.IUmbracoIndexingHandler.Enabled">
            <summary>
                Returns true if the indexing handler is enabled
            </summary>
            <remarks>
                If this is false then there will be no data lookups executed to populate indexes
                when service changes are made.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Search.IUmbracoIndexingHandler.RemoveProtectedContent">
            <summary>
                Removes any content that is flagged as protected
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Search.IUmbracoIndexingHandler.DeleteDocumentsForContentTypes(System.Collections.Generic.IReadOnlyCollection{System.Int32})">
            <summary>
                Deletes all documents for the content type Ids
            </summary>
            <param name="removedContentTypes"></param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Search.IUmbracoIndexingHandler.DeleteIndexForEntity(System.Int32,System.Boolean)">
            <summary>
                Remove an item from an index
            </summary>
            <param name="entityId"></param>
            <param name="keepIfUnpublished">
                If true, indicates that we will only delete this item from indexes that don't support unpublished content.
                If false it will delete this from all indexes regardless.
            </param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Search.IUmbracoIndexingHandler.DeleteIndexForEntities(System.Collections.Generic.IReadOnlyCollection{System.Int32},System.Boolean)">
            <summary>
                Remove items from an index
            </summary>
            <param name="entityIds"></param>
            <param name="keepIfUnpublished">
                If true, indicates that we will only delete this item from indexes that don't support unpublished content.
                If false it will delete this from all indexes regardless.
            </param>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Search.UmbracoTreeSearcherFields.GetBackOfficeFields">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Search.UmbracoTreeSearcherFields.GetBackOfficeMembersFields">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Search.UmbracoTreeSearcherFields.GetBackOfficeMediaFields">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Search.UmbracoTreeSearcherFields.GetBackOfficeDocumentFields">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Search.UmbracoTreeSearcherFields.GetBackOfficeFieldsToLoad">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Search.UmbracoTreeSearcherFields.GetBackOfficeMembersFieldsToLoad">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Search.UmbracoTreeSearcherFields.GetBackOfficeMediaFieldsToLoad">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Search.UmbracoTreeSearcherFields.GetBackOfficeDocumentFieldsToLoad">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Security.DeleteExternalLoginsOnMemberDeletedHandler">
            <summary>
                Deletes the external logins for the deleted members. This cannot be handled by the database as there is not foreign
                keys.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Security.DeleteExternalLoginsOnMemberDeletedHandler.#ctor(Umbraco.Cms.Core.Services.IExternalLoginWithKeyService)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Security.DeleteExternalLoginsOnMemberDeletedHandler"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Security.DeleteExternalLoginsOnMemberDeletedHandler.Handle(Umbraco.Cms.Core.Notifications.MemberDeletedNotification)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Security.DeleteTwoFactorLoginsOnMemberDeletedHandler">
            <summary>
                Deletes the two factor for the deleted members. This cannot be handled by the database as there is not foreign
                keys.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Security.DeleteTwoFactorLoginsOnMemberDeletedHandler.#ctor(Umbraco.Cms.Core.Services.ITwoFactorLoginService)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Security.DeleteTwoFactorLoginsOnMemberDeletedHandler" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Security.DeleteTwoFactorLoginsOnMemberDeletedHandler.HandleAsync(Umbraco.Cms.Core.Notifications.MemberDeletedNotification,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Serialization.JsonBlockValueConverter">
            <summary>
            JSON converter for block values, because block value layouts are strongly typed but different from implementation to implementation.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Serialization.JsonBlockValueConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Serialization.JsonBooleanConverter">
            <summary>
            Converts a boolean value to or from JSON, always converting a boolean like value (like <c>1</c> or <c>0</c>) to a boolean.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Serialization.JsonBooleanConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Serialization.JsonBooleanConverter.Write(System.Text.Json.Utf8JsonWriter,System.Boolean,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Serialization.JsonDictionaryStringIgnoreCaseConverter`1">
            <summary>
            Converts a dictionary with a string key to or from JSON, using the <see cref="P:System.StringComparer.OrdinalIgnoreCase" /> comparer.
            </summary>
            <typeparam name="TValue">The type of the dictionary value.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Serialization.JsonDictionaryStringIgnoreCaseConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Serialization.JsonDictionaryStringInternIgnoreCaseConverter`1">
            <summary>
            Converts a dictionary with a string key to or from JSON, using the <see cref="P:System.StringComparer.OrdinalIgnoreCase" /> comparer and interning the string key when reading.
            </summary>
            <typeparam name="TValue">The type of the dictionary value.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Serialization.JsonDictionaryStringInternIgnoreCaseConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Serialization.JsonObjectConverter">
            <summary>
            Converts an object to or from JSON.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Serialization.JsonObjectConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Serialization.JsonObjectConverter.Write(System.Text.Json.Utf8JsonWriter,System.Object,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Serialization.JsonStringInternConverter">
            <summary>
            Converts a string to or from JSON, interning the string when reading.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Serialization.JsonStringInternConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Serialization.JsonUdiConverter">
            <summary>
            Converts an <see cref="T:Umbraco.Cms.Core.Udi" /> to or from JSON.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Serialization.JsonUdiConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Serialization.JsonUdiConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Serialization.JsonUdiConverter.Write(System.Text.Json.Utf8JsonWriter,Umbraco.Cms.Core.Udi,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Serialization.JsonUdiRangeConverter">
            <summary>
            Converts an <see cref="T:Umbraco.Cms.Core.UdiRange" /> to or from JSON.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Serialization.JsonUdiRangeConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Serialization.JsonUdiRangeConverter.Write(System.Text.Json.Utf8JsonWriter,Umbraco.Cms.Core.UdiRange,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Serialization.JsonUniversalDateTimeConverter">
            <summary>
            Converts a DateTime value to or from JSON, always converting the value to Coordinated Universal Time (UTC) when reading.
            </summary>
            <remarks>
            In order to match the existing behaviour, and that of MessagePack, we need to ensure that DateTimes are always read as UTC.
            This is not the case by default for System.Text.Json, see: https://github.com/dotnet/runtime/issues/1566.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Serialization.JsonUniversalDateTimeConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Serialization.ReadOnlyJsonConverter`1">
            <summary>
            Converts an object or value from JSON.
            </summary>
            <typeparam name="T">The type of object or value handled by the converter.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Serialization.ReadOnlyJsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Serialization.SystemTextConfigurationEditorJsonSerializer">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Serialization.SystemTextConfigurationEditorJsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Serialization.SystemTextConfigurationEditorJsonSerializer" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Serialization.SystemTextConfigurationEditorJsonSerializer.UseAttributeConfiguredPropertyNames">
            <summary>
            A custom action used to provide property names when they are overridden by
            <see cref="T:Umbraco.Cms.Core.PropertyEditors.ConfigurationField"/> attributes.
            </summary>
            <remarks>
            Hat-tip: https://stackoverflow.com/a/78063664
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Serialization.SystemTextJsonSerializer">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Serialization.SystemTextJsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Serialization.SystemTextJsonSerializer" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Serialization.SystemTextJsonSerializerBase.Serialize(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Serialization.SystemTextJsonSerializerBase.Deserialize``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Serialization.SystemTextJsonSerializerBase.TryDeserialize``1(System.Object,``0@)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Serialization.SystemTextWebhookJsonSerializer">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Serialization.SystemTextWebhookJsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Serialization.SystemTextWebhookJsonSerializer" /> class.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Serialization.WriteOnlyJsonConverter`1">
            <summary>
            Converts an object or value to JSON.
            </summary>
            <typeparam name="T">The type of object or value handled by the converter.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Serialization.WriteOnlyJsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Services.CacheInstructionService">
            <summary>
                Implements <see cref="T:Umbraco.Cms.Core.Services.ICacheInstructionService" /> providing a service for retrieving and saving cache
                instructions.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Services.CacheInstructionService.#ctor(Umbraco.Cms.Core.Scoping.ICoreScopeProvider,Microsoft.Extensions.Logging.ILoggerFactory,Umbraco.Cms.Core.Events.IEventMessagesFactory,Umbraco.Cms.Core.Persistence.Repositories.ICacheInstructionRepository,Umbraco.Cms.Core.Logging.IProfilingLogger,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.Services.CacheInstructionService},Microsoft.Extensions.Options.IOptions{Umbraco.Cms.Core.Configuration.Models.GlobalSettings})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Services.CacheInstructionService" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Services.CacheInstructionService.IsColdBootRequired(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Services.CacheInstructionService.IsInstructionCountOverLimit(System.Int32,System.Int32,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Services.CacheInstructionService.GetMaxInstructionId">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Services.CacheInstructionService.DeliverInstructions(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Sync.RefreshInstruction},System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Services.CacheInstructionService.DeliverInstructionsInBatches(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Sync.RefreshInstruction},System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Services.CacheInstructionService.ProcessInstructions(Umbraco.Cms.Core.Cache.CacheRefresherCollection,Umbraco.Cms.Core.Sync.ServerRole,System.Threading.CancellationToken,System.String,System.DateTime,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Services.CacheInstructionService.ProcessDatabaseInstructions(Umbraco.Cms.Core.Cache.CacheRefresherCollection,System.Threading.CancellationToken,System.String,System.Int32@)">
            <summary>
                Process instructions from the database.
            </summary>
            <remarks>
                Thread safety: this is NOT thread safe. Because it is NOT meant to run multi-threaded.
            </remarks>
            <returns>Number of instructions processed.</returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Services.CacheInstructionService.TryDeserializeInstructions(Umbraco.Cms.Core.Models.CacheInstruction,System.Text.Json.JsonDocument@)">
            <summary>
                Attempts to deserialize the instructions to a JArray.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Services.CacheInstructionService.GetAllInstructions(System.Nullable{System.Text.Json.JsonElement})">
            <summary>
                Parses out the individual instructions to be processed.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Services.CacheInstructionService.ProcessDatabaseInstructions(Umbraco.Cms.Core.Cache.CacheRefresherCollection,System.Collections.Generic.IReadOnlyCollection{Umbraco.Cms.Core.Sync.RefreshInstruction},Umbraco.Cms.Core.Models.CacheInstruction,System.Collections.Generic.HashSet{Umbraco.Cms.Core.Sync.RefreshInstruction},System.Threading.CancellationToken,System.Int32@)">
            <summary>
                Processes the instruction batch and checks for errors.
            </summary>
            <param name="cacheRefreshers"></param>
            <param name="instructionBatch"></param>
            <param name="instruction"></param>
            <param name="processed">
                Tracks which instructions have already been processed to avoid duplicates
            </param>
            <param name="cancellationToken"></param>
            <param name="lastId"></param>
            <returns>
            Returns true if all instructions in the batch were processed, otherwise false if they could not be due to the app being shut down
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Services.CacheInstructionService.NotifyRefreshers(Umbraco.Cms.Core.Cache.CacheRefresherCollection,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Sync.RefreshInstruction},System.Collections.Generic.HashSet{Umbraco.Cms.Core.Sync.RefreshInstruction},System.Threading.CancellationToken)">
            <summary>
                Executes the instructions against the cache refresher instances.
            </summary>
            <returns>
                Returns true if all instructions were processed, otherwise false if the processing was interrupted (i.e. by app
                shutdown).
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Services.CacheInstructionService.PruneOldInstructions">
            <summary>
                Remove old instructions from the database
            </summary>
            <remarks>
                Always leave the last (most recent) record in the db table, this is so that not all instructions are removed which
                would cause
                the site to cold boot if there's been no instruction activity for more than TimeToRetainInstructions.
                See: http://issues.umbraco.org/issue/U4-7643#comment=67-25085
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Services.ContentListViewServiceBase`3.GetListViewConfigurationAsync(System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
                Gets the list view configuration from a content type or from a specific list view data type used as a content type property.
            </summary>
            <param name="contentTypeKey">The key of the content type to check for the configured list view or for its list view properties.</param>
            <param name="dataTypeKey">The key of the data type used as a list view property on a content type.</param>
            <returns>An attempt indicating if the operation was a success as well as a more detailed <see cref="T:Umbraco.Cms.Core.Services.OperationStatus.ContentCollectionOperationStatus"/>.</returns>
            <remarks>
                dataTypeKey is ONLY used to check against list views used as content type properties. It is NOT the key for the configured list view on the content type.
                To get the configured list view for a content type, you shouldn't specify dataTypeKey.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Services.Implement.LogViewerRepository.GetLogs(Umbraco.Cms.Core.Logging.Viewer.LogTimePeriod,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Services.Implement.LogViewerRepository.GetLogCount(Umbraco.Cms.Core.Logging.Viewer.LogTimePeriod)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Services.Implement.LogViewerRepository.GetMessageTemplates(Umbraco.Cms.Core.Logging.Viewer.LogTimePeriod)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Services.Implement.LogViewerRepository.GetGlobalMinLogLevel">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Services.Implement.UserIdKeyResolver.GetAsync(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Services.Implement.UserIdKeyResolver.GetAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Sync.BatchedDatabaseServerMessenger">
            <summary>
                An <see cref="T:Umbraco.Cms.Core.Sync.IServerMessenger" /> implementation that works by storing messages in the database.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Sync.BatchedDatabaseServerMessenger.#ctor(Umbraco.Cms.Core.Runtime.IMainDom,Umbraco.Cms.Core.Cache.CacheRefresherCollection,Umbraco.Cms.Core.Sync.IServerRoleAccessor,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.Sync.BatchedDatabaseServerMessenger},Umbraco.Cms.Core.Sync.ISyncBootStateAccessor,Umbraco.Cms.Core.Hosting.IHostingEnvironment,Umbraco.Cms.Core.Services.ICacheInstructionService,Umbraco.Cms.Core.Serialization.IJsonSerializer,Umbraco.Cms.Core.Cache.IRequestCache,Umbraco.Cms.Core.Web.IRequestAccessor,Umbraco.Cms.Infrastructure.Sync.LastSyncedFileManager,Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.GlobalSettings})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Sync.BatchedDatabaseServerMessenger" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Sync.BatchedDatabaseServerMessenger.SendMessages">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Sync.BatchedDatabaseServerMessenger.DeliverRemote(Umbraco.Cms.Core.Cache.ICacheRefresher,Umbraco.Cms.Core.Sync.MessageType,System.Collections.Generic.IEnumerable{System.Object},System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Sync.DatabaseServerMessenger">
            <summary>
                An <see cref="T:Umbraco.Cms.Core.Sync.IServerMessenger" /> that works by storing messages in the database.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Sync.DatabaseServerMessenger.#ctor(Umbraco.Cms.Core.Runtime.IMainDom,Umbraco.Cms.Core.Cache.CacheRefresherCollection,Umbraco.Cms.Core.Sync.IServerRoleAccessor,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Infrastructure.Sync.DatabaseServerMessenger},System.Boolean,Umbraco.Cms.Core.Sync.ISyncBootStateAccessor,Umbraco.Cms.Core.Hosting.IHostingEnvironment,Umbraco.Cms.Core.Services.ICacheInstructionService,Umbraco.Cms.Core.Serialization.IJsonSerializer,Umbraco.Cms.Infrastructure.Sync.LastSyncedFileManager,Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.GlobalSettings})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Sync.DatabaseServerMessenger" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Sync.DatabaseServerMessenger.LocalIdentity">
            <summary>
                Gets the unique local identity of the executing AppDomain.
            </summary>
            <remarks>
                <para>
                    It is not only about the "server" (machine name and appDomainappId), but also about
                    an AppDomain, within a Process, on that server - because two AppDomains running at the same
                    time on the same server (eg during a restart) are, practically, a LB setup.
                </para>
                <para>
                    Practically, all we really need is the guid, the other infos are here for information
                    and debugging purposes.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Sync.DatabaseServerMessenger.Sync">
            <summary>
                Synchronize the server (throttled).
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Sync.DatabaseServerMessenger.Dispose">
            <summary>
                Dispose
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Sync.DatabaseServerMessenger.EnsureInitialized">
            <summary>
                Returns true if initialization was successfull (i.e. Is MainDom)
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Sync.DatabaseServerMessenger.InitializeWithMainDom">
            <summary>
                Boots the messenger.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Sync.DatabaseServerMessenger.InitializeColdBootState">
            <summary>
            Initializes a server that has never synchronized before.
            </summary>
            <remarks>
            Thread safety: this is NOT thread safe. Because it is NOT meant to run multi-threaded.
            Callers MUST ensure thread-safety.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Sync.LastSyncedFileManager.LastSyncedId">
            <summary>
                Returns the last-synced id.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Sync.LastSyncedFileManager.DistCacheFilePath">
            <summary>
                Gets the dist cache file path (once).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Sync.LastSyncedFileManager.SaveLastSyncedId(System.Int32)">
            <summary>
                Persists the last-synced id to file.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Sync.RefreshInstructionEnvelope">
            <summary>
                Used for any 'Batched' <see cref="T:Umbraco.Cms.Core.Sync.IServerMessenger" /> instances which specifies a set of
                <see cref="T:Umbraco.Cms.Core.Sync.RefreshInstruction" /> targeting a collection of
                <see cref="T:Umbraco.Cms.Core.Sync.IServerAddress" />
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Sync.ServerMessengerBase">
            <summary>
            Provides a base class for all <see cref="T:Umbraco.Cms.Core.Sync.IServerMessenger" /> implementations.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Sync.ServerMessengerBase.#ctor(System.Boolean,Umbraco.Cms.Core.Serialization.IJsonSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Infrastructure.Sync.ServerMessengerBase"/> class.
            </summary>
            <param name="distributedEnabled">If set to <c>true</c> makes distributed calls when messaging a cache refresher.</param>
            <param name="jsonSerializer"></param>
        </member>
        <member name="P:Umbraco.Cms.Infrastructure.Sync.ServerMessengerBase.DistributedEnabled">
            <summary>
            Gets or sets a value indicating whether distributed calls are made when messaging a cache refresher.
            </summary>
            <value>
              <c>true</c> if distributed calls are required; otherwise, <c>false</c> if all we have is the local server.
            </value>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Sync.ServerMessengerBase.Sync">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Sync.ServerMessengerBase.SendMessages">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Sync.ServerMessengerBase.RequiresDistributed(Umbraco.Cms.Core.Cache.ICacheRefresher,Umbraco.Cms.Core.Sync.MessageType)">
            <summary>
            Determines whether to make distributed calls when messaging a cache refresher.
            </summary>
            <param name="refresher">The cache refresher.</param>
            <param name="messageType">The message type.</param>
            <returns>
              <c>true</c> if distributed calls are required; otherwise, <c>false</c> if all we have is the local server.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Sync.ServerMessengerBase.QueueRefresh``1(Umbraco.Cms.Core.Cache.ICacheRefresher,``0[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Sync.ServerMessengerBase.QueueRefresh``1(Umbraco.Cms.Core.Cache.ICacheRefresher,System.Func{``0,System.Int32},``0[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Sync.ServerMessengerBase.QueueRefresh``1(Umbraco.Cms.Core.Cache.ICacheRefresher,System.Func{``0,System.Guid},``0[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Sync.ServerMessengerBase.QueueRemove``1(Umbraco.Cms.Core.Cache.ICacheRefresher,System.Func{``0,System.Int32},``0[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Sync.ServerMessengerBase.QueueRemove(Umbraco.Cms.Core.Cache.ICacheRefresher,System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Sync.ServerMessengerBase.QueueRefresh(Umbraco.Cms.Core.Cache.ICacheRefresher,System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Sync.ServerMessengerBase.QueueRefresh(Umbraco.Cms.Core.Cache.ICacheRefresher,System.Guid[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Sync.ServerMessengerBase.QueueRefreshAll(Umbraco.Cms.Core.Cache.ICacheRefresher)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Sync.ServerMessengerBase.DeliverLocal(Umbraco.Cms.Core.Cache.ICacheRefresher,Umbraco.Cms.Core.Sync.MessageType,System.Collections.Generic.IEnumerable{System.Object},System.String)">
            <summary>
            Executes the non-strongly typed <see cref="T:Umbraco.Cms.Core.Cache.ICacheRefresher" /> on the local/current server.
            </summary>
            <param name="refresher">The cache refresher.</param>
            <param name="messageType">The message type.</param>
            <param name="ids">The IDs.</param>
            <param name="json">The JSON.</param>
            <remarks>
            Since this is only for non strongly typed <see cref="T:Umbraco.Cms.Core.Cache.ICacheRefresher" />, it will throw for message types that are by instance.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Sync.ServerMessengerBase.DeliverLocal``1(Umbraco.Cms.Core.Cache.ICacheRefresher,Umbraco.Cms.Core.Sync.MessageType,System.Func{``0,System.Object},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Executes the strongly typed <see cref="T:Umbraco.Cms.Core.Cache.ICacheRefresher`1" /> on the local/current server.
            </summary>
            <typeparam name="T">The cache refresher instance type.</typeparam>
            <param name="refresher">The cache refresher.</param>
            <param name="messageType">The message type.</param>
            <param name="getId">The function that gets the IDs from the instance.</param>
            <param name="instances">The instances.</param>
            <remarks>
            Since this is only for strongly typed <see cref="T:Umbraco.Cms.Core.Cache.ICacheRefresher`1" />, it will throw for message types that are not by instance.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Telemetry.Providers.NodeCountTelemetryProvider">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Telemetry.Providers.SystemTroubleshootingInformationTelemetryProvider.GetTroubleshootingInformation">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Templates.PartialViews.IPartialViewPopulator">
            <summary>
            Populates the Partial View file system using other sources, such as RCL.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Templates.PartialViews.IPartialViewPopulator.CopyPartialViewIfNotExists(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Copies a partial view from the assembly path within the provided assembly, to the file system path. But only if it does not exist yet.
            </summary>
            <param name="assembly">The assembly to look for embedded resources in.</param>
            <param name="embeddedPath">Path to resource as assembly path I.E Umbraco.Cms.Core.EmbeddedResources.</param>
            <param name="fileSystemPath">The partial view filesystem path to copy the file to, I.E. /Views/Partials/blockgrid.</param>
        </member>
        <member name="T:Umbraco.Cms.Infrastructure.Templates.PartialViews.PartialViewPopulator">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Infrastructure.Templates.PartialViews.PartialViewPopulator.CopyPartialViewIfNotExists(System.Reflection.Assembly,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.DatabaseServerMessengerNotificationHandler">
            <summary>
                Ensures that distributed cache events are setup and the <see cref="T:Umbraco.Cms.Core.Sync.IServerMessenger" /> is initialized
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DatabaseServerMessengerNotificationHandler.#ctor(Umbraco.Cms.Core.Sync.IServerMessenger,Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabaseFactory,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Cache.DatabaseServerMessengerNotificationHandler},Umbraco.Cms.Core.Services.IRuntimeState)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.DatabaseServerMessengerNotificationHandler" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DatabaseServerMessengerNotificationHandler.Handle(Umbraco.Cms.Core.Notifications.UmbracoApplicationStartingNotification)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DatabaseServerMessengerNotificationHandler.Handle(Umbraco.Cms.Core.Notifications.UmbracoRequestEndNotification)">
            <summary>
                Clear the batch on end request
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.DefaultRepositoryCachePolicy`2">
            <summary>
                Represents the default cache policy.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TId">The type of the identifier.</typeparam>
            <remarks>
                <para>The default cache policy caches entities with a 5 minutes sliding expiration.</para>
                <para>Each entity is cached individually.</para>
                <para>If options.GetAllCacheAllowZeroCount then a 'zero-count' array is cached when GetAll finds nothing.</para>
                <para>If options.GetAllCacheValidateCount then we check against the db when getting many entities.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DefaultRepositoryCachePolicy`2.Create(`0,System.Action{`0})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DefaultRepositoryCachePolicy`2.Update(`0,System.Action{`0})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DefaultRepositoryCachePolicy`2.Delete(`0,System.Action{`0})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DefaultRepositoryCachePolicy`2.Get(`1,System.Func{`1,`0},System.Func{`1[],System.Collections.Generic.IEnumerable{`0}})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DefaultRepositoryCachePolicy`2.GetCached(`1)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DefaultRepositoryCachePolicy`2.Exists(`1,System.Func{`1,System.Boolean},System.Func{`1[],System.Collections.Generic.IEnumerable{`0}})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DefaultRepositoryCachePolicy`2.GetAll(`1[],System.Func{`1[],System.Collections.Generic.IEnumerable{`0}})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DefaultRepositoryCachePolicy`2.ClearAll">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.FullDataSetRepositoryCachePolicy`2">
            <summary>
                Represents a caching policy that caches the entire entities set as a single collection.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TId">The type of the identifier.</typeparam>
            <remarks>
                <para>Caches the entire set of entities as a single collection.</para>
                <para>
                    Used by Content-, Media- and MemberTypeRepository, DataTypeRepository, DomainRepository,
                    LanguageRepository, PublicAccessRepository, TemplateRepository... things that make sense to
                    keep as a whole in memory.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FullDataSetRepositoryCachePolicy`2.Create(`0,System.Action{`0})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FullDataSetRepositoryCachePolicy`2.Update(`0,System.Action{`0})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FullDataSetRepositoryCachePolicy`2.Delete(`0,System.Action{`0})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FullDataSetRepositoryCachePolicy`2.Get(`1,System.Func{`1,`0},System.Func{`1[],System.Collections.Generic.IEnumerable{`0}})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FullDataSetRepositoryCachePolicy`2.GetCached(`1)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FullDataSetRepositoryCachePolicy`2.Exists(`1,System.Func{`1,System.Boolean},System.Func{`1[],System.Collections.Generic.IEnumerable{`0}})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FullDataSetRepositoryCachePolicy`2.GetAll(`1[],System.Func{`1[],System.Collections.Generic.IEnumerable{`0}})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FullDataSetRepositoryCachePolicy`2.ClearAll">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.RepositoryCachePolicyBase`2">
            <summary>
                A base class for repository cache policies.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TId">The type of the identifier.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.RepositoryCachePolicyBase`2.Get(`1,System.Func{`1,`0},System.Func{`1[],System.Collections.Generic.IEnumerable{`0}})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.RepositoryCachePolicyBase`2.GetCached(`1)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.RepositoryCachePolicyBase`2.Exists(`1,System.Func{`1,System.Boolean},System.Func{`1[],System.Collections.Generic.IEnumerable{`0}})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.RepositoryCachePolicyBase`2.Create(`0,System.Action{`0})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.RepositoryCachePolicyBase`2.Update(`0,System.Action{`0})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.RepositoryCachePolicyBase`2.Delete(`0,System.Action{`0})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.RepositoryCachePolicyBase`2.GetAll(`1[],System.Func{`1[],System.Collections.Generic.IEnumerable{`0}})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.RepositoryCachePolicyBase`2.ClearAll">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.SingleItemsOnlyRepositoryCachePolicy`2">
            <summary>
                Represents a special policy that does not cache the result of GetAll.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TId">The type of the identifier.</typeparam>
            <remarks>
                <para>
                    Overrides the default repository cache policy and does not writes the result of GetAll
                    to cache, but only the result of individual Gets. It does read the cache for GetAll, though.
                </para>
                <para>Used by DictionaryRepository.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.NCronTabParser">
            <summary>
            Implements <see cref="T:Umbraco.Cms.Core.Configuration.ICronTabParser"/> using the NCrontab library
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Configuration.NCronTabParser.IsValidCronTab(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Configuration.NCronTabParser.GetNextOccurrence(System.String,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.MigrationEventArgs.MigrationsTypes">
            <summary>
                Returns all migrations that were used in the migration runner
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.MigrationEventArgs.ConfiguredSemVersion">
            <summary>
                Gets the origin version of the migration, i.e. the one that is currently installed.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.MigrationEventArgs.TargetSemVersion">
            <summary>
                Gets the target version of the migration.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.MigrationEventArgs.ProductName">
            <summary>
                Gets the product name.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.MigrationEventArgs.MigrationContext">
            <summary>
                Gets the migration context.
            </summary>
            <remarks>Is only available after migrations have run, for post-migrations.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.IPublishedContentQuery">
            <summary>
                Query methods used for accessing strongly typed content in templates.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.IPublishedContentQuery.Search(System.String,System.Int32,System.Int32,System.Int64@,System.String,System.String,System.Collections.Generic.ISet{System.String})">
            <summary>
                Searches content.
            </summary>
            <param name="term">The term to search.</param>
            <param name="skip">The amount of results to skip.</param>
            <param name="take">The amount of results to take/return.</param>
            <param name="totalRecords">The total amount of records.</param>
            <param name="culture">The culture (defaults to a culture insensitive search).</param>
            <param name="indexName">
                The name of the index to search (defaults to
                <see cref="F:Umbraco.Cms.Core.Constants.UmbracoIndexes.ExternalIndexName" />).
            </param>
            <param name="loadedFields">
                This parameter is no longer used, because the results are loaded from the published snapshot
                using the single item ID field.
            </param>
            <returns>
                The search results.
            </returns>
            <remarks>
                <para>
                    When the <paramref name="culture" /> is not specified or is *, all cultures are searched.
                    To search for only invariant documents and fields use null.
                    When searching on a specific culture, all culture specific fields are searched for the provided culture and all
                    invariant fields for all documents.
                </para>
                <para>While enumerating results, the ambient culture is changed to be the searched culture.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.IPublishedContentQuery.Search(System.String,System.String,System.String)">
            <summary>
                Searches content.
            </summary>
            <param name="term">The term to search.</param>
            <param name="culture">The culture (defaults to a culture insensitive search).</param>
            <param name="indexName">
                The name of the index to search (defaults to
                <see cref="F:Umbraco.Cms.Core.Constants.UmbracoIndexes.ExternalIndexName" />).
            </param>
            <returns>
                The search results.
            </returns>
            <remarks>
                <para>
                    When the <paramref name="culture" /> is not specified or is *, all cultures are searched.
                    To search for only invariant documents and fields use null.
                    When searching on a specific culture, all culture specific fields are searched for the provided culture and all
                    invariant fields for all documents.
                </para>
                <para>While enumerating results, the ambient culture is changed to be the searched culture.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.IPublishedContentQuery.Search(Examine.Search.IQueryExecutor)">
            <summary>
                Executes the query and converts the results to <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedSearchResult" />.
            </summary>
            <param name="query">The query.</param>
            <returns>
                The search results.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IPublishedContentQuery.Search(Examine.Search.IQueryExecutor,System.Int32,System.Int32,System.Int64@)">
            <summary>
                Executes the query and converts the results to <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedSearchResult" />.
            </summary>
            <param name="query">The query.</param>
            <param name="skip">The amount of results to skip.</param>
            <param name="take">The amount of results to take/return.</param>
            <param name="totalRecords">The total amount of records.</param>
            <returns>
                The search results.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IPublishedContentQuery.Search(Examine.Search.IQueryExecutor,System.Int32,System.Int32,System.Int64@,System.String)">
            <summary>
                Executes the query and converts the results to <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedSearchResult" />.
            </summary>
            <param name="query">The query.</param>
            <param name="skip">The amount of results to skip.</param>
            <param name="take">The amount of results to take/return.</param>
            <param name="totalRecords">The total amount of records.</param>
            <param name="culture">The culture (defaults to a culture insensitive search).</param>
            <returns>
                The search results.
            </returns>
            <remarks>
                While enumerating results, the ambient culture is changed to be the searched culture.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.IPublishedContentQueryAccessor">
            <remarks>
                Not intended for use in background threads where you should make use of
                <see cref="M:Umbraco.Cms.Core.Web.IUmbracoContextFactory.EnsureUmbracoContext" />
                and instead resolve IPublishedContentQuery from a
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScope" />
                e.g. using <see cref="M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.CreateScope(System.IServiceProvider)" />
                <example>
                    <code>
            // Background thread example
            using UmbracoContextReference _ = _umbracoContextFactory.EnsureUmbracoContext();
            using IServiceScope serviceScope = _serviceProvider.CreateScope();
            IPublishedContentQuery query = serviceScope.ServiceProvider.GetRequiredService&lt;IPublishedContentQuery&gt;();
            </code>
                </example>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Logging.Serilog.Enrichers.HttpRequestIdEnricher">
            <summary>
                Enrich log events with a HttpRequestId GUID.
                Original source -
                https://github.com/serilog-web/classic/blob/master/src/SerilogWeb.Classic/Classic/Enrichers/HttpRequestIdEnricher.cs
                Nupkg: 'Serilog.Web.Classic' contains handlers and extra bits we do not want
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Logging.Serilog.Enrichers.HttpRequestIdEnricher.HttpRequestIdPropertyName">
            <summary>
                The property name added to enriched log events.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.Serilog.Enrichers.HttpRequestIdEnricher.Enrich(Serilog.Events.LogEvent,Serilog.Core.ILogEventPropertyFactory)">
            <summary>
                Enrich the log event with an id assigned to the currently-executing HTTP request, if any.
            </summary>
            <param name="logEvent">The log event to enrich.</param>
            <param name="propertyFactory">Factory for creating new properties to add to the event.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Logging.Serilog.Enrichers.HttpRequestNumberEnricher">
            <summary>
                Enrich log events with a HttpRequestNumber unique within the current
                logging session.
                Original source -
                https://github.com/serilog-web/classic/blob/master/src/SerilogWeb.Classic/Classic/Enrichers/HttpRequestNumberEnricher.cs
                Nupkg: 'Serilog.Web.Classic' contains handlers and extra bits we do not want
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Logging.Serilog.Enrichers.HttpRequestNumberEnricher.HttpRequestNumberPropertyName">
            <summary>
                The property name added to enriched log events.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.Serilog.Enrichers.HttpRequestNumberEnricher.Enrich(Serilog.Events.LogEvent,Serilog.Core.ILogEventPropertyFactory)">
            <summary>
                Enrich the log event with the number assigned to the currently-executing HTTP request, if any.
            </summary>
            <param name="logEvent">The log event to enrich.</param>
            <param name="propertyFactory">Factory for creating new properties to add to the event.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Logging.Serilog.Enrichers.HttpSessionIdEnricher">
            <summary>
                Enrich log events with the HttpSessionId property.
                Original source -
                https://github.com/serilog-web/classic/blob/master/src/SerilogWeb.Classic/Classic/Enrichers/HttpSessionIdEnricher.cs
                Nupkg: 'Serilog.Web.Classic' contains handlers and extra bits we do not want
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Logging.Serilog.Enrichers.HttpSessionIdEnricher.HttpSessionIdPropertyName">
            <summary>
                The property name added to enriched log events.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.Serilog.Enrichers.HttpSessionIdEnricher.Enrich(Serilog.Events.LogEvent,Serilog.Core.ILogEventPropertyFactory)">
            <summary>
                Enrich the log event with the current ASP.NET session id, if sessions are enabled.
            </summary>
            <param name="logEvent">The log event to enrich.</param>
            <param name="propertyFactory">Factory for creating new properties to add to the event.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Logging.Serilog.Enrichers.Log4NetLevelMapperEnricher">
            <summary>
                This is used to create a new property in Logs called 'Log4NetLevel'
                So that we can map Serilog levels to Log4Net levels - so log files stay consistent
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Logging.Serilog.Enrichers.ThreadAbortExceptionEnricher">
            <summary>
                Enriches the log if there are ThreadAbort exceptions and will automatically create a minidump if it can
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Logging.Serilog.SerilogLogger">
            <summary>
                Implements MS ILogger on top of Serilog.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.Serilog.SerilogLogger.CreateWithDefaultConfiguration(Umbraco.Cms.Core.Hosting.IHostingEnvironment,Umbraco.Cms.Core.Logging.ILoggingConfiguration,Microsoft.Extensions.Configuration.IConfiguration,Umbraco.Cms.Infrastructure.Logging.Serilog.UmbracoFileConfiguration@)">
            <summary>
                Creates a logger with some pre-defined configuration and remainder from config file
            </summary>
            <remarks>Used by UmbracoApplicationBase to get its logger.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.Serilog.SerilogLogger.LoggerFor(System.Type)">
            <summary>
                Gets a contextualized logger.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.Serilog.SerilogLogger.MapLevel(Umbraco.Cms.Core.Logging.LogLevel)">
            <summary>
                Maps Umbraco's log level to Serilog's.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.Viewer.ILogLevelLoader.GetLogLevelsFromSinks">
            <summary>
                Get the Serilog level values of the global minimum and the UmbracoFile one from the config file.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.Viewer.ILogLevelLoader.GetGlobalMinLogLevel">
            <summary>
                Get the Serilog minimum-level value from the config file.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.Viewer.ILogViewer.GetSavedSearches">
            <summary>
                Get all saved searches from your chosen data source
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.Viewer.ILogViewer.AddSavedSearch(System.String,System.String)">
            <summary>
                Adds a new saved search to chosen data source and returns the updated searches
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.Viewer.ILogViewer.DeleteSavedSearch(System.String)">
            <summary>
                Deletes a saved search to chosen data source and returns the remaining searches
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.Viewer.ILogViewer.GetNumberOfErrors(Umbraco.Cms.Core.Logging.Viewer.LogTimePeriod)">
            <summary>
                A count of number of errors
                By counting Warnings with Exceptions, Errors &amp; Fatal messages
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.Viewer.ILogViewer.GetLogLevelCounts(Umbraco.Cms.Core.Logging.Viewer.LogTimePeriod)">
            <summary>
                Returns a number of the different log level entries
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.Viewer.ILogViewer.GetMessageTemplates(Umbraco.Cms.Core.Logging.Viewer.LogTimePeriod)">
            <summary>
                Returns a list of all unique message templates and their counts
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.Viewer.ILogViewer.GetLogs(Umbraco.Cms.Core.Logging.Viewer.LogTimePeriod,System.Int32,System.Int32,Umbraco.Cms.Core.Direction,System.String,System.String[])">
            <summary>
                Returns the collection of logs
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.Viewer.LogLevelLoader.GetLogLevelsFromSinks">
            <summary>
                Get the Serilog level values of the global minimum and the UmbracoFile one from the config file.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.Viewer.LogLevelLoader.GetGlobalMinLogLevel">
            <summary>
                Get the Serilog minimum-level value from the config file.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.Viewer.LogMessage.Timestamp">
            <summary>
                The time at which the log event occurred.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.Viewer.LogMessage.Level">
            <summary>
                The level of the event.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.Viewer.LogMessage.MessageTemplateText">
            <summary>
                The message template describing the log event.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.Viewer.LogMessage.RenderedMessage">
            <summary>
                The message template filled with the log event properties.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.Viewer.LogMessage.Properties">
            <summary>
                Properties associated with the log event, including those presented in Serilog.Events.LogEvent.MessageTemplate.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.Viewer.LogMessage.Exception">
            <summary>
                An exception associated with the log event, or null.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.Viewer.SerilogLogViewerSourceBase.GetLogLevels">
            <summary>
                Get the Serilog minimum-level and UmbracoFile-level values from the config file.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.Viewer.SerilogLogViewerSourceBase.GetLogs(Umbraco.Cms.Core.Logging.Viewer.LogTimePeriod,Umbraco.Cms.Core.Logging.Viewer.ILogFilter,System.Int32,System.Int32)">
            <summary>
                Get all logs from your chosen data source back as Serilog LogEvents
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Mapping.UmbracoMapper">
            <summary>
                Umbraco Mapper.
            </summary>
            <remarks>
                <para>
                    When a map is defined from TSource to TTarget, the mapper automatically knows how to map
                    from IEnumerable{TSource} to IEnumerable{TTarget} (using a List{TTarget}) and to TTarget[].
                </para>
                <para>
                    When a map is defined from TSource to TTarget, the mapper automatically uses that map
                    for any source type that inherits from, or implements, TSource.
                </para>
                <para>
                    When a map is defined from TSource to TTarget, the mapper can map to TTarget exclusively
                    and cannot re-use that map for types that would inherit from, or implement, TTarget.
                </para>
                <para>
                    When using the Map{TSource, TTarget}(TSource source, ...) overloads, TSource is explicit. When
                    using the Map{TTarget}(object source, ...) TSource is defined as source.GetType().
                </para>
                <para>In both cases, TTarget is explicit and not typeof(target).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.UmbracoMapper.#ctor(Umbraco.Cms.Core.Mapping.MapDefinitionCollection,Umbraco.Cms.Core.Scoping.ICoreScopeProvider,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Mapping.UmbracoMapper})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Mapping.UmbracoMapper" /> class.
            </summary>
            <param name="profiles">The MapDefinitionCollection</param>
            <param name="scopeProvider">The scope provider</param>
            <param name="logger">The logger</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.UmbracoMapper.Define``2">
            <summary>
                Defines a mapping.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.UmbracoMapper.Define``2(System.Action{``0,``1,Umbraco.Cms.Core.Mapping.MapperContext})">
            <summary>
                Defines a mapping.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="map">A mapping method.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.UmbracoMapper.Define``2(System.Func{``0,Umbraco.Cms.Core.Mapping.MapperContext,``1})">
            <summary>
                Defines a mapping.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="ctor">A constructor method.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.UmbracoMapper.Define``2(System.Func{``0,Umbraco.Cms.Core.Mapping.MapperContext,``1},System.Action{``0,``1,Umbraco.Cms.Core.Mapping.MapperContext})">
            <summary>
                Defines a mapping.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="ctor">A constructor method.</param>
            <param name="map">A mapping method.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.UmbracoMapper.Map``1(System.Object)">
            <summary>
                Maps a source object to a new target object.
            </summary>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.UmbracoMapper.Map``1(System.Object,System.Action{Umbraco.Cms.Core.Mapping.MapperContext})">
            <summary>
                Maps a source object to a new target object.
            </summary>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <param name="f">A mapper context preparation method.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.UmbracoMapper.Map``1(System.Object,Umbraco.Cms.Core.Mapping.MapperContext)">
            <summary>
                Maps a source object to a new target object.
            </summary>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <param name="context">A mapper context.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.UmbracoMapper.Map``2(``0)">
            <summary>
                Maps a source object to a new target object.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.UmbracoMapper.Map``2(``0,System.Action{Umbraco.Cms.Core.Mapping.MapperContext})">
            <summary>
                Maps a source object to a new target object.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <param name="f">A mapper context preparation method.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.UmbracoMapper.Map``2(``0,Umbraco.Cms.Core.Mapping.MapperContext)">
            <summary>
                Maps a source object to a new target object.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <param name="context">A mapper context.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.UmbracoMapper.Map``2(``0,``1)">
            <summary>
                Maps a source object to an existing target object.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <param name="target">The target object.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.UmbracoMapper.Map``2(``0,``1,System.Action{Umbraco.Cms.Core.Mapping.MapperContext})">
            <summary>
                Maps a source object to an existing target object.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <param name="target">The target object.</param>
            <param name="f">A mapper context preparation method.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.UmbracoMapper.Map``2(``0,``1,Umbraco.Cms.Core.Mapping.MapperContext)">
            <summary>
                Maps a source object to an existing target object.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <param name="target">The target object.</param>
            <param name="context">A mapper context.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.UmbracoMapper.MapEnumerable``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Maps an enumerable of source objects to a new list of target objects.
            </summary>
            <typeparam name="TSourceElement">The type of the source objects.</typeparam>
            <typeparam name="TTargetElement">The type of the target objects.</typeparam>
            <param name="source">The source objects.</param>
            <returns>A list containing the target objects.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.UmbracoMapper.MapEnumerable``2(System.Collections.Generic.IEnumerable{``0},System.Action{Umbraco.Cms.Core.Mapping.MapperContext})">
            <summary>
                Maps an enumerable of source objects to a new list of target objects.
            </summary>
            <typeparam name="TSourceElement">The type of the source objects.</typeparam>
            <typeparam name="TTargetElement">The type of the target objects.</typeparam>
            <param name="source">The source objects.</param>
            <param name="f">A mapper context preparation method.</param>
            <returns>A list containing the target objects.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.UmbracoMapper.MapEnumerable``2(System.Collections.Generic.IEnumerable{``0},Umbraco.Cms.Core.Mapping.MapperContext)">
            <summary>
                Maps an enumerable of source objects to a new list of target objects.
            </summary>
            <typeparam name="TSourceElement">The type of the source objects.</typeparam>
            <typeparam name="TTargetElement">The type of the target objects.</typeparam>
            <param name="source">The source objects.</param>
            <param name="context">A mapper context.</param>
            <returns>A list containing the target objects.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Migrations.IMigrationPlanExecutor.ExecutePlan(Umbraco.Cms.Infrastructure.Migrations.MigrationPlan,System.String)">
            <summary>
            Executes the migration plan.
            </summary>
            <param name="plan">The migration plan to execute.</param>
            <param name="fromState">The state to start execution at.</param>
            <returns><see cref="T:Umbraco.Cms.Infrastructure.Migrations.ExecutedMigrationPlan"/> containing information about the plan execution, such as completion state and the steps that ran.</returns>
            <remarks>
            <para>Each migration in the plan, may or may not run in a scope depending on the type of plan.</para>
            <para>A plan can complete partially, the changes of each completed migration will be saved.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Migrations.IMigrationPlanExecutor.ExecutePlanAsync(Umbraco.Cms.Infrastructure.Migrations.MigrationPlan,System.String)">
            <summary>
            Executes the migration plan asynchronously.
            </summary>
            <param name="plan">The migration plan to execute.</param>
            <param name="fromState">The state to start execution at.</param>
            <returns>A Task of <see cref="T:Umbraco.Cms.Infrastructure.Migrations.ExecutedMigrationPlan"/> containing information about the plan execution, such as completion state and the steps that ran.</returns>
            <remarks>
            <para>Each migration in the plan, may or may not run in a scope depending on the type of plan.</para>
            <para>A plan can complete partially, the changes of each completed migration will be saved.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.MediaWithCrops">
            <summary>
                Represents a media item with local crops.
            </summary>
            <seealso cref="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped" />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.MediaWithCrops.#ctor(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Models.PublishedContent.IPublishedValueFallback,Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.MediaWithCrops" /> class.
            </summary>
            <param name="content">The content.</param>
            <param name="publishedValueFallback">The published value fallback.</param>
            <param name="localCrops">The local crops.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.MediaWithCrops.Content">
            <summary>
                Gets the content/media item.
            </summary>
            <value>
                The content/media item.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.MediaWithCrops.LocalCrops">
            <summary>
                Gets the local crops.
            </summary>
            <value>
                The local crops.
            </value>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.MediaWithCrops`1">
            <summary>
                Represents a media item with local crops.
            </summary>
            <typeparam name="T">The type of the media item.</typeparam>
            <seealso cref="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped" />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.MediaWithCrops`1.#ctor(`0,Umbraco.Cms.Core.Models.PublishedContent.IPublishedValueFallback,Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.MediaWithCrops`1" /> class.
            </summary>
            <param name="content">The content.</param>
            <param name="publishedValueFallback">The published value fallback.</param>
            <param name="localCrops">The local crops.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.MediaWithCrops`1.Content">
            <summary>
                Gets the media item.
            </summary>
            <value>
                The media item.
            </value>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.MediaWithCrops`1.op_Implicit(Umbraco.Cms.Core.Models.MediaWithCrops{`0})~`0">
            <summary>
                Performs an implicit conversion from <see cref="T:Umbraco.Cms.Core.Models.MediaWithCrops`1" /> to <typeparamref name="T"/>.
            </summary>
            <param name="mediaWithCrops">The media with crops.</param>
            <returns>
                The result of the conversion.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PathValidationExtensions">
            <summary>
                Provides extension methods for path validation.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PathValidationExtensions.ValidatePathWithException(Umbraco.Cms.Infrastructure.Persistence.Dtos.NodeDto)">
            <summary>
                Does a quick check on the entity's set path to ensure that it's valid and consistent
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PathValidationExtensions.ValidatePath(Umbraco.Cms.Core.Models.Entities.IUmbracoEntity)">
            <summary>
                Does a quick check on the entity's set path to ensure that it's valid and consistent
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PathValidationExtensions.EnsureValidPath``1(``0,Microsoft.Extensions.Logging.ILogger{``0},System.Func{``0,``0},System.Action{``0})">
            <summary>
                This will validate the entity's path and if it's invalid it will fix it, if fixing is required it will recursively
                check and fix all ancestors if required.
            </summary>
            <param name="entity"></param>
            <param name="logger"></param>
            <param name="getParent">A callback specified to retrieve the parent entity of the entity</param>
            <param name="update">A callback specified to update a fixed entity</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Packaging.PackageMigrationPlan">
            <summary>
            Represents a package migration plan.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Packaging.PackageMigrationPlan.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Packaging.PackageMigrationPlan" /> class.
            </summary>
            <param name="packageName">The package name that the plan is for. If the package has a package.manifest these must match.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Packaging.PackageMigrationPlan.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Packaging.PackageMigrationPlan" /> class.
            </summary>
            <param name="packageName">The package name that the plan is for. If the package has a package.manifest these must match.</param>
            <param name="planName">The plan name for the package. This should be the same name as the package name, if there is only one plan in the package.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Packaging.PackageMigrationPlan.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Packaging.PackageMigrationPlan" /> class.
            </summary>
            <param name="packageId">The package identifier that the plan is for. If the package has a package.manifest these must match.</param>
            <param name="packageName">The package name that the plan is for. If the package has a package.manifest these must match.</param>
            <param name="planName">The plan name for the package. This should be the same name as the package name, if there is only one plan in the package.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Packaging.PackageMigrationPlan.IgnoreCurrentState">
            <summary>
            Inform the plan executor to ignore all saved package state and
            run the migration from initial state to it's end state.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Packaging.PackageMigrationPlan.PackageId">
            <summary>
            Gets the package identifier.
            </summary>
            <value>
            The package identifier.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Packaging.PackageMigrationPlan.PackageName">
            <summary>
            Gets the package name.
            </summary>
            <value>
            The package name.
            </value>
        </member>
        <member name="M:Umbraco.Cms.Core.Packaging.PackageMigrationPlan.DefinePlan">
            <summary>
            Defines the plan.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Packaging.PackageMigrationPlanCollection">
            <summary>
                A collection of <see cref="T:Umbraco.Cms.Core.Packaging.PackageMigrationPlan" />
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Packaging.PendingPackageMigrations.GetPendingPackageMigrations(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
                Returns what package migration names are pending
            </summary>
            <param name="keyValues">
                These are the key/value pairs from the keyvalue storage of migration names and their final values
            </param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.BlockEditorMinMaxValidatorBase`2">
            <summary>
            Validates the min/max number of items of a block based editor
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockEditorMinMaxValidatorBase`2.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.BlockEditorMinMaxValidatorBase`2"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.BlockEditorMinMaxValidatorBase`2.TextService">
            <summary>
            Gets the <see cref="T:Umbraco.Cms.Core.Services.ILocalizedTextService"/>
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockEditorMinMaxValidatorBase`2.Validate(System.Object,System.String,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockEditorMinMaxValidatorBase`2.ValidateNumberOfBlocks(Umbraco.Cms.Core.Models.Blocks.BlockEditorData{`0,`1},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Validates the number of blocks are within the configured minimum and maximum values.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.BlockEditorPropertyValueEditor`2.JsonSerializer">
            <summary>
            Gets the <see cref="T:Umbraco.Cms.Core.Serialization.IJsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockEditorPropertyValueEditor`2.GetReferences(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockEditorPropertyValueEditor`2.GetTags(System.Object,System.Object,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockEditorPropertyValueEditor`2.ToEditor(Umbraco.Cms.Core.Models.IProperty,System.String,System.String)">
            <summary>
                Ensure that sub-editor values are translated through their ToEditor methods
            </summary>
            <param name="property"></param>
            <param name="culture"></param>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockEditorPropertyValueEditor`2.FromEditor(Umbraco.Cms.Core.Models.Editors.ContentPropertyData,System.Object)">
            <summary>
                Ensure that sub-editor values are translated through their FromEditor methods
            </summary>
            <param name="editorValue"></param>
            <param name="currentValue"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.BlockEditorValues`2">
            <summary>
            Used to deserialize json values and clean up any values based on the existence of element types and layout structure.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.BlockGridPropertyEditor">
            <summary>
            Represents a block list property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockGridPropertyEditor.CanMergePartialPropertyValues(Umbraco.Cms.Core.Models.IPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockGridPropertyEditor.MergePartialPropertyValueForCulture(System.Object,System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.BlockGridPropertyEditorBase">
            <summary>
            Abstract base class for block grid based editors.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.BlockGridPropertyNotificationHandler">
            <summary>
            A handler for Block grid editors used to bind to notifications
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.BlockListPropertyEditor">
            <summary>
            Represents a block list property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockListPropertyEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory,Umbraco.Cms.Core.IO.IIOHelper,Umbraco.Cms.Core.PropertyEditors.IBlockValuePropertyIndexValueFactory,Umbraco.Cms.Core.Serialization.IJsonSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.BlockListPropertyEditor"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.BlockListPropertyEditor.SupportsConfigurableElements">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockListPropertyEditor.CanMergePartialPropertyValues(Umbraco.Cms.Core.Models.IPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockListPropertyEditor.MergePartialPropertyValueForCulture(System.Object,System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockListPropertyEditor.MergeVariantInvariantPropertyValue(System.Object,System.Object,System.Boolean,System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockListPropertyEditor.CreateConfigurationEditor">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.BlockListPropertyEditorBase">
            <summary>
            Abstract base class for block list based editors.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockListPropertyEditorBase.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory,Umbraco.Cms.Core.PropertyEditors.IBlockValuePropertyIndexValueFactory,Umbraco.Cms.Core.Serialization.IJsonSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.BlockListPropertyEditorBase"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.BlockListPropertyEditorBase.PropertyIndexValueFactory">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockListPropertyEditorBase.CreateBlockEditorDataConverter">
            <summary>
            Instantiates a new <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockEditorDataConverter`2"/> for use with the block list editor property value editor.
            </summary>
            <returns>A new instance of <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockListEditorDataConverter"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockListPropertyEditorBase.CreateValueEditor">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.BlockListPropertyEditorBase.BlockListEditorPropertyValueEditor">
            <summary>
            Defines the value editor for the block list property editors.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockListPropertyEditorBase.BlockListEditorPropertyValueEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.DataEditorAttribute,Umbraco.Cms.Core.Models.Blocks.BlockEditorDataConverter{Umbraco.Cms.Core.Models.Blocks.BlockListValue,Umbraco.Cms.Core.Models.Blocks.BlockListLayoutItem},Umbraco.Cms.Core.PropertyEditors.PropertyEditorCollection,Umbraco.Cms.Core.PropertyEditors.DataValueReferenceFactoryCollection,Umbraco.Cms.Core.Cache.IDataTypeConfigurationCache,Umbraco.Cms.Core.Cache.PropertyEditors.IBlockEditorElementTypeCache,Umbraco.Cms.Core.Services.ILocalizedTextService,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.PropertyEditors.BlockListPropertyEditorBase.BlockListEditorPropertyValueEditor},Umbraco.Cms.Core.Strings.IShortStringHelper,Umbraco.Cms.Core.Serialization.IJsonSerializer,Umbraco.Cms.Core.Services.IPropertyValidationService,Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockEditorVarianceHandler,Umbraco.Cms.Core.Services.ILanguageService,Umbraco.Cms.Core.IO.IIOHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.BlockListPropertyEditorBase.BlockListEditorPropertyValueEditor"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.BlockListPropertyEditorBase.BlockListEditorPropertyValueEditor.RequiredValidator">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockListPropertyEditorBase.BlockListEditorPropertyValueEditor.CreateWithLayout(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.Blocks.BlockListLayoutItem})">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.BlockListPropertyEditorBase.BlockListEditorPropertyValueEditor.MinMaxValidator">
            <summary>
            Validates the min/max configuration for block list property editors.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockListPropertyEditorBase.BlockListEditorPropertyValueEditor.ConfiguredElementTypeKeys">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.BlockListPropertyNotificationHandler">
            <summary>
            A handler for Block list editors used to bind to notifications
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockValuePropertyIndexValueFactoryBase`1.RenameKeysToEnsureRawSegmentsIsAPrefix(System.Collections.Generic.List{Umbraco.Cms.Core.PropertyEditors.IndexValue})">
            <summary>
            Rename keys that count the RAW-constant, to ensure the RAW-constant is a prefix.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockValuePropertyIndexValueFactoryBase`1.GetDataItems(`0,System.Boolean)">
            <summary>
            Get the data items of a parent item. E.g. block list have contentData.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockValuePropertyIndexValueFactoryBase`1.GetDataItems(System.Collections.Generic.IList{Umbraco.Cms.Core.Models.Blocks.BlockItemData},System.Collections.Generic.IList{Umbraco.Cms.Core.Models.Blocks.BlockItemVariation},System.Boolean)">
            <summary>
            Unwraps block item data as data items.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockValuePropertyIndexValueFactoryBase`1.HandleResume(System.Collections.Generic.List{Umbraco.Cms.Core.PropertyEditors.IndexValue},Umbraco.Cms.Core.Models.IProperty,System.String,System.String,System.Boolean)">
            <summary>
            Index a key with the name of the property, using the relevant content of all the children.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockValuePropertyIndexValueFactoryBase`1.GetResumeFromAllContent(System.Collections.Generic.List{Umbraco.Cms.Core.PropertyEditors.IndexValue},System.String)">
            <summary>
            Gets a resume as string of all the content in this nested type.
            </summary>
            <param name="indexedContent">All the indexed content for this property.</param>
            <param name="culture">The culture to get the resume for.</param>
            <returns>the string with all relevant content from </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockValuePropertyIndexValueFactoryBase`1.GetNestedResults(System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,Umbraco.Cms.Core.Models.IPropertyType},Umbraco.Cms.Core.PropertyEditors.BlockValuePropertyIndexValueFactoryBase{`0}.RawDataItem,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.Guid,Umbraco.Cms.Core.Models.IContentType})">
            <summary>
             Gets the content to index for the nested type. E.g. Block list, Nested Content, etc..
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockValuePropertyValueEditorBase`2.GetReferences(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockValuePropertyValueEditorBase`2.GetTags(System.Object,System.Object,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.BlockValuePropertyValueEditorBase`2.UpdateSourceInvariantData(Umbraco.Cms.Core.Models.Blocks.BlockEditorData{`0,`1},Umbraco.Cms.Core.Models.Blocks.BlockEditorData{`0,`1},System.Boolean)">
            <summary>
            Updates the invariant data in the source with the invariant data in the value if allowed
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="canUpdateInvariantData"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.CheckBoxListPropertyEditor">
            <summary>
                A property editor to allow multiple checkbox selection of pre-defined items.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.CheckBoxListPropertyEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory,Umbraco.Cms.Core.IO.IIOHelper,Umbraco.Cms.Core.Serialization.IConfigurationEditorJsonSerializer)">
            <summary>
                The constructor will setup the property editor based on the attribute if one is found
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.CheckBoxListPropertyEditor.CreateConfigurationEditor">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.CheckBoxListPropertyEditor.CreateValueEditor">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ColorPickerPropertyEditor">
            <summary>
            Represents a color picker property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ColorPickerPropertyEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory,Umbraco.Cms.Core.IO.IIOHelper,Umbraco.Cms.Core.Serialization.IConfigurationEditorJsonSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.ColorPickerPropertyEditor"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.ColorPickerPropertyEditor.PropertyIndexValueFactory">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ColorPickerPropertyEditor.CreateValueEditor">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ColorPickerPropertyEditor.CreateConfigurationEditor">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ColorPickerPropertyEditor.ColorPickerPropertyValueEditor">
            <summary>
            Defines the value editor for the color picker property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ColorPickerPropertyEditor.ColorPickerPropertyValueEditor.#ctor(Umbraco.Cms.Core.Strings.IShortStringHelper,Umbraco.Cms.Core.Serialization.IJsonSerializer,Umbraco.Cms.Core.IO.IIOHelper,Umbraco.Cms.Core.PropertyEditors.DataEditorAttribute,Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.ColorPickerPropertyEditor.ColorPickerPropertyValueEditor"/> class.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ColorPickerPropertyEditor.ColorPickerPropertyValueEditor.ConfiguredColorValidator">
            <summary>
            Validates the color selection for the color picker property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ColorPickerPropertyEditor.ColorPickerPropertyValueEditor.ConfiguredColorValidator.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.ColorPickerPropertyEditor.ColorPickerPropertyValueEditor.ConfiguredColorValidator"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ColorPickerPropertyEditor.ColorPickerPropertyValueEditor.ConfiguredColorValidator.Validate(System.Object,System.String,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ComplexEditorValidator">
            <summary>
                Used to validate complex editors that contain nested editors
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ComplexEditorValidator.Validate(System.Object,System.String,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ComplexEditorValidator.GetNestedValidationResults(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.PropertyEditors.ComplexEditorValidator.ElementTypeValidationModel},Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <summary>
                Return a nested validation result per row (Element Type)
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ComplexPropertyEditorContentNotificationHandler">
            <summary>
            Handles nested Udi keys when
            - saving: Empty keys get generated
            - copy: keys get replaced by new ones while keeping references intact
            - scaffolding: keys get replaced by new ones while keeping references intact
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.DateTimePropertyEditor">
            <summary>
                Represents a date and time property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DateTimePropertyEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.DateTimePropertyEditor" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DateTimePropertyEditor.CreateValueEditor">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.EmailAddressPropertyEditor">
            <summary>
            Defines an email address property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.EmailAddressPropertyEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.EmailAddressPropertyEditor"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.EmailAddressPropertyEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory,Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.EmailAddressPropertyEditor"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.EmailAddressPropertyEditor.CreateValueEditor">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.FileUploadPropertyEditor.CreateConfigurationEditor">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.FileUploadPropertyEditor.CreateValueEditor">
            <summary>
                Creates the corresponding property value editor.
            </summary>
            <returns>The corresponding property value editor.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.FileUploadPropertyEditor.IsUploadField(Umbraco.Cms.Core.Models.IProperty)">
            <summary>
                Gets a value indicating whether a property is an upload field.
            </summary>
            <param name="property">The property.</param>
            <returns>
                <c>true</c> if the specified property is an upload field; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.FileUploadPropertyEditor.ContainedFilePaths(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IContentBase})">
            <summary>
                The paths to all file upload property files contained within a collection of content entities
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.FileUploadPropertyEditor.GetFilePathsFromPropertyValues(Umbraco.Cms.Core.Models.IProperty)">
            <summary>
                Look through all property values stored against the property and resolve any file paths stored
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.FileUploadPropertyEditor.AutoFillProperties(Umbraco.Cms.Core.Models.IContentBase)">
            <summary>
                Auto-fill properties (or clear).
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.FileUploadPropertyValueEditor">
            <summary>
                The value editor for the file upload property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.FileUploadPropertyValueEditor.FromEditor(Umbraco.Cms.Core.Models.Editors.ContentPropertyData,System.Object)">
            <summary>
                Converts the client model (FileUploadValue) into the value can be stored in the database (the file path).
            </summary>
            <param name="editorValue">The value received from the editor.</param>
            <param name="currentValue">The current value of the property</param>
            <returns>The converted value.</returns>
            <remarks>
                <para>The <paramref name="currentValue" /> is used to re-use the folder, if possible.</para>
                <para>
                    The <paramref name="editorValue" /> is value passed in from the editor. If the value is empty, we
                    must delete the currently selected file (<paramref name="currentValue" />).
                </para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ImageCropperConfiguration">
            <summary>
                Represents the configuration for the image cropper value editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ImageCropperConfigurationExtensions.ApplyConfiguration(Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue,Umbraco.Cms.Core.PropertyEditors.ImageCropperConfiguration)">
            <summary>
                Applies the configuration to ensure only valid crops are kept and have the correct width/height.
            </summary>
            <param name="imageCropperValue"></param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ImageCropperConfigurationEditor">
            <summary>
                Represents the configuration editor for the image cropper value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ImageCropperPropertyEditor">
            <summary>
                Represents an image cropper property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ImageCropperPropertyEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory,Microsoft.Extensions.Logging.ILoggerFactory,Umbraco.Cms.Core.IO.MediaFileManager,Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.ContentSettings},Umbraco.Cms.Core.IO.IIOHelper,Umbraco.Cms.Core.Media.UploadAutoFillProperties,Umbraco.Cms.Core.Services.IContentService,Umbraco.Cms.Core.Serialization.IJsonSerializer)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.ImageCropperPropertyEditor" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ImageCropperPropertyEditor.Handle(Umbraco.Cms.Core.Notifications.ContentCopiedNotification)">
            <summary>
                After a content has been copied, also copy uploaded files.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ImageCropperPropertyEditor.CreateValueEditor">
            <summary>
                Creates the corresponding property value editor.
            </summary>
            <returns>The corresponding property value editor.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ImageCropperPropertyEditor.CreateConfigurationEditor">
            <summary>
                Creates the corresponding preValue editor.
            </summary>
            <returns>The corresponding preValue editor.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ImageCropperPropertyEditor.IsCropperField(Umbraco.Cms.Core.Models.IProperty)">
            <summary>
                Gets a value indicating whether a property is an image cropper field.
            </summary>
            <param name="property">The property.</param>
            <returns>
                <c>true</c> if the specified property is an image cropper field; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ImageCropperPropertyEditor.ContainedFilePaths(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IContentBase})">
            <summary>
                The paths to all image cropper property files contained within a collection of content entities
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ImageCropperPropertyEditor.GetFilePathsFromPropertyValues(Umbraco.Cms.Core.Models.IProperty)">
            <summary>
                Look through all property values stored against the property and resolve any file paths stored
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ImageCropperPropertyEditor.GetFileSrcFromPropertyValue(System.Object,System.Boolean)">
            <summary>
                Returns the "src" property from the json structure if the value is formatted correctly
            </summary>
            <param name="propVal"></param>
            <param name="relative">Should the path returned be the application relative path</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ImageCropperPropertyEditor.AutoFillProperties(Umbraco.Cms.Core.Models.IContentBase)">
            <summary>
                Auto-fill properties (or clear).
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ImageCropperPropertyValueEditor">
            <summary>
                The value editor for the image cropper property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ImageCropperPropertyValueEditor.ToEditor(Umbraco.Cms.Core.Models.IProperty,System.String,System.String)">
            <summary>
                This is called to merge in the prevalue crops with the value that is saved - similar to the property value
                converter for the front-end
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ImageCropperPropertyValueEditor.FromEditor(Umbraco.Cms.Core.Models.Editors.ContentPropertyData,System.Object)">
            <summary>
                Converts the value received from the editor into the value can be stored in the database.
            </summary>
            <param name="editorValue">The value received from the editor.</param>
            <param name="currentValue">The current value of the property</param>
            <returns>The converted value.</returns>
            <remarks>
                <para>The <paramref name="currentValue" /> is used to re-use the folder, if possible.</para>
                <para>
                    editorValue.Value is used to figure out editorFile and, if it has been cleared, remove the old file.
                    If editorValue.Value deserializes as <see cref="T:Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue"/> and the <see cref="!:ImageCropperValue.Src"/>
                    value is a GUID, it is assumed to contain a temporary file key, and we will attempt to replace the currently
                    selected file with the corresponding temporary file.
                </para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ListViewPropertyEditor">
            <summary>
                Represents a list-view editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ListViewPropertyEditor.CreateConfigurationEditor">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor">
            <summary>
            Represents a media picker property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory,Umbraco.Cms.Core.IO.IIOHelper)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.PropertyIndexValueFactory">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.CreateConfigurationEditor">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.CreateValueEditor">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor">
            <summary>
            Defines the value editor for the media picker property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.#ctor(Umbraco.Cms.Core.Strings.IShortStringHelper,Umbraco.Cms.Core.Serialization.IJsonSerializer,Umbraco.Cms.Core.IO.IIOHelper,Umbraco.Cms.Core.PropertyEditors.DataEditorAttribute,Umbraco.Cms.Core.Services.IMediaImportService,Umbraco.Cms.Core.Services.IMediaService,Umbraco.Cms.Core.Services.ITemporaryFileService,Umbraco.Cms.Infrastructure.Scoping.IScopeProvider,Umbraco.Cms.Core.Security.IBackOfficeSecurityAccessor,Umbraco.Cms.Core.Cache.IDataTypeConfigurationCache,Umbraco.Cms.Core.Services.ILocalizedTextService,Umbraco.Cms.Core.Services.IMediaTypeService,Umbraco.Cms.Core.Services.Navigation.IMediaNavigationQueryService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor"/> class.
            </summary>
            <remarks>
                Note on FromEditor() and ToEditor() methods.
                We do not want to transform the way the data is stored in the DB and would like to keep a raw JSON string.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.GetReferences(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.ToEditor(Umbraco.Cms.Core.Models.IProperty,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.FromEditor(Umbraco.Cms.Core.Models.Editors.ContentPropertyData,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.Deserialize(Umbraco.Cms.Core.Serialization.IJsonSerializer,System.Object)">
            <summary>
            Deserializes the provided JSON value into a list of <see cref="T:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.MediaWithCropsDto"/>.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.MediaWithCropsDto">
            <summary>
                Model/DTO that represents the JSON that the MediaPicker3 stores.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.MediaWithCropsDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.MediaWithCropsDto.MediaKey">
            <summary>
            Gets or sets the media key.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.MediaWithCropsDto.MediaTypeAlias">
            <summary>
            Gets or sets the media type alias.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.MediaWithCropsDto.Crops">
            <summary>
            Gets or sets the crops.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.MediaWithCropsDto.FocalPoint">
            <summary>
            Gets or sets the focal point.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.MediaWithCropsDto.Prune">
            <summary>
                Removes redundant crop data/default focal point.
            </summary>
            <remarks>
                Because the DTO uses the same JSON keys as the image cropper value for crops and focal point, we can re-use the
                prune method.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.MediaWithCropsDto.ApplyConfiguration(Umbraco.Cms.Core.PropertyEditors.MediaPicker3Configuration)">
            <summary>
                Applies the configuration to ensure only valid crops are kept and have the correct width/height.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.MinMaxValidator">
            <summary>
            Validates the min/max configuration for the media picker property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.MinMaxValidator.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.MinMaxValidator"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.MinMaxValidator.Validate(System.Collections.Generic.List{Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.MediaWithCropsDto},Umbraco.Cms.Core.PropertyEditors.MediaPicker3Configuration,System.String,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.AllowedTypeValidator">
            <summary>
            Validates the allowed type configuration for the media picker property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.AllowedTypeValidator.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService,Umbraco.Cms.Core.Services.IMediaTypeService,Umbraco.Cms.Core.Services.IMediaService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.AllowedTypeValidator"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.AllowedTypeValidator.Validate(System.Collections.Generic.List{Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.MediaWithCropsDto},Umbraco.Cms.Core.PropertyEditors.MediaPicker3Configuration,System.String,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.StartNodeValidator">
            <summary>
            Validates the start node configuration for the media picker property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.StartNodeValidator.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService,Umbraco.Cms.Core.Services.Navigation.IMediaNavigationQueryService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.StartNodeValidator"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.StartNodeValidator.Validate(System.Collections.Generic.List{Umbraco.Cms.Core.PropertyEditors.MediaPicker3PropertyEditor.MediaPicker3PropertyValueEditor.MediaWithCropsDto},Umbraco.Cms.Core.PropertyEditors.MediaPicker3Configuration,System.String,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor">
            <summary>
            Represents a multi-node tree picker property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory,Umbraco.Cms.Core.IO.IIOHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.CreateConfigurationEditor">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.CreateValueEditor">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor">
            <summary>
            Defines the value editor for the media picker property editor.
            </summary>
            <remarks>
            At first glance, the FromEditor and ToEditor methods might seem strange.
            This is because we wanted to stop the leaking of UDIs to the frontend while not having to do database migrations
            so we opted to, for now, translate the UDI string in the database into a structured format unique to the client.
            This way, for now, no migration is needed and no changes outside of the editor logic needs to be touched to stop the leaking.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor.#ctor(Umbraco.Cms.Core.Strings.IShortStringHelper,Umbraco.Cms.Core.Serialization.IJsonSerializer,Umbraco.Cms.Core.IO.IIOHelper,Umbraco.Cms.Core.PropertyEditors.DataEditorAttribute,Umbraco.Cms.Core.Services.ILocalizedTextService,Umbraco.Cms.Core.Services.IEntityService,Umbraco.Cms.Core.Scoping.ICoreScopeProvider,Umbraco.Cms.Core.Services.IContentService,Umbraco.Cms.Core.Services.IMediaService,Umbraco.Cms.Core.Services.IMemberService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor.#ctor(Umbraco.Cms.Core.Strings.IShortStringHelper,Umbraco.Cms.Core.Serialization.IJsonSerializer,Umbraco.Cms.Core.IO.IIOHelper,Umbraco.Cms.Core.PropertyEditors.DataEditorAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor.GetReferences(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor.FromEditor(Umbraco.Cms.Core.Models.Editors.ContentPropertyData,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor.ToEditor(Umbraco.Cms.Core.Models.IProperty,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor.EditorEntityReference">
            <summary>
            Describes and editor entity reference.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor.EditorEntityReference.Type">
            <summary>
            Gets or sets the entity object type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor.EditorEntityReference.Unique">
            <summary>
            Gets or sets the entity unique identifier.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor.DocumentObjectType">
            <summary>
            Gets the name of the configured object type for documents.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor.MediaObjectType">
            <summary>
            Gets the name of the configured object type for media.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor.MemberObjectType">
            <summary>
            Gets the name of the configured object type for members.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor.MinMaxValidator">
            <inheritdoc/>
            <summary>
            Validates the min/max configuration for the multi-node tree picker property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor.MinMaxValidator.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor.MinMaxValidator"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor.MinMaxValidator.Validate(Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor.EditorEntityReference[],Umbraco.Cms.Core.PropertyEditors.MultiNodePickerConfiguration,System.String,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor.ObjectTypeValidator">
            <inheritdoc/>
            <summary>
            Validates the selected object type for the multi-node tree picker property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor.ObjectTypeValidator.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService,Umbraco.Cms.Core.Scoping.ICoreScopeProvider,Umbraco.Cms.Core.Services.IEntityService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor.ObjectTypeValidator"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor.ObjectTypeValidator.Validate(Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor.EditorEntityReference[],Umbraco.Cms.Core.PropertyEditors.MultiNodePickerConfiguration,System.String,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor.ContentTypeValidator">
            <inheritdoc/>
            <summary>
            Validates the selected content type for the multi-node tree picker property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor.ContentTypeValidator.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService,Umbraco.Cms.Core.Scoping.ICoreScopeProvider,Umbraco.Cms.Core.Services.IContentService,Umbraco.Cms.Core.Services.IMediaService,Umbraco.Cms.Core.Services.IMemberService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor.ContentTypeValidator"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor.ContentTypeValidator.Validate(Umbraco.Cms.Core.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodeTreePickerPropertyValueEditor.EditorEntityReference[],Umbraco.Cms.Core.PropertyEditors.MultiNodePickerConfiguration,System.String,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.MultipleTextStringConfigurationEditor">
            <summary>
                Represents the configuration editor for a multiple textstring value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.MultipleTextStringPropertyEditor">
            <summary>
            Represents a multiple text string property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MultipleTextStringPropertyEditor.#ctor(Umbraco.Cms.Core.IO.IIOHelper,Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.MultipleTextStringPropertyEditor" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MultipleTextStringPropertyEditor.CreateValueEditor">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MultipleTextStringPropertyEditor.CreateConfigurationEditor">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.MultipleTextStringPropertyEditor.MultipleTextStringPropertyValueEditor">
            <summary>
            Defines the value editor for the multiple text string property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MultipleTextStringPropertyEditor.MultipleTextStringPropertyValueEditor.#ctor(Umbraco.Cms.Core.Strings.IShortStringHelper,Umbraco.Cms.Core.Serialization.IJsonSerializer,Umbraco.Cms.Core.IO.IIOHelper,Umbraco.Cms.Core.PropertyEditors.DataEditorAttribute,Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.MultipleTextStringPropertyEditor.MultipleTextStringPropertyValueEditor"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.MultipleTextStringPropertyEditor.MultipleTextStringPropertyValueEditor.FormatValidator">
            <summary>
            A custom <see href="IValueFormatValidator" /> is used as for multiple text strings, each string should individually
            be checked against the configured regular expression, rather than the JSON representing all the strings as a whole.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MultipleTextStringPropertyEditor.MultipleTextStringPropertyValueEditor.FromEditor(Umbraco.Cms.Core.Models.Editors.ContentPropertyData,System.Object)">
            <summary>
            The value passed in from the editor will be an array of simple objects so we'll need to parse them to get the
            string.
            </summary>
            <param name="editorValue"></param>
            <param name="currentValue"></param>
            <returns></returns>
            <remarks>
            We will also check the pre-values here, if there are more items than what is allowed we'll just trim the end.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MultipleTextStringPropertyEditor.MultipleTextStringPropertyValueEditor.ToEditor(Umbraco.Cms.Core.Models.IProperty,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.MultipleTextStringPropertyEditor.MultipleTextStringFormatValidator">
            <summary>
            A custom <see href="IValueFormatValidator" /> to check each string against the configured format.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MultipleTextStringPropertyEditor.MultipleTextStringFormatValidator.ValidateFormat(System.Object,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.MultipleTextStringPropertyEditor.MinMaxValidator">
            <summary>
            Validates the min/max configuration for the multiple text strings property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MultipleTextStringPropertyEditor.MinMaxValidator.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.MultipleTextStringPropertyEditor.MinMaxValidator"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MultipleTextStringPropertyEditor.MinMaxValidator.Validate(System.Object,System.String,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.MultipleValueEditor">
            <summary>
                A value editor to handle posted JSON array data and to return array data for the multiple selected CSV items.
            </summary>
            <remarks>
                This is re-used by editors such as the multiple drop down list or check box list.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MultipleValueEditor.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService,Umbraco.Cms.Core.Strings.IShortStringHelper,Umbraco.Cms.Core.Serialization.IJsonSerializer,Umbraco.Cms.Core.IO.IIOHelper,Umbraco.Cms.Core.PropertyEditors.DataEditorAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.MultipleValueEditor"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MultipleValueEditor.FromEditor(Umbraco.Cms.Core.Models.Editors.ContentPropertyData,System.Object)">
            <summary>
                When multiple values are selected a JSON array will be posted back so we need to format for storage in
                the database which is a comma separated string value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.RadioButtonsPropertyEditor">
            <summary>
                A property editor to allow the individual selection of pre-defined items.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.RadioButtonsPropertyEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory,Umbraco.Cms.Core.IO.IIOHelper,Umbraco.Cms.Core.Serialization.IConfigurationEditorJsonSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.RadioButtonsPropertyEditor"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.RadioButtonsPropertyEditor.CreateConfigurationEditor">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.RadioButtonsPropertyEditor.CreateValueEditor">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.RadioButtonsPropertyEditor.RadioButtonsPropertyValueEditor">
            <summary>
            Defines the value editor for the radio buttons property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.RadioButtonsPropertyEditor.RadioButtonsPropertyValueEditor.#ctor(Umbraco.Cms.Core.Strings.IShortStringHelper,Umbraco.Cms.Core.Serialization.IJsonSerializer,Umbraco.Cms.Core.IO.IIOHelper,Umbraco.Cms.Core.PropertyEditors.DataEditorAttribute,Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.RadioButtonsPropertyEditor.RadioButtonsPropertyValueEditor"/> class.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.RadioButtonsPropertyEditor.RadioButtonValueValidator">
            <summary>
            Validates the prevalue configuration for the radio buttons property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.RadioButtonsPropertyEditor.RadioButtonValueValidator.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.RadioButtonsPropertyEditor.RadioButtonValueValidator"/> class.
            </summary>
            <param name="localizedTextService"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.RadioButtonsPropertyEditor.RadioButtonValueValidator.Validate(System.Object,System.String,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.RichTextEditorPastedImages.FindAndPersistPastedTempImagesAsync(System.String,System.Guid,System.Guid)">
            <summary>
                Used by the RTE (and grid RTE) for drag/drop/persisting images.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.RichTextPropertyEditor">
            <summary>
                Represents a rich text property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.RichTextPropertyEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory,Umbraco.Cms.Core.IO.IIOHelper,Umbraco.Cms.Core.PropertyEditors.IRichTextPropertyIndexValueFactory)">
            <summary>
                The constructor will setup the property editor based on the attribute if one is found.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.RichTextPropertyEditor.CanMergePartialPropertyValues(Umbraco.Cms.Core.Models.IPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.RichTextPropertyEditor.MergePartialPropertyValueForCulture(System.Object,System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.RichTextPropertyEditor.CreateValueEditor">
            <summary>
                Create a custom value editor
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.RichTextPropertyEditor.RichTextPropertyValueEditor">
            <summary>
                A custom value editor to ensure that images and blocks are parsed when being persisted and formatted correctly for
                display in the editor
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.RichTextPropertyEditor.RichTextPropertyValueEditor.ConfigurationObject">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.RichTextPropertyEditor.RichTextPropertyValueEditor.GetReferences(System.Object)">
            <summary>
                Resolve references from <see cref="T:Umbraco.Cms.Core.Models.IDataValueEditor" /> values
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.RichTextPropertyEditor.RichTextPropertyValueEditor.ToEditor(Umbraco.Cms.Core.Models.IProperty,System.String,System.String)">
            <summary>
                Format the data for the editor
            </summary>
            <param name="property"></param>
            <param name="culture"></param>
            <param name="segment"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.RichTextPropertyEditor.RichTextPropertyValueEditor.FromEditor(Umbraco.Cms.Core.Models.Editors.ContentPropertyData,System.Object)">
            <summary>
                Format the data for persistence
            </summary>
            <param name="editorValue"></param>
            <param name="currentValue"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.RichTextPropertyEditorHelper.TryParseRichTextEditorValue(System.Object,Umbraco.Cms.Core.Serialization.IJsonSerializer,Microsoft.Extensions.Logging.ILogger,Umbraco.Cms.Core.RichTextEditorValue@)">
            <summary>
            Attempts to parse a <see cref="T:Umbraco.Cms.Core.RichTextEditorValue"/> instance from a property value.
            </summary>
            <param name="value">The property value.</param>
            <param name="jsonSerializer">The system JSON serializer.</param>
            <param name="logger">A logger for error message handling.</param>
            <param name="richTextEditorValue">The parsed <see cref="T:Umbraco.Cms.Core.RichTextEditorValue"/> instance, or null if parsing fails.</param>
            <returns>True if the parsing succeeds, false otherwise</returns>
            <remarks>
            The passed value can be:
            - a JSON string.
            - a JSON object.
            - a raw markup string (for backwards compatability).
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.RichTextPropertyEditorHelper.SerializeRichTextEditorValue(Umbraco.Cms.Core.RichTextEditorValue,Umbraco.Cms.Core.Serialization.IJsonSerializer)">
            <summary>
            Serializes a <see cref="T:Umbraco.Cms.Core.RichTextEditorValue"/> instance for property value storage.
            </summary>
            <param name="richTextEditorValue">The <see cref="T:Umbraco.Cms.Core.RichTextEditorValue"/> instance to serialize.</param>
            <param name="jsonSerializer">The system JSON serializer.</param>
            <returns>A string value representing the passed <see cref="T:Umbraco.Cms.Core.RichTextEditorValue"/> instance.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor">
            <summary>
            Represents a slider editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory,Umbraco.Cms.Core.IO.IIOHelper)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.CreateValueEditor">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.CreateConfigurationEditor">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor">
            <summary>
            Defines the value editor for the slider property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.#ctor(Umbraco.Cms.Core.Strings.IShortStringHelper,Umbraco.Cms.Core.Serialization.IJsonSerializer,Umbraco.Cms.Core.IO.IIOHelper,Umbraco.Cms.Core.PropertyEditors.DataEditorAttribute,Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.ToEditor(Umbraco.Cms.Core.Models.IProperty,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.FromEditor(Umbraco.Cms.Core.Models.Editors.ContentPropertyData,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.SliderRange">
            <summary>
            Represents a slider value.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.SliderRange.From">
            <summary>
            Gets or sets the slider range from value.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.SliderRange.To">
            <summary>
            Gets or sets the slide range to value.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.SliderRange.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.SliderPropertyConfigurationValidatorBase">
            <summary>
            Base validator for the slider property editor validation against data type configured values.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.SliderPropertyConfigurationValidatorBase.ConfigurationKeyMinValue">
            <summary>
            The configuration key for the minimum value.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.SliderPropertyConfigurationValidatorBase.ConfigurationKeyMaxValue">
            <summary>
            The configuration key for the maximum value.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.SliderPropertyConfigurationValidatorBase.ConfigurationKeyStepValue">
            <summary>
            The configuration key for the step value.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.SliderPropertyConfigurationValidatorBase.ConfigurationKeyEnableRangeValue">
            <summary>
            The configuration key for the enable range value.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.SliderPropertyConfigurationValidatorBase.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.SliderPropertyConfigurationValidatorBase"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.SliderPropertyConfigurationValidatorBase.LocalizedTextService">
            <summary>
            Gets the <see cref="T:Umbraco.Cms.Core.Services.ILocalizedTextService"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.SliderPropertyConfigurationValidatorBase.TryParsePropertyValue(System.Object,Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.SliderRange@)">
            <summary>
            Parses a <see cref="T:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.SliderRange"/> from the provided value.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.RangeValidator">
            <summary>
            Validates the range configuration for the slider property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.RangeValidator.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.MinMaxValidator"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.RangeValidator.Validate(System.Object,System.String,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.MinMaxValidator">
            <summary>
            Validates the min/max configuration for the slider property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.MinMaxValidator.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.MinMaxValidator"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.MinMaxValidator.Validate(System.Object,System.String,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.StepValidator">
            <summary>
            Validates the step configuration for the slider property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.StepValidator.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.StepValidator"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.SliderPropertyEditor.SliderPropertyValueEditor.StepValidator.Validate(System.Object,System.String,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.TagsPropertyEditor">
            <summary>
                Represents a tags property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.TagsPropertyEditor.TagPropertyValueEditor.GetTags(System.Object,System.Object,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.TagsPropertyEditor.TagPropertyValueEditor.RequiredValidator">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.TagsPropertyEditor.TagPropertyValueEditor.FromEditor(Umbraco.Cms.Core.Models.Editors.ContentPropertyData,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.TagsPropertyEditor.TagPropertyValueEditor.RequiredJsonValueValidator">
            <summary>
                Custom validator to validate a required value against an empty json value.
            </summary>
            <remarks>
                <para>
                    This validator is required because the default RequiredValidator uses ValueType to
                    determine whether a property value is JSON, and for tags the ValueType is string although
                    the underlying data is JSON. Yes, this makes little sense.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.TagsPropertyEditor.TagPropertyValueEditor.RequiredJsonValueValidator.ValidateRequired(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.TextAreaPropertyEditor">
            <summary>
                Represents a textarea property and parameter editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.TextAreaPropertyEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory,Umbraco.Cms.Core.IO.IIOHelper)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.TextAreaPropertyEditor" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.TextAreaPropertyEditor.CreateValueEditor">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.TextAreaPropertyEditor.CreateConfigurationEditor">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.TextboxPropertyEditor">
            <summary>
                Represents a textbox property and parameter editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.TextboxPropertyEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory,Umbraco.Cms.Core.IO.IIOHelper)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.TextboxPropertyEditor" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.TextboxPropertyEditor.CreateValueEditor">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.TextboxPropertyEditor.CreateConfigurationEditor">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.TrueFalsePropertyEditor">
            <summary>
            Represents a true/false (toggle) property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.TrueFalsePropertyEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.TrueFalsePropertyEditor" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.TrueFalsePropertyEditor.CreateValueEditor">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.TrueFalsePropertyEditor.TrueFalsePropertyValueEditor">
            <summary>
            Defines the value editor for the true/false (toggle) property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.TrueFalsePropertyEditor.TrueFalsePropertyValueEditor.#ctor(Umbraco.Cms.Core.Strings.IShortStringHelper,Umbraco.Cms.Core.Serialization.IJsonSerializer,Umbraco.Cms.Core.IO.IIOHelper,Umbraco.Cms.Core.PropertyEditors.DataEditorAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.TrueFalsePropertyEditor.TrueFalsePropertyValueEditor"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.TrueFalsePropertyEditor.TrueFalsePropertyValueEditor.RequiredValidator">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.TrueFalsePropertyEditor.TrueFalsePropertyValueEditor.ToEditor(Umbraco.Cms.Core.Models.IProperty,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.TrueFalsePropertyEditor.TrueFalsePropertyValueEditor.FromEditor(Umbraco.Cms.Core.Models.Editors.ContentPropertyData,System.Object)">
            <inheritdoc/>
            <remarks>
            NOTE: property editor value type is Integer, which means we need to store the boolean representation as 0 or 1.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockEditorConverter">
            <summary>
                Converts JSON block objects into <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockEditorVarianceHandler.AlignPropertyVarianceAsync(System.Collections.Generic.IList{Umbraco.Cms.Core.Models.Blocks.BlockPropertyValue},System.String)">
            <summary>
            Aligns a collection of block property values for variance changes.
            </summary>
            <param name="blockPropertyValues">The block property values to align.</param>
            <param name="culture">The culture being handled (null if invariant).</param>
            <remarks>
            Used for aligning variance changes when editing content.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockEditorVarianceHandler.AlignedPropertyVarianceAsync(Umbraco.Cms.Core.Models.Blocks.BlockPropertyValue,Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType,Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement)">
            <summary>
            Aligns a block property value for variance changes.
            </summary>
            <param name="blockPropertyValue">The block property value to align.</param>
            <param name="propertyType">The underlying property type.</param>
            <param name="owner">The containing block element.</param>
            <remarks>
            Used for aligning variance changes when rendering content.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockEditorVarianceHandler.AlignedExposeVarianceAsync(Umbraco.Cms.Core.Models.Blocks.BlockValue,Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement)">
            <summary>
            Aligns a block value for variance changes.
            </summary>
            <param name="blockValue">The block property value to align.</param>
            <param name="owner">The owner element (the content for block properties at content level, or the parent element for nested block properties).</param>
            <param name="element">The containing block element.</param>
            <remarks>
            Used for aligning variance changes when rendering content.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockEditorVarianceHandler.AlignExposeVariance(Umbraco.Cms.Core.Models.Blocks.BlockValue)">
            <summary>
            Aligns block value expose for variance changes.
            </summary>
            <param name="blockValue">The block value to align.</param>
            <remarks>
            <para>
            Used for aligning variance changes when editing content.
            </para>
            <para>
            This is expected to be invoked after all block values have been aligned for variance changes by <see cref="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockEditorVarianceHandler.AlignPropertyVarianceAsync(Umbraco.Cms.Core.Models.Blocks.BlockPropertyValue,Umbraco.Cms.Core.Models.IPropertyType,System.String)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockGridPropertyValueConverter.IsConverter(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockGridPropertyValueConverter.GetPropertyValueType(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockGridPropertyValueConverter.GetPropertyCacheLevel(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockGridPropertyValueConverter.ConvertIntermediateToObject(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType,Umbraco.Cms.Core.PropertyEditors.PropertyCacheLevel,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockGridPropertyValueConverter.GetDeliveryApiPropertyCacheLevel(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockGridPropertyValueConverter.GetDeliveryApiPropertyCacheLevelForExpansion(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockGridPropertyValueConverter.GetDeliveryApiPropertyValueType(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockGridPropertyValueConverter.ConvertIntermediateToDeliveryApiObject(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType,Umbraco.Cms.Core.PropertyEditors.PropertyCacheLevel,System.Object,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockListPropertyValueConverter.IsConverter(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockListPropertyValueConverter.GetPropertyValueType(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockListPropertyValueConverter.GetPropertyCacheLevel(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockListPropertyValueConverter.ConvertSourceToIntermediate(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockListPropertyValueConverter.ConvertIntermediateToObject(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType,Umbraco.Cms.Core.PropertyEditors.PropertyCacheLevel,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockListPropertyValueConverter.GetDeliveryApiPropertyCacheLevel(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockListPropertyValueConverter.GetDeliveryApiPropertyCacheLevelForExpansion(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockListPropertyValueConverter.GetDeliveryApiPropertyValueType(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockListPropertyValueConverter.ConvertIntermediateToDeliveryApiObject(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType,Umbraco.Cms.Core.PropertyEditors.PropertyCacheLevel,System.Object,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockPropertyValueCreatorBase`5.CreateBlockEditorDataConverter">
            <summary>
            Creates a specific data converter for the block property implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockPropertyValueCreatorBase`5.CreateBlockItemActivator">
            <summary>
            Creates a specific block item activator for the block property implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockPropertyValueCreatorBase`5.CreateEmptyBlockModel">
            <summary>
            Creates an empty block model, i.e. for uninitialized or invalid property values.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockPropertyValueCreatorBase`5.CreateBlockModelFromItems">
            <summary>
            Creates a block model for a list of block items.
            </summary>
            <param name="blockItems">The block items to base the block model on.</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockPropertyValueCreatorBase`5.CreateBlockItemModelFromLayout">
            <summary>
            Creates a block item from a block layout item.
            </summary>
            <param name="layoutItem">The block layout item to base the block item on.</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ValueConverters.BlockPropertyValueCreatorBase`5.EnrichBlockItemModelFromConfiguration">
            <summary>
            Enriches a block item after it has been created by the block item activator. Use this to set block item data based on concrete block layout and configuration.
            </summary>
            <param name="item">The block item to enrich.</param>
            <param name="layoutItem">The block layout item for the block item being enriched.</param>
            <param name="configuration">The configuration of the block.</param>
            <param name="blockItemModelCreator">Delegate for creating new block items from block layout items.</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue">
            <summary>
                Represents a value of the image cropper value editor.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue.FocalPoint">
            <summary>
                Gets or sets the value focal point.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue.Crops">
            <summary>
                Gets or sets the value crops.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue.ToHtmlString">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue.GetCrop(System.String)">
            <summary>
                Gets a crop.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue.GetCropUrl(System.String,Umbraco.Cms.Core.Media.IImageUrlGenerator,System.Boolean,System.Boolean,System.String)">
            <summary>
                Gets the value image URL for a specified crop.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue.GetCropUrl(System.Int32,System.Int32,Umbraco.Cms.Core.Media.IImageUrlGenerator,System.String)">
            <summary>
                Gets the value image URL for a specific width and height.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue.HasFocalPoint">
            <summary>
                Determines whether the value has a focal point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue.HasCrops">
            <summary>
                Determines whether the value has crops.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue.HasCrop(System.String)">
            <summary>
                Determines whether the value has a specified crop.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue.HasImage">
            <summary>
                Determines whether the value has a source image.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue.Prune">
            <summary>
                Removes redundant crop data/default focal point.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue.ImageCropperFocalPoint.Equals(Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue.ImageCropperFocalPoint)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue.ImageCropperFocalPoint.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue.ImageCropperCrop.Equals(Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue.ImageCropperCrop)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue.ImageCropperCrop.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue.ImageCropperCropCoordinates.Equals(Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue.ImageCropperCropCoordinates)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue.ImageCropperCropCoordinates.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue.Equals(Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValueConverter">
            <summary>
                Represents a value converter for the image cropper value editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValueConverter.IsConverter(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValueConverter.GetPropertyValueType(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValueConverter.GetPropertyCacheLevel(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValueConverter.ConvertSourceToIntermediate(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ValueConverters.JsonValueConverter">
            <summary>
                The default converter for all property editors that expose a JSON value type
            </summary>
            <remarks>
                Since this is a default (umbraco) converter it will be ignored if another converter found conflicts with this one.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.JsonValueConverter.#ctor(Umbraco.Cms.Core.PropertyEditors.PropertyEditorCollection,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.PropertyEditors.ValueConverters.JsonValueConverter})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.ValueConverters.JsonValueConverter" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.JsonValueConverter.IsConverter(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <summary>
                It is a converter for any value type that is "JSON"
                Unless it's in the Excluded Property Editors list
                The new MediaPicker 3 stores JSON but we want to use its own ValueConvertor
            </summary>
            <param name="propertyType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.RichTextParsingRegexes.BlockRegex">
            <remarks>
            Pattern:<br/>
            <code>&lt;umb-rte-block(?:-inline)?(?: class="(.[^"]*)")? data-content-key="(?&lt;key&gt;.[^"]*)"&gt;(?:&lt;!--Umbraco-Block--&gt;)?&lt;\\/umb-rte-block(?:-inline)?&gt;</code><br/>
            Explanation:<br/>
            <code>
            ○ Match the string "&lt;umb-rte-block".<br/>
            ○ Optional (greedy).<br/>
                ○ Match the string "-inline".<br/>
            ○ Optional (greedy).<br/>
                ○ Match the string " class=\"".<br/>
                ○ 1st capture group.<br/>
                    ○ Match any character other than '\n'.<br/>
                    ○ Match a character other than '"' atomically any number of times.<br/>
                ○ Match '"'.<br/>
            ○ Match the string " data-content-key=\"".<br/>
            ○ "key" capture group.<br/>
                ○ Match any character other than '\n'.<br/>
                ○ Match a character other than '"' atomically any number of times.<br/>
            ○ Match the string "\"&gt;".<br/>
            ○ Optional (greedy).<br/>
                ○ Match the string "&lt;!--Umbraco-Block--&gt;".<br/>
            ○ Match the string "&lt;/umb-rte-block".<br/>
            ○ Optional (greedy).<br/>
                ○ Match the string "-inline".<br/>
            ○ Match '&gt;'.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ValueConverters.RteBlockRenderingValueConverter">
            <summary>
                A value converter for TinyMCE that will ensure any blocks content are rendered properly even when
                used dynamically.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.ValueConverters.TemporaryFileUploadValueBase.TemporaryFileId">
            <summary>
            Gets or sets the temporary file identifier that will replace an an existing <see cref="P:Umbraco.Cms.Core.PropertyEditors.ValueConverters.TemporaryFileUploadValueBase.Src"/> value.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.ValueConverters.TemporaryFileUploadValueBase.Src">
            <summary>
                Gets or sets the value source image.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ValueListConfigurationEditor">
            <summary>
                Pre-value editor used to create a list of items
            </summary>
            <remarks>
                This pre-value editor is shared with editors like drop down, checkbox list, etc....
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ValueListUniqueValueValidator">
            <summary>
                Represents a validator which ensures that all values in the list are unique.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PublishedCache.PublishedContentTypeCache">
            <summary>
                Represents a content type cache.
            </summary>
            <remarks>This cache is not snapshotted, so it refreshes any time things change.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.PublishedContentTypeCache.ClearAll">
            <summary>
                Clears all cached content types.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.PublishedContentTypeCache.ClearContentType(System.Int32)">
            <summary>
                Clears a cached content type.
            </summary>
            <param name="id">An identifier.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.PublishedContentTypeCache.ClearDataType(System.Int32)">
            <summary>
                Clears all cached content types referencing a data type.
            </summary>
            <param name="id">A data type identifier.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.PublishedContentTypeCache.Get(Umbraco.Cms.Core.Models.PublishedContent.PublishedItemType,System.Guid)">
            <summary>
                Gets a published content type.
            </summary>
            <param name="itemType">An item type.</param>
            <param name="key">An key.</param>
            <returns>The published content type corresponding to the item key.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.PublishedContentTypeCache.Get(Umbraco.Cms.Core.Models.PublishedContent.PublishedItemType,System.String)">
            <summary>
                Gets a published content type.
            </summary>
            <param name="itemType">An item type.</param>
            <param name="alias">An alias.</param>
            <returns>The published content type corresponding to the item type and alias.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.PublishedContentTypeCache.Get(Umbraco.Cms.Core.Models.PublishedContent.PublishedItemType,System.Int32)">
            <summary>
                Gets a published content type.
            </summary>
            <param name="itemType">An item type.</param>
            <param name="id">An identifier.</param>
            <returns>The published content type corresponding to the item type and identifier.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.ContentFinderByConfigured404">
            <summary>
                Provides an implementation of <see cref="T:Umbraco.Cms.Core.Routing.IContentFinder" /> that runs the legacy 404 logic.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.ContentFinderByConfigured404.#ctor(Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Routing.ContentFinderByConfigured404},Umbraco.Cms.Core.Services.IEntityService,Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.ContentSettings},Examine.IExamineManager,Umbraco.Cms.Core.Models.PublishedContent.IVariationContextAccessor,Umbraco.Cms.Core.Web.IUmbracoContextAccessor)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Routing.ContentFinderByConfigured404" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.ContentFinderByConfigured404.TryFindContent(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder)">
            <summary>
                Tries to find and assign an Umbraco document to a <c>PublishedRequest</c>.
            </summary>
            <param name="frequest">The <c>PublishedRequest</c>.</param>
            <returns>A value indicating whether an Umbraco document was found and assigned.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.NotFoundHandlerHelper">
            <summary>
                Used to determine the node to display when content is not found based on the configured error404 elements in
                umbracoSettings.config
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.NotFoundHandlerHelper.GetContentIdFromErrorPageConfig(Umbraco.Cms.Core.Configuration.Models.ContentErrorPage,Umbraco.Cms.Core.Services.IEntityService,Umbraco.Cms.Core.IPublishedContentQuery,System.Nullable{System.Int32})">
            <summary>
                Returns the content id based on the configured ContentErrorPage section.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.RedirectTrackingHandler">
            Implements a notification handler for managing redirect URLs tracking.
            <para>when content is renamed or moved, we want to create a permanent 301 redirect from it's old URL</para>
            <para>
                not managing domains because we don't know how to do it - changing domains => must create a higher level
                strategy using rewriting rules probably
            </para>
            <para>recycle bin = moving to and from does nothing: to = the node is gone, where would we redirect? from = same</para>
        </member>
        <member name="T:Umbraco.Cms.Core.Scoping.HttpScopeReference">
            <summary>
                Disposed at the end of the request to cleanup any orphaned Scopes.
            </summary>
            <remarks>Registered as Scoped in DI (per request)</remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Scoping.IHttpScopeReference">
            <summary>
                Cleans up orphaned <see cref="T:Umbraco.Cms.Core.Scoping.IScope" /> references at the end of a request
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.IHttpScopeReference.Register">
            <summary>
                Register for cleanup in the request
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Scoping.IScope.Database">
            <summary>
            Gets the scope database.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Scoping.IScope.SqlContext">
            <summary>
            Gets the Sql context.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Scoping.IScope.Messages">
            <summary>
                Gets the scope event messages.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Scoping.IScope.Events">
            <summary>
                Gets the scope event dispatcher.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Scoping.IScope.Notifications">
            <summary>
            Gets the scope notification publisher
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Scoping.IScope.RepositoryCacheMode">
            <summary>
            Gets the repositories cache mode.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Scoping.IScope.IsolatedCaches">
            <summary>
            Gets the scope isolated cache.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.IScope.Complete">
            <summary>
            Completes the scope.
            </summary>
            <returns>A value indicating whether the scope has been successfully completed.</returns>
            <remarks>Can return false if any child scope has not completed.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.IScope.ReadLock(System.Int32[])">
            <summary>
            Read-locks some lock objects.
            </summary>
            <param name="lockIds">Array of lock object identifiers.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.IScope.WriteLock(System.Int32[])">
            <summary>
            Write-locks some lock objects.
            </summary>
            <param name="lockIds">Array of object identifiers.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.IScope.WriteLock(System.TimeSpan,System.Int32)">
            <summary>
            Write-locks some lock objects.
            </summary>
            <param name="timeout">The database timeout in milliseconds</param>
            <param name="lockId">The lock object identifier.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.IScope.ReadLock(System.TimeSpan,System.Int32)">
            <summary>
            Read-locks some lock objects.
            </summary>
            <param name="timeout">The database timeout in milliseconds</param>
            <param name="lockId">The lock object identifier.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.IScopeProvider.CreateScope(System.Data.IsolationLevel,Umbraco.Cms.Core.Scoping.RepositoryCacheMode,Umbraco.Cms.Core.Events.IEventDispatcher,Umbraco.Cms.Core.Events.IScopedNotificationPublisher,System.Nullable{System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            Creates an ambient scope.
            </summary>
            <param name="isolationLevel">The transaction isolation level.</param>
            <param name="repositoryCacheMode">The repositories cache mode.</param>
            <param name="eventDispatcher">An optional events dispatcher.</param>
            <param name="scopedNotificationPublisher">An optional notification publisher.</param>
            <param name="scopeFileSystems">A value indicating whether to scope the filesystems.</param>
            <param name="callContext">A value indicating whether this scope should always be registered in the call context.</param>
            <param name="autoComplete">A value indicating whether this scope is auto-completed.</param>
            <returns>The created ambient scope.</returns>
            <remarks>
            <para>The created scope becomes the ambient scope.</para>
            <para>If an ambient scope already exists, it becomes the parent of the created scope.</para>
            <para>When the created scope is disposed, the parent scope becomes the ambient scope again.</para>
            <para>Parameters must be specified on the outermost scope, or must be compatible with the parents.</para>
            <para>Auto-completed scopes should be used for read-only operations ONLY. Do not use them if you do not
            understand the associated issues, such as the scope being completed even though an exception is thrown.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.IScopeProvider.CreateDetachedScope(System.Data.IsolationLevel,Umbraco.Cms.Core.Scoping.RepositoryCacheMode,Umbraco.Cms.Core.Events.IEventDispatcher,Umbraco.Cms.Core.Events.IScopedNotificationPublisher,System.Nullable{System.Boolean})">
            <summary>
            Creates a detached scope.
            </summary>
            <returns>A detached scope.</returns>
            <param name="isolationLevel">The transaction isolation level.</param>
            <param name="repositoryCacheMode">The repositories cache mode.</param>
            <param name="eventDispatcher">An optional events dispatcher.</param>
            <param name="scopedNotificationPublisher">An option notification publisher.</param>
            <param name="scopeFileSystems">A value indicating whether to scope the filesystems.</param>
            <remarks>
            <para>A detached scope is not ambient and has no parent.</para>
            <para>It is meant to be attached by <see cref="M:Umbraco.Cms.Core.Scoping.IScopeProvider.AttachScope(Umbraco.Cms.Core.Scoping.IScope,System.Boolean)"/>.</para>
            </remarks>
            <remarks>
            This is not used by CMS but is used by Umbraco Deploy.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.IScopeProvider.AttachScope(Umbraco.Cms.Core.Scoping.IScope,System.Boolean)">
            <summary>
            Attaches a scope.
            </summary>
            <param name="scope">The scope to attach.</param>
            <param name="callContext">A value indicating whether to force usage of call context.</param>
            <remarks>
            <para>Only a scope created by <see cref="M:Umbraco.Cms.Core.Scoping.IScopeProvider.CreateDetachedScope(System.Data.IsolationLevel,Umbraco.Cms.Core.Scoping.RepositoryCacheMode,Umbraco.Cms.Core.Events.IEventDispatcher,Umbraco.Cms.Core.Events.IScopedNotificationPublisher,System.Nullable{System.Boolean})"/> can be attached.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.IScopeProvider.DetachScope">
            <summary>
            Detaches a scope.
            </summary>
            <returns>The detached scope.</returns>
            <remarks>
            <para>Only a scope previously attached by <see cref="M:Umbraco.Cms.Core.Scoping.IScopeProvider.AttachScope(Umbraco.Cms.Core.Scoping.IScope,System.Boolean)"/> can be detached.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Scoping.IScopeProvider.Context">
            <summary>
            Gets the scope context.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Scoping.IScopeProvider.SqlContext">
            <summary>
            Gets the sql context.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Scoping.ScopeContextualBase">
            <summary>
                Provides a base class for scope contextual objects.
            </summary>
            <remarks>
                <para>
                    A scope contextual object is enlisted in the current scope context,
                    if any, and released when the context exists. It must be used in a 'using'
                    block, and will be released when disposed, if not part of a scope.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.ScopeContextualBase.Get``1(Umbraco.Cms.Core.Scoping.ICoreScopeProvider,System.String,System.Func{System.Boolean,``0})">
            <summary>
                Gets a contextual object.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="scopeProvider">A scope provider.</param>
            <param name="key">A context key for the object.</param>
            <param name="ctor">A function producing the contextual object.</param>
            <returns>The contextual object.</returns>
            <remarks>
                <para></para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.ScopeContextualBase.Dispose">
            <inheritdoc />
            <remarks>
                <para>If not scoped, then this releases the contextual object.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.ScopeContextualBase.Release(System.Boolean)">
            <summary>
                Releases the contextual object.
            </summary>
            <param name="completed">A value indicating whether the scoped operation completed.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.BackOfficeClaimsPrincipalFactory">
            <summary>
                A <see cref="T:Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`1"/> for the back office
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeClaimsPrincipalFactory.#ctor(Microsoft.AspNetCore.Identity.UserManager{Umbraco.Cms.Core.Security.BackOfficeIdentityUser},Microsoft.Extensions.Options.IOptions{Umbraco.Cms.Core.Security.BackOfficeIdentityOptions},Microsoft.Extensions.Options.IOptions{Umbraco.Cms.Core.Security.BackOfficeAuthenticationTypeSettings})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Security.BackOfficeClaimsPrincipalFactory" /> class.
            </summary>
            <param name="userManager">The user manager</param>
            <param name="optionsAccessor">The <see cref="T:Umbraco.Cms.Core.Security.BackOfficeIdentityOptions" /></param>
            <param name="backOfficeAuthenticationTypeSettings"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeClaimsPrincipalFactory.GenerateClaimsAsync(Umbraco.Cms.Core.Security.BackOfficeIdentityUser)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Security.BackOfficeErrorDescriber">
            <summary>
                Umbraco back office specific <see cref="T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber" />
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeIdentityBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Security.BackOfficeIdentityBuilder" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeIdentityBuilder.#ctor(System.Type,Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Security.BackOfficeIdentityBuilder" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeIdentityBuilder.AddTokenProvider(System.String,System.Type)">
            <summary>
                Adds a token provider for the <seealso cref="T:Umbraco.Cms.Core.Security.BackOfficeIdentityUser" />.
            </summary>
            <param name="providerName">The name of the provider to add.</param>
            <param name="provider">The type of the <see cref="T:Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1" /> to add.</param>
            <returns>The current <see cref="T:Microsoft.AspNetCore.Identity.IdentityBuilder" /> instance.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.BackOfficeIdentityUser">
            <summary>
                The identity user used for the back office
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeIdentityUser.#ctor(Umbraco.Cms.Core.Configuration.Models.GlobalSettings,System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.Membership.IReadOnlyUserGroup})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Security.BackOfficeIdentityUser" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.BackOfficeIdentityUser.InviteDateUtc">
            <summary>
                Gets or sets invite date
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.BackOfficeIdentityUser.StartContentIds">
            <summary>
                Gets or sets content start nodes assigned to the User (not ones assigned to the user's groups)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.BackOfficeIdentityUser.StartMediaIds">
            <summary>
                Gets or sets media start nodes assigned to the User (not ones assigned to the user's groups)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.BackOfficeIdentityUser.AllowedSections">
            <summary>
                Gets a readonly list of the user's allowed sections which are based on it's user groups
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.BackOfficeIdentityUser.Culture">
            <summary>
                Gets or sets the culture
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeIdentityUser.CreateNew(Umbraco.Cms.Core.Configuration.Models.GlobalSettings,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},Umbraco.Cms.Core.Models.Membership.UserKind)">
            <summary>
                Used to construct a new instance without an identity
            </summary>
            <param name="globalSettings"></param>
            <param name="username"></param>
            <param name="email">This is allowed to be null (but would need to be filled in if trying to persist this instance)</param>
            <param name="culture"></param>
            <param name="name"></param>
            <param name="id"></param>
            <param name="kind"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeIdentityUser.SetGroups(System.Collections.Generic.IReadOnlyCollection{Umbraco.Cms.Core.Models.Membership.IReadOnlyUserGroup})">
            <summary>
                Gets or sets the user groups
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.BackOfficePasswordHasher">
            <summary>
                A password hasher for back office users
            </summary>
            <remarks>
                This allows us to verify passwords in old formats and roll forward to the latest format
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.BackOfficeUserStore">
            <summary>
                The user store for back office users
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.#ctor(Umbraco.Cms.Core.Scoping.ICoreScopeProvider,Umbraco.Cms.Core.Services.IEntityService,Umbraco.Cms.Core.Services.IExternalLoginWithKeyService,Microsoft.Extensions.Options.IOptionsSnapshot{Umbraco.Cms.Core.Configuration.Models.GlobalSettings},Umbraco.Cms.Core.Mapping.IUmbracoMapper,Umbraco.Cms.Core.Security.BackOfficeErrorDescriber,Umbraco.Cms.Core.Cache.AppCaches,Umbraco.Cms.Core.Services.ITwoFactorLoginService,Umbraco.Cms.Core.Services.IUserGroupService,Umbraco.Cms.Core.Persistence.Repositories.IUserRepository,Umbraco.Cms.Core.Services.IRuntimeState,Umbraco.Cms.Core.Events.IEventMessagesFactory,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Security.BackOfficeUserStore})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Security.BackOfficeUserStore" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.ValidateSessionIdAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.GetTwoFactorEnabledAsync(Umbraco.Cms.Core.Security.BackOfficeIdentityUser,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.CreateAsync(Umbraco.Cms.Core.Security.BackOfficeIdentityUser,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.SaveAsync(Umbraco.Cms.Core.Models.Membership.IUser)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.DisableAsync(Umbraco.Cms.Core.Models.Membership.IUser)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.GetAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.GetByUserNameAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.GetByEmailAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.GetAllInGroupAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.UpdateAsync(Umbraco.Cms.Core.Security.BackOfficeIdentityUser,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.DeleteAsync(Umbraco.Cms.Core.Security.BackOfficeIdentityUser,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.FindByNameAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.FindUserAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.FindByEmailAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.SetPasswordHashAsync(Umbraco.Cms.Core.Security.BackOfficeIdentityUser,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.AddLoginAsync(Umbraco.Cms.Core.Security.BackOfficeIdentityUser,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.RemoveLoginAsync(Umbraco.Cms.Core.Security.BackOfficeIdentityUser,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.GetLoginsAsync(Umbraco.Cms.Core.Security.BackOfficeIdentityUser,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Lists all users of a given role.
            </summary>
            <remarks>
                Identity Role names are equal to Umbraco UserGroup alias.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.SetTokenAsync(Umbraco.Cms.Core.Security.BackOfficeIdentityUser,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
                Overridden to support Umbraco's own data storage requirements
            </summary>
            <remarks>
                The base class's implementation of this calls into FindTokenAsync and AddUserTokenAsync, both methods will only
                work with ORMs that are change
                tracking ORMs like EFCore.
            </remarks>
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.FindUserLoginAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.FindUserLoginAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.FindRoleAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.FindUserRoleAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.RemoveTokenAsync(Umbraco.Cms.Core.Security.BackOfficeIdentityUser,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Overridden to support Umbraco's own data storage requirements
            </summary>
            <remarks>
            The base class's implementation of this calls into FindTokenAsync, RemoveUserTokenAsync and AddUserTokenAsync, both methods will only work with ORMs that are change
            tracking ORMs like EFCore.
            </remarks>
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.BackOfficeUserStore.GetTokenAsync(Umbraco.Cms.Core.Security.BackOfficeIdentityUser,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
                Overridden to support Umbraco's own data storage requirements
            </summary>
            <remarks>
                The base class's implementation of this calls into FindTokenAsync, RemoveUserTokenAsync and AddUserTokenAsync, both
                methods will only work with ORMs that are change
                tracking ORMs like EFCore.
            </remarks>
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Security.IBackOfficeUserManager">
            <summary>
                The user manager for the back office
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.IBackOfficeUserPasswordChecker">
            <summary>
                Used by the BackOfficeUserManager to check the username/password which allows for developers to more easily
                set the logic for this procedure.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IBackOfficeUserPasswordChecker.CheckPasswordAsync(Umbraco.Cms.Core.Security.BackOfficeIdentityUser,System.String)">
            <summary>
                Checks a password for a user
            </summary>
            <remarks>
                This will allow a developer to auto-link a local account which is required if the user queried doesn't exist
                locally.
                The user parameter will always contain the username, if the user doesn't exist locally, the other properties will
                not be filled in.
                A developer can then create a local account by filling in the properties and using UserManager.CreateAsync
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.IMemberManager">
            <summary>
                The user manager for members
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IMemberManager.AsPublishedMember(Umbraco.Cms.Core.Security.MemberIdentityUser)">
            <summary>
                Returns the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent" /> instance for the specified <see cref="T:Umbraco.Cms.Core.Security.MemberIdentityUser" />
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IMemberManager.GetCurrentMemberAsync">
            <summary>
                Returns the currently logged in member if there is one, else returns null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IMemberManager.IsMemberAuthorizedAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Checks if the current member is authorized based on the parameters provided.
            </summary>
            <param name="allowTypes">Allowed types.</param>
            <param name="allowGroups">Allowed groups.</param>
            <param name="allowMembers">Allowed individual members.</param>
            <returns>True or false if the currently logged in member is authorized</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IMemberManager.IsLoggedIn">
            <summary>
                Check if a member is logged in
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IMemberManager.MemberHasAccessAsync(System.String)">
            <summary>
                Check if the current user has access to a document
            </summary>
            <param name="path">The full path of the document object to check</param>
            <returns>True if the current user has access or if the current document isn't protected</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IMemberManager.MemberHasAccessAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Checks if the current user has access to the paths
            </summary>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IMemberManager.IsProtectedAsync(System.String)">
            <summary>
                Check if a document object is protected by the "Protect Pages" functionality in umbraco
            </summary>
            <param name="path">The full path of the document object to check</param>
            <returns>True if the document object is protected</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.IMemberUserStore">
            <summary>
                A custom user store that uses Umbraco member data
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.IUmbracoUserManager`1">
            <summary>
                A user manager for Umbraco (either back office users or front-end members)
            </summary>
            <typeparam name="TUser">The type of user</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.GetUserIdAsync(`0)">
            <summary>
                Gets the user id of a user
            </summary>
            <param name="user">The user</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.GetUserAsync(System.Security.Claims.ClaimsPrincipal)">
            <summary>
                Get the <typeparamref name="TUser"/> from a <see cref="T:System.Security.Claims.ClaimsPrincipal" />
            </summary>
            <param name="principal">The <see cref="T:System.Security.Claims.ClaimsPrincipal" /></param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.GetUserId(System.Security.Claims.ClaimsPrincipal)">
            <summary>
                Get the user id from the <see cref="T:System.Security.Claims.ClaimsPrincipal" />
            </summary>
            <param name="principal">the <see cref="T:System.Security.Claims.ClaimsPrincipal" /></param>
            <returns>Returns the user id from the <see cref="T:System.Security.Claims.ClaimsPrincipal" /></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.GetLoginsAsync(`0)">
            <summary>
                Gets the external logins for the user
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.DeleteAsync(`0)">
            <summary>
                Deletes a user
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.FindByLoginAsync(System.String,System.String)">
            <summary>
                Finds a user by the external login provider
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.FindByIdAsync(System.String)">
            <summary>
                Finds and returns a user, if any, who has the specified <paramref name="userId" />.
            </summary>
            <param name="userId">The user ID to search for.</param>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the user matching the specified
                <paramref name="userId" /> if it exists.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.GeneratePasswordResetTokenAsync(`0)">
            <summary>
                Generates a password reset token for the specified <paramref name="user" />, using
                the configured password reset token provider.
            </summary>
            <param name="user">The user to generate a password reset token for.</param>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation,
                containing a password reset token for the specified <paramref name="user" />.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.ChangePasswordWithResetAsync(System.String,System.String,System.String)">
            <summary>
                This is a special method that will reset the password but will raise the Password Changed event instead of the
                reset event
            </summary>
            <remarks>
                We use this because in the back office the only way an admin can change another user's password without first
                knowing their password
                is to generate a token and reset it, however, when we do this we want to track a password change, not a password
                reset
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.ConfirmEmailAsync(`0,System.String)">
            <summary>
                Validates that an email confirmation token matches the specified <paramref name="user" />.
            </summary>
            <param name="user">The user to validate the token against.</param>
            <param name="token">The email confirmation token to validate.</param>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
                of the operation.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.FindByEmailAsync(System.String)">
            <summary>
                Gets the user, if any, associated with the normalized value of the specified email address.
                Note: Its recommended that identityOptions.User.RequireUniqueEmail be set to true when using this method, otherwise
                the store may throw if there are users with duplicate emails.
            </summary>
            <param name="email">The email address to return the user for.</param>
            <returns>
                The task object containing the results of the asynchronous lookup operation, the user, if any, associated with a
                normalized value of the specified email address.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.ResetPasswordAsync(`0,System.String,System.String)">
            <summary>
                Resets the <paramref name="user" />'s password to the specified <paramref name="newPassword" /> after
                validating the given password reset <paramref name="token" />.
            </summary>
            <param name="user">The user whose password should be reset.</param>
            <param name="token">The password reset token to verify.</param>
            <param name="newPassword">The new password to set if reset token verification succeeds.</param>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
                of the operation.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.IsLockedOutAsync(`0)">
            <summary>
                Override to check the user approval value as well as the user lock out date, by default this only checks the user's
                locked out date
            </summary>
            <remarks>
                In the ASP.NET Identity world, there is only one value for being locked out, in Umbraco we have 2 so when checking
                this for Umbraco we need to check both values
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset})">
            <summary>
                Locks out a user until the specified end date has passed. Setting a end date in the past immediately unlocks a
                user.
            </summary>
            <param name="user">The user whose lockout date should be set.</param>
            <param name="lockoutEnd">
                The <see cref="T:System.DateTimeOffset" /> after which the <paramref name="user" />'s lockout should
                end.
            </param>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the
                <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" /> of the operation.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.IsEmailConfirmedAsync(`0)">
            <summary>
                Gets a flag indicating whether the email address for the specified <paramref name="user" /> has been verified, true
                if the email address is verified otherwise
                false.
            </summary>
            <param name="user">The user whose email confirmation status should be returned.</param>
            <returns>
                The task object containing the results of the asynchronous operation, a flag indicating whether the email address
                for the specified <paramref name="user" />
                has been confirmed or not.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.UpdateAsync(`0)">
            <summary>
                Updates the specified <paramref name="user" /> in the backing store.
            </summary>
            <param name="user">The user to update.</param>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
                of the operation.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.VerifyUserTokenAsync(`0,System.String,System.String,System.String)">
            <summary>
                Returns a flag indicating whether the specified <paramref name="token" /> is valid for
                the given <paramref name="user" /> and <paramref name="purpose" />.
            </summary>
            <param name="user">The user to validate the token against.</param>
            <param name="tokenProvider">The token provider used to generate the token.</param>
            <param name="purpose">The purpose the token should be generated for.</param>
            <param name="token">The token to validate</param>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, returning true if the <paramref name="token" />
                is valid, otherwise false.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.AddPasswordAsync(`0,System.String)">
            <summary>
                Adds the <paramref name="password" /> to the specified <paramref name="user" /> only if the user
                does not already have a password.
            </summary>
            <param name="user">The user whose password should be set.</param>
            <param name="password">The password to set.</param>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
                of the operation.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.CheckPasswordAsync(`0,System.String)">
            <summary>
                Returns a flag indicating whether the given <paramref name="password" /> is valid for the
                specified <paramref name="user" />.
            </summary>
            <param name="user">The user whose password should be validated.</param>
            <param name="password">The password to validate</param>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing true if
                the specified <paramref name="password" /> matches the one store for the <paramref name="user" />,
                otherwise false.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.ChangePasswordAsync(`0,System.String,System.String)">
            <summary>
                Changes a user's password after confirming the specified <paramref name="currentPassword" /> is correct,
                as an asynchronous operation.
            </summary>
            <param name="user">The user whose password should be set.</param>
            <param name="currentPassword">The current password to validate before changing.</param>
            <param name="newPassword">The new password to set for the specified <paramref name="user" />.</param>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
                of the operation.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.ValidateSessionIdAsync(System.String,System.String)">
            <summary>
                Used to validate a user's session
            </summary>
            <returns>Returns true if the session is valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.CreateAsync(`0)">
            <summary>
                Creates the specified <paramref name="user" /> in the backing store with no password,
                as an asynchronous operation.
            </summary>
            <param name="user">The user to create.</param>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
                of the operation.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.GetRolesAsync(`0)">
            <summary>
                Gets a list of role names the specified user belongs to.
            </summary>
            <param name="user">The user whose role names to retrieve.</param>
            <returns>The Task that represents the asynchronous operation, containing a list of role names.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.RemoveFromRolesAsync(`0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Removes the specified user from the named roles.
            </summary>
            <param name="user">The user to remove from the named roles.</param>
            <param name="roles">The name of the roles to remove the user from.</param>
            <returns>The Task that represents the asynchronous operation, containing the IdentityResult of the operation.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.AddToRolesAsync(`0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Add the specified user to the named roles
            </summary>
            <param name="user">The user to add to the named roles</param>
            <param name="roles">The name of the roles to add the user to.</param>
            <returns>The Task that represents the asynchronous operation, containing the IdentityResult of the operation</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.CreateAsync(`0,System.String)">
            <summary>
                Creates the specified <paramref name="user" /> in the backing store with a password,
                as an asynchronous operation.
            </summary>
            <param name="user">The user to create.</param>
            <param name="password">The password to add to the user.</param>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" />
                of the operation.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.GeneratePassword">
            <summary>
                Generate a password for a user based on the current password validator
            </summary>
            <returns>A generated password</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.ValidatePasswordAsync(System.String)">
            <summary>
                Used to validate the password without an identity user
                Validation code is based on the default ValidatePasswordAsync code
                Should return <see cref="P:Microsoft.AspNetCore.Identity.IdentityResult.Success" /> if validation is successful
            </summary>
            <param name="password">The password.</param>
            <returns>A <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" /> representing whether validation was successful.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.GenerateEmailConfirmationTokenAsync(`0)">
            <summary>
                Generates an email confirmation token for the specified user.
            </summary>
            <param name="user">The user to generate an email confirmation token for.</param>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, an email confirmation token.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.FindByNameAsync(System.String)">
            <summary>
                Finds and returns a user, if any, who has the specified user name.
            </summary>
            <param name="userName">The user name to search for.</param>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the user matching the specified
                <paramref name="userName" /> if it exists.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.AccessFailedAsync(`0)">
            <summary>
                Increments the access failed count for the user as an asynchronous operation.
                If the failed access account is greater than or equal to the configured maximum number of attempts,
                the user will be locked out for the configured lockout time span.
            </summary>
            <param name="user">The user whose failed access count to increment.</param>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the
                <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" /> of the operation.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.GetTwoFactorEnabledAsync(`0)">
            <summary>
                Returns a flag indicating whether the specified <paramref name="user" /> has two factor authentication enabled or
                not,
                as an asynchronous operation.
            </summary>
            <param name="user">The user whose two factor authentication enabled status should be retrieved.</param>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, true if the specified <paramref name="user " />
                has two factor authentication enabled, otherwise false.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.GetValidTwoFactorProvidersAsync(`0)">
            <summary>
                Gets a list of valid two factor token providers for the specified <paramref name="user" />,
                as an asynchronous operation.
            </summary>
            <param name="user">The user the whose two factor authentication providers will be returned.</param>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" /> that represents result of the asynchronous operation, a list of two
                factor authentication providers for the specified user.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.VerifyTwoFactorTokenAsync(`0,System.String,System.String)">
            <summary>
                Verifies the specified two factor authentication <paramref name="token" /> against the <paramref name="user" />.
            </summary>
            <param name="user">The user the token is supposed to be for.</param>
            <param name="tokenProvider">The provider which will verify the token.</param>
            <param name="token">The token to verify.</param>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" /> that represents result of the asynchronous operation, true if the token is valid,
                otherwise false.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo)">
            <summary>
                Adds an external Microsoft.AspNetCore.Identity.UserLoginInfo to the specified user.
            </summary>
            <param name="user">The user to add the login to.</param>
            <param name="login">The external Microsoft.AspNetCore.Identity.UserLoginInfo to add to the specified user.</param>
            <returns>
                The System.Threading.Tasks.Task that represents the asynchronous operation, containing the
                Microsoft.AspNetCore.Identity.IdentityResult of the operation.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.RemoveLoginAsync(`0,System.String,System.String)">
            <summary>
                Attempts to remove the provided external login information from the specified user. and returns a flag indicating
                whether the removal succeed or not.
            </summary>
            <param name="user">The user to remove the login information from.</param>
            <param name="loginProvider">The login provide whose information should be removed.</param>
            <param name="providerKey">The key given by the external login provider for the specified user.</param>
            <returns>
                The System.Threading.Tasks.Task that represents the asynchronous operation, containing the
                Microsoft.AspNetCore.Identity.IdentityResult of the operation.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.ResetAccessFailedCountAsync(`0)">
            <summary>
                Resets the access failed count for the user
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.GenerateTwoFactorTokenAsync(`0,System.String)">
            <summary>
                Generates a two factor token for the user
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.GetEmailAsync(`0)">
            <summary>
                Gets the email address for the specified user.
            </summary>
            <param name="user">The user whose email should be returned.</param>
            <returns>
                The task object containing the results of the asynchronous operation, the email address for the specified
                user.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.GetPhoneNumberAsync(`0)">
            <summary>
                Gets the telephone number, if any, for the specified user.
            </summary>
            <param name="user">The user whose telephone number should be retrieved.</param>
            <returns>
                The System.Threading.Tasks.Task that represents the asynchronous operation, containing the user's telephone
                number, if any.
            </returns>
            <remarks>
                A user can only support a phone number if the BackOfficeUserStore is replaced with another that implements
                IUserPhoneNumberStore
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUmbracoUserManager`1.ValidateCredentialsAsync(System.String,System.String)">
            <summary>
                Validates that a user's credentials are correct without actually logging them in.
            </summary>
            <param name="username">The user name.</param>
            <param name="password">The password.</param>
            <returns>True if the credentials are valid.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.IUserSessionStore`1">
            <summary>
                An IUserStore interface part to implement if the store supports validating user session Ids
            </summary>
            <typeparam name="TUser">The user type</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IUserSessionStore`1.ValidateSessionIdAsync(System.String,System.String)">
            <summary>
                Validates a user's session is still valid
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.MemberClientCredentials.UserName">
            <summary>
                Gets or sets the user name of the member to associate with the session after a successful login.
            </summary>
            <value>The user name of the member.</value>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.MemberClientCredentials.ClientId">
            <summary>
                Gets or sets the client ID that allows for a successful login.
            </summary>
            <value>The client ID.</value>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.MemberClientCredentials.ClientSecret">
            <summary>
                Gets or sets the client secret that allows for a successful login.
            </summary>
            <value>The client secret.</value>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberIdentityBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Security.MemberIdentityBuilder" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberIdentityBuilder.#ctor(System.Type,Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Security.MemberIdentityBuilder" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberIdentityBuilder.AddTokenProvider(System.String,System.Type)">
            <summary>
                Adds a token provider for the <seealso cref="T:Umbraco.Cms.Core.Security.MemberIdentityBuilder" />.
            </summary>
            <param name="providerName">The name of the provider to add.</param>
            <param name="provider">The type of the <see cref="T:Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1" /> to add.</param>
            <returns>The current <see cref="T:Microsoft.AspNetCore.Identity.IdentityBuilder" /> instance.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.MemberIdentityUser">
            <summary>
                The identity user used for the member
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberIdentityUser.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Security.MemberIdentityUser" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.MemberIdentityUser.Comments">
            <summary>
                Gets or sets the member's comments
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.MemberIdentityUser.MemberTypeAlias">
            <summary>
                Gets or sets the alias of the member type
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberIdentityUser.CreateNew(System.String,System.String,System.String,System.Boolean,System.String,System.Nullable{System.Guid})">
            <summary>
                Used to construct a new instance without an identity
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.MemberPasswordHasher">
            <summary>
                A password hasher for members
            </summary>
            <remarks>
                This will check for the ASP.NET Identity password hash flag before falling back to the legacy password hashing
                format ("HMACSHA256")
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberPasswordHasher.VerifyHashedPassword(Umbraco.Cms.Core.Security.MemberIdentityUser,System.String,System.String)">
            <summary>
                Verifies a user's hashed password
            </summary>
            <param name="user"></param>
            <param name="hashedPassword"></param>
            <param name="providedPassword"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the correct hashing algorith cannot be determined</exception>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.MemberRoleStore">
            <summary>
                A custom user store that uses Umbraco member data
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.MemberRoleStore.ErrorDescriber">
            <summary>
                Gets or sets the <see cref="T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber" /> for any error that occurred with the current operation.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberRoleStore.CreateAsync(Umbraco.Cms.Core.Security.UmbracoIdentityRole,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberRoleStore.UpdateAsync(Umbraco.Cms.Core.Security.UmbracoIdentityRole,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberRoleStore.DeleteAsync(Umbraco.Cms.Core.Security.UmbracoIdentityRole,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberRoleStore.GetRoleIdAsync(Umbraco.Cms.Core.Security.UmbracoIdentityRole,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberRoleStore.GetRoleNameAsync(Umbraco.Cms.Core.Security.UmbracoIdentityRole,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberRoleStore.SetRoleNameAsync(Umbraco.Cms.Core.Security.UmbracoIdentityRole,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberRoleStore.GetNormalizedRoleNameAsync(Umbraco.Cms.Core.Security.UmbracoIdentityRole,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberRoleStore.SetNormalizedRoleNameAsync(Umbraco.Cms.Core.Security.UmbracoIdentityRole,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberRoleStore.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberRoleStore.FindByNameAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberRoleStore.Dispose">
            <summary>
                Dispose the store
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberRoleStore.ThrowIfDisposed">
            <summary>
                Throws if this class has been disposed.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberRoleStore.MapFromMemberGroup(Umbraco.Cms.Core.Models.IMemberGroup)">
            <summary>
                Maps a member group to an identity role
            </summary>
            <param name="memberGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberRoleStore.MapToMemberGroup(Umbraco.Cms.Core.Security.UmbracoIdentityRole,Umbraco.Cms.Core.Models.IMemberGroup)">
            <summary>
                Map an identity role to a member group
            </summary>
            <param name="role"></param>
            <param name="memberGroup"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.MemberUserStore">
            <summary>
                A custom user store that uses Umbraco member data
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberUserStore.#ctor(Umbraco.Cms.Core.Services.IMemberService,Umbraco.Cms.Core.Mapping.IUmbracoMapper,Umbraco.Cms.Core.Scoping.ICoreScopeProvider,Microsoft.AspNetCore.Identity.IdentityErrorDescriber,Umbraco.Cms.Core.Services.IExternalLoginWithKeyService,Umbraco.Cms.Core.Services.ITwoFactorLoginService,Umbraco.Cms.Core.PublishedCache.IPublishedMemberCache)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Security.MemberUserStore" /> class for the members identity store
            </summary>
            <param name="memberService">The member service</param>
            <param name="mapper">The mapper for properties</param>
            <param name="scopeProvider">The scope provider</param>
            <param name="describer">The error describer</param>
            <param name="externalLoginService">The external login service</param>
            <param name="twoFactorLoginService">The two factor login service</param>
            <param name="memberCache"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberUserStore.CreateAsync(Umbraco.Cms.Core.Security.MemberIdentityUser,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberUserStore.UpdateAsync(Umbraco.Cms.Core.Security.MemberIdentityUser,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberUserStore.DeleteAsync(Umbraco.Cms.Core.Security.MemberIdentityUser,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberUserStore.FindByNameAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberUserStore.FindByEmailAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberUserStore.FindUserAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberUserStore.AddLoginAsync(Umbraco.Cms.Core.Security.MemberIdentityUser,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberUserStore.RemoveLoginAsync(Umbraco.Cms.Core.Security.MemberIdentityUser,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberUserStore.GetLoginsAsync(Umbraco.Cms.Core.Security.MemberIdentityUser,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberUserStore.GetRolesAsync(Umbraco.Cms.Core.Security.MemberIdentityUser,System.Threading.CancellationToken)">
            <summary>
                Gets a list of role names the specified user belongs to.
            </summary>
            <remarks>
                This lazy loads the roles for the member
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberUserStore.IsInRoleAsync(Umbraco.Cms.Core.Security.MemberIdentityUser,System.String,System.Threading.CancellationToken)">
            <summary>
                Returns true if a user is in the role
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberUserStore.FindUserLoginAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberUserStore.FindUserLoginAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberUserStore.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Lists all users of a given role.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberUserStore.SetTokenAsync(Umbraco.Cms.Core.Security.MemberIdentityUser,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
                Overridden to support Umbraco's own data storage requirements
            </summary>
            <remarks>
                The base class's implementation of this calls into FindTokenAsync and AddUserTokenAsync, both methods will only
                work with ORMs that are change
                tracking ORMs like EFCore.
            </remarks>
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberUserStore.GetTokenAsync(Umbraco.Cms.Core.Security.MemberIdentityUser,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
                Overridden to support Umbraco's own data storage requirements
            </summary>
            <remarks>
                The base class's implementation of this calls into FindTokenAsync, RemoveUserTokenAsync and AddUserTokenAsync, both
                methods will only work with ORMs that are change
                tracking ORMs like EFCore.
            </remarks>
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberUserStore.FindRoleAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberUserStore.FindUserRoleAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MemberUserStore.GetTwoFactorEnabledAsync(Umbraco.Cms.Core.Security.MemberIdentityUser,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Security.NoopLookupNormalizer">
            <summary>
                No-op lookup normalizer to maintain compatibility with ASP.NET Identity 2
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.PasswordChanger`1">
            <summary>
                Changes the password for an identity user
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.PasswordChanger`1.#ctor(Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Security.PasswordChanger{`0}})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Security.PasswordChanger`1"/> class.
                Password changing functionality
            </summary>
            <param name="logger">Logger for this class</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.PasswordChanger`1.ChangePasswordWithIdentityAsync(Umbraco.Cms.Core.Models.ChangingPasswordModel,Umbraco.Cms.Core.Security.IUmbracoUserManager{`0},Umbraco.Cms.Core.Models.Membership.IUser)">
            <summary>
                Changes the password for a user based on the many different rules and config options
            </summary>
            <param name="changingPasswordModel">The changing password model.</param>
            <param name="userMgr">The identity manager to use to update the password.</param>
            <param name="currentUser">The user performing the operation.</param>
            Create an adapter to pass through everything - adapting the member into a user for this functionality
            <returns>The outcome of the password changed model</returns>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoIdentityRole.Id">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoIdentityRole.Name">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoIdentityRole.NormalizedName">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoIdentityRole.HasIdentity">
            <summary>
                Gets or sets a value indicating whether returns an Id has been set on this object this will be false if the object
                is new and not persisted to the database
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoIdentityRole.BeingDirty">
            <summary>
                Gets the <see cref="P:Umbraco.Cms.Core.Security.UmbracoIdentityRole.BeingDirty" /> for change tracking
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoIdentityRole.IsDirty">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoIdentityRole.IsPropertyDirty(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoIdentityRole.GetDirtyProperties">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoIdentityRole.ResetDirtyProperties">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoIdentityRole.WasDirty">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoIdentityRole.WasPropertyDirty(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoIdentityRole.ResetWereDirtyProperties">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoIdentityRole.ResetDirtyProperties(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoIdentityRole.GetWereDirtyProperties">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoIdentityRole.DisableChangeTracking">
            <summary>
                Disables change tracking.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoIdentityRole.EnableChangeTracking">
            <summary>
                Enables change tracking.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.UmbracoIdentityUser">
            <summary>
                Abstract class for use in Umbraco Identity for users and members
            </summary>
            <remarks>
                <para>
                    This uses strings for the ID of the user, claims, roles. This is because aspnetcore identity's base store will
                    not support having an INT user PK and a string role PK with the way they've made the generics. So we will just
                    use
                    string for both which makes things more flexible anyways for users and members and also if/when we transition
                    to
                    GUID support
                </para>
                <para>
                    This class was originally borrowed from the EF implementation in Identity prior to netcore.
                    The new IdentityUser in netcore does not have properties such as Claims, Roles and Logins and those are instead
                    by default managed with their default user store backed by EF which utilizes EF's change tracking to track
                    these values
                    to a user. We will continue using this approach since it works fine for what we need which does the change
                    tracking of
                    claims, roles and logins directly on the user model.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoIdentityUser.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Security.UmbracoIdentityUser" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoIdentityUser.LastLoginDateUtc">
            <summary>
                Gets or sets last login date
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoIdentityUser.Email">
            <summary>
                Gets or sets email
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoIdentityUser.EmailConfirmed">
            <summary>
                Gets or sets a value indicating whether the email is confirmed, default is false
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoIdentityUser.PasswordHash">
            <summary>
                Gets or sets the salted/hashed form of the user password
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoIdentityUser.LastPasswordChangeDateUtc">
            <summary>
                Gets or sets dateTime in UTC when the password was last changed.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoIdentityUser.LockoutEnabled">
            <summary>
                Gets or sets a value indicating whether is lockout enabled for this user
            </summary>
            <remarks>
                Currently this is always true for users and members
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoIdentityUser.AccessFailedCount">
            <summary>
                Gets or sets the value to record failures for the purposes of lockout
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoIdentityUser.Roles">
            <summary>
                Gets or sets the user roles collection
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoIdentityUser.Claims">
            <summary>
                Gets navigation the user claims collection
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoIdentityUser.Logins">
            <summary>
                Gets the user logins collection
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoIdentityUser.LoginTokens">
            <summary>
                Gets the external login tokens collection
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoIdentityUser.Id">
            <summary>
                Gets or sets user ID (Primary Key)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoIdentityUser.HasIdentity">
            <summary>
                Gets or sets a value indicating whether returns an Id has been set on this object this will be false if the object
                is new and not persisted to the database
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoIdentityUser.UserName">
            <summary>
                Gets or sets user name
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoIdentityUser.IsLockedOut">
            <summary>
                Gets a value indicating whether the user is locked out based on the user's lockout end date
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoIdentityUser.BeingDirty">
            <summary>
                Gets the <see cref="P:Umbraco.Cms.Core.Security.UmbracoIdentityUser.BeingDirty" /> for change tracking
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoIdentityUser.IsApproved">
            <summary>
                Gets or sets a value indicating whether the IUser IsApproved
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoIdentityUser.Name">
            <summary>
                Gets or sets the user's real name
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoIdentityUser.PasswordConfig">
            <summary>
                Gets or sets the password config
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoIdentityUser.IsDirty">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoIdentityUser.IsPropertyDirty(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoIdentityUser.GetDirtyProperties">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoIdentityUser.ResetDirtyProperties">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoIdentityUser.WasDirty">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoIdentityUser.WasPropertyDirty(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoIdentityUser.ResetWereDirtyProperties">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoIdentityUser.ResetDirtyProperties(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoIdentityUser.GetWereDirtyProperties">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoIdentityUser.DisableChangeTracking">
            <summary>
                Disables change tracking.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoIdentityUser.EnableChangeTracking">
            <summary>
                Enables change tracking.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoIdentityUser.AddRole(System.String)">
            <summary>
                Adds a role
            </summary>
            <param name="role">The role to add</param>
            <remarks>
                Adding a role this way will not reflect on the user's group's collection or it's allowed sections until the user is
                persisted
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoIdentityUser.SetLoginsCallback(System.Lazy{System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Security.IIdentityUserLogin}})">
            <summary>
                Used to set a lazy call back to populate the user's Login list
            </summary>
            <param name="callback">The lazy value</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoIdentityUser.SetTokensCallback(System.Lazy{System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Security.IIdentityUserToken}})">
            <summary>
                Used to set a lazy call back to populate the user's token list
            </summary>
            <param name="callback">The lazy value</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoPasswordHasher`1.VerifyHashedPassword(`0,System.String,System.String)">
            <summary>
                Verifies a user's hashed password
            </summary>
            <param name="user"></param>
            <param name="hashedPassword"></param>
            <param name="providedPassword"></param>
            <returns></returns>
            <remarks>
                This will check the user's current hashed password format stored with their user row and use that to verify the
                hash. This could be any hashes
                from the very old v4, to the older v6-v8, to the older aspnet identity and finally to the most recent
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.UmbracoUserConfirmation`1">
            <summary>
                Confirms whether a user is approved or not
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.UmbracoUserManager`2">
            <summary>
                Abstract class for Umbraco User Managers for back office users or front-end members
            </summary>
            <typeparam name="TUser">The type of user</typeparam>
            ///
            <typeparam name="TPasswordConfig">The type password config</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserManager`2.#ctor(Umbraco.Cms.Core.Net.IIpResolver,Microsoft.AspNetCore.Identity.IUserStore{`0},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Identity.IdentityOptions},Microsoft.AspNetCore.Identity.IPasswordHasher{`0},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IUserValidator{`0}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IPasswordValidator{`0}},Microsoft.AspNetCore.Identity.IdentityErrorDescriber,System.IServiceProvider,Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.UserManager{`0}},Microsoft.Extensions.Options.IOptions{`1})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Security.UmbracoUserManager`2" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoUserManager`2.SupportsUserClaim">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoUserManager`2.SupportsQueryableUsers">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoUserManager`2.SupportsUserTwoFactor">
            <summary>
                Both users and members supports 2FA
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoUserManager`2.SupportsUserPhoneNumber">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoUserManager`2.PasswordConfiguration">
            <summary>
                Gets the password configuration
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoUserManager`2.IpResolver">
            <summary>
                Gets the IP resolver
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserManager`2.ValidateSessionIdAsync(System.String,System.String)">
            <summary>
                Used to validate a user's session
            </summary>
            <param name="userId">The user id</param>
            <param name="sessionId">The session id</param>
            <returns>True if the session is valid, else false</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserManager`2.GeneratePassword">
            <summary>
                Helper method to generate a password for a user based on the current password validator
            </summary>
            <returns>The generated password</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserManager`2.ValidatePasswordAsync(System.String)">
            <summary>
                Used to validate the password without an identity user
                Validation code is based on the default ValidatePasswordAsync code
                Should return <see cref="P:Microsoft.AspNetCore.Identity.IdentityResult.Success" /> if validation is successful
            </summary>
            <param name="password">The password.</param>
            <returns>A <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" /> representing whether validation was successful.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserManager`2.CheckPasswordAsync(`0,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserManager`2.ChangePasswordWithResetAsync(System.String,System.String,System.String)">
            <summary>
                This is a special method that will reset the password but will raise the Password Changed event instead of the
                reset event
            </summary>
            <param name="userId">The userId</param>
            <param name="token">The reset password token</param>
            <param name="newPassword">The new password to set it to</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" /></returns>
            <remarks>
                We use this because in the back office the only way an admin can change another user's password without first
                knowing their password
                is to generate a token and reset it, however, when we do this we want to track a password change, not a password
                reset
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserManager`2.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserManager`2.ResetAccessFailedCountAsync(`0)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserManager`2.AccessFailedAsync(`0)">
            <summary>
                Overrides the Microsoft ASP.NET user management method
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserManager`2.IsLockedOutAsync(`0)">
            <summary>
                Override to check the user approval value as well as the user lock out date, by default this only checks the user's
                locked out date
            </summary>
            <param name="user">The user</param>
            <returns>True if the user is locked out, else false</returns>
            <remarks>
                In the ASP.NET Identity world, there is only one value for being locked out, in Umbraco we have 2 so when checking
                this for Umbraco we need to check both values
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.UmbracoUserStore`2.Users">
            <summary>
                Not supported in Umbraco
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserStore`2.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)">
            <summary>
                Not supported in Umbraco
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserStore`2.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
                Adds a user to a role (user group)
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserStore`2.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserStore`2.GetClaimsAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Not supported in Umbraco
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserStore`2.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserStore`2.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserStore`2.GetRolesAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Gets a list of role names the specified user belongs to.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserStore`2.GetSecurityStampAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserStore`2.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)">
            <summary>
                Not supported in Umbraco
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserStore`2.HasPasswordAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserStore`2.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
                Returns true if a user is in the role
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserStore`2.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)">
            <summary>
                Not supported in Umbraco
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserStore`2.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
                Removes the role (user group) for the user
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserStore`2.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)">
            <summary>
                Not supported in Umbraco
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserStore`2.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserStore`2.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserStore`2.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserStore`2.AddUserTokenAsync(Microsoft.AspNetCore.Identity.IdentityUserToken{System.String})">
            <summary>
                Not supported in Umbraco, see comments above on GetTokenAsync, RemoveTokenAsync, SetTokenAsync
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserStore`2.FindTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
                Not supported in Umbraco, see comments above on GetTokenAsync, RemoveTokenAsync, SetTokenAsync
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.UmbracoUserStore`2.RemoveUserTokenAsync(Microsoft.AspNetCore.Identity.IdentityUserToken{System.String})">
            <summary>
                Not supported in Umbraco, see comments above on GetTokenAsync, RemoveTokenAsync, SetTokenAsync
            </summary>
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Services.Implement.PackagingService">
            <summary>
                Represents the Packaging Service, which provides import/export functionality for the Core models of the API
                using xml representation. This is primarily used by the Package functionality.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.PackagingService.DeleteCreatedPackageAsync(System.Guid,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.PackagingService.GetCreatedPackagesAsync(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.PackagingService.GetCreatedPackageByKeyAsync(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.PackagingService.CreateCreatedPackageAsync(Umbraco.Cms.Core.Packaging.PackageDefinition,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.PackagingService.UpdateCreatedPackageAsync(Umbraco.Cms.Core.Packaging.PackageDefinition,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.PackagingService.GetInstalledPackagesFromMigrationPlansAsync(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.PackagingService.GetPackageFileStream(Umbraco.Cms.Core.Packaging.PackageDefinition)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.TagQuery">
            <summary>
                Implements <see cref="T:Umbraco.Cms.Core.PublishedCache.ITagQuery" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.TagQuery.#ctor(Umbraco.Cms.Core.Services.ITagService,Umbraco.Cms.Core.IPublishedContentQuery,Umbraco.Cms.Core.Mapping.IUmbracoMapper)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.TagQuery" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.TagQuery.GetContentByTag(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.TagQuery.GetContentByTagGroup(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.TagQuery.GetMediaByTag(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.TagQuery.GetMediaByTagGroup(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.TagQuery.GetAllTags(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.TagQuery.GetAllContentTags(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.TagQuery.GetAllMediaTags(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.TagQuery.GetAllMemberTags(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.TagQuery.GetTagsForProperty(System.Int32,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.TagQuery.GetTagsForEntity(System.Int32,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Extensions.UmbracoBuilderExtensions">
            <summary>
                Provides extension methods to the <see cref="T:Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.UmbracoBuilderExtensions.Mappers(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
                Gets the mappers collection builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Umbraco.Extensions.UmbracoBuilderExtensions.NPocoMappers(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
                Gets the NPoco mappers collection builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Umbraco.Extensions.UmbracoBuilderExtensions.PackageMigrationPlans(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
                Gets the package migration plans collection builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Umbraco.Extensions.UmbracoBuilderExtensions.RuntimeModeValidators(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
                Gets the runtime mode validators collection builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Umbraco.Extensions.ExamineExtensions">
            <summary>
                Extension methods for Examine.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ExamineExtensions.ToPublishedSearchResults(System.Collections.Generic.IEnumerable{Examine.ISearchResult},Umbraco.Cms.Core.PublishedCache.IPublishedCache)">
            <summary>
                Creates an <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing all content from the
                <paramref name="cache" />.
            </summary>
            <param name="results">The search results.</param>
            <param name="cache">The cache to fetch the content from.</param>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing all content.
            </returns>
            <exception cref="T:System.ArgumentNullException">cache</exception>
            <remarks>
                Search results are skipped if it can't be fetched from the <paramref name="cache" /> by its integer id.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.ExamineExtensions.ToPublishedSearchResults(System.Collections.Generic.IEnumerable{Examine.ISearchResult},Umbraco.Cms.Core.PublishedCache.ICacheManager)">
            <summary>
                Creates an <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing all content, media or members from the snapshot.
            </summary>
            <param name="results">The search results.</param>
            <param name="cacheManager">The caches.</param>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing all content, media or members.
            </returns>
            <exception cref="T:System.ArgumentNullException">snapshot</exception>
            <remarks>
                Search results are skipped if it can't be fetched from the respective cache by its integer id.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.UmbracoExamineExtensions.CultureIsoCodeFieldNameMatchExpression">
            <remarks>
            Pattern:<br/>
            <code>^(?&lt;FieldName&gt;.+)_(?&lt;CultureName&gt;[a-z]{2,3}(-[a-z0-9]{2,4})?)$</code><br/>
            Options:<br/>
            <code>RegexOptions.ExplicitCapture</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ "FieldName" capture group.<br/>
                ○ Match a character other than '\n' greedily at least once.<br/>
            ○ Match '_'.<br/>
            ○ "CultureName" capture group.<br/>
                ○ Match a character in the set [a-z] greedily at least 2 and at most 3 times.<br/>
                ○ Optional (greedy).<br/>
                    ○ Match '-'.<br/>
                    ○ Match a character in the set [0-9a-z] atomically at least 2 and at most 4 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.UmbracoExamineExtensions.GetCultureFields(Umbraco.Cms.Infrastructure.Examine.IUmbracoIndex,System.String)">
            <summary>
                Returns all index fields that are culture specific (suffixed)
            </summary>
            <param name="index"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.UmbracoExamineExtensions.GetCultureAndInvariantFields(Umbraco.Cms.Infrastructure.Examine.IUmbracoIndex,System.String)">
            <summary>
                Returns all index fields that are culture specific (suffixed) or invariant
            </summary>
            <param name="index"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.UmbracoExamineExtensions.ParentId(Examine.Search.IQuery,System.Int32)">
            <summary>
                Query method to search on parent id
            </summary>
            <param name="query"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.UmbracoExamineExtensions.NodeName(Examine.Search.IQuery,System.String)">
            <summary>
                Query method to search on node name
            </summary>
            <param name="query"></param>
            <param name="nodeName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.UmbracoExamineExtensions.NodeName(Examine.Search.IQuery,Examine.Search.IExamineValue)">
            <summary>
                Query method to search on node name
            </summary>
            <param name="query"></param>
            <param name="nodeName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.UmbracoExamineExtensions.NodeTypeAlias(Examine.Search.IQuery,System.String)">
            <summary>
                Query method to search on node type alias
            </summary>
            <param name="query"></param>
            <param name="nodeTypeAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.UmbracoExamineExtensions.NodeTypeAlias(Examine.Search.IQuery,Examine.Search.IExamineValue)">
            <summary>
                Query method to search on node type alias
            </summary>
            <param name="query"></param>
            <param name="nodeTypeAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.InfrastuctureTypeLoaderExtensions.GetPackageMigrationPlans(Umbraco.Cms.Core.Composing.TypeLoader)">
            <summary>
                Gets all types implementing <see cref="T:Umbraco.Cms.Core.Packaging.PackageMigrationPlan" />
            </summary>
            <param name="mgr"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.MediaPicker3ConfigurationExtensions.ApplyConfiguration(Umbraco.Cms.Core.PropertyEditors.ValueConverters.ImageCropperValue,Umbraco.Cms.Core.PropertyEditors.MediaPicker3Configuration)">
            <summary>
                Applies the configuration to ensure only valid crops are kept and have the correct width/height.
            </summary>
        </member>
        <member name="T:Umbraco.Extensions.ObjectJsonExtensions">
            <summary>
                Provides object extension methods.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ObjectJsonExtensions.ToObjectDictionary``1(``0,System.Func{System.Reflection.PropertyInfo,System.String})">
            <summary>
                Converts an object's properties into a dictionary.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="namer">A property namer function.</param>
            <returns>A dictionary containing each properties.</returns>
        </member>
        <member name="M:Umbraco.Extensions.ServiceCollectionExtensions.AddRecurringBackgroundJob``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Adds a recurring background job with an implementation type of
                <typeparamref name="TJob" /> to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ServiceCollectionExtensions.AddRecurringBackgroundJob``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})">
            <summary>
                Adds a recurring background job with an implementation type of
                <typeparamref name="TJob" /> using the factory <paramref name="implementationFactory"/>
                to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.LoggerConfigExtensions.MinimalConfiguration(Serilog.LoggerConfiguration,Umbraco.Cms.Core.Hosting.IHostingEnvironment,Umbraco.Cms.Core.Logging.ILoggingConfiguration,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            This configures Serilog with some defaults
            Such as adding ProcessID, Thread, AppDomain etc
            It is highly recommended that you keep/use this default in your own logging config customizations
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.LoggerConfigExtensions.MinimalConfiguration(Serilog.LoggerConfiguration,Umbraco.Cms.Core.Hosting.IHostingEnvironment,Umbraco.Cms.Core.Logging.ILoggingConfiguration,Microsoft.Extensions.Configuration.IConfiguration,Umbraco.Cms.Infrastructure.Logging.Serilog.UmbracoFileConfiguration@)">
            <summary>
            This configures Serilog with some defaults
            Such as adding ProcessID, Thread, AppDomain etc
            It is highly recommended that you keep/use this default in your own logging config customizations
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.LoggerConfigExtensions.MinimalConfiguration(Serilog.LoggerConfiguration,Microsoft.Extensions.Hosting.IHostEnvironment,Umbraco.Cms.Core.Logging.ILoggingConfiguration,Umbraco.Cms.Infrastructure.Logging.Serilog.UmbracoFileConfiguration)">
            <summary>
            This configures Serilog with some defaults
            Such as adding ProcessID, Thread, AppDomain etc
            It is highly recommended that you keep/use this default in your own logging config customizations
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.LoggerConfigExtensions.OutputDefaultTextFile(Serilog.LoggerConfiguration,Umbraco.Cms.Core.Hosting.IHostingEnvironment,Serilog.Events.LogEventLevel)">
             <summary>
             Outputs a .txt format log at /App_Data/Logs/
             </summary>
             <param name="logConfig">A Serilog LoggerConfiguration</param>
             <param name="hostingEnvironment"></param>
             <param name="minimumLevel">The log level you wish the JSON file to collect - default is Verbose (highest)</param>
            
        </member>
        <member name="M:Umbraco.Extensions.LoggerConfigExtensions.OutputDefaultTextFile(Serilog.LoggerConfiguration,Microsoft.Extensions.Hosting.IHostEnvironment,Umbraco.Cms.Core.Configuration.Models.LoggingSettings,Serilog.Events.LogEventLevel)">
            <summary>
            Outputs a .txt format log at /App_Data/Logs/
            </summary>
            <param name="logConfig">A Serilog LoggerConfiguration</param>
            <param name="hostEnvironment"></param>
            <param name="loggingSettings"></param>
            <param name="minimumLevel">The log level you wish the JSON file to collect - default is Verbose (highest)</param>
        </member>
        <member name="M:Umbraco.Extensions.LoggerConfigExtensions.UmbracoFile(Serilog.Configuration.LoggerSinkConfiguration,System.String,Serilog.Formatting.ITextFormatter,Serilog.Events.LogEventLevel,Serilog.Core.LoggingLevelSwitch,System.Nullable{System.Int64},System.Nullable{System.TimeSpan},Serilog.RollingInterval,System.Boolean,System.Nullable{System.Int32},System.Text.Encoding)">
            <remarks>
               Used in config - If renamed or moved to other assembly the config file also has be updated.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.LoggerConfigExtensions.OutputDefaultJsonFile(Serilog.LoggerConfiguration,Umbraco.Cms.Core.Hosting.IHostingEnvironment,Umbraco.Cms.Core.Logging.ILoggingConfiguration,Serilog.Events.LogEventLevel,System.Nullable{System.Int32})">
            <summary>
            Outputs a CLEF format JSON log at /App_Data/Logs/
            </summary>
            <param name="logConfig">A Serilog LoggerConfiguration</param>
            <param name="loggingConfiguration">The logging configuration</param>
            <param name="minimumLevel">The log level you wish the JSON file to collect - default is Verbose (highest)</param>
            <param name="hostingEnvironment"></param>
            <param name="retainedFileCount">The number of days to keep log files. Default is set to null which means all logs are kept</param>
        </member>
        <member name="M:Umbraco.Extensions.LoggerConfigExtensions.OutputDefaultJsonFile(Serilog.LoggerConfiguration,Microsoft.Extensions.Hosting.IHostEnvironment,Umbraco.Cms.Core.Configuration.Models.LoggingSettings,Serilog.Events.LogEventLevel,System.Nullable{System.Int32})">
            <summary>
            Outputs a CLEF format JSON log at /App_Data/Logs/
            </summary>
            <param name="logConfig">A Serilog LoggerConfiguration</param>
            <param name="hostEnvironment"></param>
            <param name="loggingSettings">The logging configuration</param>
            <param name="minimumLevel">The log level you wish the JSON file to collect - default is Verbose (highest)</param>
            <param name="retainedFileCount">The number of days to keep log files. Default is set to null which means all logs are kept</param>
        </member>
        <member name="T:Umbraco.Extensions.PublishedElementExtensions">
            <summary>
                Provides extension methods to models.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.PublishedElementExtensions.ValueFor``2(``0,Umbraco.Cms.Core.Models.PublishedContent.IPublishedValueFallback,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String,Umbraco.Cms.Core.Models.PublishedContent.Fallback,``1)">
            <summary>
                Gets the value of a property.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.DbConnectionExtensions.UnwrapUmbraco(System.Data.IDbConnection)">
            <summary>
                Unwraps a database connection.
            </summary>
            <remarks>
                UmbracoDatabase wraps the original database connection in various layers (see
                OnConnectionOpened); this unwraps and returns the original database connection.
            </remarks>
        </member>
        <member name="T:Umbraco.Extensions.NPocoDatabaseExtensions">
            <summary>
                Provides extension methods to NPoco Database class.
            </summary>
            <summary>
                Provides extension methods to NPoco Database class.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.NPocoDatabaseExtensions.IncludeColumn(NPoco.PocoData,System.Collections.Generic.KeyValuePair{System.String,NPoco.PocoColumn})">
            <summary>
                Determines whether a column should be part of a bulk-insert.
            </summary>
            <param name="pocoData">The PocoData object corresponding to the record's type.</param>
            <param name="column">The column.</param>
            <returns>A value indicating whether the column should be part of the bulk-insert.</returns>
            <remarks>Columns that are primary keys and auto-incremental, or result columns, are excluded from bulk-inserts.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.NPocoDatabaseExtensions.GenerateBulkInsertCommands``1(Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabase,``0[])">
            <summary>
                Creates bulk-insert commands.
            </summary>
            <typeparam name="T">The type of the records.</typeparam>
            <param name="database">The database.</param>
            <param name="records">The records.</param>
            <returns>The sql commands to execute.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoDatabaseExtensions.QueryPaged``1(NPoco.IDatabase,System.Int64,NPoco.Sql,NPoco.Sql)">
            <summary>
                Iterates over the result of a paged data set with a db reader
            </summary>
            <typeparam name="T"></typeparam>
            <param name="database"></param>
            <param name="pageSize">
                The number of rows to load per page
            </param>
            <param name="sql"></param>
            <param name="sqlCount">
                Specify a custom Sql command to get the total count, if null is specified than the
                auto-generated sql count will be used
            </param>
            <returns></returns>
            <remarks>
                NPoco's normal Page returns a List{T} but sometimes we don't want all that in memory and instead want to
                iterate over each row with a reader using Query vs Fetch.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.NPocoDatabaseExtensions.QueryPaged``1(NPoco.IDatabase,System.Int64,NPoco.Sql)">
            <summary>
                Iterates over the result of a paged data set with a db reader
            </summary>
            <typeparam name="T"></typeparam>
            <param name="database"></param>
            <param name="pageSize">
                The number of rows to load per page
            </param>
            <param name="sql"></param>
            <returns></returns>
            <remarks>
                NPoco's normal Page returns a List{T} but sometimes we don't want all that in memory and instead want to
                iterate over each row with a reader using Query vs Fetch.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.NPocoDatabaseExtensions.InsertOrUpdate``1(Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabase,``0)">
            <summary>
                Safely inserts a record, or updates if it exists, based on a unique constraint.
            </summary>
            <param name="db"></param>
            <param name="poco"></param>
            <returns>
                The action that executed, either an insert or an update. If an insert occurred and a PK value got generated, the
                poco object
                passed in will contain the updated value.
            </returns>
            <remarks>
                <para>
                    We cannot rely on database-specific options because SQLCE
                    does not support any of them. Ideally this should be achieved with proper transaction isolation levels but that
                    would mean revisiting
                    isolation levels globally. We want to keep it simple for the time being and manage it manually.
                </para>
                <para>We handle it by trying to update, then insert, etc. until something works, or we get bored.</para>
                <para>
                    Note that with proper transactions, if T2 begins after T1 then we are sure that the database will contain T2's
                    value
                    once T1 and T2 have completed. Whereas here, it could contain T1's value.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.NPocoDatabaseExtensions.InsertOrUpdateAsync``1(Umbraco.Cms.Infrastructure.Persistence.IUmbracoDatabase,``0,System.String,System.Object)">
            <summary>
                Safely inserts a record, or updates if it exists, based on a unique constraint.
            </summary>
            <param name="db"></param>
            <param name="poco"></param>
            <param name="updateArgs"></param>
            <param name="updateCommand">If the entity has a composite key they you need to specify the update command explicitly</param>
            <returns>
                The action that executed, either an insert or an update. If an insert occurred and a PK value got generated, the
                poco object
                passed in will contain the updated value.
            </returns>
            <remarks>
                <para>
                    We cannot rely on database-specific options because SQLCE
                    does not support any of them. Ideally this should be achieved with proper transaction isolation levels but that
                    would mean revisiting
                    isolation levels globally. We want to keep it simple for the time being and manage it manually.
                </para>
                <para>We handle it by trying to update, then insert, etc. until something works, or we get bored.</para>
                <para>
                    Note that with proper transactions, if T2 begins after T1 then we are sure that the database will contain T2's
                    value
                    once T1 and T2 have completed. Whereas here, it could contain T1's value.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.NPocoDatabaseExtensions.EscapeAtSymbols(System.String)">
            <summary>
                This will escape single @ symbols for npoco values so it doesn't think it's a parameter
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoDatabaseExtensions.GetTypedConnection``1(System.Data.IDbConnection)">
            <summary>
                Returns the underlying connection as a typed connection - this is used to unwrap the profiled mini profiler stuff
            </summary>
            <typeparam name="TConnection"></typeparam>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoDatabaseExtensions.GetTypedTransaction``1(System.Data.IDbTransaction)">
            <summary>
                Returns the underlying transaction as a typed transaction - this is used to unwrap the profiled mini profiler stuff
            </summary>
            <typeparam name="TTransaction"></typeparam>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoDatabaseExtensions.GetTypedCommand``1(System.Data.IDbCommand)">
            <summary>
                Returns the underlying command as a typed command - this is used to unwrap the profiled mini profiler stuff
            </summary>
            <typeparam name="TCommand"></typeparam>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.Where``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            Appends a WHERE clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="predicate">A predicate to transform and append to the Sql statement.</param>
            <param name="alias">An optional alias for the table.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.Where``2(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},System.String,System.String)">
            <summary>
            Appends a WHERE clause to the Sql statement.
            </summary>
            <typeparam name="TDto1">The type of Dto 1.</typeparam>
            <typeparam name="TDto2">The type of Dto 2.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="predicate">A predicate to transform and append to the Sql statement.</param>
            <param name="alias1">An optional alias for Dto 1 table.</param>
            <param name="alias2">An optional alias for Dto 2 table.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.Where``3(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Boolean}},System.String,System.String,System.String)">
            <summary>
            Appends a WHERE clause to the Sql statement.
            </summary>
            <typeparam name="TDto1">The type of Dto 1.</typeparam>
            <typeparam name="TDto2">The type of Dto 2.</typeparam>
            <typeparam name="TDto3">The type of Dto 3.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="predicate">A predicate to transform and append to the Sql statement.</param>
            <param name="alias1">An optional alias for Dto 1 table.</param>
            <param name="alias2">An optional alias for Dto 2 table.</param>
            <param name="alias3">An optional alias for Dto 3 table.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.WhereIn``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.IEnumerable)">
            <summary>
            Appends a WHERE IN clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="field">An expression specifying the field.</param>
            <param name="values">The values.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.WhereIn``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.IEnumerable,System.String)">
            <summary>
            Appends a WHERE IN clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="field">An expression specifying the field.</param>
            <param name="values">The values.</param>
            <param name="alias"></param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.WhereIn``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext})">
            <summary>
            Appends a WHERE IN clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="field">An expression specifying the field.</param>
            <param name="values">A subquery returning the value.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.WhereNotIn``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.IEnumerable)">
            <summary>
            Appends a WHERE NOT IN clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="field">An expression specifying the field.</param>
            <param name="values">The values.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.WhereNotIn``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext})">
            <summary>
            Appends a WHERE NOT IN clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="field">An expression specifying the field.</param>
            <param name="values">A subquery returning the value.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.WhereAnyIn``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],System.Collections.IEnumerable)">
            <summary>
            Appends multiple OR WHERE IN clauses to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="fields">Expressions specifying the fields.</param>
            <param name="values">The values.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.WhereAny(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Func{NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext}}[])">
            <summary>
            Appends multiple OR WHERE clauses to the Sql statement.
            </summary>
            <param name="sql">The Sql statement.</param>
            <param name="predicates">The WHERE predicates.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.WhereNotNull``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Appends a WHERE NOT NULL clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="field">Expression specifying the field.</param>
            <param name="tableAlias">An optional alias for the table.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.WhereNull``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Boolean)">
            <summary>
            Appends a WHERE [NOT] NULL clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="field">Expression specifying the field.</param>
            <param name="tableAlias">An optional alias for the table.</param>
            <param name="not">A value indicating whether to NOT NULL.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.From``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.String)">
            <summary>
            Appends a FROM clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="alias">An optional table alias</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.OrderBy``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Appends an ORDER BY clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="field">An expression specifying the field.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.OrderBy``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Appends an ORDER BY clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="fields">Expression specifying the fields.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.OrderByDescending``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Appends an ORDER BY DESC clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="field">An expression specifying the field.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.OrderByDescending``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Appends an ORDER BY DESC clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="fields">Expression specifying the fields.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.OrderByDescending(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.String[])">
            <summary>
            Appends an ORDER BY DESC clause to the Sql statement.
            </summary>
            <param name="sql">The Sql statement.</param>
            <param name="fields">Fields.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.GroupBy``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Appends a GROUP BY clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="field">An expression specifying the field.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.GroupBy``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Appends a GROUP BY clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="fields">Expression specifying the fields.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.AndBy``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Appends more ORDER BY or GROUP BY fields to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="fields">Expressions specifying the fields.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.AndByDescending``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Appends more ORDER BY DESC fields to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="fields">Expressions specifying the fields.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.CrossJoin``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.String)">
            <summary>
            Appends a CROSS JOIN clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="alias">An optional alias for the joined table.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.InnerJoin``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.String)">
            <summary>
            Appends an INNER JOIN clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="alias">An optional alias for the joined table.</param>
            <returns>A SqlJoin statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.InnerJoin(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.String)">
            <summary>
            Appends an INNER JOIN clause using a nested query.
            </summary>
            <param name="sql">The SQL statement.</param>
            <param name="nestedSelect">The nested sql query.</param>
            <param name="alias">An optional alias for the joined table.</param>
            <returns>A SqlJoin statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.LeftJoin``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.String)">
            <summary>
            Appends a LEFT JOIN clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="alias">An optional alias for the joined table.</param>
            <returns>A SqlJoin statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.LeftJoin``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Func{NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext}},System.String)">
            <summary>
            Appends a LEFT JOIN clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="nestedJoin">A nested join statement.</param>
            <param name="alias">An optional alias for the joined table.</param>
            <returns>A SqlJoin statement.</returns>
            <remarks>Nested statement produces LEFT JOIN xxx JOIN yyy ON ... ON ...</remarks>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.LeftJoin(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.String)">
            <summary>
            Appends an LEFT JOIN clause using a nested query.
            </summary>
            <param name="sql">The SQL statement.</param>
            <param name="nestedSelect">The nested sql query.</param>
            <param name="alias">An optional alias for the joined table.</param>
            <returns>A SqlJoin statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.RightJoin``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.String)">
            <summary>
            Appends a RIGHT JOIN clause to the Sql statement.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The Sql statement.</param>
            <param name="alias">An optional alias for the joined table.</param>
            <returns>A SqlJoin statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.On``2(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext}.SqlJoinClause{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
            Appends an ON clause to a SqlJoin statement.
            </summary>
            <typeparam name="TLeft">The type of the left Dto.</typeparam>
            <typeparam name="TRight">The type of the right Dto.</typeparam>
            <param name="sqlJoin">The Sql join statement.</param>
            <param name="leftField">An expression specifying the left field.</param>
            <param name="rightField">An expression specifying the right field.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.On(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext}.SqlJoinClause{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Func{NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext}})">
            <summary>
            Appends an ON clause to a SqlJoin statement.
            </summary>
            <param name="sqlJoin">The Sql join statement.</param>
            <param name="on">A Sql fragment to use as the ON clause body.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.On``2(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext}.SqlJoinClause{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}},System.String,System.String)">
            <summary>
            Appends an ON clause to a SqlJoin statement.
            </summary>
            <typeparam name="TDto1">The type of Dto 1.</typeparam>
            <typeparam name="TDto2">The type of Dto 2.</typeparam>
            <param name="sqlJoin">The SqlJoin statement.</param>
            <param name="predicate">A predicate to transform and use as the ON clause body.</param>
            <param name="aliasLeft">An optional alias for Dto 1 table.</param>
            <param name="aliasRight">An optional alias for Dto 2 table.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.On``3(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext}.SqlJoinClause{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,``1,``2,System.Boolean}},System.String,System.String,System.String)">
            <summary>
            Appends an ON clause to a SqlJoin statement.
            </summary>
            <typeparam name="TDto1">The type of Dto 1.</typeparam>
            <typeparam name="TDto2">The type of Dto 2.</typeparam>
            <typeparam name="TDto3">The type of Dto 3.</typeparam>
            <param name="sqlJoin">The SqlJoin statement.</param>
            <param name="predicate">A predicate to transform and use as the ON clause body.</param>
            <param name="aliasLeft">An optional alias for Dto 1 table.</param>
            <param name="aliasRight">An optional alias for Dto 2 table.</param>
            <param name="aliasOther">An optional alias for Dto 3 table.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.SelectTop(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Int32)">
            <summary>
            Alters a Sql statement to return a maximum amount of rows.
            </summary>
            <param name="sql">The Sql statement.</param>
            <param name="count">The maximum number of rows to return.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.SelectCount(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.String)">
            <summary>
            Creates a SELECT COUNT(*) Sql statement.
            </summary>
            <param name="sql">The origin sql.</param>
            <param name="alias">An optional alias.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.SelectCount``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Creates a SELECT COUNT Sql statement.
            </summary>
            <typeparam name="TDto">The type of the DTO to count.</typeparam>
            <param name="sql">The origin sql.</param>
            <param name="fields">Expressions indicating the columns to count.</param>
            <returns>The Sql statement.</returns>
            <remarks>
            <para>If <paramref name="fields"/> is empty, all columns are counted.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.SelectCount``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Creates a SELECT COUNT Sql statement.
            </summary>
            <typeparam name="TDto">The type of the DTO to count.</typeparam>
            <param name="sql">The origin sql.</param>
            <param name="alias">An alias.</param>
            <param name="fields">Expressions indicating the columns to count.</param>
            <returns>The Sql statement.</returns>
            <remarks>
            <para>If <paramref name="fields"/> is empty, all columns are counted.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.SelectAll(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext})">
            <summary>
            Creates a SELECT * Sql statement.
            </summary>
            <param name="sql">The origin sql.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.Select``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Creates a SELECT Sql statement.
            </summary>
            <typeparam name="TDto">The type of the DTO to select.</typeparam>
            <param name="sql">The origin sql.</param>
            <param name="fields">Expressions indicating the columns to select.</param>
            <returns>The Sql statement.</returns>
            <remarks>
            <para>If <paramref name="fields"/> is empty, all columns are selected.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.SelectDistinct``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Creates a SELECT DISTINCT Sql statement.
            </summary>
            <typeparam name="TDto">The type of the DTO to select.</typeparam>
            <param name="sql">The origin sql.</param>
            <param name="fields">Expressions indicating the columns to select.</param>
            <returns>The Sql statement.</returns>
            <remarks>
            <para>If <paramref name="fields"/> is empty, all columns are selected.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.Select``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Creates a SELECT Sql statement.
            </summary>
            <typeparam name="TDto">The type of the DTO to select.</typeparam>
            <param name="sql">The origin sql.</param>
            <param name="tableAlias">A table alias.</param>
            <param name="fields">Expressions indicating the columns to select.</param>
            <returns>The Sql statement.</returns>
            <remarks>
            <para>If <paramref name="fields"/> is empty, all columns are selected.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.AndSelect(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.String[])">
            <summary>
            Adds columns to a SELECT Sql statement.
            </summary>
            <param name="sql">The origin sql.</param>
            <param name="fields">Columns to select.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.AndSelect``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Adds columns to a SELECT Sql statement.
            </summary>
            <typeparam name="TDto">The type of the DTO to select.</typeparam>
            <param name="sql">The origin sql.</param>
            <param name="fields">Expressions indicating the columns to select.</param>
            <returns>The Sql statement.</returns>
            <remarks>
            <para>If <paramref name="fields"/> is empty, all columns are selected.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.AndSelect``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Adds columns to a SELECT Sql statement.
            </summary>
            <typeparam name="TDto">The type of the DTO to select.</typeparam>
            <param name="sql">The origin sql.</param>
            <param name="tableAlias">A table alias.</param>
            <param name="fields">Expressions indicating the columns to select.</param>
            <returns>The Sql statement.</returns>
            <remarks>
            <para>If <paramref name="fields"/> is empty, all columns are selected.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.AndSelectCount(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.String)">
            <summary>
            Adds a COUNT(*) to a SELECT Sql statement.
            </summary>
            <param name="sql">The origin sql.</param>
            <param name="alias">An optional alias.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.AndSelectCount``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Adds a COUNT to a SELECT Sql statement.
            </summary>
            <typeparam name="TDto">The type of the DTO to count.</typeparam>
            <param name="sql">The origin sql.</param>
            <param name="fields">Expressions indicating the columns to count.</param>
            <returns>The Sql statement.</returns>
            <remarks>
            <para>If <paramref name="fields"/> is empty, all columns are counted.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.AndSelectCount``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Adds a COUNT to a SELECT Sql statement.
            </summary>
            <typeparam name="TDto">The type of the DTO to count.</typeparam>
            <param name="sql">The origin sql.</param>
            <param name="alias">An alias.</param>
            <param name="fields">Expressions indicating the columns to count.</param>
            <returns>The Sql statement.</returns>
            <remarks>
            <para>If <paramref name="fields"/> is empty, all columns are counted.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.Select``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Func{Umbraco.Extensions.NPocoSqlExtensions.SqlRef{``0},Umbraco.Extensions.NPocoSqlExtensions.SqlRef{``0}})">
            <summary>
            Creates a SELECT Sql statement with a referenced Dto.
            </summary>
            <typeparam name="TDto">The type of the Dto to select.</typeparam>
            <param name="sql">The origin Sql.</param>
            <param name="reference">An expression specifying the reference.</param>
            <returns>The Sql statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.Select``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Func{Umbraco.Extensions.NPocoSqlExtensions.SqlRef{``0},Umbraco.Extensions.NPocoSqlExtensions.SqlRef{``0}},System.Func{NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext}})">
            <summary>
            Creates a SELECT Sql statement with a referenced Dto.
            </summary>
            <typeparam name="TDto">The type of the Dto to select.</typeparam>
            <param name="sql">The origin Sql.</param>
            <param name="reference">An expression specifying the reference.</param>
            <param name="sqlexpr">An expression to apply to the Sql statement before adding the reference selection.</param>
            <returns>The Sql statement.</returns>
            <remarks>The <paramref name="sqlexpr"/> expression applies to the Sql statement before the reference selection
            is added, so that it is possible to add (e.g. calculated) columns to the referencing Dto.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.SelectAnyIfExists(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext})">
            <summary>
            Creates a SELECT CASE WHEN EXISTS query, which returns 1 if the sub query returns any results, and 0 if not.
            </summary>
            <param name="sql">The original SQL.</param>
            <param name="nestedSelect">The nested select to run the query against.</param>
            <returns>The updated Sql statement.</returns>
        </member>
        <member name="T:Umbraco.Extensions.NPocoSqlExtensions.SqlRef`1">
            <summary>
            Represents a Dto reference expression.
            </summary>
            <typeparam name="TDto">The type of the referencing Dto.</typeparam>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.SqlRef`1.#ctor(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.String)">
            <summary>
            Initializes a new Dto reference expression.
            </summary>
            <param name="sql">The original Sql expression.</param>
            <param name="prefix">The current Dtos prefix.</param>
        </member>
        <member name="P:Umbraco.Extensions.NPocoSqlExtensions.SqlRef`1.Sql">
            <summary>
            Gets the original Sql expression.
            </summary>
        </member>
        <member name="P:Umbraco.Extensions.NPocoSqlExtensions.SqlRef`1.Prefix">
            <summary>
            Gets the current Dtos prefix.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.SqlRef`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{Umbraco.Extensions.NPocoSqlExtensions.SqlRef{``0},Umbraco.Extensions.NPocoSqlExtensions.SqlRef{``0}})">
            <summary>
            Appends fields for a referenced Dto.
            </summary>
            <typeparam name="TRefDto">The type of the referenced Dto.</typeparam>
            <param name="field">An expression specifying the referencing field.</param>
            <param name="reference">An optional expression representing a nested reference selection.</param>
            <returns>A SqlRef statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.SqlRef`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Func{Umbraco.Extensions.NPocoSqlExtensions.SqlRef{``0},Umbraco.Extensions.NPocoSqlExtensions.SqlRef{``0}})">
            <summary>
            Appends fields for a referenced Dto.
            </summary>
            <typeparam name="TRefDto">The type of the referenced Dto.</typeparam>
            <param name="field">An expression specifying the referencing field.</param>
            <param name="tableAlias">The referenced Dto table alias.</param>
            <param name="reference">An optional expression representing a nested reference selection.</param>
            <returns>A SqlRef statement.</returns>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.SqlRef`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}},System.Func{Umbraco.Extensions.NPocoSqlExtensions.SqlRef{``0},Umbraco.Extensions.NPocoSqlExtensions.SqlRef{``0}})">
            <summary>
            Selects referenced DTOs.
            </summary>
            <typeparam name="TRefDto">The type of the referenced DTOs.</typeparam>
            <param name="field">An expression specifying the referencing field.</param>
            <param name="reference">An optional expression representing a nested reference selection.</param>
            <returns>A referenced DTO expression.</returns>
            <remarks>
            <para>The referencing property has to be a <c>List{<typeparamref name="TRefDto"/>}</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.SqlRef`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}},System.String,System.Func{Umbraco.Extensions.NPocoSqlExtensions.SqlRef{``0},Umbraco.Extensions.NPocoSqlExtensions.SqlRef{``0}})">
            <summary>
            Selects referenced DTOs.
            </summary>
            <typeparam name="TRefDto">The type of the referenced DTOs.</typeparam>
            <param name="field">An expression specifying the referencing field.</param>
            <param name="tableAlias">The DTO table alias.</param>
            <param name="reference">An optional expression representing a nested reference selection.</param>
            <returns>A referenced DTO expression.</returns>
            <remarks>
            <para>The referencing property has to be a <c>List{<typeparamref name="TRefDto"/>}</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.Columns``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Gets fields for a Dto.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The origin sql.</param>
            <param name="fields">Expressions specifying the fields.</param>
            <returns>The comma-separated list of fields.</returns>
            <remarks>
            <para>If <paramref name="fields"/> is empty, all fields are selected.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.ColumnsForInsert``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Gets fields for a Dto.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.Columns``1(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Gets fields for a Dto.
            </summary>
            <typeparam name="TDto">The type of the Dto.</typeparam>
            <param name="sql">The origin sql.</param>
            <param name="alias">The Dto table alias.</param>
            <param name="fields">Expressions specifying the fields.</param>
            <returns>The comma-separated list of fields.</returns>
            <remarks>
            <para>If <paramref name="fields"/> is empty, all fields are selected.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.NPocoSqlExtensions.ForUpdate(NPoco.Sql{Umbraco.Cms.Infrastructure.Persistence.ISqlContext})">
            <summary>
            Appends the relevant ForUpdate hint.
            </summary>
            <param name="sql">The Sql statement.</param>
            <returns>The Sql statement.</returns>
            <remarks>
            NOTE: This method will not work for all queries, only simple ones!
            </remarks>
        </member>
        <member name="T:Umbraco.Extensions.SqlContextExtensions">
            <summary>
                Provides extension methods to <see cref="T:Umbraco.Cms.Infrastructure.Persistence.ISqlContext" />.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.SqlContextExtensions.VisitDto``1(Umbraco.Cms.Infrastructure.Persistence.ISqlContext,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
                Visit an expression.
            </summary>
            <typeparam name="TDto">The type of the DTO.</typeparam>
            <param name="sqlContext">An <see cref="T:Umbraco.Cms.Infrastructure.Persistence.ISqlContext" />.</param>
            <param name="expression">An expression to visit.</param>
            <param name="alias">An optional table alias.</param>
            <returns>A SQL statement, and arguments, corresponding to the expression.</returns>
        </member>
        <member name="M:Umbraco.Extensions.SqlContextExtensions.VisitDto``2(Umbraco.Cms.Infrastructure.Persistence.ISqlContext,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
            <summary>
                Visit an expression.
            </summary>
            <typeparam name="TDto">The type of the DTO.</typeparam>
            <typeparam name="TOut">The type returned by the expression.</typeparam>
            <param name="sqlContext">An <see cref="T:Umbraco.Cms.Infrastructure.Persistence.ISqlContext" />.</param>
            <param name="expression">An expression to visit.</param>
            <param name="alias">An optional table alias.</param>
            <returns>A SQL statement, and arguments, corresponding to the expression.</returns>
        </member>
        <member name="M:Umbraco.Extensions.SqlContextExtensions.VisitDto``2(Umbraco.Cms.Infrastructure.Persistence.ISqlContext,System.Linq.Expressions.Expression{System.Func{``0,``1,System.Object}},System.String,System.String)">
            <summary>
                Visit an expression.
            </summary>
            <typeparam name="TDto1">The type of the first DTO.</typeparam>
            <typeparam name="TDto2">The type of the second DTO.</typeparam>
            <param name="sqlContext">An <see cref="T:Umbraco.Cms.Infrastructure.Persistence.ISqlContext" />.</param>
            <param name="expression">An expression to visit.</param>
            <param name="alias1">An optional table alias for the first DTO.</param>
            <param name="alias2">An optional table alias for the second DTO.</param>
            <returns>A SQL statement, and arguments, corresponding to the expression.</returns>
        </member>
        <member name="M:Umbraco.Extensions.SqlContextExtensions.VisitDto``4(Umbraco.Cms.Infrastructure.Persistence.ISqlContext,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}},System.String,System.String,System.String)">
            <summary>
                Visit an expression.
            </summary>
            <typeparam name="TDto1">The type of the first DTO.</typeparam>
            <typeparam name="TDto2">The type of the second DTO.</typeparam>
            <typeparam name="TDto3">The type of the third DTO.</typeparam>
            <typeparam name="TOut">The type returned by the expression.</typeparam>
            <param name="sqlContext">An <see cref="T:Umbraco.Cms.Infrastructure.Persistence.ISqlContext" />.</param>
            <param name="expression">An expression to visit.</param>
            <param name="alias1">An optional table alias for the first DTO.</param>
            <param name="alias2">An optional table alias for the second DTO.</param>
            <param name="alias3">An optional table alias for the third DTO.</param>
            <returns>A SQL statement, and arguments, corresponding to the expression.</returns>
        </member>
        <member name="M:Umbraco.Extensions.SqlContextExtensions.VisitDto``3(Umbraco.Cms.Infrastructure.Persistence.ISqlContext,System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.String,System.String)">
            <summary>
                Visit an expression.
            </summary>
            <typeparam name="TDto1">The type of the first DTO.</typeparam>
            <typeparam name="TDto2">The type of the second DTO.</typeparam>
            <typeparam name="TOut">The type returned by the expression.</typeparam>
            <param name="sqlContext">An <see cref="T:Umbraco.Cms.Infrastructure.Persistence.ISqlContext" />.</param>
            <param name="expression">An expression to visit.</param>
            <param name="alias1">An optional table alias for the first DTO.</param>
            <param name="alias2">An optional table alias for the second DTO.</param>
            <returns>A SQL statement, and arguments, corresponding to the expression.</returns>
        </member>
        <member name="M:Umbraco.Extensions.SqlContextExtensions.VisitModel``1(Umbraco.Cms.Infrastructure.Persistence.ISqlContext,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Visit a model expression.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="sqlContext">An <see cref="T:Umbraco.Cms.Infrastructure.Persistence.ISqlContext" />.</param>
            <param name="expression">An expression to visit.</param>
            <returns>A SQL statement, and arguments, corresponding to the expression.</returns>
        </member>
        <member name="M:Umbraco.Extensions.SqlContextExtensions.VisitModelField``1(Umbraco.Cms.Infrastructure.Persistence.ISqlContext,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Visit a model expression representing a field.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="sqlContext">An <see cref="T:Umbraco.Cms.Infrastructure.Persistence.ISqlContext" />.</param>
            <param name="field">An expression to visit, representing a field.</param>
            <returns>The name of the field.</returns>
        </member>
        <member name="T:Umbraco.Extensions.SqlSyntaxExtensions">
            <summary>
                Provides extension methods to <see cref="T:Umbraco.Cms.Infrastructure.Persistence.SqlSyntax.ISqlSyntaxProvider" />.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.SqlSyntaxExtensions.GetFieldName``1(Umbraco.Cms.Infrastructure.Persistence.SqlSyntax.ISqlSyntaxProvider,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
                Gets a quoted table and field name.
            </summary>
            <typeparam name="TDto">The type of the DTO.</typeparam>
            <param name="sqlSyntax">An <see cref="T:Umbraco.Cms.Infrastructure.Persistence.SqlSyntax.ISqlSyntaxProvider" />.</param>
            <param name="fieldSelector">An expression specifying the field.</param>
            <param name="tableAlias">An optional table alias.</param>
            <returns></returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LegacyLocalLinkRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the LegacyLocalLinkRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.LegacyLocalLinkRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LegacyLocalLinkRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LegacyLocalLinkRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LegacyLocalLinkRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LegacyLocalLinkRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LegacyLocalLinkRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LegacyLocalLinkRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LegacyLocalLinkRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LocalLinkRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the LocalLinkRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.LocalLinkRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LocalLinkRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LocalLinkRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LocalLinkRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LocalLinkRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LocalLinkRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LocalLinkRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LocalLinkRegex_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CultureIsoCodeFieldNameMatchExpression_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the CultureIsoCodeFieldNameMatchExpression method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.CultureIsoCodeFieldNameMatchExpression_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CultureIsoCodeFieldNameMatchExpression_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CultureIsoCodeFieldNameMatchExpression_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CultureIsoCodeFieldNameMatchExpression_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CultureIsoCodeFieldNameMatchExpression_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CultureIsoCodeFieldNameMatchExpression_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CultureIsoCodeFieldNameMatchExpression_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CultureIsoCodeFieldNameMatchExpression_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.BlockRegex_3">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the BlockRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.BlockRegex_3.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.BlockRegex_3.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.BlockRegex_3.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.BlockRegex_3.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.BlockRegex_3.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.BlockRegex_3.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.BlockRegex_3.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.BlockRegex_3.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.BlockRegex_4">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the BlockRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.BlockRegex_4.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.BlockRegex_4.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.BlockRegex_4.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.BlockRegex_4.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.BlockRegex_4.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.BlockRegex_4.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.BlockRegex_4.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.BlockRegex_4.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_indexOfString_202651CEEC9524DDE8F94BED922341B70FF2726A3502B3EB0D51521A9E6D5C58">
            <summary>Supports searching for the string "{localLink:umb:".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_indexOfString_803E3737533F55FD877DED7036142648E4D064EFD2427CFA0B6A13BBBA7BCF64">
            <summary>Supports searching for the string "{localLink:".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_indexOfString_A5A3ECE9EEA90691E0F0F13A41E72DA5E1BC07DF3A3CC7AA84C7065EF1F6E251">
            <summary>Supports searching for the string "&lt;umb-rte-block".</summary>
        </member>
    </members>
</doc>
