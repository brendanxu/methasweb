<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Umbraco.Core</name>
    </assembly>
    <members>
        <member name="T:Umbraco.Cms.Core.Actions.ActionAssignDomain">
            <summary>
                This action is invoked when a domain is being assigned to a document
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionAssignDomain.ActionLetter">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionLetter" />
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionAssignDomain.ActionAlias">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionAlias" />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionAssignDomain.Letter">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionAssignDomain.Alias">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionAssignDomain.Category">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionAssignDomain.Icon">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionAssignDomain.ShowInNotifier">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionAssignDomain.CanBePermissionAssigned">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Actions.ActionBrowse">
            <summary>
                This action is used as a security constraint that grants a user the ability to view nodes in a tree
                that has  permissions applied to it.
            </summary>
            <remarks>
                This action should not be invoked. It is used as the minimum required permission to view nodes in the content tree.
                By
                granting a user this permission, the user is able to see the node in the tree but not edit the document. This may
                be used by other trees
                that support permissions in the future.
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionBrowse.ActionLetter">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionLetter" />
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionBrowse.ActionAlias">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionAlias" />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionBrowse.Letter">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionBrowse.Alias">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionBrowse.ShowInNotifier">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionBrowse.CanBePermissionAssigned">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionBrowse.Icon">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionBrowse.Category">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Actions.ActionCollection">
            <summary>
                The collection of actions
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Actions.ActionCollection.#ctor(System.Func{System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Actions.IAction}})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Actions.ActionCollection" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Actions.ActionCollection.GetAction``1">
            <summary>
                Gets the action of the specified type.
            </summary>
            <typeparam name="T">The specified type to get</typeparam>
            <returns>The action</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Actions.ActionCollection.GetByVerbs(System.Collections.Generic.ISet{System.String})">
            <summary>
                Gets the actions by the specified verbs
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Actions.ActionCollection.FromEntityPermission(Umbraco.Cms.Core.Models.Membership.EntityPermission)">
            <summary>
                Gets the actions from an EntityPermission
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Actions.ActionCollectionBuilder">
            <summary>
                The action collection builder
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionCollectionBuilder.This">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Actions.ActionCollectionBuilder.CreateItems(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Actions.ActionCopy">
            <summary>
                This action is invoked when copying a document, media, member
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionCopy.ActionLetter">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionLetter" />
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionCopy.ActionAlias">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionAlias" />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionCopy.Letter">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionCopy.Alias">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionCopy.Category">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionCopy.Icon">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionCopy.ShowInNotifier">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionCopy.CanBePermissionAssigned">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Actions.ActionCreateBlueprintFromContent">
            <summary>
                This action is invoked when creating a blueprint from a content
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionCreateBlueprintFromContent.ActionLetter">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionLetter"/>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionCreateBlueprintFromContent.ActionAlias">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionAlias" />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionCreateBlueprintFromContent.Letter">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionCreateBlueprintFromContent.Alias">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionCreateBlueprintFromContent.ShowInNotifier">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionCreateBlueprintFromContent.CanBePermissionAssigned">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionCreateBlueprintFromContent.Icon">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionCreateBlueprintFromContent.Category">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Actions.ActionDelete">
            <summary>
            This action is invoked when a document, media, member is deleted
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionDelete.ActionLetter">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionLetter"/>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionDelete.ActionAlias">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionAlias"/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionDelete.Letter">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionDelete.Alias">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionDelete.Category">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionDelete.Icon">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionDelete.ShowInNotifier">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionDelete.CanBePermissionAssigned">
            <inheritdoc/>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionDocumentPropertyRead.ActionLetter">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionLetter" />
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionDocumentPropertyRead.ActionAlias">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionAlias" />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionDocumentPropertyRead.Letter">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionDocumentPropertyRead.Alias">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionDocumentPropertyRead.ShowInNotifier">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionDocumentPropertyRead.CanBePermissionAssigned">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionDocumentPropertyRead.Icon">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionDocumentPropertyRead.Category">
            <inheritdoc />
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionDocumentPropertyWrite.ActionLetter">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionLetter" />
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionDocumentPropertyWrite.ActionAlias">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionAlias" />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionDocumentPropertyWrite.Letter">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionDocumentPropertyWrite.Alias">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionDocumentPropertyWrite.ShowInNotifier">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionDocumentPropertyWrite.CanBePermissionAssigned">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionDocumentPropertyWrite.Icon">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionDocumentPropertyWrite.Category">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Actions.ActionMove">
            <summary>
                This action is invoked upon creation of a document, media, member.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionMove.ActionLetter">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionLetter"/>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionMove.ActionAlias">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionAlias"/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionMove.Letter">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionMove.Alias">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionMove.Category">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionMove.Icon">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionMove.ShowInNotifier">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionMove.CanBePermissionAssigned">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Actions.ActionNew">
            <summary>
                This action is invoked upon creation of a document.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionNew.ActionLetter">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionLetter"/>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionNew.ActionAlias">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionAlias"/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionNew.Letter">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionNew.Alias">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionNew.Icon">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionNew.ShowInNotifier">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionNew.CanBePermissionAssigned">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionNew.Category">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Actions.ActionNotify">
            <summary>
                This action is invoked upon modifying the notification of a content.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionNotify.ActionLetter">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionLetter"/>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionNotify.ActionAlias">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionAlias"/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionNotify.Letter">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionNotify.Alias">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionNotify.ShowInNotifier">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionNotify.CanBePermissionAssigned">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionNotify.Icon">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionNotify.Category">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Actions.ActionProtect">
            <summary>
                This action is invoked when a document is protected or unprotected.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionProtect.ActionLetter">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionLetter"/>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionProtect.ActionAlias">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionAlias"/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionProtect.Letter">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionProtect.Alias">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionProtect.Category">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionProtect.Icon">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionProtect.ShowInNotifier">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionProtect.CanBePermissionAssigned">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Actions.ActionPublish">
            <summary>
                This action is invoked when a document is being published.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionPublish.ActionLetter">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionLetter"/>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionPublish.ActionAlias">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionAlias"/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionPublish.Letter">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionPublish.Alias">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionPublish.Category">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionPublish.Icon">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionPublish.ShowInNotifier">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionPublish.CanBePermissionAssigned">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Actions.ActionRestore">
            <summary>
                This action is invoked when the content/media item is to be restored from the recycle bin.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionRestore.ActionLetter">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionLetter"/>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionRestore.ActionAlias">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionAlias"/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionRestore.Letter">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionRestore.Alias">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionRestore.Category">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionRestore.Icon">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionRestore.ShowInNotifier">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionRestore.CanBePermissionAssigned">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Actions.ActionRights">
            <summary>
                This action is invoked when rights are changed on a document.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionRights.ActionLetter">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionLetter"/>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionRights.ActionAlias">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionAlias"/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionRights.Letter">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionRights.Alias">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionRights.Category">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionRights.Icon">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionRights.ShowInNotifier">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionRights.CanBePermissionAssigned">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Actions.ActionRollback">
            <summary>
                This action is invoked when copying a document is being rolled back.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionRollback.ActionLetter">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionLetter"/>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionRollback.ActionAlias">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionAlias"/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionRollback.Letter">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionRollback.Alias">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionRollback.Category">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionRollback.Icon">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionRollback.ShowInNotifier">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionRollback.CanBePermissionAssigned">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Actions.ActionSort">
            <summary>
                This action is invoked when children to a document, media, member is being sorted.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionSort.ActionLetter">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionLetter"/>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionSort.ActionAlias">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionAlias"/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionSort.Letter">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionSort.Alias">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionSort.Category">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionSort.Icon">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionSort.ShowInNotifier">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionSort.CanBePermissionAssigned">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Actions.ActionUnpublish">
            <summary>
                This action is invoked when a document is being unpublished.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionUnpublish.ActionLetter">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionLetter"/>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionUnpublish.ActionAlias">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionAlias"/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionUnpublish.Letter">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionUnpublish.Alias">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionUnpublish.Category">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionUnpublish.Icon">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionUnpublish.ShowInNotifier">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionUnpublish.CanBePermissionAssigned">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Actions.ActionUpdate">
            <summary>
                This action is invoked when copying a document or media.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionUpdate.ActionLetter">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionLetter"/>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.ActionUpdate.ActionAlias">
            <inheritdoc cref="F:Umbraco.Cms.Core.Actions.IAction.ActionAlias"/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionUpdate.Letter">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionUpdate.Alias">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionUpdate.Category">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionUpdate.Icon">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionUpdate.ShowInNotifier">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.ActionUpdate.CanBePermissionAssigned">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Actions.IAction">
            <summary>
                Defines a back office action that can be permission assigned or subscribed to for notifications
            </summary>
            <remarks>
                If an IAction returns false for both ShowInNotifier and CanBePermissionAssigned then the IAction should not exist
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.IAction.ActionLetter">
            <inheritdoc cref="P:Umbraco.Cms.Core.Actions.IAction.Letter"/>
        </member>
        <member name="F:Umbraco.Cms.Core.Actions.IAction.ActionAlias">
            <inheritdoc cref="P:Umbraco.Cms.Core.Actions.IAction.Alias"/>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.IAction.Letter">
            <summary>
                Gets the letter used to assign a permission (must be unique).
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.IAction.ShowInNotifier">
            <summary>
                Gets a value indicating whether whether to allow subscribing to notifications for this action
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.IAction.CanBePermissionAssigned">
            <summary>
                Gets a value indicating whether whether to allow assigning permissions based on this action
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.IAction.Icon">
            <summary>
                Gets the icon to display for this action
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.IAction.Alias">
            <summary>
                Gets the alias for this action (must be unique).
                This is all lower-case because of case sensitive filesystems, see issue: https://github.com/umbraco/Umbraco-CMS/issues/11670.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Actions.IAction.Category">
            <summary>
                Gets the category used for this action
            </summary>
            <remarks>
                Used in the UI when assigning permissions
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Attempt">
            <summary>
                Provides ways to create attempts.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt.Succeed``1(``0)">
            <summary>
                Creates a successful attempt with a result.
            </summary>
            <typeparam name="TResult">The type of the attempted operation result.</typeparam>
            <param name="result">The result of the attempt.</param>
            <returns>The successful attempt.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt.SucceedWithStatus``2(``1,``0)">
            <summary>
                Creates a successful attempt with a result and a status.
            </summary>
            <typeparam name="TResult">The type of the attempted operation result.</typeparam>
            <typeparam name="TStatus">The type of the attempted operation status.</typeparam>
            <param name="status">The status of the attempt.</param>
            <param name="result">The result of the attempt.</param>
            <returns>The successful attempt.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt.Fail``1">
            <summary>
                Creates a failed attempt.
            </summary>
            <typeparam name="TResult">The type of the attempted operation result.</typeparam>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt.Fail``1(``0)">
            <summary>
                Creates a failed attempt with a result.
            </summary>
            <typeparam name="TResult">The type of the attempted operation result.</typeparam>
            <param name="result">The result of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt.FailWithStatus``2(``1,``0)">
            <summary>
                Creates a failed attempt with a result and a status.
            </summary>
            <typeparam name="TResult">The type of the attempted operation result.</typeparam>
            <typeparam name="TStatus">The type of the attempted operation status.</typeparam>
            <param name="status">The status of the attempt.</param>
            <param name="result">The result of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt.Fail``1(``0,System.Exception)">
            <summary>
                Creates a failed attempt with a result and an exception.
            </summary>
            <typeparam name="TResult">The type of the attempted operation result.</typeparam>
            <param name="result">The result of the attempt.</param>
            <param name="exception">The exception causing the failure of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt.FailWithStatus``2(``1,``0,System.Exception)">
            <summary>
                Creates a failed attempt with a result, an exception and a status.
            </summary>
            <typeparam name="TResult">The type of the attempted operation result.</typeparam>
            <typeparam name="TStatus">The type of the attempted operation status.</typeparam>
            <param name="status">The status of the attempt.</param>
            <param name="result">The result of the attempt.</param>
            <param name="exception">The exception causing the failure of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt.If``1(System.Boolean,``0)">
            <summary>
                Creates a successful or a failed attempt, with a result.
            </summary>
            <typeparam name="TResult">The type of the attempted operation result.</typeparam>
            <param name="condition">A value indicating whether the attempt is successful.</param>
            <param name="result">The result of the attempt.</param>
            <returns>The attempt.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt.IfWithStatus``2(System.Boolean,``1,``1,``0)">
            <summary>
                Creates a successful or a failed attempt, with a result.
            </summary>
            <typeparam name="TResult">The type of the attempted operation result.</typeparam>
            <typeparam name="TStatus">The type of the attempted operation status.</typeparam>
            <param name="condition">A value indicating whether the attempt is successful.</param>
            <param name="succStatus">The status of the successful attempt.</param>
            <param name="failStatus">The status of the failed attempt.</param>
            <param name="result">The result of the attempt.</param>
            <returns>The attempt.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Attempt`1">
            <summary>
                Represents the result of an operation attempt.
            </summary>
            <typeparam name="TResult">The type of the attempted operation result.</typeparam>
        </member>
        <member name="P:Umbraco.Cms.Core.Attempt`1.Success">
            <summary>
                Gets a value indicating whether this <see cref="T:Umbraco.Cms.Core.Attempt`1" /> was successful.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Attempt`1.Exception">
            <summary>
                Gets the exception associated with an unsuccessful attempt.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Attempt`1.Result">
            <summary>
                Gets the attempt result.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt`1.op_Implicit(Umbraco.Cms.Core.Attempt{`0})~System.Boolean">
            <summary>
                Implicitly operator to check if the attempt was successful without having to access the 'success' property
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt`1.ResultOr(`0)">
            <summary>
                Gets the attempt result, if successful, else a default value.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt`1.Succeed">
            <summary>
                Creates a successful attempt.
            </summary>
            <returns>The successful attempt.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt`1.Succeed(`0)">
            <summary>
                Creates a successful attempt with a result.
            </summary>
            <param name="result">The result of the attempt.</param>
            <returns>The successful attempt.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt`1.Fail">
            <summary>
                Creates a failed attempt.
            </summary>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt`1.Fail(System.Exception)">
            <summary>
                Creates a failed attempt with an exception.
            </summary>
            <param name="exception">The exception causing the failure of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt`1.Fail(`0)">
            <summary>
                Creates a failed attempt with a result.
            </summary>
            <param name="result">The result of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt`1.Fail(`0,System.Exception)">
            <summary>
                Creates a failed attempt with a result and an exception.
            </summary>
            <param name="result">The result of the attempt.</param>
            <param name="exception">The exception causing the failure of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt`1.If(System.Boolean)">
            <summary>
                Creates a successful or a failed attempt.
            </summary>
            <param name="condition">A value indicating whether the attempt is successful.</param>
            <returns>The attempt.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt`1.If(System.Boolean,`0)">
            <summary>
                Creates a successful or a failed attempt, with a result.
            </summary>
            <param name="condition">A value indicating whether the attempt is successful.</param>
            <param name="result">The result of the attempt.</param>
            <returns>The attempt.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Attempt`2">
            <summary>
                Represents the result of an operation attempt.
            </summary>
            <typeparam name="TResult">The type of the attempted operation result.</typeparam>
            <typeparam name="TStatus">The type of the attempted operation status.</typeparam>
        </member>
        <member name="P:Umbraco.Cms.Core.Attempt`2.Success">
            <summary>
                Gets a value indicating whether this <see cref="T:Umbraco.Cms.Core.Attempt`2" /> was successful.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Attempt`2.Exception">
            <summary>
                Gets the exception associated with an unsuccessful attempt.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Attempt`2.Result">
            <summary>
                Gets the attempt result.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Attempt`2.Status">
            <summary>
                Gets the attempt status.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt`2.op_Implicit(Umbraco.Cms.Core.Attempt{`0,`1})~System.Boolean">
            <summary>
                Implicitly operator to check if the attempt was successful without having to access the 'success' property
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt`2.Succeed(`1)">
            <summary>
                Creates a successful attempt.
            </summary>
            <param name="status">The status of the attempt.</param>
            <returns>The successful attempt.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt`2.Succeed(`1,`0)">
            <summary>
                Creates a successful attempt with a result.
            </summary>
            <param name="status">The status of the attempt.</param>
            <param name="result">The result of the attempt.</param>
            <returns>The successful attempt.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt`2.Fail(`1)">
            <summary>
                Creates a failed attempt.
            </summary>
            <param name="status">The status of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt`2.Fail(`1,System.Exception)">
            <summary>
                Creates a failed attempt with an exception.
            </summary>
            <param name="status">The status of the attempt.</param>
            <param name="exception">The exception causing the failure of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt`2.Fail(`1,`0)">
            <summary>
                Creates a failed attempt with a result.
            </summary>
            <param name="status">The status of the attempt.</param>
            <param name="result">The result of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt`2.Fail(`1,`0,System.Exception)">
            <summary>
                Creates a failed attempt with a result and an exception.
            </summary>
            <param name="status">The status of the attempt.</param>
            <param name="result">The result of the attempt.</param>
            <param name="exception">The exception causing the failure of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt`2.If(System.Boolean,`1,`1)">
            <summary>
                Creates a successful or a failed attempt.
            </summary>
            <param name="condition">A value indicating whether the attempt is successful.</param>
            <param name="succStatus">The status of the successful attempt.</param>
            <param name="failStatus">The status of the failed attempt.</param>
            <returns>The attempt.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Attempt`2.If(System.Boolean,`1,`1,`0)">
            <summary>
                Creates a successful or a failed attempt, with a result.
            </summary>
            <param name="condition">A value indicating whether the attempt is successful.</param>
            <param name="succStatus">The status of the successful attempt.</param>
            <param name="failStatus">The status of the failed attempt.</param>
            <param name="result">The result of the attempt.</param>
            <returns>The attempt.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.AppCaches">
            <summary>
                Represents the application caches.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.AppCaches.#ctor(Umbraco.Cms.Core.Cache.IAppPolicyCache,Umbraco.Cms.Core.Cache.IRequestCache,Umbraco.Cms.Core.Cache.IsolatedCaches)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.AppCaches" /> with cache providers.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Cache.AppCaches.Disabled">
            <summary>
                Gets the special disabled instance.
            </summary>
            <remarks>
                <para>When used by repositories, all cache policies apply, but the underlying caches do not cache anything.</para>
                <para>Used by tests.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Cache.AppCaches.NoCache">
            <summary>
                Gets the special no-cache instance.
            </summary>
            <remarks>
                <para>When used by repositories, all cache policies are bypassed.</para>
                <para>Used by repositories that do no cache.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Cache.AppCaches.RequestCache">
            <summary>
                Gets the per-request cache.
            </summary>
            <remarks>
                <para>The per-request caches works on top of the current HttpContext items.</para>
                <para>Outside a web environment, the behavior of that cache is unspecified.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Cache.AppCaches.RuntimeCache">
            <summary>
                Gets the runtime cache.
            </summary>
            <remarks>
                <para>The runtime cache is the main application cache.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Cache.AppCaches.IsolatedCaches">
            <summary>
                Gets the isolated caches.
            </summary>
            <remarks>
                <para>
                    Isolated caches are used by e.g. repositories, to ensure that each cached entity
                    type has its own cache, so that lookups are fast and the repository does not need to
                    search through all keys on a global scale.
                </para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.AppPolicedCacheDictionary`1">
            <summary>
                Provides a base class for implementing a dictionary of <see cref="T:Umbraco.Cms.Core.Cache.IAppPolicyCache" />.
            </summary>
            <typeparam name="TKey">The type of the dictionary key.</typeparam>
        </member>
        <member name="F:Umbraco.Cms.Core.Cache.AppPolicedCacheDictionary`1._cacheFactory">
            <summary>
                Gets the internal cache factory, for tests only!
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.AppPolicedCacheDictionary`1.#ctor(System.Func{`0,Umbraco.Cms.Core.Cache.IAppPolicyCache})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.AppPolicedCacheDictionary`1" /> class.
            </summary>
            <param name="cacheFactory"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.AppPolicedCacheDictionary`1.GetOrCreate(`0)">
            <summary>
                Gets or creates a cache.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.AppPolicedCacheDictionary`1.Remove(`0)">
            <summary>
                Removes a cache.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.AppPolicedCacheDictionary`1.RemoveAll">
            <summary>
                Removes all caches.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.AppPolicedCacheDictionary`1.ClearAllCaches">
            <summary>
                Clears all caches.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.AppPolicedCacheDictionary`1.Get(`0)">
            <summary>
                Tries to get a cache.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.AppPolicedCacheDictionary`1.ClearCache(`0)">
            <summary>
                Clears a cache.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.CacheKeys">
            <summary>
                Constants storing cache keys used in caching
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.DataTypeConfigurationCache">
            <summary>
            This cache is a temporary measure to reduce the amount of computational power required to deserialize and initialize <see cref="T:Umbraco.Cms.Core.Models.IDataType" /> when fetched from the main cache/database,
            because datatypes are fetched multiple times troughout a (backoffice content) request with a lot of content (or nested content) and each of these fetches initializes certain fields on the datatypes.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.DeepCloneAppCache">
            <summary>
                Implements <see cref="T:Umbraco.Cms.Core.Cache.IAppPolicyCache" /> by wrapping an inner other <see cref="T:Umbraco.Cms.Core.Cache.IAppPolicyCache" />
                instance, and ensuring that all inserts and returns are deep cloned copies of the cache item,
                when the item is deep-cloneable.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DeepCloneAppCache.#ctor(Umbraco.Cms.Core.Cache.IAppPolicyCache)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.DeepCloneAppCache" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Cache.DeepCloneAppCache.InnerCache">
            <summary>
                Gets the inner cache.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DeepCloneAppCache.Get(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DeepCloneAppCache.Get(System.String,System.Func{System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DeepCloneAppCache.SearchByKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DeepCloneAppCache.SearchByRegex(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DeepCloneAppCache.Get(System.String,System.Func{System.Object},System.Nullable{System.TimeSpan},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DeepCloneAppCache.Insert(System.String,System.Func{System.Object},System.Nullable{System.TimeSpan},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DeepCloneAppCache.Clear">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DeepCloneAppCache.Clear(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DeepCloneAppCache.ClearOfType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DeepCloneAppCache.ClearOfType``1">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DeepCloneAppCache.ClearOfType``1(System.Func{System.String,``0,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DeepCloneAppCache.ClearByKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DeepCloneAppCache.ClearByRegex(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.DictionaryAppCache">
            <summary>
                Implements <see cref="T:Umbraco.Cms.Core.Cache.IAppCache" /> on top of a concurrent dictionary.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Cache.DictionaryAppCache._items">
            <summary>
                Gets the internal items dictionary, for tests only!
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Cache.DictionaryAppCache.IsAvailable">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DictionaryAppCache.Get(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DictionaryAppCache.Get(System.String,System.Func{System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DictionaryAppCache.SearchByKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DictionaryAppCache.SearchByRegex(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DictionaryAppCache.Clear">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DictionaryAppCache.Clear(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DictionaryAppCache.ClearOfType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DictionaryAppCache.ClearOfType``1">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DictionaryAppCache.ClearOfType``1(System.Func{System.String,``0,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DictionaryAppCache.ClearByKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DictionaryAppCache.ClearByRegex(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.DistributedCache">
            <summary>
            Represents the entry point into Umbraco's distributed cache infrastructure.
            </summary>
            <remarks>
            <para>
            The distributed cache infrastructure ensures that distributed caches are invalidated properly in load balancing environments.
            </para>
            <para>
            Distribute caches include static (in-memory) cache, runtime cache, front-end content cache and Examine/Lucene indexes.
            indexes
            </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DistributedCache.#ctor(Umbraco.Cms.Core.Sync.IServerMessenger,Umbraco.Cms.Core.Cache.CacheRefresherCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.DistributedCache" /> class.
            </summary>
            <param name="serverMessenger">The server messenger.</param>
            <param name="cacheRefreshers">The cache refreshers.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DistributedCache.Refresh``1(System.Guid,System.Func{``0,System.Int32},``0[])">
            <summary>
            Notifies the distributed cache of specified item invalidation, for a specified <see cref="T:Umbraco.Cms.Core.Cache.ICacheRefresher`1" />.
            </summary>
            <typeparam name="T">The type of the invalidated items.</typeparam>
            <param name="refresherGuid">The unique identifier of the cache refresher.</param>
            <param name="getNumericId">A function returning the unique identifier of items.</param>
            <param name="instances">The invalidated items.</param>
            <remarks>
            This method is much better for performance because it does not need to re-lookup object instances.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DistributedCache.Refresh(System.Guid,System.Int32)">
            <summary>
            Notifies the distributed cache of a specified item invalidation, for a specified <see cref="T:Umbraco.Cms.Core.Cache.ICacheRefresher" />.
            </summary>
            <param name="refresherGuid">The unique identifier of the cache refresher.</param>
            <param name="id">The unique identifier of the invalidated item.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DistributedCache.Refresh(System.Guid,System.Int32[])">
            <summary>
            Notifies the distributed cache of a specified item invalidation, for a specified <see cref="T:Umbraco.Cms.Core.Cache.ICacheRefresher" />.
            </summary>
            <param name="refresherGuid">The unique identifier of the cache refresher.</param>
            <param name="ids">The unique identifier of the invalidated items.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DistributedCache.Refresh(System.Guid,System.Guid)">
            <summary>
            Notifies the distributed cache of a specified item invalidation, for a specified <see cref="T:Umbraco.Cms.Core.Cache.ICacheRefresher" />.
            </summary>
            <param name="refresherGuid">The unique identifier of the cache refresher.</param>
            <param name="id">The unique identifier of the invalidated item.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DistributedCache.RefreshByPayload``1(System.Guid,``0[])">
            <summary>
            Refreshes the distributed cache by payload.
            </summary>
            <typeparam name="TPayload">The type of the payload.</typeparam>
            <param name="refresherGuid">The unique identifier of the cache refresher.</param>
            <param name="payload">The payload.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DistributedCache.RefreshByPayload``1(System.Guid,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Refreshes the distributed cache by payload.
            </summary>
            <typeparam name="TPayload">The type of the payload.</typeparam>
            <param name="refresherGuid">The unique identifier of the cache refresher.</param>
            <param name="payloads">The payloads.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DistributedCache.RefreshAll(System.Guid)">
            <summary>
            Notifies the distributed cache of a global invalidation for a specified <see cref="T:Umbraco.Cms.Core.Cache.ICacheRefresher" />.
            </summary>
            <param name="refresherGuid">The unique identifier of the cache refresher.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DistributedCache.Remove(System.Guid,System.Int32)">
            <summary>
            Notifies the distributed cache of a specified item removal, for a specified <see cref="T:Umbraco.Cms.Core.Cache.ICacheRefresher" />.
            </summary>
            <param name="refresherGuid">The unique identifier of the cache refresher.</param>
            <param name="id">The unique identifier of the removed item.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DistributedCache.Remove(System.Guid,System.Int32[])">
            <summary>
            Notifies the distributed cache of a specified item removal, for a specified <see cref="T:Umbraco.Cms.Core.Cache.ICacheRefresher" />.
            </summary>
            <param name="refresherGuid">The unique identifier of the cache refresher.</param>
            <param name="ids">The unique identifier of the removed items.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DistributedCache.Remove``1(System.Guid,System.Func{``0,System.Int32},``0[])">
            <summary>
            Notifies the distributed cache of specified item removal, for a specified <see cref="T:Umbraco.Cms.Core.Cache.ICacheRefresher`1" />.
            </summary>
            <typeparam name="T">The type of the removed items.</typeparam>
            <param name="refresherGuid">The unique identifier of the cache refresher.</param>
            <param name="getNumericId">A function returning the unique identifier of items.</param>
            <param name="instances">The removed items.</param>
            <remarks>
            This method is much better for performance because it does not need to re-lookup object instances.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.FastDictionaryAppCache">
            <summary>
                Implements a fast <see cref="T:Umbraco.Cms.Core.Cache.IAppCache" /> on top of a concurrent dictionary.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Cache.FastDictionaryAppCache._items">
            <summary>
                Gets the internal items dictionary, for tests only!
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FastDictionaryAppCache.Get(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FastDictionaryAppCache.Get(System.String,System.Func{System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FastDictionaryAppCache.SearchByKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FastDictionaryAppCache.SearchByRegex(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FastDictionaryAppCache.Clear">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FastDictionaryAppCache.Clear(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FastDictionaryAppCache.ClearOfType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FastDictionaryAppCache.ClearOfType``1">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FastDictionaryAppCache.ClearOfType``1(System.Func{System.String,``0,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FastDictionaryAppCache.ClearByKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FastDictionaryAppCache.ClearByRegex(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.FastDictionaryAppCacheBase">
            <summary>
                Provides a base class to fast, dictionary-based <see cref="T:Umbraco.Cms.Core.Cache.IAppCache" /> implementations.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FastDictionaryAppCacheBase.Get(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FastDictionaryAppCacheBase.Get(System.String,System.Func{System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FastDictionaryAppCacheBase.SearchByKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FastDictionaryAppCacheBase.SearchByRegex(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FastDictionaryAppCacheBase.Clear">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FastDictionaryAppCacheBase.Clear(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FastDictionaryAppCacheBase.ClearOfType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FastDictionaryAppCacheBase.ClearOfType``1">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FastDictionaryAppCacheBase.ClearOfType``1(System.Func{System.String,``0,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FastDictionaryAppCacheBase.ClearByKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.FastDictionaryAppCacheBase.ClearByRegex(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.IAppCache">
            <summary>
                Defines an application cache.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IAppCache.Get(System.String)">
            <summary>
                Gets an item identified by its key.
            </summary>
            <param name="key">The key of the item.</param>
            <returns>The item, or null if the item was not found.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IAppCache.Get(System.String,System.Func{System.Object})">
            <summary>
                Gets or creates an item identified by its key.
            </summary>
            <param name="key">The key of the item.</param>
            <param name="factory">A factory function that can create the item.</param>
            <returns>The item.</returns>
            <remarks>Null values returned from the factory function are never cached.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IAppCache.SearchByKey(System.String)">
            <summary>
                Gets items with a key starting with the specified value.
            </summary>
            <param name="keyStartsWith">The StartsWith value to use in the search.</param>
            <returns>Items matching the search.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IAppCache.SearchByRegex(System.String)">
            <summary>
                Gets items with a key matching a regular expression.
            </summary>
            <param name="regex">The regular expression.</param>
            <returns>Items matching the search.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IAppCache.Clear">
            <summary>
                Removes all items from the cache.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IAppCache.Clear(System.String)">
            <summary>
                Removes an item identified by its key from the cache.
            </summary>
            <param name="key">The key of the item.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IAppCache.ClearOfType(System.Type)">
            <summary>
                Removes items of a specified type from the cache.
            </summary>
            <param name="type">The type to remove.</param>
            <remarks>
                <para>
                    If the type is an interface, then all items of a type implementing that interface are
                    removed. Otherwise, only items of that exact type are removed (items of type inheriting from
                    the specified type are not removed).
                </para>
                <para>Performs a case-sensitive search.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IAppCache.ClearOfType``1">
            <summary>
                Removes items of a specified type from the cache.
            </summary>
            <typeparam name="T">The type of the items to remove.</typeparam>
            <remarks>
                If the type is an interface, then all items of a type implementing that interface are
                removed. Otherwise, only items of that exact type are removed (items of type inheriting from
                the specified type are not removed).
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IAppCache.ClearOfType``1(System.Func{System.String,``0,System.Boolean})">
            <summary>
                Removes items of a specified type from the cache.
            </summary>
            <typeparam name="T">The type of the items to remove.</typeparam>
            <param name="predicate">The predicate to satisfy.</param>
            <remarks>
                If the type is an interface, then all items of a type implementing that interface are
                removed. Otherwise, only items of that exact type are removed (items of type inheriting from
                the specified type are not removed).
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IAppCache.ClearByKey(System.String)">
            <summary>
                Clears items with a key starting with the specified value.
            </summary>
            <param name="keyStartsWith">The StartsWith value to use in the search.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IAppCache.ClearByRegex(System.String)">
            <summary>
                Clears items with a key matching a regular expression.
            </summary>
            <param name="regex">The regular expression.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.IAppPolicyCache">
            <summary>
                Defines an application cache that support cache policies.
            </summary>
            <remarks>
                A cache policy can be used to cache with timeouts,
                or depending on files, and with a remove callback, etc.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IAppPolicyCache.Get(System.String,System.Func{System.Object},System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
                Gets an item identified by its key.
            </summary>
            <param name="key">The key of the item.</param>
            <param name="factory">A factory function that can create the item.</param>
            <param name="timeout">An optional cache timeout.</param>
            <param name="isSliding">An optional value indicating whether the cache timeout is sliding (default is false).</param>
            <returns>The item.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IAppPolicyCache.Insert(System.String,System.Func{System.Object},System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
                Inserts an item.
            </summary>
            <param name="key">The key of the item.</param>
            <param name="factory">A factory function that can create the item.</param>
            <param name="timeout">An optional cache timeout.</param>
            <param name="isSliding">An optional value indicating whether the cache timeout is sliding (default is false).</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.IDataTypeConfigurationCache">
            <summary>
            Represents a cache for <see cref="T:Umbraco.Cms.Core.Models.IDataType" /> configuration.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IDataTypeConfigurationCache.GetConfiguration(System.Guid)">
            <summary>
            Gets the data type configuration.
            </summary>
            <param name="key">The data type key.</param>
            <returns>
            The data type configuration.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IDataTypeConfigurationCache.GetConfigurationAs``1(System.Guid)">
            <summary>
            Gets the data type configuration as <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The data type configuration type.</typeparam>
            <param name="key">The data type key.</param>
            <returns>
            The data type configuration as <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IDataTypeConfigurationCache.ClearCache(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Clears the cache for the specified keys.
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IRepositoryCachePolicy`2.Get(`1,System.Func{`1,`0},System.Func{`1[],System.Collections.Generic.IEnumerable{`0}})">
            <summary>
                Gets an entity from the cache, else from the repository.
            </summary>
            <param name="id">The identifier.</param>
            <param name="performGet">The repository PerformGet method.</param>
            <param name="performGetAll">The repository PerformGetAll method.</param>
            <returns>The entity with the specified identifier, if it exits, else null.</returns>
            <remarks>First considers the cache then the repository.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IRepositoryCachePolicy`2.GetCached(`1)">
            <summary>
                Gets an entity from the cache.
            </summary>
            <param name="id">The identifier.</param>
            <returns>The entity with the specified identifier, if it is in the cache already, else null.</returns>
            <remarks>Does not consider the repository at all.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IRepositoryCachePolicy`2.Exists(`1,System.Func{`1,System.Boolean},System.Func{`1[],System.Collections.Generic.IEnumerable{`0}})">
            <summary>
                Gets a value indicating whether an entity with a specified identifier exists.
            </summary>
            <param name="id">The identifier.</param>
            <param name="performExists">The repository PerformExists method.</param>
            <param name="performGetAll">The repository PerformGetAll method.</param>
            <returns>A value indicating whether an entity with the specified identifier exists.</returns>
            <remarks>First considers the cache then the repository.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IRepositoryCachePolicy`2.Create(`0,System.Action{`0})">
            <summary>
                Creates an entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="persistNew">The repository PersistNewItem method.</param>
            <remarks>Creates the entity in the repository, and updates the cache accordingly.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IRepositoryCachePolicy`2.Update(`0,System.Action{`0})">
            <summary>
                Updates an entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="persistUpdated">The repository PersistUpdatedItem method.</param>
            <remarks>Updates the entity in the repository, and updates the cache accordingly.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IRepositoryCachePolicy`2.Delete(`0,System.Action{`0})">
            <summary>
                Removes an entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="persistDeleted">The repository PersistDeletedItem method.</param>
            <remarks>Removes the entity from the repository and clears the cache.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IRepositoryCachePolicy`2.GetAll(`1[],System.Func{`1[],System.Collections.Generic.IEnumerable{`0}})">
            <summary>
                Gets entities.
            </summary>
            <param name="ids">The identifiers.</param>
            <param name="performGetAll">The repository PerformGetAll method.</param>
            <returns>If <paramref name="ids" /> is empty, all entities, else the entities with the specified identifiers.</returns>
            <remarks>Get all the entities. Either from the cache or the repository depending on the implementation.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IRepositoryCachePolicy`2.ClearAll">
            <summary>
                Clears the entire cache.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Cache.IRequestCache.IsAvailable">
            <summary>
                Returns true if the request cache is available otherwise false
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.IsolatedCaches">
            <summary>
                Represents a dictionary of <see cref="T:Umbraco.Cms.Core.Cache.IAppPolicyCache" /> for types.
            </summary>
            <remarks>
                <para>
                    Isolated caches are used by e.g. repositories, to ensure that each cached entity
                    type has its own cache, so that lookups are fast and the repository does not need to
                    search through all keys on a global scale.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IsolatedCaches.#ctor(System.Func{System.Type,Umbraco.Cms.Core.Cache.IAppPolicyCache})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.IsolatedCaches" /> class.
            </summary>
            <param name="cacheFactory"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IsolatedCaches.GetOrCreate``1">
            <summary>
                Gets a cache.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IsolatedCaches.Get``1">
            <summary>
                Tries to get a cache.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IsolatedCaches.ClearCache``1">
            <summary>
                Clears a cache.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.NoAppCache">
            <summary>
                Implements <see cref="T:Umbraco.Cms.Core.Cache.IAppPolicyCache" /> and do not cache.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Cache.NoAppCache.Instance">
            <summary>
                Gets the singleton instance.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Cache.NoAppCache.IsAvailable">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.NoAppCache.Get(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.NoAppCache.Get(System.String,System.Func{System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.NoAppCache.SearchByKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.NoAppCache.SearchByRegex(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.NoAppCache.Get(System.String,System.Func{System.Object},System.Nullable{System.TimeSpan},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.NoAppCache.Insert(System.String,System.Func{System.Object},System.Nullable{System.TimeSpan},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.NoAppCache.Clear">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.NoAppCache.Clear(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.NoAppCache.ClearOfType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.NoAppCache.ClearOfType``1">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.NoAppCache.ClearOfType``1(System.Func{System.String,``0,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.NoAppCache.ClearByKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.NoAppCache.ClearByRegex(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.ContentTypeChangedDistributedCacheNotificationHandlerBase`3">
            <inheritdoc />
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TNotification">The type of the notification.</typeparam>
            <typeparam name="TNotificationObject">The type of the notification object.</typeparam>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.ContentTypeChangedDistributedCacheNotificationHandlerBase`2">
            <inheritdoc />
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TNotification">The type of the notification.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.ContentTypeChangedDistributedCacheNotificationHandlerBase`2.GetEntities(`1)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.DeletedDistributedCacheNotificationHandlerBase`3">
            <inheritdoc />
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TNotification">The type of the notification.</typeparam>
            <typeparam name="TNotificationObject">The type of the notification object.</typeparam>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.DeletedDistributedCacheNotificationHandlerBase`2">
            <inheritdoc />
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TNotification">The type of the notification.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DeletedDistributedCacheNotificationHandlerBase`2.GetEntities(`1)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.DistributedCacheNotificationHandlerBase`2">
            <inheritdoc />
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TNotification">The type of the notification.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DistributedCacheNotificationHandlerBase`2.Handle(`1)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DistributedCacheNotificationHandlerBase`2.Handle(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DistributedCacheNotificationHandlerBase`2.GetEntities(`1)">
            <summary>
            Gets the entities from the specified notification.
            </summary>
            <param name="notification">The notification.</param>
            <returns>
            The entities.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DistributedCacheNotificationHandlerBase`2.Handle(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Handles the specified entities.
            </summary>
            <param name="entities">The entities.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.IDistributedCacheNotificationHandler">
            <summary>
            Marker interface for notification handlers that triggers a distributed cache refresher.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.IDistributedCacheNotificationHandler`1">
            <summary>
            Defines a handler for a <typeparamref name="TNotification" /> that triggers a distributed cache refresher.
            </summary>
            <typeparam name="TNotification">The type of the notification.</typeparam>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.ContentTreeChangeDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.ContentTreeChangeDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.ContentTreeChangeDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.ContentTreeChangeDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Services.Changes.TreeChange{Umbraco.Cms.Core.Models.IContent}})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.ContentTypeChangedDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.ContentTypeChangedDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.ContentTypeChangedDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.ContentTypeChangedDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Services.Changes.ContentTypeChange{Umbraco.Cms.Core.Models.IContentType}})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.DataTypeDeletedDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DataTypeDeletedDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.DataTypeDeletedDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DataTypeDeletedDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IDataType})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.DataTypeSavedDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DataTypeSavedDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.DataTypeSavedDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DataTypeSavedDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IDataType})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.DictionaryItemDeletedDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DictionaryItemDeletedDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.DictionaryItemDeletedDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DictionaryItemDeletedDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IDictionaryItem})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.DictionaryItemSavedDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DictionaryItemSavedDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.DictionaryItemSavedDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DictionaryItemSavedDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IDictionaryItem})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.DomainDeletedDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DomainDeletedDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.DomainDeletedDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DomainDeletedDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IDomain})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.DomainSavedDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DomainSavedDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.DomainSavedDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.DomainSavedDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IDomain})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.LanguageDeletedDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.LanguageDeletedDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.LanguageDeletedDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.LanguageDeletedDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.ILanguage})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.LanguageSavedDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.LanguageSavedDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.LanguageSavedDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.LanguageSavedDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.ILanguage})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.MediaTreeChangeDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.MediaTreeChangeDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.MediaTreeChangeDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.MediaTreeChangeDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Services.Changes.TreeChange{Umbraco.Cms.Core.Models.IMedia}})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.MediaTypeChangedDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.MediaTypeChangedDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.MediaTypeChangedDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.MediaTypeChangedDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Services.Changes.ContentTypeChange{Umbraco.Cms.Core.Models.IMediaType}})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.MemberDeletedDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.MemberDeletedDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.MemberDeletedDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.MemberDeletedDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IMember})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.MemberGroupDeletedDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.MemberGroupDeletedDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.MemberGroupDeletedDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.MemberGroupDeletedDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IMemberGroup})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.MemberGroupSavedDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.MemberGroupSavedDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.MemberGroupSavedDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.MemberGroupSavedDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IMemberGroup})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.MemberSavedDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.MemberSavedDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.MemberSavedDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.MemberSavedDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IMember})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.MemberTypeChangedDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.MemberTypeChangedDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.MemberTypeChangedDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.MemberTypeChangedDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Services.Changes.ContentTypeChange{Umbraco.Cms.Core.Models.IMemberType}})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.PublicAccessEntryDeletedDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.PublicAccessEntryDeletedDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.PublicAccessEntryDeletedDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.PublicAccessEntryDeletedDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.PublicAccessEntry})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.PublicAccessEntrySavedDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.PublicAccessEntrySavedDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.PublicAccessEntrySavedDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.PublicAccessEntrySavedDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.PublicAccessEntry})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.RelationTypeDeletedDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.RelationTypeDeletedDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.RelationTypeDeletedDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.RelationTypeDeletedDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IRelationType})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.RelationTypeSavedDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.RelationTypeSavedDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.RelationTypeSavedDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.RelationTypeSavedDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IRelationType})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.TemplateDeletedDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.TemplateDeletedDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.TemplateDeletedDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.TemplateDeletedDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.ITemplate})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.TemplateSavedDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.TemplateSavedDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.TemplateSavedDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.TemplateSavedDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.ITemplate})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.UserDeletedDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.UserDeletedDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.UserDeletedDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.UserDeletedDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.Membership.IUser})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.UserGroupDeletedDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.UserGroupDeletedDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.UserGroupDeletedDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.UserGroupDeletedDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.Membership.IUserGroup})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.UserGroupWithUsersSavedDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.UserGroupWithUsersSavedDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.UserGroupWithUsersSavedDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.UserGroupWithUsersSavedDistributedCacheNotificationHandler.GetEntities(Umbraco.Cms.Core.Notifications.UserGroupWithUsersSavedNotification)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.UserGroupWithUsersSavedDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.Membership.IUserGroup})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.UserSavedDistributedCacheNotificationHandler">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.UserSavedDistributedCacheNotificationHandler.#ctor(Umbraco.Cms.Core.Cache.DistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.UserSavedDistributedCacheNotificationHandler" /> class.
            </summary>
            <param name="distributedCache">The distributed cache.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.UserSavedDistributedCacheNotificationHandler.Handle(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.Membership.IUser})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.SavedDistributedCacheNotificationHandlerBase`3">
            <inheritdoc />
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TNotification">The type of the notification.</typeparam>
            <typeparam name="TNotificationObject">The type of the notification object.</typeparam>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.SavedDistributedCacheNotificationHandlerBase`2">
            <inheritdoc />
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TNotification">The type of the notification.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.SavedDistributedCacheNotificationHandlerBase`2.GetEntities(`1)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.TreeChangeDistributedCacheNotificationHandlerBase`3">
            <inheritdoc />
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TNotification">The type of the notification.</typeparam>
            <typeparam name="TNotificationObject">The type of the notification object.</typeparam>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.TreeChangeDistributedCacheNotificationHandlerBase`2">
            <inheritdoc />
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TNotification">The type of the notification.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.TreeChangeDistributedCacheNotificationHandlerBase`2.GetEntities(`1)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.ObjectCacheAppCache">
            <summary>
            Implements <see cref="T:Umbraco.Cms.Core.Cache.IAppPolicyCache" /> on top of a <see cref="P:Umbraco.Cms.Core.Cache.ObjectCacheAppCache.MemoryCache" />.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Cache.ObjectCacheAppCache.MemoryCache">
            <summary>
            Gets the internal memory cache, for tests only!
            </summary>
            <value>
            The memory cache.
            </value>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.ObjectCacheAppCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.ObjectCacheAppCache" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.ObjectCacheAppCache.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Caching.Memory.MemoryCacheOptions},Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.ObjectCacheAppCache" /> class.
            </summary>
            <param name="options">The options.</param>
            <param name="loggerFactory">The logger factory.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.ObjectCacheAppCache.Get(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.ObjectCacheAppCache.Get(System.String,System.Func{System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.ObjectCacheAppCache.SearchByKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.ObjectCacheAppCache.SearchByRegex(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.ObjectCacheAppCache.Get(System.String,System.Func{System.Object},System.Nullable{System.TimeSpan},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.ObjectCacheAppCache.Insert(System.String,System.Func{System.Object},System.Nullable{System.TimeSpan},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.ObjectCacheAppCache.Clear">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.ObjectCacheAppCache.Clear(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.ObjectCacheAppCache.ClearOfType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.ObjectCacheAppCache.ClearOfType``1">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.ObjectCacheAppCache.ClearOfType``1(System.Func{System.String,``0,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.ObjectCacheAppCache.ClearByKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.ObjectCacheAppCache.ClearByRegex(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.CacheRefresherBase`1">
            <summary>
                A base class for cache refreshers that handles events.
            </summary>
            <remarks>The actual cache refresher type is used for strongly typed events.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.CacheRefresherBase`1.#ctor(Umbraco.Cms.Core.Cache.AppCaches,Umbraco.Cms.Core.Events.IEventAggregator,Umbraco.Cms.Core.Cache.ICacheRefresherNotificationFactory)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.CacheRefresherBase`1" />.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Cache.CacheRefresherBase`1.RefresherUniqueId">
            <summary>
                Gets the unique identifier of the refresher.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Cache.CacheRefresherBase`1.Name">
            <summary>
                Gets the name of the refresher.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Cache.CacheRefresherBase`1.NotificationFactory">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Cache.ICacheRefresherNotificationFactory" /> for <typeparamref name="TNotification"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.CacheRefresherBase`1.RefreshAll">
            <summary>
                Refreshes all entities.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.CacheRefresherBase`1.Refresh(System.Int32)">
            <summary>
                Refreshes an entity.
            </summary>
            <param name="id">The entity's identifier.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.CacheRefresherBase`1.Refresh(System.Guid)">
            <summary>
                Refreshes an entity.
            </summary>
            <param name="id">The entity's identifier.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.CacheRefresherBase`1.Remove(System.Int32)">
            <summary>
                Removes an entity.
            </summary>
            <param name="id">The entity's identifier.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Cache.CacheRefresherBase`1.AppCaches">
            <summary>
                Gets the cache helper.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.CacheRefresherBase`1.ClearAllIsolatedCacheByEntityType``1">
            <summary>
                Clears the cache for all repository entities of a specified type.
            </summary>
            <typeparam name="TEntity">The type of the entities.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.CacheRefresherBase`1.OnCacheUpdated(Umbraco.Cms.Core.Notifications.CacheRefresherNotification)">
            <summary>
                Raises the CacheUpdated event.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.CacheRefresherNotificationFactory">
            <summary>
                A <see cref="T:Umbraco.Cms.Core.Cache.ICacheRefresherNotificationFactory" /> that uses ActivatorUtilities to create the
                <see cref="T:Umbraco.Cms.Core.Notifications.CacheRefresherNotification" /> instances
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.CacheRefresherNotificationFactory.Create``1(System.Object,Umbraco.Cms.Core.Sync.MessageType)">
            <summary>
                Create a <see cref="T:Umbraco.Cms.Core.Notifications.CacheRefresherNotification" /> using ActivatorUtilities
            </summary>
            <typeparam name="TNotification">The <see cref="T:Umbraco.Cms.Core.Notifications.CacheRefresherNotification" /> to create</typeparam>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.ICacheRefresher">
            <summary>
                The IcacheRefresher Interface is used for load balancing.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.ICacheRefresher`1">
            <summary>
                Strongly type cache refresher that is able to refresh cache of real instances of objects as well as IDs
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
                This is much better for performance when we're not running in a load balanced environment so we can refresh the
                cache
                against a already resolved object instead of looking the object back up by id.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.ICacheRefresherNotificationFactory">
            <summary>
                Factory for creating cache refresher notification instances
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.ICacheRefresherNotificationFactory.Create``1(System.Object,Umbraco.Cms.Core.Sync.MessageType)">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Notifications.CacheRefresherNotification" />
            </summary>
            <typeparam name="TNotification">The <see cref="T:Umbraco.Cms.Core.Notifications.CacheRefresherNotification" /> to create</typeparam>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.IJsonCacheRefresher">
            <summary>
                A cache refresher that supports refreshing or removing cache based on a custom Json payload
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IJsonCacheRefresher.Refresh(System.String)">
            <summary>
                Refreshes, clears, etc... any cache based on the information provided in the json
            </summary>
            <param name="json"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.LanguageCacheRefresher.RefreshDomains">
            <summary>
                Clears all domain caches
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Cache.LanguageCacheRefresher.JsonPayload.LanguageChangeType.Add">
            <summary>
                A new languages has been added
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Cache.LanguageCacheRefresher.JsonPayload.LanguageChangeType.Remove">
            <summary>
                A language has been deleted
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Cache.LanguageCacheRefresher.JsonPayload.LanguageChangeType.Update">
            <summary>
                A language has been updated - but it's culture remains the same
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Cache.LanguageCacheRefresher.JsonPayload.LanguageChangeType.ChangeCulture">
            <summary>
                A language has been updated - it's culture has changed
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.UserGroupCacheRefresher">
            <summary>
                Handles User group cache invalidation/refreshing
            </summary>
            <remarks>
                This also needs to clear the user cache since IReadOnlyUserGroup's are attached to IUser objects
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.IPayloadCacheRefresher`1">
            <summary>
                A cache refresher that supports refreshing cache based on a custom payload
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.IPayloadCacheRefresher`1.Refresh(`0[])">
            <summary>
                Refreshes, clears, etc... any cache based on the information provided in the payload
            </summary>
            <param name="payloads"></param>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.JsonCacheRefresherBase`2">
            <summary>
                A base class for "json" cache refreshers.
            </summary>
            <remarks>The actual cache refresher type is used for strongly typed events.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.JsonCacheRefresherBase`2.#ctor(Umbraco.Cms.Core.Cache.AppCaches,Umbraco.Cms.Core.Serialization.IJsonSerializer,Umbraco.Cms.Core.Events.IEventAggregator,Umbraco.Cms.Core.Cache.ICacheRefresherNotificationFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.JsonCacheRefresherBase`2"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.JsonCacheRefresherBase`2.Refresh(System.String)">
            <summary>
                Refreshes as specified by a json payload.
            </summary>
            <param name="json">The json payload.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.JsonCacheRefresherBase`2.Deserialize(System.String)">
            <summary>
                Deserializes a json payload into an object payload.
            </summary>
            <param name="json">The json payload.</param>
            <returns>The deserialized object payload.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.PayloadCacheRefresherBase`2">
            <summary>
                A base class for "payload" class refreshers.
            </summary>
            <typeparam name="TPayload">The payload type.</typeparam>
            <typeparam name="TNotification">The notification type</typeparam>
            <remarks>The actual cache refresher type is used for strongly typed events.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.PayloadCacheRefresherBase`2.#ctor(Umbraco.Cms.Core.Cache.AppCaches,Umbraco.Cms.Core.Serialization.IJsonSerializer,Umbraco.Cms.Core.Events.IEventAggregator,Umbraco.Cms.Core.Cache.ICacheRefresherNotificationFactory)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Cache.PayloadCacheRefresherBase`2" />.
            </summary>
            <param name="appCaches">A cache helper.</param>
            <param name="serializer"></param>
            <param name="eventAggregator"></param>
            <param name="factory"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.PayloadCacheRefresherBase`2.Refresh(`1[])">
            <summary>
                Refreshes as specified by a payload.
            </summary>
            <param name="payloads">The payload.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Cache.RepositoryCachePolicyOptions">
            <summary>
                Specifies how a repository cache policy should cache entities.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.RepositoryCachePolicyOptions.#ctor(System.Func{System.Int32})">
            <summary>
                Ctor - sets GetAllCacheValidateCount = true
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Cache.RepositoryCachePolicyOptions.#ctor">
            <summary>
                Ctor - sets GetAllCacheValidateCount = false
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Cache.RepositoryCachePolicyOptions.PerformCount">
            <summary>
                Callback required to get count for GetAllCacheValidateCount
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Cache.RepositoryCachePolicyOptions.CacheNullValues">
            <summary>
                True if the Get method will cache null results so that the db is not hit for repeated lookups
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Cache.RepositoryCachePolicyOptions.GetAllCacheValidateCount">
            <summary>
                True/false as to validate the total item count when all items are returned from cache, the default is true but this
                means that a db lookup will occur - though that lookup will probably be significantly less expensive than the
                normal
                GetAll method.
            </summary>
            <remarks>
                setting this to return false will improve performance of GetAll cache with no params but should only be used
                for specific circumstances
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Cache.RepositoryCachePolicyOptions.GetAllCacheAllowZeroCount">
            <summary>
                True if the GetAll method will cache that there are zero results so that the db is not hit when there are no
                results found
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.CodeAnnotations.FriendlyNameAttribute">
            <summary>
                Attribute to add a Friendly Name string with an UmbracoObjectType enum value
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.CodeAnnotations.FriendlyNameAttribute._friendlyName">
            <summary>
                friendly name value
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.CodeAnnotations.FriendlyNameAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the FriendlyNameAttribute class
                Sets the friendly name value
            </summary>
            <param name="friendlyName">attribute value</param>
        </member>
        <member name="M:Umbraco.Cms.Core.CodeAnnotations.FriendlyNameAttribute.ToString">
            <summary>
                Gets the friendly name
            </summary>
            <returns>string of friendly name</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.CodeAnnotations.UmbracoObjectTypeAttribute">
            <summary>
                Attribute to associate a GUID string and Type with an UmbracoObjectType Enum value
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Collections.CompositeIntStringKey">
            <summary>
                Represents a composite key of (int, string) for fast dictionaries.
            </summary>
            <remarks>
                <para>The integer part of the key must be greater than, or equal to, zero.</para>
                <para>The string part of the key is case-insensitive.</para>
                <para>Null is a valid value for both parts.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.CompositeIntStringKey.#ctor(System.Nullable{System.Int32},System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Collections.CompositeIntStringKey" /> struct.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Collections.CompositeNStringNStringKey">
            <summary>
                Represents a composite key of (string, string) for fast dictionaries.
            </summary>
            <remarks>
                <para>The string parts of the key are case-insensitive.</para>
                <para>Null is a valid value for both parts.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.CompositeNStringNStringKey.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Collections.CompositeNStringNStringKey" /> struct.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Collections.CompositeStringStringKey">
            <summary>
                Represents a composite key of (string, string) for fast dictionaries.
            </summary>
            <remarks>
                <para>The string parts of the key are case-insensitive.</para>
                <para>Null is NOT a valid value for neither parts.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.CompositeStringStringKey.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Collections.CompositeStringStringKey" /> struct.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Collections.CompositeTypeTypeKey">
            <summary>
                Represents a composite key of (Type, Type) for fast dictionaries.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.CompositeTypeTypeKey.#ctor(System.Type,System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Collections.CompositeTypeTypeKey" /> struct.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Collections.CompositeTypeTypeKey.Type1">
            <summary>
                Gets the first type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Collections.CompositeTypeTypeKey.Type2">
            <summary>
                Gets the second type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.CompositeTypeTypeKey.Equals(Umbraco.Cms.Core.Collections.CompositeTypeTypeKey)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.CompositeTypeTypeKey.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.CompositeTypeTypeKey.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Collections.ConcurrentHashSet`1">
            <summary>
                A thread-safe representation of a <see cref="T:System.Collections.Generic.HashSet`1" />.
                Enumerating this collection is thread-safe and will only operate on a clone that is generated before returning the
                enumerator.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Umbraco.Cms.Core.Collections.ConcurrentHashSet`1.Count">
            <summary>
                Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.
            </summary>
            <returns>
                The number of elements contained in the <see cref="T:System.Collections.ICollection" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.ConcurrentHashSet`1.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.ConcurrentHashSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.ConcurrentHashSet`1.Remove(`0)">
            <summary>
                Removes the first occurrence of a specific object from the
                <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
                true if <paramref name="item" /> was successfully removed from the
                <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if
                <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">
                The <see cref="T:System.Collections.Generic.ICollection`1" /> is
                read-only.
            </exception>
        </member>
        <member name="P:Umbraco.Cms.Core.Collections.ConcurrentHashSet`1.IsReadOnly">
            <summary>
                Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>
                true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.ConcurrentHashSet`1.Add(`0)">
            <summary>
                Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">
                The <see cref="T:System.Collections.Generic.ICollection`1" /> is
                read-only.
            </exception>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.ConcurrentHashSet`1.Clear">
            <summary>
                Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.NotSupportedException">
                The <see cref="T:System.Collections.Generic.ICollection`1" /> is
                read-only.
            </exception>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.ConcurrentHashSet`1.Contains(`0)">
            <summary>
                Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <returns>
                true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />;
                otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.ConcurrentHashSet`1.CopyTo(`0[],System.Int32)">
            <summary>
                Copies the elements of the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> to an
                <see cref="T:System.Array" />, starting at a specified index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied
                from the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />. The array must have
                zero-based indexing.
            </param>
            <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array" /> is a null reference (Nothing in Visual
                Basic).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="index" /> is equal to or greater than the length of the
                <paramref name="array" /> -or- The number of elements in the source
                <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> is greater than the available space from
                <paramref name="index" /> to the end of the destination <paramref name="array" />.
            </exception>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.ConcurrentHashSet`1.TryAdd(`0)">
            <summary>
                Attempts to add an item to the collection
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.ConcurrentHashSet`1.CopyTo(System.Array,System.Int32)">
            <summary>
                Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />,
                starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied
                from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based
                indexing.
            </param>
            <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is less than zero. </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="array" /> is multidimensional.-or- The number of elements
                in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from
                <paramref name="index" /> to the end of the destination <paramref name="array" />.
            </exception>
            <exception cref="T:System.ArgumentException">
                The type of the source <see cref="T:System.Collections.ICollection" />
                cannot be cast automatically to the type of the destination <paramref name="array" />.
            </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Umbraco.Cms.Core.Collections.DeepCloneableList`1">
            <summary>
                A List that can be deep cloned with deep cloned elements and can reset the collection's items dirty flags
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.DeepCloneableList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Default behavior is CloneOnce
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.DeepCloneableList`1.DeepClone">
            <summary>
                Creates a new list and adds each element as a deep cloned element if it is of type IDeepCloneable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.DeepCloneableList`1.IsPropertyDirty(System.String)">
            <inheritdoc />
            <remarks>Always return false, the list has no properties that can be dirty.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.DeepCloneableList`1.WasPropertyDirty(System.String)">
            <inheritdoc />
            <remarks>Always return false, the list has no properties that can be dirty.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.DeepCloneableList`1.GetDirtyProperties">
            <inheritdoc />
            <remarks>Always return an empty enumerable, the list has no properties that can be dirty.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.DeepCloneableList`1.GetWereDirtyProperties">
            <remarks>Always return an empty enumerable, the list has no properties that can be dirty.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Collections.EventClearingObservableCollection`1">
            <summary>
                Allows clearing all event handlers
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.EventClearingObservableCollection`1.ClearCollectionChangedEvents">
            <summary>
                Clears all event handlers for the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Collections.ListCloneBehavior.CloneOnce">
            <summary>
                When set, DeepClone will clone the items one time and the result list behavior will be None
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Collections.ListCloneBehavior.None">
            <summary>
                When set, DeepClone will not clone any items
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Collections.ListCloneBehavior.Always">
            <summary>
                When set, DeepClone will always clone all items
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Collections.ObservableDictionary`2">
            <summary>
                An ObservableDictionary
            </summary>
            <remarks>
                Assumes that the key will not change and is unique for each element in the collection.
                Collection is not thread-safe, so calls should be made single-threaded.
            </remarks>
            <typeparam name="TValue">The type of elements contained in the BindableCollection</typeparam>
            <typeparam name="TKey">The type of the indexing key</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.ObservableDictionary`2.#ctor(System.Func{`1,`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
                Create new ObservableDictionary
            </summary>
            <param name="keySelector">Selector function to create key from value</param>
            <param name="equalityComparer">The equality comparer to use when comparing keys, or null to use the default comparer.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Collections.ObservableDictionary`2.Item(`0)">
            <summary>
                Gets or sets the element with the specified key.  If setting a new value, new value must have same key.
            </summary>
            <param name="key">Key of element to replace</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.ObservableDictionary`2.ClearCollectionChangedEvents">
            <summary>
                Clears all <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event handlers
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.ObservableDictionary`2.Replace(`0,`1)">
            <summary>
                Replaces element at given key with new value.  New value must have same key.
            </summary>
            <param name="key">Key of element to replace</param>
            <param name="value">New value</param>
            <exception cref="T:System.InvalidOperationException"></exception>
            <returns>False if key not found</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.ObservableDictionary`2.ChangeKey(`0,`0)">
            <summary>
                Allows us to change the key of an item
            </summary>
            <param name="currentKey"></param>
            <param name="newKey"></param>
        </member>
        <member name="P:Umbraco.Cms.Core.Collections.ObservableDictionary`2.Keys">
            <summary>
                Returns all keys
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Collections.ObservableDictionary`2.Values">
            <summary>
                Returns all values
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Collections.OrderedHashSet`1">
            <summary>
                A custom collection similar to HashSet{T} which only contains unique items, however this collection keeps items in
                order
                and is customizable to keep the newest or oldest equatable item
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Umbraco.Cms.Core.Collections.StackQueue`1">
            <summary>
                Collection that can be both a queue and a stack.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Umbraco.Cms.Core.Collections.TopoGraph`2">
            <summary>
                Represents a generic DAG that can be topologically sorted.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TItem">The type of the items.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.TopoGraph`2.#ctor(System.Func{`1,`0},System.Func{`1,System.Collections.Generic.IEnumerable{`0}})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Collections.TopoGraph`2" /> class.
            </summary>
            <param name="getKey">A method that returns the key of an item.</param>
            <param name="getDependencies">A method that returns the dependency keys of an item.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.TopoGraph`2.AddItem(`1)">
            <summary>
                Adds an item to the graph.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.TopoGraph`2.AddItems(System.Collections.Generic.IEnumerable{`1})">
            <summary>
                Adds items to the graph.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.TopoGraph`2.GetSortedItems(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Gets the sorted items.
            </summary>
            <param name="throwOnCycle">A value indicating whether to throw on cycles, or just ignore the branch.</param>
            <param name="throwOnMissing">A value indicating whether to throw on missing dependency, or just ignore the dependency.</param>
            <param name="reverse">A value indicating whether to reverse the order.</param>
            <returns>The (topologically) sorted items.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Collections.TypeList`1">
            <summary>
                Represents a list of types.
            </summary>
            <remarks>Types in the list are, or derive from, or implement, the base type.</remarks>
            <typeparam name="TBase">The base type.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.TypeList`1.Add``1">
            <summary>
                Adds a type to the list.
            </summary>
            <typeparam name="T">The type to add.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Collections.TypeList`1.Contains(System.Type)">
            <summary>
                Determines whether a type is in the list.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.AsyncComponentBase">
            <inheritdoc />
            <remarks>
            By default, the component will not execute if Umbraco is restarting.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.AsyncComponentBase.InitializeAsync(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.AsyncComponentBase.TerminateAsync(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.AsyncComponentBase.CanExecute(System.Boolean)">
            <summary>
            Determines whether the component can execute.
            </summary>
            <param name="isRestarting">If set to <c>true</c> indicates Umbraco is restarting.</param>
            <returns>
              <c>true</c> if the component can execute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.AsyncComponentBase.InitializeAsync(System.Threading.CancellationToken)">
            <summary>
            Initializes the component.
            </summary>
            <param name="cancellationToken">The cancellation token. Cancellation indicates that the start process has been aborted.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.AsyncComponentBase.TerminateAsync(System.Threading.CancellationToken)">
            <summary>
            Terminates the component.
            </summary>
            <param name="cancellationToken">The cancellation token. Cancellation indicates that the shutdown process should no longer be graceful.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.BuilderCollectionBase`1">
            <summary>
            Provides a base class for builder collections.
            </summary>
            <typeparam name="TItem">The type of the items.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.BuilderCollectionBase`1.#ctor(System.Func{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Composing.BuilderCollectionBase`1" /> with items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Composing.BuilderCollectionBase`1.Count">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.BuilderCollectionBase`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.BuilderCollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.CollectionBuilderBase`3">
            <summary>
                Provides a base class for collection builders.
            </summary>
            <typeparam name="TBuilder">The type of the builder.</typeparam>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the items.</typeparam>
        </member>
        <member name="P:Umbraco.Cms.Core.Composing.CollectionBuilderBase`3.CollectionLifetime">
            <summary>
                Gets the collection lifetime.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.CollectionBuilderBase`3.RegisterWith(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.CollectionBuilderBase`3.CreateCollection(System.IServiceProvider)">
            <summary>
                Creates a collection.
            </summary>
            <returns>A collection.</returns>
            <remarks>Creates a new collection each time it is invoked.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.CollectionBuilderBase`3.GetTypes">
            <summary>
                Gets the internal list of types as an IEnumerable (immutable).
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.CollectionBuilderBase`3.Has``1">
            <summary>
                Gets a value indicating whether the collection contains a type.
            </summary>
            <typeparam name="T">The type to look for.</typeparam>
            <returns>A value indicating whether the collection contains the type.</returns>
            <remarks>
                Some builder implementations may use this to expose a public Has{T}() method,
                when it makes sense. Probably does not make sense for lazy builders, for example.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.CollectionBuilderBase`3.Has(System.Type)">
            <summary>
                Gets a value indicating whether the collection contains a type.
            </summary>
            <param name="type">The type to look for.</param>
            <returns>A value indicating whether the collection contains the type.</returns>
            <remarks>
                Some builder implementations may use this to expose a public Has{T}() method,
                when it makes sense. Probably does not make sense for lazy builders, for example.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.CollectionBuilderBase`3.Configure(System.Action{System.Collections.Generic.List{System.Type}})">
            <summary>
                Configures the internal list of types.
            </summary>
            <param name="action">The action to execute.</param>
            <remarks>Throws if the types have already been registered.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.CollectionBuilderBase`3.GetRegisteringTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
                Gets the types.
            </summary>
            <param name="types">The internal list of types.</param>
            <returns>The list of types to register.</returns>
            <remarks>Used by implementations to add types to the internal list, sort the list, etc.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.CollectionBuilderBase`3.CreateItems(System.IServiceProvider)">
            <summary>
                Creates the collection items.
            </summary>
            <returns>The collection items.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.CollectionBuilderBase`3.CreateItem(System.IServiceProvider,System.Type)">
            <summary>
                Creates a collection item.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.ComponentCollection">
            <summary>
            Represents the collection of <see cref="T:Umbraco.Cms.Core.Composing.IAsyncComponent" /> implementations.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.ComponentCollectionBuilder">
            <summary>
            Builds a <see cref="T:Umbraco.Cms.Core.Composing.ComponentCollection" />.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.ComponentComposer`1">
            <summary>
            Provides a composer that appends a component.
            </summary>
            <typeparam name="TComponent">The type of the component.</typeparam>
            <remarks>
            Thanks to this class, a component that does not compose anything can be registered with one line:
            <code>
            <![CDATA[
            public class MyComponentComposer : ComponentComposer<MyComponent> { }
            ]]>
            </code>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.ComponentComposer`1.Compose(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.ComposeAfterAttribute">
            <summary>
                Indicates that a composer requires another composer.
            </summary>
            <remarks>
                <para>
                    This attribute is *not* inherited. This means that a composer class inheriting from
                    another composer class does *not* inherit its requirements. However, the runtime checks
                    the *interfaces* of every composer for their requirements, so requirements declared on
                    interfaces are inherited by every composer class implementing the interface.
                </para>
                <para>
                    When targeting a class, indicates a dependency on the composer which must be enabled,
                    unless the requirement has explicitly been declared as weak (and then, only if the composer
                    is enabled).
                </para>
                <para>
                    When targeting an interface, indicates a dependency on enabled composers implementing
                    the interface. It could be no composer at all, unless the requirement has explicitly been
                    declared as strong (and at least one composer must be enabled).
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.ComposeAfterAttribute.#ctor(System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Composing.ComposeAfterAttribute" /> class.
            </summary>
            <param name="requiredType">The type of the required composer.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.ComposeAfterAttribute.#ctor(System.Type,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Composing.ComposeAfterAttribute" /> class.
            </summary>
            <param name="requiredType">The type of the required composer.</param>
            <param name="weak">A value indicating whether the requirement is weak.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Composing.ComposeAfterAttribute.RequiredType">
            <summary>
                Gets the required type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Composing.ComposeAfterAttribute.Weak">
            <summary>
                Gets a value indicating whether the requirement is weak.
            </summary>
            <remarks>
                Returns <c>true</c> if the requirement is weak (requires the other composer if it
                is enabled), <c>false</c> if the requirement is strong (requires the other composer to be
                enabled), and <c>null</c> if unspecified, in which case it is strong for classes and weak for
                interfaces.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.ComposeBeforeAttribute">
            <summary>
                Indicates that a component is required by another composer.
            </summary>
            <remarks>
                <para>
                    This attribute is *not* inherited. This means that a composer class inheriting from
                    another composer class does *not* inherit its requirements. However, the runtime checks
                    the *interfaces* of every composer for their requirements, so requirements declared on
                    interfaces are inherited by every composer class implementing the interface.
                </para>
                <para>
                    When targeting a class, indicates a dependency on the composer which must be enabled,
                    unless the requirement has explicitly been declared as weak (and then, only if the composer
                    is enabled).
                </para>
                <para>
                    When targeting an interface, indicates a dependency on enabled composers implementing
                    the interface. It could be no composer at all, unless the requirement has explicitly been
                    declared as strong (and at least one composer must be enabled).
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.ComposeBeforeAttribute.#ctor(System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Composing.ComposeBeforeAttribute" /> class.
            </summary>
            <param name="requiringType">The type of the required composer.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Composing.ComposeBeforeAttribute.RequiringType">
            <summary>
                Gets the required type.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.ComposerGraph">
            <summary>
                Handles the composers.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.ComposerGraph.#ctor(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder,System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IEnumerable{System.Attribute},Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Composing.ComposerGraph})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Composing.ComposerGraph" /> class.
            </summary>
            <param name="builder">The composition.</param>
            <param name="composerTypes">The <see cref="T:Umbraco.Cms.Core.Composing.IComposer" /> types.</param>
            <param name="enableDisableAttributes">
                The <see cref="T:Umbraco.Cms.Core.Composing.EnableComposerAttribute" /> and/or
                <see cref="T:Umbraco.Cms.Core.Composing.DisableComposerAttribute" /> attributes.
            </param>
            <param name="logger">The logger.</param>
            <exception cref="T:System.ArgumentNullException">
                composition
                or
                composerTypes
                or
                enableDisableAttributes
                or
                logger
            </exception>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.ComposerGraph.Compose">
            <summary>
                Instantiates and composes the composers.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.DefaultUmbracoAssemblyProvider">
            <summary>
                Returns a list of scannable assemblies based on an entry point assembly and it's references
            </summary>
            <remarks>
                This will recursively search through the entry point's assemblies and Umbraco's core assemblies and their
                references
                to create a list of scannable assemblies based on whether they themselves or their transitive dependencies
                reference Umbraco core assemblies.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.DisableAttribute">
            <summary>
                Indicates that a composer should be disabled.
            </summary>
            <remarks>
                <para>
                    If a type is specified, disables the composer of that type, else disables the composer marked with the
                    attribute.
                </para>
                <para>This attribute is *not* inherited.</para>
                <para>This attribute applies to classes only, it is not possible to enable/disable interfaces.</para>
                <para>
                    Assembly-level <see cref="T:Umbraco.Cms.Core.Composing.DisableComposerAttribute" /> has greater priority than
                    <see cref="T:Umbraco.Cms.Core.Composing.DisableAttribute" />
                    attribute when it is marking the composer itself, but lower priority that when it is referencing another
                    composer.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.DisableAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Composing.DisableAttribute" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.DisableAttribute.#ctor(System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Composing.DisableAttribute" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Composing.DisableAttribute.DisabledType">
            <summary>
                Gets the disabled type, or null if it is the composer marked with the attribute.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.DisableComposerAttribute">
            <summary>
                Indicates that a composer should be disabled.
            </summary>
            <remarks>
                <para>
                    Assembly-level <see cref="T:Umbraco.Cms.Core.Composing.DisableComposerAttribute" /> has greater priority than
                    <see cref="T:Umbraco.Cms.Core.Composing.DisableAttribute" />
                    attribute when it is marking the composer itself, but lower priority that when it is referencing another
                    composer.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.DisableComposerAttribute.#ctor(System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Composing.DisableComposerAttribute" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Composing.DisableComposerAttribute.DisabledType">
            <summary>
                Gets the disabled type, or null if it is the composer marked with the attribute.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.EnableAttribute">
            <summary>
                Indicates that a composer should be enabled.
            </summary>
            <remarks>
                <para>
                    If a type is specified, enables the composer of that type, else enables the composer marked with the
                    attribute.
                </para>
                <para>This attribute is *not* inherited.</para>
                <para>This attribute applies to classes only, it is not possible to enable/disable interfaces.</para>
                <para>
                    Assembly-level <see cref="T:Umbraco.Cms.Core.Composing.DisableComposerAttribute" /> has greater priority than
                    <see cref="T:Umbraco.Cms.Core.Composing.DisableAttribute" />
                    attribute when it is marking the composer itself, but lower priority that when it is referencing another
                    composer.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.EnableAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Composing.EnableAttribute" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.EnableAttribute.#ctor(System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Composing.EnableAttribute" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Composing.EnableAttribute.EnabledType">
            <summary>
                Gets the enabled type, or null if it is the composer marked with the attribute.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.EnableComposerAttribute">
            <summary>
                Indicates that a composer should be enabled.
            </summary>
            <remarks>
                <para>
                    If a type is specified, enables the composer of that type, else enables the composer marked with the
                    attribute.
                </para>
                <para>This attribute is *not* inherited.</para>
                <para>This attribute applies to classes only, it is not possible to enable/disable interfaces.</para>
                <para>
                    Assembly-level <see cref="T:Umbraco.Cms.Core.Composing.DisableComposerAttribute" /> has greater priority than
                    <see cref="T:Umbraco.Cms.Core.Composing.DisableAttribute" />
                    attribute when it is marking the composer itself, but lower priority that when it is referencing another
                    composer.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.EnableComposerAttribute.#ctor(System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Composing.EnableComposerAttribute" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Composing.EnableComposerAttribute.EnabledType">
            <summary>
                Gets the enabled type, or null if it is the composer marked with the attribute.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.FindAssembliesWithReferencesTo">
            <summary>
                Finds Assemblies from the entry point assemblies, it's dependencies and it's transitive dependencies that reference
                that targetAssemblyNames
            </summary>
            <remarkes>
                borrowed and modified from here
                https://github.com/dotnet/aspnetcore-tooling/blob/master/src/Razor/src/Microsoft.NET.Sdk.Razor/FindAssembliesWithReferencesTo.cs
            </remarkes>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.FindAssembliesWithReferencesTo.#ctor(System.Reflection.Assembly[],System.String[],System.Boolean,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
                Constructor
            </summary>
            <param name="referenceAssemblies">Entry point assemblies</param>
            <param name="targetAssemblyNames">
                Used to check if the entry point or it's transitive assemblies reference these
                assembly names
            </param>
            <param name="includeTargets">If true will also use the target assembly names as entry point assemblies</param>
            <param name="loggerFactory">Logger factory for when scanning goes wrong</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.HideFromTypeFinderAttribute">
            <summary>
                Notifies the TypeFinder that it should ignore the class marked with this attribute.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.IAssemblyProvider">
            <summary>
                Provides a list of assemblies that can be scanned
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.IAsyncComponent">
            <summary>
            Represents a component.
            </summary>
            <remarks>
            <para>
            Components are created by DI and therefore must have a public constructor.
            </para>
            <para>
            All components are terminated in reverse order when Umbraco terminates, and disposable components are disposed.
            </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.IAsyncComponent.InitializeAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Initializes the component.
            </summary>
            <param name="isRestarting">If set to <c>true</c> indicates Umbraco is restarting.</param>
            <param name="cancellationToken">The cancellation token. Cancellation indicates that the start process has been aborted.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.IAsyncComponent.TerminateAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Terminates the component.
            </summary>
            <param name="isRestarting">If set to <c>true</c> indicates Umbraco is restarting.</param>
            <param name="cancellationToken">The cancellation token. Cancellation indicates that the shutdown process should no longer be graceful.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.IBuilderCollection`1">
            <summary>
            Represents a builder collection, ie an immutable enumeration of items.
            </summary>
            <typeparam name="TItem">The type of the items.</typeparam>
        </member>
        <member name="P:Umbraco.Cms.Core.Composing.IBuilderCollection`1.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.ICollectionBuilder">
            <summary>
                Represents a collection builder.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.ICollectionBuilder.RegisterWith(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Registers the builder so it can build the collection, by
                registering the collection and the types.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.ICollectionBuilder`2">
            <summary>
                Represents a collection builder.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the items.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.ICollectionBuilder`2.CreateCollection(System.IServiceProvider)">
            <summary>
                Creates a collection.
            </summary>
            <returns>A collection.</returns>
            <remarks>Creates a new collection each time it is invoked.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.IComponent">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.IComponent.Initialize">
            <summary>
            Initializes the component.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.IComponent.Terminate">
            <summary>
            Terminates the component.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.IComponent.Umbraco#Cms#Core#Composing#IAsyncComponent#InitializeAsync(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.IComponent.Umbraco#Cms#Core#Composing#IAsyncComponent#TerminateAsync(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.IComposer">
            <summary>
                Represents a composer.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.IComposer.Compose(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
                Compose.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.IRuntimeHash">
            <summary>
                Used to create a hash value of the current runtime
            </summary>
            <remarks>
                This is used to detect if the runtime itself has changed, like a DLL has changed or another dynamically compiled
                part of the application has changed. This is used to detect if we need to re-type scan.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.ITypeFinder">
            <summary>
                Used to find objects by implemented types, names and/or attributes
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Composing.ITypeFinder.AssembliesToScan">
            <summary>
                Return a list of found local Assemblies that Umbraco should scan for type finding
            </summary>
            <value></value>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.ITypeFinder.FindClassesOfTypeWithAttribute(System.Type,System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
                Finds any classes derived from the assignTypeFrom Type that contain the attribute TAttribute
            </summary>
            <param name="assignTypeFrom"></param>
            <param name="attributeType"></param>
            <param name="assemblies"></param>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.ITypeFinder.FindClassesOfType(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
                Returns all types found of in the assemblies specified of type T
            </summary>
            <param name="assignTypeFrom"></param>
            <param name="assemblies"></param>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.ITypeFinder.FindClassesWithAttribute(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
                Finds any classes with the attribute.
            </summary>
            <param name="attributeType">The attribute type </param>
            <param name="assemblies">The assemblies.</param>
            <param name="onlyConcreteClasses">if set to <c>true</c> only concrete classes.</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.LazyCollectionBuilderBase`3">
            <summary>
                Implements a lazy collection builder.
            </summary>
            <typeparam name="TBuilder">The type of the builder.</typeparam>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the items.</typeparam>
            <remarks>
                This type of collection builder is typically used when type scanning is required (i.e. plugins).
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.LazyCollectionBuilderBase`3.Clear">
            <summary>
                Clears all types in the collection.
            </summary>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.LazyCollectionBuilderBase`3.Add``1">
            <summary>
                Adds a type to the collection.
            </summary>
            <typeparam name="T">The type to add.</typeparam>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.LazyCollectionBuilderBase`3.Add(System.Type)">
            <summary>
                Adds a type to the collection.
            </summary>
            <param name="type">The type to add.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.LazyCollectionBuilderBase`3.Add(System.Func{System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
                Adds a types producer to the collection.
            </summary>
            <param name="producer">The types producer.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.LazyCollectionBuilderBase`3.Exclude``1">
            <summary>
                Excludes a type from the collection.
            </summary>
            <typeparam name="T">The type to exclude.</typeparam>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.LazyCollectionBuilderBase`3.Exclude(System.Type)">
            <summary>
                Excludes a type from the collection.
            </summary>
            <param name="type">The type to exclude.</param>
            <returns>The builder.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.OrderedCollectionBuilderBase`3">
            <summary>
                Implements an ordered collection builder.
            </summary>
            <typeparam name="TBuilder">The type of the builder.</typeparam>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the items.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.OrderedCollectionBuilderBase`3.Clear">
            <summary>
                Clears all types in the collection.
            </summary>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.OrderedCollectionBuilderBase`3.Append``1">
            <summary>
                Appends a type to the collection.
            </summary>
            <typeparam name="T">The type to append.</typeparam>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.OrderedCollectionBuilderBase`3.Append(System.Type)">
            <summary>
                Appends a type to the collection.
            </summary>
            <param name="type">The type to append.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.OrderedCollectionBuilderBase`3.Append(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
                Appends types to the collections.
            </summary>
            <param name="types">The types to append.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.OrderedCollectionBuilderBase`3.Insert``1(System.Int32)">
            <summary>
                Inserts a type into the collection.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="index">The optional index.</param>
            <returns>The builder.</returns>
            <remarks>Throws if the index is out of range.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.OrderedCollectionBuilderBase`3.Insert(System.Type)">
            <summary>
                Inserts a type into the collection.
            </summary>
            <param name="type">The type to insert.</param>
            <returns>The builder.</returns>
            <remarks>Throws if the index is out of range.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.OrderedCollectionBuilderBase`3.Insert(System.Int32,System.Type)">
            <summary>
                Inserts a type into the collection.
            </summary>
            <param name="index">The index.</param>
            <param name="type">The type to insert.</param>
            <returns>The builder.</returns>
            <remarks>Throws if the index is out of range.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.OrderedCollectionBuilderBase`3.InsertBefore``2">
            <summary>
                Inserts a type before another type.
            </summary>
            <typeparam name="TBefore">The other type.</typeparam>
            <typeparam name="T">The type to insert.</typeparam>
            <returns>The builder.</returns>
            <remarks>Throws if both types are identical, or if the other type does not already belong to the collection.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.OrderedCollectionBuilderBase`3.InsertBefore(System.Type,System.Type)">
            <summary>
                Inserts a type before another type.
            </summary>
            <param name="typeBefore">The other type.</param>
            <param name="type">The type to insert.</param>
            <returns>The builder.</returns>
            <remarks>Throws if both types are identical, or if the other type does not already belong to the collection.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.OrderedCollectionBuilderBase`3.InsertAfter``2">
            <summary>
                Inserts a type after another type.
            </summary>
            <typeparam name="TAfter">The other type.</typeparam>
            <typeparam name="T">The type to append.</typeparam>
            <returns>The builder.</returns>
            <remarks>Throws if both types are identical, or if the other type does not already belong to the collection.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.OrderedCollectionBuilderBase`3.InsertAfter(System.Type,System.Type)">
            <summary>
                Inserts a type after another type.
            </summary>
            <param name="typeAfter">The other type.</param>
            <param name="type">The type to insert.</param>
            <returns>The builder.</returns>
            <remarks>Throws if both types are identical, or if the other type does not already belong to the collection.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.OrderedCollectionBuilderBase`3.Remove``1">
            <summary>
                Removes a type from the collection.
            </summary>
            <typeparam name="T">The type to remove.</typeparam>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.OrderedCollectionBuilderBase`3.Remove(System.Type)">
            <summary>
                Removes a type from the collection.
            </summary>
            <param name="type">The type to remove.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.OrderedCollectionBuilderBase`3.Replace``2">
            <summary>
                Replaces a type in the collection.
            </summary>
            <typeparam name="TReplaced">The type to replace.</typeparam>
            <typeparam name="T">The type to insert.</typeparam>
            <returns>The builder.</returns>
            <remarks>Throws if the type to replace does not already belong to the collection.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.OrderedCollectionBuilderBase`3.Replace(System.Type,System.Type)">
            <summary>
                Replaces a type in the collection.
            </summary>
            <param name="typeReplaced">The type to replace.</param>
            <param name="type">The type to insert.</param>
            <returns>The builder.</returns>
            <remarks>Throws if the type to replace does not already belong to the collection.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.ReferenceResolver">
            <summary>
                Resolves assemblies that reference one of the specified "targetAssemblies" either directly or transitively.
            </summary>
            <remarks>
                Borrowed and modified from
                https://github.com/dotnet/aspnetcore-tooling/blob/master/src/Razor/src/Microsoft.NET.Sdk.Razor/ReferenceResolver.cs
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.ReferenceResolver.ResolveAssemblies">
            <summary>
                Returns a list of assemblies that directly reference or transitively reference the targetAssemblies
            </summary>
            <returns></returns>
            <remarks>
                This includes all assemblies in the same location as the entry point assemblies
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.RuntimeAsyncComponentBase">
            <inheritdoc />
            <remarks>
            By default, the component will not execute if Umbraco is restarting or the runtime level is not <see cref="F:Umbraco.Cms.Core.RuntimeLevel.Run" />.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.RuntimeAsyncComponentBase.#ctor(Umbraco.Cms.Core.Services.IRuntimeState)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Composing.RuntimeAsyncComponentBase" /> class.
            </summary>
            <param name="runtimeState">State of the Umbraco runtime.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.RuntimeAsyncComponentBase.CanExecute(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.RuntimeHash">
            <summary>
                Determines the runtime hash based on file system paths to scan
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.RuntimeHash.GetFileHash(System.Collections.Generic.IEnumerable{System.ValueTuple{System.IO.FileSystemInfo,System.Boolean}})">
            <summary>
                Returns a unique hash for a combination of FileInfo objects.
            </summary>
            <param name="filesAndFolders">A collection of files.</param>
            <returns>The hash.</returns>
            <remarks>
                Each file is a tuple containing the FileInfo object and a boolean which indicates whether to hash the
                file properties (false) or the file contents (true).
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.RuntimeHashPaths">
            <summary>
                Paths used to determine the <see cref="T:Umbraco.Cms.Core.Composing.IRuntimeHash" />
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.RuntimeHashPaths.AddAssemblies(Umbraco.Cms.Core.Composing.IAssemblyProvider)">
            <summary>
                Creates a runtime hash based on the assembly provider
            </summary>
            <param name="assemblyProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.SetCollectionBuilderBase`3">
            <summary>
                Implements an un-ordered collection builder.
            </summary>
            <typeparam name="TBuilder">The type of the builder.</typeparam>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the items.</typeparam>
            <remarks>
                <para>
                    A set collection builder is the most basic collection builder,
                    where items are not ordered.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.SetCollectionBuilderBase`3.Clear">
            <summary>
                Clears all types in the collection.
            </summary>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.SetCollectionBuilderBase`3.Add``1">
            <summary>
                Adds a type to the collection.
            </summary>
            <typeparam name="T">The type to append.</typeparam>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.SetCollectionBuilderBase`3.Add(System.Type)">
            <summary>
                Adds a type to the collection.
            </summary>
            <param name="type">The type to append.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.SetCollectionBuilderBase`3.Add(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
                Adds types to the collections.
            </summary>
            <param name="types">The types to append.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.SetCollectionBuilderBase`3.Remove``1">
            <summary>
                Removes a type from the collection.
            </summary>
            <typeparam name="T">The type to remove.</typeparam>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.SetCollectionBuilderBase`3.Remove(System.Type)">
            <summary>
                Removes a type from the collection.
            </summary>
            <param name="type">The type to remove.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.SetCollectionBuilderBase`3.Replace``2">
            <summary>
                Replaces a type in the collection.
            </summary>
            <typeparam name="TReplaced">The type to replace.</typeparam>
            <typeparam name="T">The type to insert.</typeparam>
            <returns>The builder.</returns>
            <remarks>Throws if the type to replace does not already belong to the collection.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.SetCollectionBuilderBase`3.Replace(System.Type,System.Type)">
            <summary>
                Replaces a type in the collection.
            </summary>
            <param name="typeReplaced">The type to replace.</param>
            <param name="type">The type to insert.</param>
            <returns>The builder.</returns>
            <remarks>Throws if the type to replace does not already belong to the collection.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.TypeCollectionBuilderBase`3">
            <summary>
                Provides a base class for collections of types.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.TypeFinder">
            <inheritdoc cref="T:Umbraco.Cms.Core.Composing.ITypeFinder" />
        </member>
        <member name="F:Umbraco.Cms.Core.Composing.TypeFinder.KnownAssemblyExclusionFilter">
            <summary>
                this is our assembly filter to filter out known types that def don't contain types we'd like to find or plugins
            </summary>
            <remarks>
                NOTE the comma vs period... comma delimits the name in an Assembly FullName property so if it ends with comma then
                its an exact name match
                NOTE this means that "foo." will NOT exclude "foo.dll" but only "foo.*.dll"
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Composing.TypeFinder.AssembliesToScan">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeFinder.FindClassesOfTypeWithAttribute(System.Type,System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
                Finds any classes derived from the assignTypeFrom Type that contain the attribute TAttribute
            </summary>
            <param name="assignTypeFrom"></param>
            <param name="attributeType"></param>
            <param name="assemblies"></param>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeFinder.FindClassesOfType(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
                Returns all types found of in the assemblies specified of type T
            </summary>
            <param name="assignTypeFrom"></param>
            <param name="assemblies"></param>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeFinder.FindClassesWithAttribute(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
                Finds any classes with the attribute.
            </summary>
            <param name="attributeType">The attribute type </param>
            <param name="assemblies">The assemblies.</param>
            <param name="onlyConcreteClasses">if set to <c>true</c> only concrete classes.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeFinder.GetTypeByName(System.String)">
            <summary>
                Returns a Type for the string type name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeFinder.GetFilteredAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.String[])">
            <summary>
                Return a distinct list of found local Assemblies and excluding the ones passed in and excluding the exclusion list
                filter
            </summary>
            <param name="excludeFromResults"></param>
            <param name="exclusionFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeFinder.GetClassesWithBaseType(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean,System.Func{System.Type,System.Boolean})">
            <summary>
                Finds types that are assignable from the assignTypeFrom parameter and will scan for these types in the assembly
                list passed in, however we will only scan assemblies that have a reference to the assignTypeFrom Type or any type
                deriving from the base type.
            </summary>
            <param name="baseType"></param>
            <param name="assemblies"></param>
            <param name="onlyConcreteClasses"></param>
            <param name="additionalFilter">
                An additional filter to apply for what types will actually be included in the return
                value
            </param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.TypeFinderConfig">
            <summary>
                TypeFinder config via appSettings
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.TypeHelper">
            <summary>
                A utility class for type checking, this provides internal caching so that calls to these methods will be faster
                than doing a manual type check in c#
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeHelper.CreateGenericEnumerableFromObject(System.Object)">
            <summary>
                Based on a type we'll check if it is IEnumerable{T} (or similar) and if so we'll return a List{T}, this will also
                deal with array types and return List{T} for those too.
                If it cannot be done, null is returned.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeHelper.IsOverride(System.Reflection.MethodInfo)">
            <summary>
                Checks if the method is actually overriding a base method
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeHelper.GetReferencingAssemblies(System.Reflection.Assembly,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
                Find all assembly references that are referencing the assignTypeFrom Type's assembly found in the assemblyList
            </summary>
            <param name="assembly">The referenced assembly.</param>
            <param name="assemblies">A list of assemblies.</param>
            <returns></returns>
            <remarks>
                If the assembly of the assignTypeFrom Type is in the App_Code assembly, then we return nothing since things cannot
                reference that assembly, same with the global.asax assembly.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeHelper.HasReference(System.Reflection.Assembly,System.String)">
            <summary>
                Determines if an assembly references another assembly.
            </summary>
            <param name="assembly"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeHelper.IsNonStaticClass(System.Type)">
            <summary>
                Returns true if the type is a class and is not static
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeHelper.IsStaticClass(System.Type)">
            <summary>
                Returns true if the type is a static class
            </summary>
            <param name="type"></param>
            <returns></returns>
            <remarks>
                In IL a static class is abstract and sealed
                see: http://stackoverflow.com/questions/1175888/determine-if-a-type-is-static
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeHelper.GetLowestBaseType(System.Type[])">
            <summary>
                Finds a lowest base class amongst a collection of types
            </summary>
            <param name="types"></param>
            <returns></returns>
            <remarks>
                The term 'lowest' refers to the most base class of the type collection.
                If a base type is not found amongst the type collection then an invalid attempt is returned.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeHelper.IsTypeAssignableFrom(System.Type,System.Type)">
            <summary>
                Determines whether the type <paramref name="implementation" /> is assignable from the specified implementation,
                and caches the result across the application using a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.
            </summary>
            <param name="contract">The type of the contract.</param>
            <param name="implementation">The implementation.</param>
            <returns>
                <c>true</c> if [is type assignable from] [the specified contract]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeHelper.IsTypeAssignableFrom``1(System.Type)">
            <summary>
                Determines whether the type <paramref name="implementation" /> is assignable from the specified implementation
                <typeparamref name="TContract" />,
                and caches the result across the application using a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.
            </summary>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeHelper.IsTypeAssignableFrom``1(System.Object)">
            <summary>
                Determines whether the object instance <paramref name="implementation" /> is assignable from the specified
                implementation <typeparamref name="TContract" />,
                and caches the result across the application using a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.
            </summary>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeHelper.IsValueType(System.Type)">
            <summary>
                A method to determine whether <paramref name="implementation" /> represents a value type.
            </summary>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeHelper.IsImplicitValueType(System.Type)">
            <summary>
                A method to determine whether <paramref name="implementation" /> is an implied value type (
                <see cref="P:System.Type.IsValueType" />, <see cref="P:System.Type.IsEnum" /> or a string).
            </summary>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeHelper.GetProperty(System.Type,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Returns (and caches) a PropertyInfo from a type
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="mustRead"></param>
            <param name="mustWrite"></param>
            <param name="includeIndexed"></param>
            <param name="caseSensitive"> </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeHelper.CachedDiscoverableFields(System.Type)">
            <summary>
                Gets (and caches) <see cref="T:System.Reflection.FieldInfo" /> discoverable in the current <see cref="T:System.AppDomain" /> for a given
                <paramref name="type" />.
            </summary>
            <param name="type">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeHelper.CachedDiscoverableProperties(System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Gets (and caches) <see cref="T:System.Reflection.PropertyInfo" /> discoverable in the current <see cref="T:System.AppDomain" /> for a given
                <paramref name="type" />.
            </summary>
            <param name="type">The source.</param>
            <param name="mustRead">true if the properties discovered are readable</param>
            <param name="mustWrite">true if the properties discovered are writable</param>
            <param name="includeIndexed">true if the properties discovered are indexable</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.TypeLoader">
            <summary>
                Provides methods to find and instantiate types.
            </summary>
            <remarks>
                <para>
                    This class should be used to get all types, the <see cref="T:Umbraco.Cms.Core.Composing.ITypeFinder" /> class should never be used
                    directly.
                </para>
                <para>In most cases this class is not used directly but through extension methods that retrieve specific types.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Composing.TypeLoader.TypeFinder">
            <summary>
                Returns the underlying <see cref="T:Umbraco.Cms.Core.Composing.ITypeFinder" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Composing.TypeLoader.AssembliesToScan">
            <summary>
                Gets or sets the set of assemblies to scan.
            </summary>
            <remarks>
                <para>
                    If not explicitly set, defaults to all assemblies except those that are know to not have any of the
                    types we might scan. Because we only scan for application types, this means we can safely exclude GAC
                    assemblies
                    for example.
                </para>
                <para>This is for unit tests.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Composing.TypeLoader.TypeLists">
            <summary>
                Gets the type lists.
            </summary>
            <remarks>For unit tests.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeLoader.GetAssemblyAttributes(System.Type[])">
            <summary>
                Gets the assembly attributes of the specified <paramref name="attributeTypes" />.
            </summary>
            <param name="attributeTypes">The attribute types.</param>
            <returns>
                The assembly attributes of the specified types.
            </returns>
            <exception cref="T:System.ArgumentNullException">attributeTypes</exception>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeLoader.GetTypes``1(System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
                Gets class types inheriting from or implementing the specified type
            </summary>
            <typeparam name="T">The type to inherit from or implement.</typeparam>
            <param name="cache">Indicates whether to use cache for type resolution.</param>
            <param name="specificAssemblies">A set of assemblies for type resolution.</param>
            <returns>All class types inheriting from or implementing the specified type.</returns>
            <remarks>Caching is disabled when using specific assemblies.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeLoader.GetTypesWithAttribute``2(System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
                Gets class types inheriting from or implementing the specified type and marked with the specified attribute.
            </summary>
            <typeparam name="T">The type to inherit from or implement.</typeparam>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="cache">Indicates whether to use cache for type resolution.</param>
            <param name="specificAssemblies">A set of assemblies for type resolution.</param>
            <returns>All class types inheriting from or implementing the specified type and marked with the specified attribute.</returns>
            <remarks>Caching is disabled when using specific assemblies.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeLoader.GetAttributedTypes``1(System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
                Gets class types marked with the specified attribute.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="cache">Indicates whether to use cache for type resolution.</param>
            <param name="specificAssemblies">A set of assemblies for type resolution.</param>
            <returns>All class types marked with the specified attribute.</returns>
            <remarks>Caching is disabled when using specific assemblies.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.TypeLoader.TypeList">
            <summary>
                Represents a list of types obtained by looking for types inheriting/implementing a
                specified type, and/or marked with a specified attribute type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Composing.TypeLoader.TypeList.Types">
            <summary>
                Gets the types.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeLoader.TypeList.Add(System.Type)">
            <summary>
                Adds a type.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.TypeLoader.CachedTypeNotFoundInFileException">
            <summary>
                Represents the error that occurs when a type was not found in the cache type list with the specified
                TypeResolutionKind.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeLoader.CachedTypeNotFoundInFileException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Composing.TypeLoader.CachedTypeNotFoundInFileException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeLoader.CachedTypeNotFoundInFileException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Composing.TypeLoader.CachedTypeNotFoundInFileException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeLoader.CachedTypeNotFoundInFileException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Composing.TypeLoader.CachedTypeNotFoundInFileException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null reference (
                <see langword="Nothing" /> in Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.TypeLoader.CachedTypeNotFoundInFileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Composing.TypeLoader.CachedTypeNotFoundInFileException" /> class.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.VaryingRuntimeHash">
            <summary>
                A runtime hash this is always different on each app startup
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.WeightAttribute">
            <summary>
                Specifies the weight of pretty much anything.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.WeightAttribute.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Composing.WeightAttribute" /> class with a weight.
            </summary>
            <param name="weight"></param>
        </member>
        <member name="P:Umbraco.Cms.Core.Composing.WeightAttribute.Weight">
            <summary>
                Gets the weight value.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Composing.WeightedCollectionBuilderBase`3">
            <summary>
                Implements a weighted collection builder.
            </summary>
            <typeparam name="TBuilder">The type of the builder.</typeparam>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the items.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.WeightedCollectionBuilderBase`3.Clear">
            <summary>
                Clears all types in the collection.
            </summary>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.WeightedCollectionBuilderBase`3.Add``1">
            <summary>
                Adds a type to the collection.
            </summary>
            <typeparam name="T">The type to add.</typeparam>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.WeightedCollectionBuilderBase`3.Add(System.Type)">
            <summary>
                Adds a type to the collection.
            </summary>
            <param name="type">The type to add.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.WeightedCollectionBuilderBase`3.Add(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
                Adds types to the collection.
            </summary>
            <param name="types">The types to add.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.WeightedCollectionBuilderBase`3.Remove``1">
            <summary>
                Removes a type from the collection.
            </summary>
            <typeparam name="T">The type to remove.</typeparam>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.WeightedCollectionBuilderBase`3.Remove(System.Type)">
            <summary>
                Removes a type from the collection.
            </summary>
            <param name="type">The type to remove.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Composing.WeightedCollectionBuilderBase`3.SetWeight``1(System.Int32)">
            <summary>
                Changes the default weight of an item
            </summary>
            <typeparam name="T">The type of item</typeparam>
            <param name="weight">The new weight</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.ConfigureConnectionStrings">
            <summary>
                Configures the <see cref="T:Umbraco.Cms.Core.Configuration.Models.ConnectionStrings" /> named option.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Configuration.ConfigureConnectionStrings.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Configuration.ConfigureConnectionStrings" /> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Configuration.ConfigureConnectionStrings.Configure(Umbraco.Cms.Core.Configuration.Models.ConnectionStrings)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Configuration.ConfigureConnectionStrings.Configure(System.String,Umbraco.Cms.Core.Configuration.Models.ConnectionStrings)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Configuration.IConfigManipulator.RemoveConnectionStringAsync">
            <summary>
            Removes the connection string from the configuration file
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Configuration.IConfigManipulator.SaveConnectionStringAsync(System.String,System.String)">
            <summary>
            Saves the connection string to the configuration file
            </summary>
            <param name="connectionString"></param>
            <param name="providerName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Configuration.IConfigManipulator.SaveConfigValueAsync(System.String,System.Object)">
            <summary>
            Updates a value in the configuration file.
            <remarks>Will only update an existing key in the configuration file, if it does not exists nothing is saved</remarks>
            </summary>
            <param name="itemPath">Path to update, uses : as the separator.</param>
            <param name="value">The new value.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Configuration.IConfigManipulator.SaveDisableRedirectUrlTrackingAsync(System.Boolean)">
            <summary>
            Updates the disableRedirectUrlTracking value in the configuration file.
            <remarks>
            Will create the node if it does not already exist.
            </remarks>
            </summary>
            <param name="disable">The value to save.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Configuration.IConfigManipulator.SetGlobalIdAsync(System.String)">
            <summary>
            Sets the global id in the configuration file.
            <remarks>
            Will create the node if it does not already exist.
            </remarks>
            </summary>
            <param name="id">The ID to save.</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.ICronTabParser">
            <summary>
                Defines the contract for that allows the parsing of chrontab expressions.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Configuration.ICronTabParser.IsValidCronTab(System.String)">
            <summary>
                Returns a value indicating whether a given chrontab expression is valid.
            </summary>
            <param name="cronTab">The chrontab expression to parse.</param>
            <returns>The <see cref="T:System.Boolean" /> result.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Configuration.ICronTabParser.GetNextOccurrence(System.String,System.DateTime)">
            <summary>
                Returns the next occurence for the given chrontab expression from the given time.
            </summary>
            <param name="cronTab">The chrontab expression to parse.</param>
            <param name="time">The date and time to start from.</param>
            <returns>The <see cref="T:System.DateTime" /> representing the next occurence.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.IEntryAssemblyMetadata">
            <summary>
                Provides metadata about the entry assembly.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.IEntryAssemblyMetadata.Name">
            <summary>
                Gets the Name of entry assembly.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.IEntryAssemblyMetadata.InformationalVersion">
            <summary>
                Gets the InformationalVersion string for entry assembly.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.IMemberPasswordConfiguration">
            <summary>
                The password configuration for members
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.IPasswordConfiguration">
            <summary>
                Password configuration
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.IPasswordConfiguration.RequiredLength">
            <summary>
                Gets a value for the minimum required length for the password.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.IPasswordConfiguration.RequireNonLetterOrDigit">
            <summary>
                Gets a value indicating whether at least one non-letter or digit is required for the password.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.IPasswordConfiguration.RequireDigit">
            <summary>
                Gets a value indicating whether at least one digit is required for the password.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.IPasswordConfiguration.RequireLowercase">
            <summary>
                Gets a value indicating whether at least one lower-case character is required for the password.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.IPasswordConfiguration.RequireUppercase">
            <summary>
                Gets a value indicating whether at least one upper-case character is required for the password.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.IPasswordConfiguration.HashAlgorithmType">
            <summary>
                Gets a value for the password hash algorithm type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.IPasswordConfiguration.MaxFailedAccessAttemptsBeforeLockout">
            <summary>
                Gets a value for the maximum failed access attempts before lockout.
            </summary>
            <remarks>
                TODO: This doesn't really belong here
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.IUmbracoConfigurationSection">
            <summary>
                Represents an Umbraco configuration section which can be used to pass to UmbracoConfiguration.For{T}
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.IUmbracoVersion.Version">
            <summary>
                Gets the non-semantic version of the Umbraco code.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.IUmbracoVersion.Comment">
            <summary>
                Gets the semantic version comments of the Umbraco code.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.IUmbracoVersion.AssemblyVersion">
            <summary>
                Gets the assembly version of the Umbraco code.
            </summary>
            <remarks>
                <para>The assembly version is the value of the <see cref="T:System.Reflection.AssemblyVersionAttribute" />.</para>
                <para>
                    Is the one that the CLR checks for compatibility. Therefore, it changes only on
                    hard-breaking changes (for instance, on new major versions).
                </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.IUmbracoVersion.AssemblyFileVersion">
            <summary>
                Gets the assembly file version of the Umbraco code.
            </summary>
            <remarks>
                <para>The assembly version is the value of the <see cref="T:System.Reflection.AssemblyFileVersionAttribute" />.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.IUmbracoVersion.SemanticVersion">
            <summary>
                Gets the semantic version of the Umbraco code.
            </summary>
            <remarks>
                <para>The semantic version is the value of the <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute" />.</para>
                <para>It is the full version of Umbraco, including comments.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.IUserPasswordConfiguration">
            <summary>
                The password configuration for back office users
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.MemberPasswordConfiguration">
            <summary>
                The password configuration for members
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.BasicAuthSettings">
            <summary>
            Typed configuration options for basic authentication settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.BasicAuthSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether Basic Auth Middleware is enabled.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.CharItem.Char">
            <summary>
                The character to replace
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.CharItem.Replacement">
            <summary>
                The replacement character
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.ConnectionStrings">
            <summary>
            Represents a single connection string.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Configuration.Models.ConnectionStrings.DefaultProviderName">
            <summary>
                The default provider name when not present in configuration.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Configuration.Models.ConnectionStrings.DataDirectoryPlaceholder">
            <summary>
                The DataDirectory placeholder.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Configuration.Models.ConnectionStrings.ProviderNamePostfix">
            <summary>
                The postfix used to identify a connection strings provider setting.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ConnectionStrings.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>
            The connection string.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ConnectionStrings.ProviderName">
            <summary>
            Gets or sets the name of the provider.
            </summary>
            <value>
            The name of the provider.
            </value>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.ContentErrorPage">
            <summary>
                Typed configuration for a content error page.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentErrorPage.ContentId">
            <summary>
                Gets or sets a value for the content Id.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentErrorPage.ContentKey">
            <summary>
                Gets or sets a value for the content key.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentErrorPage.HasContentId">
            <summary>
                Gets a value indicating whether the <see cref="P:Umbraco.Cms.Core.Configuration.Models.ContentErrorPage.ContentId" /> field is populated.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentErrorPage.HasContentKey">
            <summary>
                Gets a value indicating whether the <see cref="P:Umbraco.Cms.Core.Configuration.Models.ContentErrorPage.ContentKey" /> field is populated.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentErrorPage.Culture">
            <summary>
                Gets or sets a value for the content culture.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.ContentImagingSettings">
            <summary>
                Typed configuration options for content imaging settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentImagingSettings.ImageFileTypes">
            <summary>
                Gets or sets a value for the collection of accepted image file extensions.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Umbraco.Cms.Core.Configuration.Models.ContentImagingSettings.AutoFillImageProperties" -->
        <member name="T:Umbraco.Cms.Core.Configuration.Models.ContentNotificationSettings">
            <summary>
                Typed configuration options for content notification settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentNotificationSettings.Email">
            <summary>
                Gets or sets a value for the email address for notifications.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentNotificationSettings.DisableHtmlEmail">
            <summary>
                Gets or sets a value indicating whether HTML email notifications should be disabled.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.ContentSettings">
            <summary>
                Typed configuration options for content settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentSettings.Notifications">
            <summary>
                Gets or sets a value for the content notification settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentSettings.Imaging">
            <summary>
                Gets or sets a value for the content imaging settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentSettings.ResolveUrlsFromTextString">
            <summary>
                Gets or sets a value indicating whether URLs should be resolved from text strings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentSettings.Error404Collection">
            <summary>
                Gets or sets a value for the collection of error pages.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentSettings.PreviewBadge">
            <summary>
                Gets or sets a value for the preview badge mark-up.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentSettings.ShowDeprecatedPropertyEditors">
            <summary>
                Gets or sets a value indicating whether deprecated property editors should be shown.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentSettings.LoginBackgroundImage">
            <summary>
                Gets or sets a value for the path to the login screen background image.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentSettings.LoginLogoImage">
            <summary>
                Gets or sets a value for the path to the login screen logo image
                shown on top of the background image set in <see cref="P:Umbraco.Cms.Core.Configuration.Models.ContentSettings.LoginBackgroundImage" />.
            </summary>
            <remarks>The alternative version of this logo can be found at <see cref="P:Umbraco.Cms.Core.Configuration.Models.ContentSettings.LoginLogoImageAlternative"/>.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentSettings.LoginLogoImageAlternative">
            <summary>
                Gets or sets a value for the path to the login screen logo image when shown on top
                of a light background (e.g. in mobile resolutions).
            </summary>
            <remarks>This is the alternative version to the regular logo found at <see cref="P:Umbraco.Cms.Core.Configuration.Models.ContentSettings.LoginLogoImage"/>.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentSettings.BackOfficeLogo">
            <summary>
                Gets or sets a value for the path to the backoffice logo.
            </summary>
            <remarks>The alternative version of this logo can be found at <see cref="P:Umbraco.Cms.Core.Configuration.Models.ContentSettings.BackOfficeLogoAlternative"/>.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentSettings.BackOfficeLogoAlternative">
            <summary>
                Gets or sets a value for the path to the alternative backoffice logo, which can be shown
                on top of a light background.
            </summary>
            <remarks>This is the alternative version to the regular logo found at <see cref="P:Umbraco.Cms.Core.Configuration.Models.ContentSettings.BackOfficeLogo"/>.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentSettings.HideBackOfficeLogo">
            <summary>
                Gets or sets a value indicating whether to hide the backoffice umbraco logo or not.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentSettings.DisableDeleteWhenReferenced">
            <summary>
                Gets or sets a value indicating whether to disable the deletion of items referenced by other items.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentSettings.DisableUnpublishWhenReferenced">
            <summary>
                Gets or sets a value indicating whether to disable the unpublishing of items referenced by other items.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentSettings.ContentVersionCleanupPolicy">
            <summary>
                Gets or sets the model representing the global content version cleanup policy
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentSettings.AllowEditInvariantFromNonDefault">
            <summary>
            Gets or sets a value indicating whether to allow editing invariant properties from a non-default language variation.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentSettings.AllowedUploadedFileExtensions">
            <summary>
                Gets or sets a value for the collection of file extensions that are allowed for upload.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentSettings.DisallowedUploadedFileExtensions">
            <summary>
                Gets or sets a value for the collection of file extensions that are disallowed for upload.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentSettings.AllowedMediaHosts">
            <summary>
            Gets or sets the allowed external host for media. If empty only relative paths are allowed.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentSettings.ShowDomainWarnings">
            <summary>
            Gets or sets a value indicating whether to show domain warnings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentSettings.ShowUnroutableContentWarnings">
            <summary>
            Gets or sets a value indicating whether to show unroutable content warnings.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.ContentVersionCleanupPolicySettings">
            <summary>
                Model representing the global content version cleanup policy
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentVersionCleanupPolicySettings.EnableCleanup">
            <summary>
                Gets or sets a value indicating whether or not the cleanup job should be executed.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentVersionCleanupPolicySettings.KeepAllVersionsNewerThanDays">
            <summary>
                Gets or sets the number of days where all historical content versions are kept.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ContentVersionCleanupPolicySettings.KeepLatestVersionPerDayForDays">
            <summary>
                Gets or sets the number of days where the latest historical content version for that day are kept.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.CoreDebugSettings">
            <summary>
                Typed configuration options for core debug settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.CoreDebugSettings.LogIncompletedScopes">
            <summary>
                Gets or sets a value indicating whether incompleted scopes should be logged.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.CoreDebugSettings.DumpOnTimeoutThreadAbort">
            <summary>
                Gets or sets a value indicating whether memory dumps on thread abort should be taken.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.DatabaseServerMessengerSettings">
            <summary>
                Typed configuration options for database server messaging settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DatabaseServerMessengerSettings.MaxProcessingInstructionCount">
            <summary>
                Gets or sets a value for the maximum number of instructions that can be processed at startup; otherwise the server
                cold-boots (rebuilds its caches).
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DatabaseServerMessengerSettings.TimeToRetainInstructions">
            <summary>
                Gets or sets a value for the time to keep instructions in the database; records older than this number will be
                pruned.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DatabaseServerMessengerSettings.TimeBetweenSyncOperations">
            <summary>
                Gets or sets a value for the time to wait between each sync operations.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DatabaseServerMessengerSettings.TimeBetweenPruneOperations">
            <summary>
                Gets or sets a value for the time to wait between each prune operations.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.DatabaseServerRegistrarSettings">
            <summary>
                Typed configuration options for database server registrar settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DatabaseServerRegistrarSettings.WaitTimeBetweenCalls">
            <summary>
                Gets or sets a value for the amount of time to wait between calls to the database on the background thread.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DatabaseServerRegistrarSettings.StaleServerTimeout">
            <summary>
                Gets or sets a value for the time span to wait before considering a server stale, after it has last been accessed.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DataTypesSettings.CanBeChanged">
            <summary>
            Gets or sets a value indicating if data types can be changed after they've been used.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings">
            <summary>
                Typed configuration options for Delivery API settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.Enabled">
            <summary>
                Gets or sets a value indicating whether the Delivery API should be enabled.
            </summary>
            <value><c>true</c> if the Delivery API should be enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.PublicAccess">
            <summary>
                Gets or sets a value indicating whether the Delivery API (if enabled) should be
                publicly available or should require an API key for access.
            </summary>
            <value><c>true</c> if the Delivery API should be publicly available; <c>false</c> if an API key should be required for access.</value>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.ApiKey">
            <summary>
                Gets or sets the API key used for authorizing API access (if the API is not publicly available) and preview access.
            </summary>
            <value>A <c>string</c> representing the API key.</value>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.DisallowedContentTypeAliases">
            <summary>
                Gets or sets the aliases of the content types that may never be exposed through the Delivery API. Content of these
                types will never be returned from any Delivery API endpoint, nor added to the query index.
            </summary>
            <value>
            The content type aliases that are not to be exposed.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.RichTextOutputAsJson">
            <summary>
                Gets or sets a value indicating whether the Delivery API should output rich text values as JSON instead of HTML.
            </summary>
            <value><c>true</c> if the Delivery API should output rich text values as JSON; <c>false</c> they should be output as HTML (default).</value>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.Media">
            <summary>
                Gets or sets the settings for the Media APIs of the Delivery API.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.MemberAuthorization">
            <summary>
                Gets or sets the member authorization settings for the Delivery API.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.OutputCache">
            <summary>
                Gets or sets the settings for the Delivery API output cache.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.MemberAuthorizationIsEnabled">
            <summary>
                Gets a value indicating if any member authorization type is enabled for the Delivery API.
            </summary>
            <remarks>
                This method is intended for future extension - see remark in <see cref="T:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.MemberAuthorizationSettings"/>.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.MediaSettings">
            <summary>
                Typed configuration options for the Media APIs of the Delivery API.
            </summary>
            <remarks>
                The Delivery API settings (as configured in <see cref="T:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings"/>) supersede these settings in levels of restriction.
                I.e. the Media APIs cannot be enabled, if the Delivery API is disabled.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.MediaSettings.Enabled">
            <summary>
                Gets or sets a value indicating whether the Media APIs of the Delivery API should be enabled.
            </summary>
            <value><c>true</c> if the Media APIs should be enabled; otherwise, <c>false</c>.</value>
            <remarks>
                Setting this to <c>true</c> will have no effect if the Delivery API itself is disabled through <see cref="T:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings"/>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.MediaSettings.PublicAccess">
            <summary>
                Gets or sets a value indicating whether the Media APIs of the Delivery API (if enabled) should be
                publicly available or should require an API key for access.
            </summary>
            <value><c>true</c> if the Media APIs should be publicly available; <c>false</c> if an API key should be required for access.</value>
            <remarks>
                Setting this to <c>true</c> will have no effect if the Delivery API itself has public access disabled through <see cref="T:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings"/>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.MemberAuthorizationSettings">
            <summary>
                Typed configuration options for member authorization settings for the Delivery API.
            </summary>
            <remarks>
                This class is intended for future extension, if/when adding support for additional
                authorization flows (i.e. non-interactive authorization flows).
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.MemberAuthorizationSettings.AuthorizationCodeFlow">
            <summary>
                Gets or sets the Authorization Code Flow configuration for the Delivery API.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.MemberAuthorizationSettings.ClientCredentialsFlow">
            <summary>
                Gets or sets the Client Credentials Flow configuration for the Delivery API.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.AuthorizationCodeFlowSettings">
            <summary>
                Typed configuration options for the Authorization Code Flow settings for the Delivery API.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.AuthorizationCodeFlowSettings.Enabled">
            <summary>
                Gets or sets a value indicating whether Authorization Code Flow should be enabled for the Delivery API.
            </summary>
            <value><c>true</c> if Authorization Code Flow should be enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.AuthorizationCodeFlowSettings.LoginRedirectUrls">
            <summary>
                Gets or sets the URLs allowed to use as redirect targets after a successful login (session authorization).
            </summary>
            <value>
            The URLs allowed as redirect targets.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.AuthorizationCodeFlowSettings.LogoutRedirectUrls">
            <summary>
                Gets or sets the URLs allowed to use as redirect targets after a successful logout (session termination).
            </summary>
            <value>
            The URLs allowed as redirect targets.
            </value>
            <remarks>
            These are only required if logout is to be used.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.OutputCacheSettings">
            <summary>
                Typed configuration options for output caching of the Delivery API.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.OutputCacheSettings.Enabled">
            <summary>
                Gets or sets a value indicating whether the Delivery API output should be cached.
            </summary>
            <value><c>true</c> if the Delivery API output should be cached; otherwise, <c>false</c>.</value>
            <remarks>
                The default value is <c>false</c>.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.OutputCacheSettings.ContentDuration">
            <summary>
                Gets or sets a value indicating how long the Content Delivery API output should be cached.
            </summary>
            <value>Cache lifetime.</value>
            <remarks>
                The default cache duration is one minute, if this configuration value is not provided.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.OutputCacheSettings.MediaDuration">
            <summary>
                Gets or sets a value indicating how long the Media Delivery API output should be cached.
            </summary>
            <value>Cache lifetime.</value>
            <remarks>
                The default cache duration is one minute, if this configuration value is not provided.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.ClientCredentialsFlowSettings">
            <summary>
                Typed configuration options for the Client Credentials Flow settings for the Delivery API.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.ClientCredentialsFlowSettings.Enabled">
            <summary>
                Gets or sets a value indicating whether Client Credentials Flow should be enabled for the Delivery API.
            </summary>
            <value><c>true</c> if Client Credentials Flow should be enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.ClientCredentialsFlowMemberSettings.UserName">
            <summary>
                Gets or sets the user name of the member to associate with the session after a successful login.
            </summary>
            <value>The user name of the member.</value>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.ClientCredentialsFlowMemberSettings.ClientId">
            <summary>
                Gets or sets the client ID that allows for a successful login.
            </summary>
            <value>The client ID.</value>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DeliveryApiSettings.ClientCredentialsFlowMemberSettings.ClientSecret">
            <summary>
                Gets or sets the client secret that allows for a successful login.
            </summary>
            <value>The client secret.</value>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.DisabledHealthCheckSettings">
            <summary>
                Typed configuration options for disabled healthcheck settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DisabledHealthCheckSettings.Id">
            <summary>
                Gets or sets a value for the healthcheck Id to disable.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DisabledHealthCheckSettings.DisabledOn">
            <summary>
                Gets or sets a value for the date the healthcheck was disabled.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.DisabledHealthCheckSettings.DisabledBy">
            <summary>
                Gets or sets a value for Id of the user that disabled the healthcheck.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.ExceptionFilterSettings">
            <summary>
                Typed configuration options for exception filter settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ExceptionFilterSettings.Disabled">
            <summary>
                Gets or sets a value indicating whether the exception filter is disabled.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.GlobalSettings">
            <summary>
                Typed configuration options for global settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.ReservedUrls">
            <summary>
                Gets or sets a value for the reserved URLs (must end with a comma).
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.ReservedPaths">
            <summary>
                Gets or sets a value for the reserved paths (must end with a comma).
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.TimeOut">
            <summary>
                Gets or sets a value for the back-office login timeout.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.DefaultUILanguage">
            <summary>
                Gets or sets a value for the default UI language.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.HideTopLevelNodeFromPath">
            <summary>
                Gets or sets a value indicating whether to hide the top level node from the path.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.UseHttps">
            <summary>
                Gets or sets a value indicating whether HTTPS should be used.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.VersionCheckPeriod">
            <summary>
                Gets or sets a value for the version check period in days.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.IconsPath">
            <summary>
                Gets or sets a value for the Umbraco icons path.
            </summary>
            <remarks>
                TODO: Umbraco cannot be hard coded here that is what UmbracoPath is for
                so this should not be a normal get set it has to have dynamic ability to return the correct
                path given UmbracoPath if this hasn't been explicitly set.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.UmbracoCssPath">
            <summary>
                Gets or sets a value for the Umbraco CSS path.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.UmbracoScriptsPath">
            <summary>
                Gets or sets a value for the Umbraco scripts path.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.UmbracoMediaPath">
            <summary>
                Gets or sets a value for the Umbraco media request path.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.UmbracoMediaPhysicalRootPath">
            <summary>
                Gets or sets a value for the physical Umbraco media root path (falls back to <see cref="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.UmbracoMediaPath" /> when
                empty).
            </summary>
            <remarks>
                If the value is a virtual path, it's resolved relative to the webroot.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.DisableElectionForSingleServer">
            <summary>
                Gets or sets a value indicating whether to disable the election for a single server.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.DatabaseFactoryServerVersion">
            <summary>
                Gets or sets a value for the database factory server version.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.MainDomLock">
            <summary>
                Gets or sets a value for the main dom lock.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.MainDomKeyDiscriminator">
            <summary>
                Gets or sets a value to discriminate MainDom boundaries.
                <para>
                    Generally the default should suffice but useful for advanced scenarios e.g. azure deployment slot based zero
                    downtime deployments.
                </para>
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.MainDomReleaseSignalPollingInterval">
            <summary>
                Gets or sets the duration (in milliseconds) for which the MainDomLock release signal polling task should sleep.
            </summary>
            <remarks>
                Doesn't apply to MainDomSemaphoreLock.
                <para>
                    The default value is 2000ms.
                </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.Id">
            <summary>
                Gets or sets the telemetry ID.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.NoNodesViewPath">
            <summary>
                Gets or sets a value for the path to the no content view.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.DatabaseServerRegistrar">
            <summary>
                Gets or sets a value for the database server registrar settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.DatabaseServerMessenger">
            <summary>
                Gets or sets a value for the database server messenger settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.Smtp">
            <summary>
                Gets or sets a value for the SMTP settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.IsSmtpServerConfigured">
            <summary>
                Gets a value indicating whether SMTP is configured.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.IsPickupDirectoryLocationConfigured">
            <summary>
                Gets a value indicating whether there is a physical pickup directory configured.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.DistributedLockingReadLockDefaultTimeout">
            <summary>
                Gets or sets a value representing the maximum time to wait whilst attempting to obtain a distributed read lock.
            </summary>
            <remarks>
                The default value is 60 seconds.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.DistributedLockingWriteLockDefaultTimeout">
            <summary>
                Gets or sets a value representing the maximum time to wait whilst attempting to obtain a distributed write lock.
            </summary>
            <remarks>
                The default value is 5 seconds.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.DistributedLockingMechanism">
            <summary>
            Gets or sets a value representing the DistributedLockingMechanism to use.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.ForceCombineUrlPathLeftToRight">
            <summary>
            Force url paths to be left to right, even when the culture has right to left text
            </summary>
            <example>
            For the following hierarchy
            - Root (/ar)
              - 1 (/ar/1)
                - 2 (/ar/1/2)
                  - 3 (/ar/1/2/3)
                    - 3 (/ar/1/2/3/4)
            When forced
            - https://www.umbraco.com/ar/1/2/3/4
            when not
            - https://www.umbraco.com/ar/4/3/2/1
            </example>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.HealthChecksNotificationMethodSettings">
            <summary>
                Typed configuration options for healthcheck notification method settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.HealthChecksNotificationMethodSettings.Enabled">
            <summary>
                Gets or sets a value indicating whether the health check notification method is enabled.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.HealthChecksNotificationMethodSettings.Verbosity">
            <summary>
                Gets or sets a value for the health check notifications reporting verbosity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.HealthChecksNotificationMethodSettings.FailureOnly">
            <summary>
                Gets or sets a value indicating whether the health check notifications should occur on failures only.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.HealthChecksNotificationMethodSettings.Settings">
            <summary>
                Gets or sets a value providing provider specific settings for the health check notification method.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.HealthChecksNotificationSettings">
            <summary>
                Typed configuration options for healthcheck notification settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.HealthChecksNotificationSettings.Enabled">
            <summary>
                Gets or sets a value indicating whether health check notifications are enabled.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.HealthChecksNotificationSettings.FirstRunTime">
            <summary>
                Gets or sets a value for the first run time of a healthcheck notification in crontab format.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.HealthChecksNotificationSettings.Period">
            <summary>
                Gets or sets a value for the period of the healthcheck notification.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.HealthChecksNotificationSettings.NotificationMethods">
            <summary>
                Gets or sets a value for the collection of health check notification methods.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.HealthChecksNotificationSettings.DisabledChecks">
            <summary>
                Gets or sets a value for the collection of health checks that are disabled for notifications.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.HealthChecksSettings">
            <summary>
                Typed configuration options for healthchecks settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.HealthChecksSettings.DisabledChecks">
            <summary>
                Gets or sets a value for the collection of healthchecks that are disabled.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.HealthChecksSettings.Notification">
            <summary>
                Gets or sets a value for the healthcheck notification settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.HelpPageSettings.HelpPageUrlAllowList">
            <summary>
                Gets or sets the allowed addresses to retrieve data for the content dashboard.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.HostingSettings">
            <summary>
                Typed configuration options for hosting settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.HostingSettings.ApplicationVirtualPath">
            <summary>
                Gets or sets a value for the application virtual path.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.HostingSettings.LocalTempStorageLocation">
            <summary>
                Gets or sets a value for the location of temporary files.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.HostingSettings.Debug">
            <summary>
                Gets or sets a value indicating whether umbraco is running in [debug mode].
            </summary>
            <value><c>true</c> if [debug mode]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.HostingSettings.SiteName">
            <summary>
                Gets or sets a value specifying the name of the site.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.ImagingAutoFillUploadField">
            <summary>
                Typed configuration options for image autofill upload settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ImagingAutoFillUploadField.Alias">
            <summary>
                Gets or sets a value for the alias of the image upload property.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ImagingAutoFillUploadField.WidthFieldAlias">
            <summary>
                Gets or sets a value for the width field alias of the image upload property.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ImagingAutoFillUploadField.HeightFieldAlias">
            <summary>
                Gets or sets a value for the height field alias of the image upload property.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ImagingAutoFillUploadField.LengthFieldAlias">
            <summary>
                Gets or sets a value for the length field alias of the image upload property.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ImagingAutoFillUploadField.ExtensionFieldAlias">
            <summary>
                Gets or sets a value for the extension field alias of the image upload property.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.ImagingCacheSettings">
            <summary>
                Typed configuration options for image cache settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ImagingCacheSettings.BrowserMaxAge">
            <summary>
                Gets or sets a value for the browser image cache maximum age.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ImagingCacheSettings.CacheMaxAge">
            <summary>
                Gets or sets a value for the image cache maximum age.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ImagingCacheSettings.CacheHashLength">
            <summary>
                Gets or sets a value for the image cache hash length.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ImagingCacheSettings.CacheFolderDepth">
            <summary>
                Gets or sets a value for the image cache folder depth.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ImagingCacheSettings.CacheFolder">
            <summary>
                Gets or sets a value for the image cache folder.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.ImagingResizeSettings">
            <summary>
            Typed configuration options for image resize settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ImagingResizeSettings.MaxWidth">
            <summary>
            Gets or sets a value for the maximum resize width.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ImagingResizeSettings.MaxHeight">
            <summary>
            Gets or sets a value for the maximum resize height.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.ImagingSettings">
            <summary>
            Typed configuration options for imaging settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ImagingSettings.HMACSecretKey">
            <summary>
            Gets or sets a value for the Hash-based Message Authentication Code (HMAC) secret key for request authentication.
            </summary>
            <remarks>
            Setting or updating this value will cause all existing generated URLs to become invalid and return a 400 Bad Request response code.
            When set, the maximum resize settings are not used/validated anymore, because you can only request URLs with a valid HMAC token anyway.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ImagingSettings.Cache">
            <summary>
            Gets or sets a value for imaging cache settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ImagingSettings.Resize">
            <summary>
            Gets or sets a value for imaging resize settings.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.IndexCreatorSettings">
            <summary>
                Typed configuration options for index creator settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.IndexCreatorSettings.LuceneDirectoryFactory">
            <summary>
                Gets or sets a value for lucene directory factory type.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.IndexingSettings">
            <summary>
                Typed configuration options for index creator settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.IndexingSettings.ExplicitlyIndexEachNestedProperty">
            <summary>
            Gets or sets a value for whether each nested property should have it's own indexed value. Requires a rebuild of indexes when changed.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.InstallDefaultDataOption">
            <summary>
                An enumeration of options available for control over installation of default Umbraco data.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Configuration.Models.InstallDefaultDataOption.None">
            <summary>
                Do not install any items of this type (other than Umbraco defined essential ones).
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Configuration.Models.InstallDefaultDataOption.Values">
            <summary>
                Only install the default data specified in the <see cref="P:Umbraco.Cms.Core.Configuration.Models.InstallDefaultDataSettings.Values" />
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Configuration.Models.InstallDefaultDataOption.ExceptValues">
            <summary>
                Install all default data, except that specified in the <see cref="P:Umbraco.Cms.Core.Configuration.Models.InstallDefaultDataSettings.Values" />
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Configuration.Models.InstallDefaultDataOption.All">
            <summary>
                Install all default data.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.InstallDefaultDataSettings">
            <summary>
                Typed configuration options for installation of default data.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.InstallDefaultDataSettings.InstallData">
            <summary>
                Gets or sets a value indicating whether to create default data on installation.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.InstallDefaultDataSettings.Values">
            <summary>
                Gets or sets a value indicating which default data (languages, data types, etc.) should be created when
                <see cref="P:Umbraco.Cms.Core.Configuration.Models.InstallDefaultDataSettings.InstallData" /> is
                set to <see cref="F:Umbraco.Cms.Core.Configuration.Models.InstallDefaultDataOption.Values" /> or <see cref="F:Umbraco.Cms.Core.Configuration.Models.InstallDefaultDataOption.ExceptValues" />.
            </summary>
            <remarks>
                <para>
                    For languages, the values provided should be the ISO codes for the languages to be included or excluded, e.g.
                    "en-US".
                    If removing the single default language, ensure that a different one is created via some other means (such
                    as a restore from Umbraco Deploy schema data).
                </para>
                <para>
                    For data types, the values provided should be the Guid values used by Umbraco for the data type, listed at:
                    <see cref="T:Umbraco.Cms.Core.Constants.DataTypes" />
                    Some data types - such as the string label - cannot be excluded from install as they are required for core
                    Umbraco
                    functionality.
                    Otherwise take care not to remove data types required for default Umbraco media and member types, unless you
                    also
                    choose to exclude them.
                </para>
                <para>
                    For media types, the values provided should be the Guid values used by Umbraco for the media type, listed at:
                    https://github.com/umbraco/Umbraco-CMS/blob/v9/dev/src/Umbraco.Infrastructure/Migrations/Install/DatabaseDataCreator.cs.
                </para>
                <para>
                    For member types, the values provided should be the Guid values used by Umbraco for the member type, listed at:
                    https://github.com/umbraco/Umbraco-CMS/blob/v9/dev/src/Umbraco.Infrastructure/Migrations/Install/DatabaseDataCreator.cs.
                </para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.LegacyPasswordMigrationSettings">
            <summary>
                Typed configuration options for legacy machine key settings used for migration of members from a v8 solution.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.LegacyPasswordMigrationSettings.MachineKeyDecryption">
            <summary>
                Gets the decryption algorithm.
            </summary>
            <remarks>
                Currently only AES is supported. This should include all machine keys generated by Umbraco.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.LegacyPasswordMigrationSettings.MachineKeyDecryptionKey">
            <summary>
                Gets or sets the decryption hex-formatted string key found in legacy web.config machineKey configuration-element.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.LoggingSettings">
            <summary>
            Typed configuration options for logging settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.LoggingSettings.MaxLogAge">
            <summary>
            Gets or sets a value for the maximum age of a log file.
            </summary>
            <value>
            The maximum log age.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.LoggingSettings.Directory">
            <summary>
            Gets or sets the folder to use for log files.
            </summary>
            <value>
            The directory.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.LoggingSettings.FileNameFormat">
            <summary>
            Gets or sets the file name format to use for log files.
            </summary>
            <value>
            The file name format.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.LoggingSettings.FileNameFormatArguments">
            <summary>
            Gets or sets the file name format arguments to use for log files.
            </summary>
            <value>
            The file name format arguments as a comma delimited string of accepted values.
            </value>
            <remarks>
            Accepted values for format arguments are: MachineName, EnvironmentName.
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Configuration.Models.LuceneDirectoryFactory.Default">
            <summary>
                The index will operate from the default location: Umbraco/Data/Temp/ExamineIndexes
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Configuration.Models.LuceneDirectoryFactory.SyncedTempFileSystemDirectoryFactory">
            <summary>
                The index will operate on a local index created in the processes %temp% location and
                will replicate back to main storage in Umbraco/Data/Temp/ExamineIndexes
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Configuration.Models.LuceneDirectoryFactory.TempFileSystemDirectoryFactory">
            <summary>
                The index will operate only in the processes %temp% directory location
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.MarketplaceSettings">
            <summary>
            Configuration options for the Marketplace.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.MarketplaceSettings.AdditionalParameters">
            <summary>
            Gets or sets the additional parameters that are sent to the Marketplace.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.MemberPasswordConfigurationSettings">
            <summary>
                Typed configuration options for member password settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.MemberPasswordConfigurationSettings.RequiredLength">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.MemberPasswordConfigurationSettings.RequireNonLetterOrDigit">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.MemberPasswordConfigurationSettings.RequireDigit">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.MemberPasswordConfigurationSettings.RequireLowercase">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.MemberPasswordConfigurationSettings.RequireUppercase">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.MemberPasswordConfigurationSettings.HashAlgorithmType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.MemberPasswordConfigurationSettings.MaxFailedAccessAttemptsBeforeLockout">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.ModelsBuilderSettings">
            <summary>
                Typed configuration options for models builder settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ModelsBuilderSettings.ModelsMode">
            <summary>
                Gets or sets a value for the models mode.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ModelsBuilderSettings.ModelsNamespace">
            <summary>
                Gets or sets a value for models namespace.
            </summary>
            <remarks>That value could be overriden by other (attribute in user's code...). Return default if no value was supplied.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ModelsBuilderSettings.FlagOutOfDateModels">
            <summary>
                Gets or sets a value indicating whether we should flag out-of-date models.
            </summary>
            <remarks>
                Models become out-of-date when data types or content types are updated. When this
                setting is activated the ~/umbraco/models/PureLive/ood.txt file is then created. When models are
                generated through the dashboard, the files is cleared. Default value is <c>false</c>.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ModelsBuilderSettings.ModelsDirectory">
            <summary>
                Gets or sets a value for the models directory.
            </summary>
            <remarks>Default is ~/umbraco/models but that can be changed.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ModelsBuilderSettings.AcceptUnsafeModelsDirectory">
            <summary>
                Gets or sets a value indicating whether to accept an unsafe value for ModelsDirectory.
            </summary>
            <remarks>
                An unsafe value is an absolute path, or a relative path pointing outside
                of the website root.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ModelsBuilderSettings.DebugLevel">
            <summary>
                Gets or sets a value indicating the debug log level.
            </summary>
            <remarks>0 means minimal (safe on live site), anything else means more and more details (maybe not safe).</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.ModelsBuilderSettings.IncludeVersionNumberInGeneratedModels">
            <summary>
                Gets or sets a value indicating whether the version number should be included in generated models.
            </summary>
            <remarks>
                By default this is written to the <see cref="T:System.CodeDom.Compiler.GeneratedCodeAttribute"/> output in
                generated code for each property of the model. This can be useful for debugging purposes but isn't essential,
                and it has the causes the generated code to change every time Umbraco is upgraded. In turn, this leads
                to unnecessary code file changes that need to be checked into source control. Default is <c>true</c>.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.NuCacheSerializerType">
            <summary>
                The serializer type that nucache uses to persist documents in the database.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.NuCacheSettings">
            <summary>
                Typed configuration options for NuCache settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.NuCacheSettings.NuCacheSerializerType">
            <summary>
                The serializer type that nucache uses to persist documents in the database.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.NuCacheSettings.SqlPageSize">
            <summary>
                The paging size to use for nucache SQL queries.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.PackageMigrationSettings">
            <summary>
                Typed configuration options for package migration settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.PackageMigrationSettings.RunSchemaAndContentMigrations">
            <summary>
                Gets or sets a value indicating whether package migration steps that install schema and content should run.
            </summary>
            <remarks>
                By default this is true and schema and content defined in a package migration are installed.
                Using configuration, administrators can optionally switch this off in certain environments.
                Deployment tools such as Umbraco Deploy can also configure this option to run or not run these migration
                steps as is appropriate for normal use of the tool.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.PackageMigrationSettings.AllowComponentOverrideOfRunSchemaAndContentMigrations">
            <summary>
                Gets or sets a value indicating whether components can override the configured value for
                <see cref="P:Umbraco.Cms.Core.Configuration.Models.PackageMigrationSettings.RunSchemaAndContentMigrations" />.
            </summary>
            <remarks>
                By default this is true and components can override the configured setting for
                <see cref="P:Umbraco.Cms.Core.Configuration.Models.PackageMigrationSettings.RunSchemaAndContentMigrations" />.
                If an administrator wants explicit control over which environments migration steps installing schema and content
                can run,
                they can set this to false. Components should respect this and not override the configuration.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.RequestHandlerSettings">
            <summary>
                Typed configuration options for request handler settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.RequestHandlerSettings.AddTrailingSlash">
            <summary>
                Gets or sets a value indicating whether to add a trailing slash to URLs.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.RequestHandlerSettings.ConvertUrlsToAscii">
            <summary>
                Gets or sets a value indicating whether to convert URLs to ASCII (valid values: "true", "try" or "false").
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.RequestHandlerSettings.ShouldConvertUrlsToAscii">
            <summary>
                Gets a value indicating whether URLs should be converted to ASCII.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.RequestHandlerSettings.ShouldTryConvertUrlsToAscii">
            <summary>
                Gets a value indicating whether URLs should be tried to be converted to ASCII.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.RequestHandlerSettings.ConvertFileNamesToAscii">
            <summary>
                Gets or sets a value indicating whether to convert file names to ASCII (valid values: "true", "try" or "false").
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.RequestHandlerSettings.ShouldConvertFileNamesToAscii">
            <summary>
                Gets a value indicating whether URLs should be converted to ASCII.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.RequestHandlerSettings.ShouldTryConvertFileNamesToAscii">
            <summary>
                Gets a value indicating whether URLs should be tried to be converted to ASCII.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.RequestHandlerSettings.EnableDefaultCharReplacements">
            <summary>
                Disable all default character replacements
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.RequestHandlerSettings.UserDefinedCharCollection">
            <summary>
                Add additional character replacements, or override defaults
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.RuntimeMode">
            <summary>
            Represents the configured Umbraco runtime mode.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Configuration.Models.RuntimeMode.BackofficeDevelopment">
            <summary>
            The backoffice development mode ensures the runtime is configured for rapidly applying changes within the backoffice.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Configuration.Models.RuntimeMode.Development">
            <summary>
            The development mode ensures the runtime is configured for rapidly applying changes.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Configuration.Models.RuntimeMode.Production">
            <summary>
            The production mode ensures optimal performance settings are configured and denies any changes that would require recompilations.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.RuntimeSettings">
            <summary>
            Typed configuration options for runtime settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.RuntimeSettings.Mode">
            <summary>
            Gets or sets the runtime mode.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.RuntimeSettings.MaxRequestLength">
            <summary>
                Gets or sets a value for the maximum request length in kb.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.RuntimeSettings.TemporaryFileLifeTime">
            <summary>
            Gets or sets the timespan temporary files are kept, before they are removed by a background task.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.SecuritySettings">
            <summary>
                Typed configuration options for security settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SecuritySettings.KeepUserLoggedIn">
            <summary>
                Gets or sets a value indicating whether to keep the user logged in.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SecuritySettings.HideDisabledUsersInBackOffice">
            <summary>
                Gets or sets a value indicating whether to hide disabled users in the back-office.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SecuritySettings.AllowPasswordReset">
            <summary>
                Gets or sets a value indicating whether to allow user password reset.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SecuritySettings.AuthCookieName">
            <summary>
                Gets or sets a value for the authorization cookie name.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SecuritySettings.AuthCookieDomain">
            <summary>
                Gets or sets a value for the authorization cookie domain.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SecuritySettings.UsernameIsEmail">
            <summary>
                Gets or sets a value indicating whether the user's email address is to be considered as their username.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SecuritySettings.MemberRequireUniqueEmail">
            <summary>
                Gets or sets a value indicating whether the member's email address must be unique.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SecuritySettings.AllowedUserNameCharacters">
            <summary>
                Gets or sets the set of allowed characters for a username
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SecuritySettings.MemberBypassTwoFactorForExternalLogins">
            <summary>
                Gets or sets a value indicating whether to bypass the two factor requirement in Umbraco when using external login
                for members. Thereby rely on the External login and potential 2FA at that provider.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SecuritySettings.UserBypassTwoFactorForExternalLogins">
            <summary>
                Gets or sets a value indicating whether to bypass the two factor requirement in Umbraco when using external login
                for users. Thereby rely on the External login and potential 2FA at that provider.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SecuritySettings.MemberDefaultLockoutTimeInMinutes">
            <summary>
                Gets or sets a value for how long (in minutes) a member is locked out when a lockout occurs.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SecuritySettings.UserDefaultLockoutTimeInMinutes">
            <summary>
                Gets or sets a value for how long (in minutes) a user is locked out when a lockout occurs.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SecuritySettings.AllowConcurrentLogins">
            <summary>
                Gets or sets a value indicating whether to allow concurrent logins.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SecuritySettings.UserDefaultFailedLoginDurationInMilliseconds">
            <summary>
            Gets or sets the default duration (in milliseconds) of failed login attempts.
            </summary>
            <value>
            The default duration (in milliseconds) of failed login attempts.
            </value>
            <remarks>
            The user login endpoint ensures that failed login attempts take at least as long as the average successful login.
            However, if no successful logins have occurred, this value is used as the default duration.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SecuritySettings.UserMinimumFailedLoginDurationInMilliseconds">
            <summary>
            Gets or sets the minimum duration (in milliseconds) of failed login attempts.
            </summary>
            <value>
            The minimum duration (in milliseconds) of failed login attempts.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SecuritySettings.BackOfficeHost">
            <summary>
                Gets or sets a value of the back-office host URI. Use this when running the back-office client and the Management API on different hosts. Leave empty when running both on the same host.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SecuritySettings.AuthorizeCallbackPathName">
            <summary>
                Gets or sets the path to use for authorization callback. Will be appended to the BackOfficeHost.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SecuritySettings.AuthorizeCallbackLogoutPathName">
            <summary>
                Gets or sets the path to use for authorization callback logout. Will be appended to the BackOfficeHost.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SecuritySettings.AuthorizeCallbackErrorPathName">
            <summary>
                Gets or sets the path to use for authorization callback error. Will be appended to the BackOfficeHost.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.SegmentSettings">
            <summary>
                Typed configuration options for segment settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SegmentSettings.Enabled">
            <summary>
                Gets or sets a value indicating whether the usage of segments is enabled.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SegmentSettings.AllowCreation">
            <summary>
                Gets or sets a value indicating whether the creation of non-existing segments is allowed.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.SecureSocketOptions">
            <summary>
                Matches MailKit.Security.SecureSocketOptions and defined locally to avoid having to take
                a dependency on this external library into Umbraco.Core.
            </summary>
            <seealso href="http://www.mimekit.net/docs/html/T_MailKit_Security_SecureSocketOptions.htm" />
        </member>
        <member name="F:Umbraco.Cms.Core.Configuration.Models.SecureSocketOptions.None">
            <summary>
                No SSL or TLS encryption should be used.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Configuration.Models.SecureSocketOptions.Auto">
            <summary>
                Allow the IMailService to decide which SSL or TLS options to use (default). If the server does not support SSL or
                TLS, then the connection will continue without any encryption.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Configuration.Models.SecureSocketOptions.SslOnConnect">
            <summary>
                The connection should use SSL or TLS encryption immediately.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Configuration.Models.SecureSocketOptions.StartTls">
            <summary>
                Elevates the connection to use TLS encryption immediately after reading the greeting and capabilities of the
                server. If the server does not support the STARTTLS extension, then the connection will fail and a
                NotSupportedException will be thrown.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Configuration.Models.SecureSocketOptions.StartTlsWhenAvailable">
            <summary>
                Elevates the connection to use TLS encryption immediately after reading the greeting and capabilities of the
                server, but only if the server supports the STARTTLS extension.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.SmtpSettings">
            <summary>
                Typed configuration options for SMTP settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SmtpSettings.From">
            <summary>
                Gets or sets a value for the SMTP from address to use for messages.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SmtpSettings.Host">
            <summary>
                Gets or sets a value for the SMTP host.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SmtpSettings.Port">
            <summary>
                Gets or sets a value for the SMTP port.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SmtpSettings.SecureSocketOptions">
            <summary>
                Gets or sets a value for the secure socket options.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SmtpSettings.PickupDirectoryLocation">
            <summary>
                Gets or sets a value for the SMTP pick-up directory.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SmtpSettings.DeliveryMethod">
            <summary>
                Gets or sets a value for the SMTP delivery method.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SmtpSettings.Username">
            <summary>
                Gets or sets a value for the SMTP user name.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.SmtpSettings.Password">
            <summary>
                Gets or sets a value for the SMTP password.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.TypeFinderSettings">
            <summary>
                Typed configuration options for type finder settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.TypeFinderSettings.AssembliesAcceptingLoadExceptions">
            <summary>
                Gets or sets a value for the assemblies that accept load exceptions during type finder operations.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.TypeFinderSettings.AdditionalEntryAssemblies">
            <summary>
                By default the entry assemblies for scanning plugin types is the Umbraco DLLs. If you require
                scanning for plugins based on different root referenced assemblies you can add the assembly name to this list.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.TypeFinderSettings.AdditionalAssemblyExclusionEntries">
            <summary>
                Gets or sets a value for the assemblies that will be excluded from scanning.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.UmbracoPluginSettings">
            <summary>
                Typed configuration options for the plugins.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.UmbracoPluginSettings.BrowsableFileExtensions">
            <summary>
                Gets or sets the allowed file extensions (including the period ".") that should be accessible from the browser.
            </summary>
            WB-TODO
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.UnattendedSettings">
            <summary>
                Typed configuration options for unattended settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.UnattendedSettings.InstallUnattended">
            <summary>
                Gets or sets a value indicating whether unattended installs are enabled.
            </summary>
            <remarks>
                <para>
                    By default, when a database connection string is configured and it is possible to connect to
                    the database, but the database is empty, the runtime enters the <c>Install</c> level.
                    If this option is set to <c>true</c> an unattended install will be performed and the runtime enters
                    the <c>Run</c> level.
                </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.UnattendedSettings.UpgradeUnattended">
            <summary>
                Gets or sets a value indicating whether unattended upgrades are enabled.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.UnattendedSettings.PackageMigrationsUnattended">
            <summary>
                Gets or sets a value indicating whether unattended package migrations are enabled.
            </summary>
            <remarks>
                This is true by default.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.UnattendedSettings.UnattendedUserName">
            <summary>
                Gets or sets a value to use for creating a user with a name for Unattended Installs
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.UnattendedSettings.UnattendedUserEmail">
            <summary>
                Gets or sets a value to use for creating a user with an email for Unattended Installs
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.UnattendedSettings.UnattendedUserPassword">
            <summary>
                Gets or sets a value to use for creating a user with a password for Unattended Installs
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.UserPasswordConfigurationSettings">
            <summary>
                Typed configuration options for user password settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.UserPasswordConfigurationSettings.RequiredLength">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.UserPasswordConfigurationSettings.RequireNonLetterOrDigit">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.UserPasswordConfigurationSettings.RequireDigit">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.UserPasswordConfigurationSettings.RequireLowercase">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.UserPasswordConfigurationSettings.RequireUppercase">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.UserPasswordConfigurationSettings.HashAlgorithmType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.UserPasswordConfigurationSettings.MaxFailedAccessAttemptsBeforeLockout">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.UserPasswordConfigurationSettings.MinimumResponseTime">
            <summary>
            Gets or sets the minimum response time of the forgot password request.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.Validation.ConfigurationValidatorBase">
            <summary>
                Base class for configuration validators.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Configuration.Models.Validation.ConfigurationValidatorBase.ValidateStringIsOneOfValidValues(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String@)">
            <summary>
                Validates that a string is one of a set of valid values.
            </summary>
            <param name="configPath">Configuration path from where the setting is found.</param>
            <param name="value">The value to check.</param>
            <param name="validValues">The set of valid values.</param>
            <param name="message">A message to output if the value does not match.</param>
            <returns>True if valid, false if not.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Configuration.Models.Validation.ConfigurationValidatorBase.ValidateCollection(System.String,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Configuration.Models.Validation.ValidatableEntryBase},System.String,System.String@)">
            <summary>
                Validates that a collection of objects are all valid based on their data annotations.
            </summary>
            <param name="configPath">Configuration path from where the setting is found.</param>
            <param name="values">The values to check.</param>
            <param name="validationDescription">Description of validation appended to message if validation fails.</param>
            <param name="message">A message to output if the value does not match.</param>
            <returns>True if valid, false if not.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Configuration.Models.Validation.ConfigurationValidatorBase.ValidateOptionalEntry(System.String,Umbraco.Cms.Core.Configuration.Models.Validation.ValidatableEntryBase,System.String,System.String@)">
            <summary>
                Validates a configuration entry is valid if provided.
            </summary>
            <param name="configPath">Configuration path from where the setting is found.</param>
            <param name="value">The value to check.</param>
            <param name="validationDescription">Description of validation appended to message if validation fails.</param>
            <param name="message">A message to output if the value does not match.</param>
            <returns>True if valid, false if not.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.Validation.ContentSettingsValidator">
            <summary>
                Validator for configuration representated as <see cref="T:Umbraco.Cms.Core.Configuration.Models.ContentSettings" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Configuration.Models.Validation.ContentSettingsValidator.Validate(System.String,Umbraco.Cms.Core.Configuration.Models.ContentSettings)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.Validation.GlobalSettingsValidator">
            <summary>
                Validator for configuration representated as <see cref="T:Umbraco.Cms.Core.Configuration.Models.GlobalSettings" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Configuration.Models.Validation.GlobalSettingsValidator.Validate(System.String,Umbraco.Cms.Core.Configuration.Models.GlobalSettings)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.Validation.HealthChecksSettingsValidator">
            <summary>
                Validator for configuration representated as <see cref="T:Umbraco.Cms.Core.Configuration.Models.HealthChecksSettings" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Configuration.Models.Validation.HealthChecksSettingsValidator.#ctor(Umbraco.Cms.Core.Configuration.ICronTabParser)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Configuration.Models.Validation.HealthChecksSettingsValidator" /> class.
            </summary>
            <param name="cronTabParser">Helper for parsing crontab expressions.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Configuration.Models.Validation.HealthChecksSettingsValidator.Validate(System.String,Umbraco.Cms.Core.Configuration.Models.HealthChecksSettings)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.Validation.LoggingSettingsValidator">
            <summary>
                Validator for configuration representated as <see cref="T:Umbraco.Cms.Core.Configuration.Models.LoggingSettings" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Configuration.Models.Validation.LoggingSettingsValidator.Validate(System.String,Umbraco.Cms.Core.Configuration.Models.LoggingSettings)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.Validation.RequestHandlerSettingsValidator">
            <summary>
                Validator for configuration representated as <see cref="T:Umbraco.Cms.Core.Configuration.Models.RequestHandlerSettings" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Configuration.Models.Validation.RequestHandlerSettingsValidator.Validate(System.String,Umbraco.Cms.Core.Configuration.Models.RequestHandlerSettings)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.Validation.UnattendedSettingsValidator">
            <summary>
                Validator for configuration representated as <see cref="T:Umbraco.Cms.Core.Configuration.Models.UnattendedSettings" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Configuration.Models.Validation.UnattendedSettingsValidator.Validate(System.String,Umbraco.Cms.Core.Configuration.Models.UnattendedSettings)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.Validation.ValidatableEntryBase">
            <summary>
                Provides a base class for configuration models that can be validated based on data annotations.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.WebhookSettings.Enabled">
            <summary>
                Gets or sets a value indicating whether webhooks are enabled.
            </summary>
            <remarks>
                <para>
                    By default, webhooks are enabled.
                    If this option is set to <c>false</c> webhooks will no longer send web-requests.
                </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.WebhookSettings.MaximumRetries">
            <summary>
                Gets or sets a value indicating the maximum number of retries for all webhooks.
            </summary>
            <remarks>
                <para>
                    By default, maximum number of retries is 5.
                    If this option is set to <c>0</c> webhooks will no longer retry.
                </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.WebhookSettings.Period">
            <summary>
                Gets or sets a value for the period of the webhook firing.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.WebhookSettings.EnableLoggingCleanup">
            <summary>
                Gets or sets a value indicating whether cleanup of webhook logs are enabled.
            </summary>
            <remarks>
                <para>
                    By default, cleanup is enabled.
                </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.WebhookSettings.KeepLogsForDays">
            <summary>
                Gets or sets a value indicating number of days to keep logs for.
            </summary>
            <remarks>
                <para>
                    By default, logs are kept for 30 days.
                </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.WebhookSettings.PayloadType">
            <summary>
                Gets or sets a value indicating the type of payload used for sending webhooks
            </summary>
            <remarks>
                <para>
                    By default, Legacy payloads are used see <see cref="T:Umbraco.Cms.Core.Webhooks.WebhookPayloadType"/> for more info.
                    This default will change to minimal starting from v17.
                </para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.Models.WebRoutingSettings">
            <summary>
                Typed configuration options for web routing settings.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.WebRoutingSettings.TryMatchingEndpointsForAllPages">
            <summary>
                Gets or sets a value indicating whether to check if any routed endpoints match a front-end request before
                the Umbraco dynamic router tries to map the request to an Umbraco content item.
            </summary>
            <remarks>
                This should not be necessary if the Umbraco catch-all/dynamic route is registered last like it's supposed to be. In
                that case
                ASP.NET Core will automatically handle this in all cases. This is more of a backward compatible option since this
                is what v7/v8 used
                to do.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.WebRoutingSettings.TrySkipIisCustomErrors">
            <summary>
                Gets or sets a value indicating whether IIS custom errors should be skipped.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.WebRoutingSettings.InternalRedirectPreservesTemplate">
            <summary>
                Gets or sets a value indicating whether an internal redirect should preserve the template.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.WebRoutingSettings.DisableAlternativeTemplates">
            <summary>
                Gets or sets a value indicating whether the use of alternative templates are disabled.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.WebRoutingSettings.ValidateAlternativeTemplates">
            <summary>
                Gets or sets a value indicating whether the use of alternative templates should be validated.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.WebRoutingSettings.DisableRedirectUrlTracking">
            <summary>
                Gets or sets a value indicating whether redirect URL tracking is disabled.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.WebRoutingSettings.UrlProviderMode">
            <summary>
                Gets or sets a value for the URL provider mode (<see cref="T:Umbraco.Cms.Core.Models.PublishedContent.UrlMode" />).
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.Models.WebRoutingSettings.UmbracoApplicationUrl">
            <summary>
                Gets or sets a value for the Umbraco application URL.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.ModelsMode">
            <summary>
                Defines the models generation modes.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Configuration.ModelsMode.Nothing">
            <summary>
                Do not generate strongly typed models.
            </summary>
            <remarks>
                This means that only IPublishedContent instances will be used.
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Configuration.ModelsMode.InMemoryAuto">
            <summary>
                Generate models in memory.
                When: a content type change occurs.
            </summary>
            <remarks>The app does not restart. Models are available in views exclusively.</remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Configuration.ModelsMode.SourceCodeManual">
            <summary>
                Generate models as *.cs files.
                When: generation is triggered.
            </summary>
            <remarks>
                Generation can be triggered from the dashboard. The app does not restart.
                Models are not compiled and thus are not available to the project.
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Configuration.ModelsMode.SourceCodeAuto">
            <summary>
                Generate models as *.cs files.
                When: a content type change occurs, or generation is triggered.
            </summary>
            <remarks>
                Generation can be triggered from the dashboard. The app does not restart.
                Models are not compiled and thus are not available to the project.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.UmbracoSettings.IImagingAutoFillUploadField.Alias">
            <summary>
                Allow setting internally so we can create a default
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.UmbracoVersion">
            <summary>
                Represents the version of the executing code.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.UmbracoVersion.Version">
            <summary>
                Gets the non-semantic version of the Umbraco code.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.UmbracoVersion.Comment">
            <summary>
                Gets the semantic version comments of the Umbraco code.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.UmbracoVersion.AssemblyVersion">
            <summary>
                Gets the assembly version of the Umbraco code.
            </summary>
            <remarks>
                <para>The assembly version is the value of the <see cref="T:System.Reflection.AssemblyVersionAttribute" />.</para>
                <para>
                    Is the one that the CLR checks for compatibility. Therefore, it changes only on
                    hard-breaking changes (for instance, on new major versions).
                </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.UmbracoVersion.AssemblyFileVersion">
            <summary>
                Gets the assembly file version of the Umbraco code.
            </summary>
            <remarks>
                <para>The assembly version is the value of the <see cref="T:System.Reflection.AssemblyFileVersionAttribute" />.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Configuration.UmbracoVersion.SemanticVersion">
            <summary>
                Gets the semantic version of the Umbraco code.
            </summary>
            <remarks>
                <para>The semantic version is the value of the <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute" />.</para>
                <para>It is the full version of Umbraco, including comments.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Configuration.UserPasswordConfiguration">
            <summary>
                The password configuration for back office users
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants">
            <summary>
                Defines constants.
            </summary>
            <summary>
                Defines constants.
            </summary>
            <summary>
                Defines constants.
            </summary>
            <summary>
                Defines constants.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.Applications">
            <summary>
                Defines the alias identifiers for Umbraco's core application sections.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Applications.Content">
            <summary>
                Application alias for the content section.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Applications.Packages">
            <summary>
                Application alias for the packages section.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Applications.Media">
            <summary>
                Application alias for the media section.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Applications.Members">
            <summary>
                Application alias for the members section.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Applications.Settings">
            <summary>
                Application alias for the settings section.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Applications.Translation">
            <summary>
                Application alias for the translation section.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Applications.Users">
            <summary>
                Application alias for the users section.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Applications.Forms">
            <summary>
                Application alias for the forms section.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.Trees">
            <summary>
                Defines the alias identifiers for Umbraco's core trees.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Trees.Content">
            <summary>
                alias for the content tree.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Trees.ContentBlueprints">
            <summary>
                alias for the content blueprint tree.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Trees.Members">
            <summary>
                alias for the member tree.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Trees.Media">
            <summary>
                alias for the media tree.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Trees.DataTypes">
            <summary>
                alias for the datatype tree.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Trees.Packages">
            <summary>
                alias for the packages tree
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Trees.Dictionary">
            <summary>
                alias for the dictionary tree.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Trees.DocumentTypes">
            <summary>
                alias for the document type tree.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Trees.MediaTypes">
            <summary>
                alias for the media type tree.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Trees.MemberTypes">
            <summary>
                alias for the member type tree.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Trees.MemberGroups">
            <summary>
                alias for the member group tree.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Trees.Templates">
            <summary>
                alias for the template tree.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Trees.UserTypes">
            <summary>
                alias for the user types tree.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Trees.UserPermissions">
            <summary>
                alias for the user permissions tree.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Trees.Users">
            <summary>
                alias for the users tree.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.CharArrays">
            <summary>
                Char Arrays to avoid allocations
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.CharArrays.ForwardSlash">
            <summary>
                Char array containing only /
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.CharArrays.Backslash">
            <summary>
                Char array containing only \
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.CharArrays.SingleQuote">
            <summary>
                Char array containing only '
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.CharArrays.DoubleQuote">
            <summary>
                Char array containing only "
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.CharArrays.DoubleQuoteSingleQuote">
            <summary>
                Char array containing ' "
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.CharArrays.Underscore">
            <summary>
                Char array containing only _
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.CharArrays.LineFeedCarriageReturn">
            <summary>
                Char array containing \n \r
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.CharArrays.LineFeed">
            <summary>
                Char array containing \n
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.CharArrays.Comma">
            <summary>
                Char array containing only ,
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.CharArrays.Ampersand">
            <summary>
                Char array containing only &amp;
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.CharArrays.NullTerminator">
            <summary>
                Char array containing only \0
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.CharArrays.Period">
            <summary>
                Char array containing only .
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.CharArrays.Tilde">
            <summary>
                Char array containing only ~
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.CharArrays.TildeForwardSlash">
            <summary>
                Char array containing ~ /
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.CharArrays.TildeForwardSlashBackSlash">
            <summary>
                Char array containing ~ / \
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.CharArrays.QuestionMark">
            <summary>
                Char array containing only ?
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.CharArrays.QuestionMarkAmpersand">
            <summary>
                Char array containing ? &amp;
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.CharArrays.XmlWhitespaceChars">
            <summary>
                Char array containing XML 1.1 whitespace chars
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.CharArrays.Space">
            <summary>
                Char array containing only the Space char
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.CharArrays.Semicolon">
            <summary>
                Char array containing only ;
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.CharArrays.CommaSpace">
            <summary>
                Char array containing a comma and a space
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.CharArrays.UnderscoreDash">
            <summary>
                Char array containing  _ -
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.CharArrays.EqualsChar">
            <summary>
                Char array containing =
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.CharArrays.GreaterThan">
            <summary>
                Char array containing >
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.CharArrays.VerticalTab">
            <summary>
                Char array containing |
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.Composing">
            <summary>
                Defines constants for composition.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Configuration.ConfigPrefix">
            <summary>
            Case insensitive prefix for all configurations.
            </summary>
            <remarks>
            ":" is used as marker for nested objects in JSON, e.g. <c>"Umbraco:CMS:" = {"Umbraco":{"CMS":{...}}</c>.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.Conventions">
            <summary>
                Defines the identifiers for property-type alias conventions that are used within the Umbraco core.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.Conventions.Content">
            <summary>
                Constants for Umbraco Content property aliases.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.Content.InternalRedirectId">
            <summary>
                Property alias for the Content's Url (internal) redirect.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.Content.NaviHide">
            <summary>
                Property alias for the Content's navigational hide, (not actually used in core code).
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.Content.Redirect">
            <summary>
                Property alias for the Content's Url redirect.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.Content.UrlAlias">
            <summary>
                Property alias for the Content's Url alias.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.Content.UrlName">
            <summary>
                Property alias for the Content's Url name.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.Conventions.Media">
            <summary>
                Constants for Umbraco Media property aliases.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.Media.File">
            <summary>
                Property alias for the Media's file name.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.Media.Width">
            <summary>
                Property alias for the Media's width.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.Media.Height">
            <summary>
                Property alias for the Media's height.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.Media.Bytes">
            <summary>
                Property alias for the Media's file size (in bytes).
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.Media.Extension">
            <summary>
                Property alias for the Media's file extension.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.Media.DefaultSize">
            <summary>
                The default height/width of an image file if the size can't be determined from the metadata
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.Conventions.MediaTypes">
            <summary>
                Defines the alias identifiers for Umbraco media types.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.MediaTypes.File">
            <summary>
                MediaType alias for a file.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.MediaTypes.Folder">
            <summary>
                MediaType alias for a folder.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.MediaTypes.Image">
            <summary>
                MediaType alias for an image.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.MediaTypes.Video">
            <summary>
                MediaType name for a video.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.MediaTypes.Audio">
            <summary>
                MediaType name for an audio.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.MediaTypes.Article">
            <summary>
                MediaType name for an article.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.MediaTypes.VectorGraphics">
            <summary>
                MediaType name for vector graphics.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.MediaTypes.VideoAlias">
            <summary>
                MediaType alias for a video.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.MediaTypes.AudioAlias">
            <summary>
                MediaType alias for an audio.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.MediaTypes.ArticleAlias">
            <summary>
                MediaType alias for an article.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.MediaTypes.VectorGraphicsAlias">
            <summary>
                MediaType alias for vector graphics.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.MediaTypes.AutoSelect">
            <summary>
                MediaType alias indicating allowing auto-selection.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.Conventions.Member">
            <summary>
                Constants for Umbraco Member property aliases.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.Member.Comments">
            <summary>
                Property alias for the Comments on a Member
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.Member.StandardPropertiesGroupAlias">
            <summary>
                The standard properties group alias for membership properties.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.Member.StandardPropertiesGroupName">
            <summary>
                The standard properties group name for membership properties.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.Member.InternalRolePrefix">
            <summary>
                if a role starts with __umbracoRole we won't show it as it's an internal role used for public access
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.Conventions.MemberTypes">
            <summary>
                Defines the alias identifiers for Umbraco member types.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.MemberTypes.DefaultAlias">
            <summary>
                MemberType alias for default member type.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.Conventions.Url">
            <summary>
                Constants for Umbraco URLs/Querystrings.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.Url.AltTemplate">
            <summary>
                Querystring parameter name used for Umbraco's alternative template functionality.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.Conventions.RelationTypes">
            <summary>
                Defines the alias identifiers for built-in Umbraco relation types.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.RelationTypes.RelatedMediaName">
            <summary>
                Name for default relation type "Related Media".
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.RelationTypes.RelatedMediaAlias">
            <summary>
                Alias for default relation type "Related Media".
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.RelationTypes.RelatedMemberName">
            <summary>
                Name for default relation type "Related Member".
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.RelationTypes.RelatedMemberAlias">
            <summary>
                Alias for default relation type "Related Member".
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.RelationTypes.RelatedDocumentName">
            <summary>
                Name for default relation type "Related Document".
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.RelationTypes.RelatedDocumentAlias">
            <summary>
                Alias for default relation type "Related Document".
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.RelationTypes.RelateDocumentOnCopyName">
            <summary>
                Name for default relation type "Relate Document On Copy".
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.RelationTypes.RelateDocumentOnCopyAlias">
            <summary>
                Alias for default relation type "Relate Document On Copy".
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.RelationTypes.RelateParentDocumentOnDeleteName">
            <summary>
                Name for default relation type "Relate Parent Document On Delete".
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.RelationTypes.RelateParentDocumentOnDeleteAlias">
            <summary>
                Alias for default relation type "Relate Parent Document On Delete".
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.RelationTypes.RelateParentMediaFolderOnDeleteName">
            <summary>
                Name for default relation type "Relate Parent Media Folder On Delete".
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Conventions.RelationTypes.RelateParentMediaFolderOnDeleteAlias">
            <summary>
                Alias for default relation type "Relate Parent Media Folder On Delete".
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Constants.Conventions.RelationTypes.AutomaticRelationTypes">
            <summary>
                Returns the types of relations that are automatically tracked.
            </summary>
            <remarks>
                Developers should not manually use these relation types since they will all be cleared whenever an entity
                (content, media or member) is saved since they are auto-populated based on property values.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.DataTypes.Guids">
            <summary>
                Defines the identifiers for Umbraco data types as constants for easy centralized access/management.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.ContentPicker">
            <summary>
                Guid for Content Picker as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.MemberPicker">
            <summary>
                Guid for Member Picker as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.MediaPicker3">
            <summary>
                Guid for Media Picker v3 as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.MediaPicker3Multiple">
            <summary>
                Guid for Media Picker v3 multiple as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.MediaPicker3SingleImage">
            <summary>
                Guid for Media Picker v3 single-image as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.MediaPicker3MultipleImages">
            <summary>
                Guid for Media Picker v3 multi-image as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.RelatedLinks">
            <summary>
                Guid for Related Links as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.Member">
            <summary>
                Guid for Member as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.ImageCropper">
            <summary>
                Guid for Image Cropper as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.Tags">
            <summary>
                Guid for Tags as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.ListViewContent">
            <summary>
                Guid for List View - Content as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.ListViewMedia">
            <summary>
                Guid for List View - Media as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.ListViewMembers">
            <summary>
                Guid for List View - Members as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.DatePickerWithTime">
            <summary>
                Guid for Date Picker with time as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.ApprovedColor">
            <summary>
                Guid for Approved Color as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.DropdownMultiple">
            <summary>
                Guid for Dropdown multiple as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.Radiobox">
            <summary>
                Guid for Radiobox as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.DatePicker">
            <summary>
                Guid for Date Picker as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.Dropdown">
            <summary>
                Guid for Dropdown as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.CheckboxList">
            <summary>
                Guid for Checkbox list as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.Checkbox">
            <summary>
                Guid for Checkbox as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.Numeric">
            <summary>
                Guid for Numeric as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.RichtextEditor">
            <summary>
                Guid for Richtext editor as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.Textstring">
            <summary>
                Guid for Textstring as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.Textarea">
            <summary>
                Guid for Textarea as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.Upload">
            <summary>
                Guid for Upload as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.UploadVideo">
            <summary>
                Guid for UploadVideo as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.UploadAudio">
            <summary>
                Guid for UploadAudio as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.UploadArticle">
            <summary>
                Guid for UploadArticle as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.UploadVectorGraphics">
            <summary>
                Guid for UploadVectorGraphics as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.LabelString">
            <summary>
                Guid for Label as string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.LabelInt">
            <summary>
                Guid for Label as int
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.LabelBigInt">
            <summary>
                Guid for Label as big int
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.LabelDateTime">
            <summary>
                Guid for Label as date time
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.LabelTime">
            <summary>
                Guid for Label as time
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.LabelDecimal">
            <summary>
                Guid for Label as decimal
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.ContentPickerGuid">
            <summary>
                Guid for Content Picker
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.MemberPickerGuid">
            <summary>
                Guid for Member Picker
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.MediaPicker3Guid">
            <summary>
                Guid for Media Picker v3
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.MediaPicker3MultipleGuid">
            <summary>
                Guid for Media Picker v3 multiple
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.MediaPicker3SingleImageGuid">
            <summary>
                Guid for Media Picker v3 single-image
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.MediaPicker3MultipleImagesGuid">
            <summary>
                Guid for Media Picker v3 multi-image
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.RelatedLinksGuid">
            <summary>
                Guid for Related Links
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.MemberGuid">
            <summary>
                Guid for Member
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.ImageCropperGuid">
            <summary>
                Guid for Image Cropper
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.TagsGuid">
            <summary>
                Guid for Tags
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.ListViewContentGuid">
            <summary>
                Guid for List View - Content
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.ListViewMediaGuid">
            <summary>
                Guid for List View - Media
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.DatePickerWithTimeGuid">
            <summary>
                Guid for Date Picker with time
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.ApprovedColorGuid">
            <summary>
                Guid for Approved Color
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.DropdownMultipleGuid">
            <summary>
                Guid for Dropdown multiple
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.RadioboxGuid">
            <summary>
                Guid for Radiobox
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.DatePickerGuid">
            <summary>
                Guid for Date Picker
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.DropdownGuid">
            <summary>
                Guid for Dropdown
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.CheckboxListGuid">
            <summary>
                Guid for Checkbox list
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.CheckboxGuid">
            <summary>
                Guid for Checkbox
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.NumericGuid">
            <summary>
                Guid for Dropdown
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.RichtextEditorGuid">
            <summary>
                Guid for Richtext editor
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.TextstringGuid">
            <summary>
                Guid for Textstring
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.TextareaGuid">
            <summary>
                Guid for Dropdown
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.UploadGuid">
            <summary>
                Guid for Upload
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.UploadVideoGuid">
            <summary>
                Guid for UploadVideo
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.UploadAudioGuid">
            <summary>
                Guid for UploadAudio
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.UploadArticleGuid">
            <summary>
                Guid for UploadArticle
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.UploadVectorGraphicsGuid">
            <summary>
                Guid for UploadVectorGraphics
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.LabelStringGuid">
            <summary>
                Guid for Label string
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.LabelIntGuid">
            <summary>
                Guid for Label int
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.LabelBigIntGuid">
            <summary>
                Guid for Label big int
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.LabelDateTimeGuid">
            <summary>
                Guid for Label date time
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.LabelTimeGuid">
            <summary>
                Guid for Label time
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DataTypes.Guids.LabelDecimalGuid">
            <summary>
                Guid for Label decimal
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.DeliveryApi">
            <summary>
                Defines constants for the Delivery API.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.DeliveryApi.Routing">
            <summary>
                Constants for Delivery API routing purposes.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DeliveryApi.Routing.PreviewContentPathPrefix">
            <summary>
                Path prefix for unpublished content requested in a preview context.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.DeliveryApi.OutputCache">
            <summary>
                Constants for Delivery API output cache.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DeliveryApi.OutputCache.ContentCachePolicy">
            <summary>
                Output cache policy name for content
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.DeliveryApi.OutputCache.MediaCachePolicy">
            <summary>
                Output cache policy name for media
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.DeploySelector">
            <summary>
                Contains the valid selector values.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Headers.Location">
            <summary>
                Location header name.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Headers.GeneratedResource">
            <summary>
                Generated resource identifier header name.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Headers.Notifications">
            <summary>
                Response notifications header name.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.HealthChecks">
            <summary>
                Defines constants for ModelsBuilder.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.HttpClients">
            <summary>
                Defines constants for named http clients.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.HttpClients.IgnoreCertificateErrors">
            <summary>
                Name for http client which ignores certificate errors.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.HttpClients.WebhookFiring">
            <summary>
                Name for http client which sends webhook requests.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.HttpClients.Headers.UserAgentProductName">
            <summary>
                User agent name for the product name.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.HttpContext.Items">
            <summary>
                Defines keys for items stored in HttpContext.Items
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.HttpContext.Items.RequestBodyAsJObject">
            <summary>
                Key for current requests body deserialized as JObject.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.DefaultIcon">
            <summary>
                System default icon.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.Blueprint">
            <summary>
                System blueprint icon
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.Content">
            <summary>
                System content icon.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.ContentType">
            <summary>
                System content type icon.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.DataType">
            <summary>
                System data type icon.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.Dictionary">
            <summary>
                System dictionary icon.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.Folder">
            <summary>
                System generic folder icon.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.Language">
            <summary>
                System language icon.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.LogViewer">
            <summary>
                System logviewer icon.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.ListView">
            <summary>
                System list view icon
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.MediaFile">
            <summary>
                System media file icon.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.MediaVideo">
            <summary>
                System media video icon
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.MediaAudio">
            <summary>
                System media audio icon.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.MediaArticle">
            <summary>
                System media article icon
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.MediaVectorGraphics">
            <summary>
                System media vector icon.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.MediaFolder">
            <summary>
                System media folder icon.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.MediaImage">
            <summary>
                System media image icon
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.MediaType">
            <summary>
                System media type icon.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.Member">
            <summary>
                System member icon.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.MemberGroup">
            <summary>
                System member group icon.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.MemberType">
            <summary>
                System member type icon
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.Package">
            <summary>
                System package icon.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.PartialView">
            <summary>
                System property editor icon
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.PropertyEditor">
            <summary>
                System property editor icon.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.RelationType">
            <summary>
                Relation type icon.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.Script">
            <summary>
                Script type icon.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.Stylesheet">
            <summary>
                Stylesheet type icon.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.Template">
            <summary>
                System member icon.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.User">
            <summary>
                System user icon.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.UserGroup">
            <summary>
                System user group icon.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Icons.Webhook">
            <summary>
                Webhook icon.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.JsonOptionsNames.BackOffice">
            <summary>
            Name used for JsonOptions
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.Marketplace">
            <summary>
            Defines the constants used for the Umbraco Marketplace.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.ModelsBuilder">
            <summary>
                Defines constants for ModelsBuilder.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.OAuthClaims.MemberKey">
            <summary>
                Key for authenticated member.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.OAuthClaims.MemberRoles">
            <summary>
                Roles for authenticated member.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.OAuthClientIds.BackOffice">
            <summary>
                Client ID used for default back-office access.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.OAuthClientIds.Swagger">
            <summary>
                Client ID used for Swagger API access.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.OAuthClientIds.Postman">
            <summary>
                Client ID used for Postman API access.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.OAuthClientIds.Member">
            <summary>
                Client ID used for member access.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.ObjectTypes">
            <summary>
                Defines the Umbraco object type unique identifiers.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.ObjectTypes.Strings">
            <summary>
                Defines the Umbraco object type unique identifiers as string.
            </summary>
            <remarks>
                Should be used only when it's not possible to use the corresponding
                readonly Guid value, e.g. in attributes (where only consts can be used).
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.PropertyEditors">
            <summary>
                Defines property editors constants.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.InternalGenericPropertiesPrefix">
            <summary>
                Used to prefix generic properties that are internal content properties
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases">
            <summary>
                Defines Umbraco built-in property editor aliases.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.BlockList">
            <summary>
                Block List.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.BlockGrid">
            <summary>
            Block Grid.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.CheckBoxList">
            <summary>
                CheckBox List.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.ColorPicker">
            <summary>
                Color Picker.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.ColorPickerEyeDropper">
            <summary>
                Eye Dropper Color Picker.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.ContentPicker">
            <summary>
                Content Picker.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.DateTime">
            <summary>
                DateTime.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.DropDownListFlexible">
            <summary>
                DropDown List.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.Grid">
            <summary>
                Grid.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.ImageCropper">
            <summary>
                Image Cropper.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.Integer">
            <summary>
                Integer.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.Decimal">
            <summary>
                Decimal.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.ListView">
            <summary>
                ListView.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.MediaPicker3">
            <summary>
                Media Picker v.3.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.MultipleMediaPicker">
            <summary>
                Multiple Media Picker.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.MemberPicker">
            <summary>
                Member Picker.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.MemberGroupPicker">
            <summary>
                Member Group Picker.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.MultiNodeTreePicker">
            <summary>
                MultiNode Tree Picker.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.MultipleTextstring">
            <summary>
                Multiple TextString.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.Label">
            <summary>
                Label.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.PickerRelations">
            <summary>
                Picker Relations.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.RadioButtonList">
            <summary>
                RadioButton list.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.Slider">
            <summary>
                Slider.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.Tags">
            <summary>
                Tags.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.TextBox">
            <summary>
                Textbox.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.TextArea">
            <summary>
                Textbox Multiple.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.RichText">
            <summary>
                Rich Text Editor.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.Boolean">
            <summary>
                Boolean.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.MarkdownEditor">
            <summary>
                Markdown Editor.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.UserPicker">
            <summary>
                User Picker.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.UploadField">
            <summary>
                Upload Field.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.EmailAddress">
            <summary>
                Email Address.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.NestedContent">
            <summary>
                Nested Content.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.MultiUrlPicker">
            <summary>
                Alias for the multi URL picker editor.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.PlainString">
            <summary>
                Configuration-less string.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.PlainJson">
            <summary>
                Configuration-less JSON.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.PlainDecimal">
            <summary>
                Configuration-less decimal.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.PlainInteger">
            <summary>
                Configuration-less integer.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.PlainDateTime">
            <summary>
                Configuration-less date/time.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.Aliases.PlainTime">
            <summary>
                Configuration-less time.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.PropertyEditors.ConfigurationKeys">
            <summary>
                Defines Umbraco build-in datatype configuration keys.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyEditors.ConfigurationKeys.DataValueType">
            <summary>
                The value type of property data (i.e., string, integer, etc)
            </summary>
            <remarks>Must be a valid <see cref="T:Umbraco.Cms.Core.PropertyEditors.ValueTypes" /> value.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.PropertyEditors.Groups">
            <summary>
                Defines Umbraco's built-in property editor groups.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.PropertyTypeGroups">
            <summary>
                Defines the identifiers for property-type groups conventions that are used within the Umbraco core.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyTypeGroups.Image">
            <summary>
                Guid for an Image PropertyTypeGroup object.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyTypeGroups.File">
            <summary>
                Guid for a File PropertyTypeGroup object.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyTypeGroups.Video">
            <summary>
                Guid for a Video PropertyTypeGroup object.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyTypeGroups.Audio">
            <summary>
                Guid for an Audio PropertyTypeGroup object.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyTypeGroups.Article">
            <summary>
                Guid for an Article PropertyTypeGroup object.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyTypeGroups.VectorGraphics">
            <summary>
                Guid for a VectorGraphics PropertyTypeGroup object.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.PropertyTypeGroups.Membership">
            <summary>
                Guid for a Membership PropertyTypeGroup object.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.ReferenceType">
            <summary>
                Defines reference types.
            </summary>
            <remarks>
                Reference types are used to identify the type of entity that is being referenced when exposing references
                between Umbraco entities.
                These are used in the management API and backoffice to indicate and warn editors when working with an entity,
                as to what other entities depend on it.
                These consist of references managed by Umbraco relations (e.g. document, media and member).
                But also references that come from schema (e.g. data type usage on content types).
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Security.SuperUserId">
            <summary>
                Gets the identifier of the 'super' user.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Security.SuperUserKey">
            <summary>
            Gets the unique key of the 'super' user.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Security.UnknownUserId">
            <summary>
                The id for the 'unknown' user.
            </summary>
            <remarks>
                This is a user row that exists in the DB only for referential integrity but the user is never returned from any of
                the services
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Security.UnknownUserName">
            <summary>
                The name of the 'unknown' user.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Security.AdminGroupKey">
            <summary>
            The key of the admin group
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Security.EditorGroupKey">
            <summary>
            The key of the editor group
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Security.SensitiveDataGroupKey">
            <summary>
            The key of the sensitive data group
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Security.TranslatorGroupKey">
            <summary>
            The key of the translator group
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Security.WriterGroupKey">
            <summary>
            The key of the writer group
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Security.BackOfficeExternalAuthenticationTypePrefix">
            <summary>
                The prefix used for external identity providers for their authentication type
            </summary>
            <remarks>
                By default we don't want to interfere with front-end external providers and their default setup, for back office
                the
                providers need to be setup differently and each auth type for the back office will be prefixed with this value
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Security.SecurityStampClaimType">
            <summary>
                The claim type for the ASP.NET Identity security stamp
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Security.OpenIdDictSubClaimType">
            <summary>
                The claim type for the mandatory OpenIdDict sub claim
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Sql.MaxParameterCount">
            <summary>
                The maximum amount of parameters that can be used in a query.
            </summary>
            <remarks>
                The actual limit is 2100
                (https://docs.microsoft.com/en-us/sql/sql-server/maximum-capacity-specifications-for-sql-server),
                but we want to ensure there's room for additional parameters if this value is used to create groups/batches.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.System">
            <summary>
            Defines the Umbraco system constants.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.System.Root">
            <summary>
            The integer identifier for global system root node.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.System.RootString">
            <summary>
            The string identifier for global system root node.
            </summary>
            <remarks>
            Use this instead of re-creating the string everywhere.
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.System.RootKey">
            <summary>
            The GUID identifier for global system root node.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.System.RecycleBinContent">
            <summary>
            The integer identifier for content's recycle bin.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.System.RecycleBinContentString">
            <summary>
            The string identifier for content's recycle bin.
            </summary>
            <remarks>
            Use this instead of re-creating the string everywhere.
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.System.RecycleBinContentKey">
            <summary>
            The GUID identifier for content's recycle bin.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.System.RecycleBinContentPathPrefix">
            <summary>
            The string path prefix of the content's recycle bin.
            </summary>
            <remarks>
            <para>Everything that is in the content recycle bin, has a path that starts with the prefix.</para>
            <para>Use this instead of re-creating the string everywhere.</para>
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.System.RecycleBinMedia">
            <summary>
            The integer identifier for media's recycle bin.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.System.RecycleBinMediaString">
            <summary>
            The string identifier for media's recycle bin.
            </summary>
            <remarks>
            Use this instead of re-creating the string everywhere.
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.System.RecycleBinMediaKey">
            <summary>
            The GUID identifier for media's recycle bin.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.System.RecycleBinMediaPathPrefix">
            <summary>
            The string path prefix of the media's recycle bin.
            </summary>
            <remarks>
            <para>Everything that is in the media recycle bin, has a path that starts with the prefix.</para>
            <para>Use this instead of re-creating the string everywhere.</para>
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.System.DefaultLabelDataTypeId">
            <summary>
            The default label data type identifier.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.System.UmbracoDefaultDatabaseName">
            <summary>
            The default Umbraco database name.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.System.UmbracoConnectionName">
            <summary>
            The Umbraco connection name.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.System.UmbracoPathSegment">
            <summary>
            The Umbraco path segment.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.System.DefaultUmbracoPath">
            <summary>
            The default Umbraco virtual path.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.System.DataDirectoryName">
            <summary>
            The application domain data name for <c>DataDirectory</c>.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.System.DataDirectoryPlaceholder">
            <summary>
            The <c>DataDirectory</c> placeholder used to resolve paths in connection strings.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.SystemDirectories.Bin">
            <summary>
                The aspnet bin folder
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.SystemDirectories.Umbraco">
            <summary>
                The Umbraco folder that exists at the content root.
            </summary>
            <remarks>
                This is not the same as the Umbraco web folder which is configurable for serving front-end files.
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.SystemDirectories.Data">
            <summary>
                The Umbraco data folder in the content root.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.SystemDirectories.Licenses">
            <summary>
                The Umbraco licenses folder in the content root.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.SystemDirectories.TempData">
            <summary>
                The Umbraco temp data folder in the content root.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.SystemDirectories.LogFiles">
            <summary>
                The default folder where Umbraco log files are stored
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.UdiEntityType">
            <summary>
                Defines well-known entity types.
            </summary>
            <remarks>
                Well-known entity types are those that Deploy already knows about,
                but entity types are strings and so can be extended beyond what is defined here.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.Web">
            <summary>
                Defines the identifiers for Umbraco system nodes.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Web.PreviewCookieName">
            <summary>
                The preview cookie name
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Web.AcceptPreviewCookieName">
            <summary>
                Client-side cookie that determines whether the user has accepted to be in Preview Mode when visiting the website.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Web.CsrfValidationCookieName">
            <summary>
                The cookie name that is used to store the validation value
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Web.NoContentRouteName">
            <summary>
                The route name of the page shown when Umbraco has no published content.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Web.TwoFactorRememberBrowserCookie">
            <summary>
                The default authentication type used for remembering that 2FA is not needed on next login
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Web.CacheBusterToken">
            <summary>
                The token used to replace the cache buster hash in web assets.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Web.ManagementApiPath">
            <summary>
                The "base" path to the Management API
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.HeaderNames.EventName">
            <summary>
            Gets the <c>Umb-Webhook-Event</c> HTTP header name.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.HeaderNames.RetryCount">
            <summary>
            Gets the <c>Umb-Webhook-RetryCount</c> HTTP header name.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.ContentDeletedVersions">
            <summary>
            Webhook event alias for content versions deleted.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.ContentSavedBlueprint">
            <summary>
            Webhook event alias for content blueprint saved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.ContentDeletedBlueprint">
            <summary>
            Webhook event alias for content blueprint deleted.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.ContentMovedToRecycleBin">
            <summary>
            Webhook event alias for content moved into the recycle bin.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.ContentSorted">
            <summary>
            Webhook event alias for content sorted.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.ContentMoved">
            <summary>
            Webhook event alias for content moved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.ContentCopied">
            <summary>
            Webhook event alias for content copied.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.ContentEmptiedRecycleBin">
            <summary>
            Webhook event alias for content emptied recycle bin.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.ContentRolledBack">
            <summary>
            Webhook event alias for content rolled back.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.ContentSaved">
            <summary>
            Webhook event alias for content saved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.ContentPublish">
            <summary>
            Webhook event alias for content publish.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.ContentDelete">
            <summary>
            Webhook event alias for content delete.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.ContentUnpublish">
            <summary>
            Webhook event alias for content unpublish.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.MediaDelete">
            <summary>
            Webhook event alias for media delete.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.MediaSave">
            <summary>
            Webhook event alias for media save.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.DocumentTypeChanged">
            <summary>
                Webhook event alias for document type changed.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.DocumentTypeDeleted">
            <summary>
                Webhook event alias for document type deleted.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.DocumentTypeMoved">
            <summary>
                Webhook event alias for document type moved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.DocumentTypeSaved">
            <summary>
                Webhook event alias for document type saved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.MediaTypeChanged">
            <summary>
                Webhook event alias for media type changed.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.MediaTypeDeleted">
            <summary>
                Webhook event alias for media type deleted.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.MediaTypeMoved">
            <summary>
                Webhook event alias for media type moved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.MediaTypeSaved">
            <summary>
                Webhook event alias for media type saved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.MemberTypeChanged">
            <summary>
                Webhook event alias for member type changed.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.MemberTypeDeleted">
            <summary>
                Webhook event alias for member type deleted.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.MemberTypeMoved">
            <summary>
                Webhook event alias for member type moved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.MemberTypeSaved">
            <summary>
                Webhook event alias for member type saved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.DataTypeDeleted">
            <summary>
                Webhook event alias for data type deleted.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.DataTypeMoved">
            <summary>
                Webhook event alias for data type moved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.DataTypeSaved">
            <summary>
                Webhook event alias for data type saved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.DictionaryItemDeleted">
            <summary>
                Webhook event alias for dictionary item deleted.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.DictionaryItemSaved">
            <summary>
                Webhook event alias for dictionary item saved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.DomainDeleted">
            <summary>
                Webhook event alias for domain deleted.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.DomainSaved">
            <summary>
                Webhook event alias for domain saved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.PartialViewDeleted">
            <summary>
                Webhook event alias for partial view deleted.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.PartialViewSaved">
            <summary>
                Webhook event alias for partial view saved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.ScriptDeleted">
            <summary>
                Webhook event alias for script deleted.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.ScriptSaved">
            <summary>
                Webhook event alias for script saved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.StylesheetDeleted">
            <summary>
                Webhook event alias for stylesheet deleted.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.StylesheetSaved">
            <summary>
                Webhook event alias for stylesheet saved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.TemplateDeleted">
            <summary>
                Webhook event alias for template deleted.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.TemplateSaved">
            <summary>
                Webhook event alias for template saved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.HealthCheckCompleted">
            <summary>
                Webhook event alias for health check completed.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.LanguageDeleted">
            <summary>
                Webhook event alias for language deleted.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.LanguageSaved">
            <summary>
                Webhook event alias for language saved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.MediaEmptiedRecycleBin">
            <summary>
                Webhook event alias for media emptied recycle bin.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.MediaMovedToRecycleBin">
            <summary>
                Webhook event alias for media moved to recycle bin.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.MediaMoved">
            <summary>
                Webhook event alias for media moved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.AssignedMemberRoles">
            <summary>
                Webhook event alias for assigned member roles.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.ExportedMember">
            <summary>
                Webhook event alias for exported member.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.MemberDeleted">
            <summary>
                Webhook event alias for member deleted.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.MemberGroupDeleted">
            <summary>
                Webhook event alias for member group deleted.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.MemberGroupSaved">
            <summary>
                Webhook event alias for member group saved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.MemberSaved">
            <summary>
                Webhook event alias for member saved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.RemovedMemberRoles">
            <summary>
                Webhook event alias for removed member roles.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.PackageImported">
            <summary>
                Webhook event alias for package imported.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.PublicAccessEntryDeleted">
            <summary>
                Webhook event alias for public access entry deleted.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.PublicAccessEntrySaved">
            <summary>
                Webhook event alias for public access entry saved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.RelationDeleted">
            <summary>
                Webhook event alias for relation deleted.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.RelationSaved">
            <summary>
                Webhook event alias for relation saved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.RelationTypeDeleted">
            <summary>
                Webhook event alias for relation type deleted.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.RelationTypeSaved">
            <summary>
                Webhook event alias for relation type saved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.AssignedUserGroupPermissions">
            <summary>
               Webhook event alias for assigned user group permissions;
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.UserDeleted">
            <summary>
                Webhook event alias for user deleted.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.UserForgotPasswordRequested">
            <summary>
                Webhook event alias for user forgot password requested.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.UserGroupDeleted">
            <summary>
                Webhook event alias for user group deleted.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.UserGroupSaved">
            <summary>
                Webhook event alias for user group saved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.UserLocked">
            <summary>
                Webhook event alias for user locked.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.UserLoginFailed">
            <summary>
                Webhook event alias for user login failed.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.UserLoginRequiresVerification">
            <summary>
                Webhook event alias for user login requires verification.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.UserLoginSuccess">
            <summary>
                Webhook event alias for user login success.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.UserLogoutSuccess">
            <summary>
                Webhook event alias for user logout success.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.UserPasswordChanged">
            <summary>
                Webhook event alias for user password changed.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.UserPasswordReset">
            <summary>
                Webhook event alias for user password reset.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.UserSaved">
            <summary>
                Webhook event alias for user saved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.UserTwoFactorRequested">
            <summary>
                Webhook event alias for user two factor requested.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Aliases.UserUnlocked">
            <summary>
                Webhook event alias for user unlocked.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Types.Content">
            <summary>
            Webhook event type for content.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Types.Media">
            <summary>
            Webhook event type for content media.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Types.Member">
            <summary>
            Webhook event type for content member.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.WebhookEvents.Types.Other">
            <summary>
            Webhook event type for others, this is the default category if you have not chosen one.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Webhooks.DefaultPayloadType">
            <summary>
            Gets the default webhook payload type.
            </summary>
            <remarks>
            Currently, the default payload type is <see cref="F:Umbraco.Cms.Core.Webhooks.WebhookPayloadType.Legacy"/> for backward compatibility until Umbraco 17.
            From Umbraco 17 this will be changed to <see cref="F:Umbraco.Cms.Core.Webhooks.WebhookPayloadType.Minimal"/>.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Constants.Locks">
            <summary>
                Defines lock objects.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Locks.MainDom">
            <summary>
                The <see cref="T:Umbraco.Cms.Core.Runtime.IMainDom" /> lock
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Locks.Servers">
            <summary>
                All servers.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Locks.ContentTypes">
            <summary>
                All content and media types.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Locks.ContentTree">
            <summary>
                The entire content tree, i.e. all content items.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Locks.MediaTree">
            <summary>
                The entire media tree, i.e. all media items.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Locks.MemberTree">
            <summary>
                The entire member tree, i.e. all members.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Locks.MediaTypes">
            <summary>
                All media types.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Locks.MemberTypes">
            <summary>
                All member types.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Locks.Domains">
            <summary>
                All domains.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Locks.KeyValues">
            <summary>
                All key-values.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Locks.Languages">
            <summary>
                All languages.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Locks.ScheduledPublishing">
            <summary>
                ScheduledPublishing job.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Locks.WebhookRequest">
            <summary>
               All Webhook requests.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Constants.Locks.WebhookLogs">
            <summary>
                All webhook logs.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.CustomBooleanTypeConverter">
            <summary>
                Allows for converting string representations of 0 and 1 to boolean
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.DelegateEqualityComparer`1">
            <summary>
                A custom equality comparer that excepts a delegate to do the comparison operation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.DelegateEqualityComparer`1.Equals(`0,`0)">
            <summary>
                Determines whether the specified objects are equal.
            </summary>
            <returns>
                true if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object of type <typeparamref name="T"/> to compare.</param>
            <param name="y">The second object of type <typeparamref name="T"/> to compare.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.DelegateEqualityComparer`1.GetHashCode(`0)">
            <summary>
                Returns a hash code for the specified object.
            </summary>
            <returns>
                A hash code for the specified object.
            </returns>
            <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
            <exception cref="T:System.ArgumentNullException">
                The type of <paramref name="obj" /> is a reference type and
                <paramref name="obj" /> is null.
            </exception>
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.IApiAccessService.HasPublicAccess">
            <summary>
                Retrieves information on whether or not the API currently allows public access.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.IApiAccessService.HasPreviewAccess">
            <summary>
                Retrieves information on whether or not the API currently allows preview access.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.IApiAccessService.HasMediaAccess">
            <summary>
                Retrieves information on whether or not the API currently allows access to media.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.DeliveryApi.IApiContentQueryProvider">
            <summary>
                Concrete implementation of content querying (e.g. based on Examine)
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.IApiContentQueryProvider.ExecuteQuery(Umbraco.Cms.Core.DeliveryApi.SelectorOption,System.Collections.Generic.IList{Umbraco.Cms.Core.DeliveryApi.FilterOption},System.Collections.Generic.IList{Umbraco.Cms.Core.DeliveryApi.SortOption},System.String,Umbraco.Cms.Core.Models.DeliveryApi.ProtectedAccess,System.Boolean,System.Int32,System.Int32)">
            <summary>
                Returns a page of item ids that passed the search criteria.
            </summary>
            <param name="selectorOption">The selector option of the search criteria.</param>
            <param name="filterOptions">The filter options of the search criteria.</param>
            <param name="sortOptions">The sorting options of the search criteria.</param>
            <param name="culture">The requested culture.</param>
            <param name="preview">Whether or not to search for preview content.</param>
            <param name="protectedAccess">Defines the limitations for querying protected content.</param>
            <param name="skip">Number of search results to skip (for pagination).</param>
            <param name="take">Number of search results to retrieve (for pagination).</param>
            <returns>A paged model containing the resulting IDs and the total number of results that matching the search criteria.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.IApiContentQueryProvider.AllContentSelectorOption">
            <summary>
                Returns a selector option that can be applied to fetch "all content" (i.e. if a selector option is not present when performing a search).
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.DeliveryApi.IApiContentQueryService">
            <summary>
                Service that handles querying of the Delivery API.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.IApiContentQueryService.ExecuteQuery(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Umbraco.Cms.Core.Models.DeliveryApi.ProtectedAccess,System.Int32,System.Int32)">
            <summary>
                Returns an attempt with a collection of item ids that passed the search criteria as a paged model.
            </summary>
            <param name="fetch">Optional fetch query parameter value.</param>
            <param name="filters">Optional filter query parameters values.</param>
            <param name="sorts">Optional sort query parameters values.</param>
            <param name="skip">The amount of items to skip.</param>
            <param name="take">The amount of items to take.</param>
            <param name="protectedAccess">Defines the limitations for querying protected content.</param>
            <returns>A paged model of item ids that are returned after applying the search queries in an attempt.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.DeliveryApi.IApiMediaQueryService">
            <summary>
                Service that handles querying of the Media APIs.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.IApiMediaQueryService.ExecuteQuery(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32)">
            <summary>
                Returns an attempt with a collection of media ids that passed the search criteria as a paged model.
            </summary>
            <param name="fetch">Optional fetch query parameter value.</param>
            <param name="filters">Optional filter query parameters values.</param>
            <param name="sorts">Optional sort query parameters values.</param>
            <param name="skip">The amount of items to skip.</param>
            <param name="take">The amount of items to take.</param>
            <returns>A paged model of media ids that are returned after applying the search queries in an attempt.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.IApiMediaQueryService.GetByPath(System.String)">
            <summary>
                Returns the media item that matches the supplied path (if any).
            </summary>
            <param name="path">The path to look up.</param>
            <returns>The media item at <see cref="!:path"/>, or null if it does not exist.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.DeliveryApi.IContentIndexHandler">
            <summary>
                A handler that appends field values to the Delivery API content index.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.IContentIndexHandler.GetFieldValues(Umbraco.Cms.Core.Models.IContent,System.String)">
            <summary>
                Calculates the field values for a given content item.
            </summary>
            <param name="content">The content item.</param>
            <param name="culture">The culture to retrieve the field values for (null if the content does not vary by culture).</param>
            <returns>The values to add to the index.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.IContentIndexHandler.GetFields">
            <summary>
                Returns the field definitions required to support the field values in the index.
            </summary>
            <returns>The field definitions.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.ICurrentMemberClaimsProvider.GetClaimsAsync">
            <summary>
            Retrieves the claims for the currently logged in member.
            </summary>
            <remarks>
            This is used by the OIDC user info endpoint to supply "current user" info.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.DeliveryApi.IFilterHandler">
            <summary>
                A handler that handles filter query parameters.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.IFilterHandler.BuildFilterOption(System.String)">
            <summary>
                Builds a <see cref="T:Umbraco.Cms.Core.DeliveryApi.FilterOption"/> for the filter query.
            </summary>
            <param name="filter">The filter query (i.e. "contentType:article").</param>
            <returns>A <see cref="T:Umbraco.Cms.Core.DeliveryApi.FilterOption"/> that can be used when building specific filter queries.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.IncludeInApiVersionAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.DeliveryApi.IncludeInApiVersionAttribute"/> class.
                Specifies that the property should be included in the API response if the API version falls within the specified bounds.
            </summary>
            <param name="minVersion">The minimum API version (inclusive) for which the property should be included.</param>
            <param name="maxVersion">The maximum API version (inclusive) for which the property should be included.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.IQueryHandler.CanHandle(System.String)">
            <summary>
                Determines whether this query handler can handle the given query.
            </summary>
            <param name="query">The query string to check (i.e. "children:articles", "contentType:article", "name:asc", ...).</param>
            <returns>True if this query handler can handle the given query; otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.IRequestCultureService.GetRequestedCulture">
            <summary>
                Gets the requested culture from the "Accept-Language" header, if present.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.IRequestPreviewService.IsPreview">
            <summary>
                Retrieves information on whether or not to output draft content for preview.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.IRequestRedirectService.GetRedirectRoute(System.String)">
            <summary>
                Retrieves the redirect URL (if any) for a requested content path
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.IRequestRoutingService.GetContentRoute(System.String)">
            <summary>
                Retrieves the actual route for content in the content cache from a requested content path
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.IRequestSegmmentService.GetRequestedSegment">
            <summary>
                Gets the requested segment from the "Accept-Segment" header, if present.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.IRequestStartItemProvider.GetStartItem">
            <summary>
                Gets the requested start item, if present.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.IRequestStartItemProvider.RequestedStartItem">
            <summary>
                Gets the value of the requested start item, if present.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.DeliveryApi.ISelectorHandler">
            <summary>
                A handler that handles fetch query parameter.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.ISelectorHandler.BuildSelectorOption(System.String)">
            <summary>
                Builds a <see cref="T:Umbraco.Cms.Core.DeliveryApi.SelectorOption"/> for the selector query.
            </summary>
            <param name="selector">The selector query (i.e. "children:articles").</param>
            <returns>A <see cref="T:Umbraco.Cms.Core.DeliveryApi.SelectorOption"/> that can be used when building specific search query for requesting a subset of the items.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.DeliveryApi.ISortHandler">
            <summary>
                A handler that handles sort query parameters.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.ISortHandler.BuildSortOption(System.String)">
            <summary>
                Builds a <see cref="T:Umbraco.Cms.Core.DeliveryApi.SortOption"/> for the sort query.
            </summary>
            <param name="sort">The sort query (i.e. "name:asc").</param>
            <returns>A <see cref="T:Umbraco.Cms.Core.DeliveryApi.SortOption"/> that can be used when building specific sorting queries.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.NoopApiAccessService.HasPublicAccess">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.NoopApiAccessService.HasPreviewAccess">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.NoopApiContentQueryService.ExecuteQuery(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Umbraco.Cms.Core.Models.DeliveryApi.ProtectedAccess,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.NoopApiMediaQueryService.ExecuteQuery(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.NoopApiMediaQueryService.GetByPath(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.NoopRequestCultureService.GetRequestedCulture">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.NoopRequestCultureService.SetRequestCulture(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.NoopRequestPreviewService.IsPreview">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.NoopRequestRedirectService.GetRedirectRoute(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.NoopRequestRoutingService.GetContentRoute(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.NoopRequestStartItemProvider.GetStartItem">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.DeliveryApi.NoopRequestStartItemProvider.RequestedStartItem">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.DependencyInjection.IScopedServiceProvider">
            <summary>
                Provides access to a request scoped service provider when available for cases where
                IHttpContextAccessor is not available. e.g. No reference to AspNetCore.Http in core.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.DependencyInjection.IScopedServiceProvider.ServiceProvider">
            <summary>
                Gets a request scoped service provider when available.
            </summary>
            <remarks>
                Can be null.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder.BuilderLoggerFactory">
            <summary>
                A Logger factory created specifically for the <see cref="T:Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder" />. This is NOT the same
                instance that will be resolved from DI. Use only if required during configuration.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.DependencyInjection.StaticServiceProvider">
            <summary>
                Service locator for internal (umbraco cms) only purposes. Should only be used if no other ways exist.
            </summary>
            <remarks>
                It is created with only two goals in mind
                1) Continue to have the same extension methods on IPublishedContent and IPublishedElement as in V8. To make
                migration easier.
                2) To have a tool to avoid breaking changes in minor and patch versions. All methods using this should in theory be
                obsolete.
                Keep in mind, every time this is used, the code becomes basically untestable.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.DependencyInjection.StaticServiceProvider.Instance">
            <summary>
                The service locator.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions">
            <summary>
            Contains extensions methods for <see cref="T:Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder" />.
            </summary>
            <summary>
            Extension methods for <see cref="T:Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder"/>
            </summary>
            <summary>
                Extension methods for <see cref="T:Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder" />
            </summary>
            <summary>
            Extension methods for <see cref="T:Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder" />
            </summary>
            <summary>
                Contains extensions methods for <see cref="T:Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder" /> used for registering event handlers.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.AddComponent``1(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Register a component.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.AddContentFinder``1(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Register a content finder.
            </summary>
            <typeparam name="T">The type of the content finder.</typeparam>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.AddMediaUrlProvider``1(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Register a media URL provider.
            </summary>
            <typeparam name="T">The type of the media URL provider.</typeparam>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.AddEmbedProvider``1(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Register a embed provider.
            </summary>
            <typeparam name="T">The type of the embed provider.</typeparam>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.AddUrlProvider``1(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Register a URL provider.
            </summary>
            <typeparam name="T">The type of the URL provider.</typeparam>
            <param name="builder">The Builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.AddMapDefinition``1(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Add a map definition.
            </summary>
            <typeparam name="T">The type of map definition.</typeparam>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.AddWebhookEvent``1(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Add a webhook event.
            </summary>
            <typeparam name="T">The type of webhook event.</typeparam>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.AddDynamicRootStep``1(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Add an IDynamicRootQueryStep to the DynamicRootQueryStepCollectionBuilder.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.AddAllCoreCollectionBuilders(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Adds all core collection builders
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.Actions(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Gets the actions collection builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.ContentFinders(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Gets the content finders collection builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.EditorValidators(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Gets the editor validators collection builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.HealthChecks(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Gets the health checks collection builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.UrlProviders(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Gets the URL providers collection builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.MediaUrlProviders(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Gets the media url providers collection builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.WebhookEvents(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Gets the backoffice sections/applications collection builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.Components(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Gets the components collection builder.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.PartialViewSnippets(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Gets the partial view snippets collection builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.CacheRefreshers(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Gets the cache refreshers collection builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.MapDefinitions(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Gets the map definitions collection builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.DataEditors(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Gets the data editor collection builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.DataValueReferenceFactories(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Gets the data value reference factory collection builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.PropertyValueConverters(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Gets the property value converters collection builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.UrlSegmentProviders(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Gets the url segment providers collection builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.MediaUrlGenerators(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Gets the content finders collection builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.EmbedProviders(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Gets the backoffice Embed Providers collection builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.SelectorHandlers(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Gets the Delivery API selector handler collection builder
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.FilterHandlers(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Gets the Delivery API filter handler collection builder
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.SortHandlers(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Gets the Delivery API sort handler collection builder
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.ContentIndexHandlers(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Gets the Delivery API content index handler collection builder
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.ContentTypeFilters(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Gets the content type filters collection builder.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.AddComposers(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
                Adds Umbraco composers for plugins
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.AddConfiguration(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
            Add Umbraco configuration services and options
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.AddNotificationHandler``2(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
                Registers a notification handler against the Umbraco service collection.
            </summary>
            <typeparam name="TNotification">The type of notification.</typeparam>
            <typeparam name="TNotificationHandler">The type of notificiation handler.</typeparam>
            <param name="builder">The Umbraco builder.</param>
            <returns>The <see cref="T:Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilderExtensions.AddNotificationAsyncHandler``2(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
                Registers a notification async handler against the Umbraco service collection.
            </summary>
            <typeparam name="TNotification">The type of notification.</typeparam>
            <typeparam name="TNotificationAsyncHandler">The type of notification async handler.</typeparam>
            <param name="builder">The Umbraco builder.</param>
            <returns>The <see cref="T:Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder" />.</returns>
        </member>
        <member name="P:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilder.BuilderLoggerFactory">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,Umbraco.Cms.Core.Composing.TypeLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilder"/> class primarily for testing.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,Umbraco.Cms.Core.Composing.TypeLoader,Microsoft.Extensions.Logging.ILoggerFactory,Umbraco.Cms.Core.Logging.IProfiler,Umbraco.Cms.Core.Cache.AppCaches)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilder"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UmbracoBuilder.WithCollectionBuilder``1">
            <summary>
            Gets a collection builder (and registers the collection).
            </summary>
            <typeparam name="TBuilder">The type of the collection builder.</typeparam>
            <returns>The collection builder.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.DependencyInjection.UniqueServiceDescriptor">
            <summary>
                A custom <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceDescriptor" /> that supports unique checking
            </summary>
            <remarks>
                This is required because the default implementation doesn't implement Equals or GetHashCode.
                see: https://github.com/dotnet/runtime/issues/47262
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UniqueServiceDescriptor.#ctor(System.Type,System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.DependencyInjection.UniqueServiceDescriptor" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UniqueServiceDescriptor.Equals(Umbraco.Cms.Core.DependencyInjection.UniqueServiceDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UniqueServiceDescriptor.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.UniqueServiceDescriptor.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsContentExtensions">
            <summary>
            Extension methods for <see cref="T:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsContent" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsContentExtensions.AddDefault(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsContent,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the content events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsContentExtensions.AddBlueprint(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsContent,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the content blueprint events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsContentExtensions.AddVersion(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsContent,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the content version events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsContentTypeExtensions">
            <summary>
            Extension methods for <see cref="T:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsContentType" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsContentTypeExtensions.AddDocumentType(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsContentType,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the document type webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsContentTypeExtensions.AddMediaType(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsContentType,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the media type webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsContentTypeExtensions.AddMemberType(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsContentType,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the member type webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions">
            <summary>
            Extension methods for <see cref="T:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.WebhookEventCollectionBuilderCms" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.AddDefault(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.WebhookEventCollectionBuilderCms,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the default webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
            <remarks>
            This is a special subset of webhook events that is added by default.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.RemoveDefault(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.WebhookEventCollectionBuilderCms,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Removes the default webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.AddContent(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.WebhookEventCollectionBuilderCms,System.Boolean,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds all available content (including blueprint and version) webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <param name="onlyDefault">If set to <c>true</c> only adds the default webhook events instead of all available.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.AddContent(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.WebhookEventCollectionBuilderCms,System.Action{Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsContent})">
            <summary>
            Adds content webhook events specified in the <paramref name="contentBuilder" /> action.
            </summary>
            <param name="builder">The builder.</param>
            <param name="contentBuilder">The content builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.AddContentType(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.WebhookEventCollectionBuilderCms,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds all available content type (document, media and member type) webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.AddContentType(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.WebhookEventCollectionBuilderCms,System.Action{Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsContentType})">
            <summary>
            Adds content type webhook events specified in the <paramref name="contentTypeBuilder" /> action.
            </summary>
            <param name="builder">The builder.</param>
            <param name="contentTypeBuilder">The content type builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.AddDataType(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.WebhookEventCollectionBuilderCms,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the data type webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.AddDictionary(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.WebhookEventCollectionBuilderCms,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the dictionary webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.AddDomain(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.WebhookEventCollectionBuilderCms,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the domain webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.AddFile(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.WebhookEventCollectionBuilderCms,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds all available file (partial view, script, stylesheet and template) webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.AddFile(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.WebhookEventCollectionBuilderCms,System.Action{Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsFile})">
            <summary>
            Adds file webhook events specified in the <paramref name="fileBuilder" /> action.
            </summary>
            <param name="builder">The builder.</param>
            <param name="fileBuilder">The file builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.AddHealthCheck(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.WebhookEventCollectionBuilderCms,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the health check webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.AddLanguage(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.WebhookEventCollectionBuilderCms,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the language webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.AddMedia(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.WebhookEventCollectionBuilderCms,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the media webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.AddMember(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.WebhookEventCollectionBuilderCms,System.Boolean,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds all available member (including member role and member group) webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <param name="onlyDefault">If set to <c>true</c> only adds the default webhook events instead of all available.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.AddMember(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.WebhookEventCollectionBuilderCms,System.Action{Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsMember})">
            <summary>
            Adds member webhook events specified in the <paramref name="memberBuilder" /> action.
            </summary>
            <param name="builder">The builder.</param>
            <param name="memberBuilder">The member builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.AddPackage(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.WebhookEventCollectionBuilderCms,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the package webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.AddPublicAccess(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.WebhookEventCollectionBuilderCms,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the public access webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.AddRelation(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.WebhookEventCollectionBuilderCms,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the relation webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.AddRelationType(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.WebhookEventCollectionBuilderCms,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the relation type webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.AddUser(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.WebhookEventCollectionBuilderCms,System.Boolean,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds all available user (including password, login and user group) webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <param name="onlyDefault">If set to <c>true</c> only adds the default webhook events instead of all available.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.AddUser(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.WebhookEventCollectionBuilderCms,System.Action{Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsUser})">
            <summary>
            Adds user webhook events specified in the <paramref name="userBuilder" /> action.
            </summary>
            <param name="builder">The builder.</param>
            <param name="userBuilder">The user builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsContent">
            <summary>
            Fluent <see cref="T:Umbraco.Cms.Core.Webhooks.WebhookEventCollectionBuilder" /> for adding CMS content specific webhook events.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsContentType">
            <summary>
            Fluent <see cref="T:Umbraco.Cms.Core.Webhooks.WebhookEventCollectionBuilder" /> for adding CMS content type specific webhook events.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsMember">
            <summary>
            Fluent <see cref="T:Umbraco.Cms.Core.Webhooks.WebhookEventCollectionBuilder" /> for adding CMS member specific webhook events.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsFile">
            <summary>
            Fluent <see cref="T:Umbraco.Cms.Core.Webhooks.WebhookEventCollectionBuilder" /> for adding CMS file specific webhook events.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsUser">
            <summary>
            Fluent <see cref="T:Umbraco.Cms.Core.Webhooks.WebhookEventCollectionBuilder" /> for adding CMS user specific webhook events.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsFileExtensions">
            <summary>
            Extension methods for <see cref="T:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsFile" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsFileExtensions.AddPartialView(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsFile,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the partial view webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsFileExtensions.AddScript(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsFile,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the script webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsFileExtensions.AddStylesheet(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsFile,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the stylesheet webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsFileExtensions.AddTemplate(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsFile,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the template webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsMemberExtensions">
            <summary>
            Extension methods for <see cref="T:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsMember" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsMemberExtensions.AddDefault(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsMember,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the member webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsMemberExtensions.AddRoles(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsMember,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the member role webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsMemberExtensions.AddGroup(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsMember,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the member group webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsUserExtensions">
            <summary>
            Extension methods for <see cref="T:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsUser" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsUserExtensions.AddDefault(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsUser,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the user events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsUserExtensions.AddLogin(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsUser,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the user login events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsUserExtensions.AddPassword(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsUser,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the user password events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsUserExtensions.AddGroup(Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderCmsExtensions.WebhookEventCollectionBuilderCmsUser,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds the user group events.
            </summary>
            <param name="builder">The builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions">
            <summary>
            Extension methods for <see cref="T:Umbraco.Cms.Core.Webhooks.WebhookEventCollectionBuilder" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.AddCms(Umbraco.Cms.Core.Webhooks.WebhookEventCollectionBuilder,System.Boolean,Umbraco.Cms.Core.Webhooks.WebhookPayloadType)">
            <summary>
            Adds all available CMS webhook events.
            </summary>
            <param name="builder">The builder.</param>
            <param name="onlyDefault">If set to <c>true</c> only adds the default webhook events instead of all available.</param>
            <param name="payloadType">The configured payload type.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.AddCms(Umbraco.Cms.Core.Webhooks.WebhookEventCollectionBuilder,System.Action{Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.WebhookEventCollectionBuilderCms})">
            <summary>
            Adds CMS webhook events specified in the <paramref name="cmsBuilder" /> action.
            </summary>
            <param name="builder">The builder.</param>
            <param name="cmsBuilder">The CMS builder.</param>
            <returns>
            The builder.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.DependencyInjection.WebhookEventCollectionBuilderExtensions.WebhookEventCollectionBuilderCms">
            <summary>
            Fluent <see cref="T:Umbraco.Cms.Core.Webhooks.WebhookEventCollectionBuilder" /> for adding CMS specific webhook events.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Deploy.ArtifactBase`1">
            <summary>
            Provides a base class for all artifacts.
            </summary>
            <typeparam name="TUdi">The UDI type.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.ArtifactBase`1.#ctor(`0,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Deploy.ArtifactDependency})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Deploy.ArtifactBase`1" /> class.
            </summary>
            <param name="udi">The UDI.</param>
            <param name="dependencies">The dependencies.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.ArtifactBase`1.Umbraco#Cms#Core#Deploy#IArtifactSignature#Udi">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.ArtifactBase`1.Udi">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.ArtifactBase`1.Dependencies">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.ArtifactBase`1.Checksum">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.ArtifactBase`1.Name">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.ArtifactBase`1.Alias">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.ArtifactBase`1.GetChecksum">
            <summary>
            Gets the checksum.
            </summary>
            <returns>
            The checksum.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Deploy.ArtifactDependency">
            <summary>
            Represents an artifact dependency.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.ArtifactDependency.#ctor(Umbraco.Cms.Core.Udi,System.Boolean,Umbraco.Cms.Core.Deploy.ArtifactDependencyMode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Deploy.ArtifactDependency" /> class.
            </summary>
            <param name="udi">The entity identifier of the artifact dependency.</param>
            <param name="ordering">A value indicating whether the dependency must be included when building a dependency tree and ensure the artifact gets deployed in the correct order.</param>
            <param name="mode">A value indicating whether the checksum must match or the artifact just needs to exist.</param>
            <param name="checksum">The checksum of the dependency.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.ArtifactDependency.Udi">
            <summary>
            Gets the entity identifier of the artifact dependency.
            </summary>
            <value>
            The entity identifier of the artifact dependency.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.ArtifactDependency.Ordering">
            <summary>
            Gets a value indicating whether the dependency is included when building a dependency tree and gets deployed in the correct order.
            </summary>
            <value>
              <c>true</c> if the dependency is included when building a dependency tree and gets deployed in the correct order; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.ArtifactDependency.Mode">
            <summary>
            Gets the dependency mode.
            </summary>
            <value>
            The dependency mode.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.ArtifactDependency.Checksum">
            <summary>
            Gets or sets the checksum.
            </summary>
            <value>
            The checksum.
            </value>
        </member>
        <member name="T:Umbraco.Cms.Core.Deploy.ArtifactDependencyCollection">
            <summary>
            Represents a collection of distinct <see cref="T:Umbraco.Cms.Core.Deploy.ArtifactDependency" />.
            </summary>
            <remarks>
            The collection cannot contain duplicates and modes are properly managed.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.ArtifactDependencyCollection.Count">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.ArtifactDependencyCollection.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.ArtifactDependencyCollection.Add(Umbraco.Cms.Core.Deploy.ArtifactDependency)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.ArtifactDependencyCollection.Clear">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.ArtifactDependencyCollection.Contains(Umbraco.Cms.Core.Deploy.ArtifactDependency)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.ArtifactDependencyCollection.CopyTo(Umbraco.Cms.Core.Deploy.ArtifactDependency[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.ArtifactDependencyCollection.Remove(Umbraco.Cms.Core.Deploy.ArtifactDependency)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.ArtifactDependencyCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.ArtifactDependencyCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Deploy.ArtifactDependencyMode">
            <summary>
            Indicates the mode of the dependency.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Deploy.ArtifactDependencyMode.Match">
            <summary>
            The dependency must match exactly.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Deploy.ArtifactDependencyMode.Exist">
            <summary>
            The dependency must exist.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Deploy.ArtifactDeployState">
            <summary>
            Represent the state of an artifact being deployed.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.ArtifactDeployState.Artifact">
            <summary>
            Gets the artifact.
            </summary>
            <value>
            The artifact.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.ArtifactDeployState.Connector">
            <summary>
            Gets or sets the service connector in charge of deploying the artifact.
            </summary>
            <value>
            The connector.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.ArtifactDeployState.NextPass">
            <summary>
            Gets or sets the next pass number.
            </summary>
            <value>
            The next pass.
            </value>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.ArtifactDeployState.Create``2(``0,``1,Umbraco.Cms.Core.Deploy.IServiceConnector,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Umbraco.Cms.Core.Deploy.ArtifactDeployState" /> class from an artifact and an entity.
            </summary>
            <typeparam name="TArtifact">The type of the artifact.</typeparam>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="art">The artifact.</param>
            <param name="entity">The entity.</param>
            <param name="connector">The service connector deploying the artifact.</param>
            <param name="nextPass">The next pass number.</param>
            <returns>
            A deploying artifact.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.ArtifactDeployState.GetArtifactAsIArtifact">
            <summary>
            Gets the artifact as an <see cref="T:Umbraco.Cms.Core.Deploy.IArtifact" />.
            </summary>
            <returns>
            The artifact, as an <see cref="T:Umbraco.Cms.Core.Deploy.IArtifact" />.
            </returns>
            <remarks>
            This is because classes that inherit from this class cannot override the Artifact property
            with a property that specializes the return type, and so they need to 'new' the property.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Deploy.ArtifactDeployState`2">
            <summary>
            Represent the state of an artifact being deployed.
            </summary>
            <typeparam name="TArtifact">The type of the artifact.</typeparam>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.ArtifactDeployState`2.#ctor(`0,`1,Umbraco.Cms.Core.Deploy.IServiceConnector,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Deploy.ArtifactDeployState`2" /> class.
            </summary>
            <param name="art">The artifact.</param>
            <param name="entity">The entity.</param>
            <param name="connector">The service connector deploying the artifact.</param>
            <param name="nextPass">The next pass number.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.ArtifactDeployState`2.Artifact">
            <summary>
            Gets or sets the artifact.
            </summary>
            <value>
            The artifact.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.ArtifactDeployState`2.Entity">
            <summary>
            Gets or sets the entity.
            </summary>
            <value>
            The entity.
            </value>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.ArtifactDeployState`2.GetArtifactAsIArtifact">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Deploy.ArtifactSignature">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.ArtifactSignature.#ctor(Umbraco.Cms.Core.Udi,System.String,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Deploy.ArtifactDependency})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Deploy.ArtifactSignature" /> class.
            </summary>
            <param name="udi">The UDI.</param>
            <param name="checksum">The checksum.</param>
            <param name="dependencies">The artifact dependencies.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.ArtifactSignature.Udi">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.ArtifactSignature.Checksum">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.ArtifactSignature.Dependencies">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Deploy.Difference">
            <summary>
            Represents a difference between two artifacts.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.Difference.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Deploy.Difference" /> class.
            </summary>
            <param name="title">The title.</param>
            <param name="text">The text.</param>
            <param name="category">The category.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.Difference.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.Difference.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.Difference.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>
            The category.
            </value>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.Difference.ToString">
            <summary>
            Converts the difference to a <see cref="T:System.String" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the difference.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Deploy.IArtifact">
            <summary>
            Represents an artifact ie an object that can be transfered between environments.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.IArtifact.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.IArtifact.Alias">
            <summary>
            Gets the alias.
            </summary>
            <value>
            The alias.
            </value>
        </member>
        <member name="T:Umbraco.Cms.Core.Deploy.IArtifactSignature">
            <summary>
            Represents the signature of an artifact.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.IArtifactSignature.Udi">
            <summary>
            Gets the entity unique identifier of this artifact.
            </summary>
            <value>
            The udi.
            </value>
            <remarks>
            <para>
            The project identifier is independent from the state of the artifact, its data
            values, dependencies, anything. It never changes and fully identifies the artifact.
            </para>
            <para>
            What an entity uses as a unique identifier will influence what we can transfer
            between environments. Eg content type "Foo" on one environment is not necessarily the
            same as "Foo" on another environment, if guids are used as unique identifiers. What is
            used should be documented for each entity, along with the consequences of the choice.
            </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.IArtifactSignature.Checksum">
            <summary>
            Gets the checksum of this artifact.
            </summary>
            <value>
            The checksum.
            </value>
            <remarks>
            <para>
            The checksum depends on the artifact's properties, and on the identifiers of all its dependencies,
            but not on their checksums. So the checksum changes when any of the artifact's properties changes,
            or when the list of dependencies changes. But not if one of these dependencies change.
            </para>
            <para>
            It is assumed that checksum collisions cannot happen ie that no two different artifact's
            states will ever produce the same checksum, so that if two artifacts have the same checksum then
            they are identical.
            </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.IArtifactSignature.Dependencies">
            <summary>
            Gets the dependencies of this artifact.
            </summary>
            <value>
            The dependencies.
            </value>
        </member>
        <member name="T:Umbraco.Cms.Core.Deploy.IContextCache">
            <summary>
            Represents a context cache used by Deploy operations.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IContextCache.Create``1(System.String,``0)">
            <summary>
            Creates the item on the context cache using the specified <paramref name="key" />.
            </summary>
            <typeparam name="T">The type of the cached item.</typeparam>
            <param name="key">The key of the cached item.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IContextCache.GetOrCreate``1(System.String,System.Func{``0})">
            <summary>
            Gets an item from the context cache or creates and stores it using the specified <paramref name="key" />.
            </summary>
            <typeparam name="T">The type of the cached item.</typeparam>
            <param name="key">The key of the cached item.</param>
            <param name="factory">The factory method to create the item (if it doesn't exist yet).</param>
            <returns>
            The item.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IContextCache.GetOrCreateAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Gets an item from the context cache or creates and stores it using the specified <paramref name="key" />.
            </summary>
            <typeparam name="T">The type of the cached item.</typeparam>
            <param name="key">The key of the cached item.</param>
            <param name="factory">The factory method to create the item (if it doesn't exist yet).</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains the item.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IContextCache.Clear">
            <summary>
            Clears all cached items on this context.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Deploy.IDataTypeConfigurationConnector">
            <summary>
            Defines methods that can convert data type configuration to and from an environment-agnostic string.
            </summary>
            <remarks>
            Configuration may contain values such as content identifiers, that would be local to one environment, and need to be converted in order to be deployed.
            It can also contain references to other deployable artifacts, that need to be tracked as dependencies.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.IDataTypeConfigurationConnector.PropertyEditorAliases">
            <summary>
            Gets the property editor aliases that the value converter supports by default.
            </summary>
            <value>
            The property editor aliases.
            </value>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IDataTypeConfigurationConnector.ToArtifactAsync(Umbraco.Cms.Core.Models.IDataType,System.Collections.Generic.ICollection{Umbraco.Cms.Core.Deploy.ArtifactDependency},Umbraco.Cms.Core.Deploy.IContextCache,System.Threading.CancellationToken)">
            <summary>
            Gets the artifact configuration value corresponding to a data type configuration and gather dependencies.
            </summary>
            <param name="dataType">The data type.</param>
            <param name="dependencies">The dependencies.</param>
            <param name="contextCache">The context cache.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains the artifact configuration value.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IDataTypeConfigurationConnector.FromArtifactAsync(Umbraco.Cms.Core.Models.IDataType,System.String,Umbraco.Cms.Core.Deploy.IContextCache,System.Threading.CancellationToken)">
            <summary>
            Gets the data type configuration corresponding to an artifact configuration value.
            </summary>
            <param name="dataType">The data type.</param>
            <param name="configuration">The artifact configuration value.</param>
            <param name="contextCache">The context cache.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains the data type configuration.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Deploy.IDeployContext">
            <summary>
            Represents a deployment context.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.IDeployContext.SessionId">
            <summary>
            Gets the unique identifier of the deployment.
            </summary>
            <value>
            The session identifier.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.IDeployContext.FileSource">
            <summary>
            Gets the file source.
            </summary>
            <value>
            The file source.
            </value>
            <remarks>
            The file source is used to obtain files from the source environment.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.IDeployContext.Items">
            <summary>
            Gets items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IDeployContext.NextSeq">
            <summary>
            Gets the next number in a numerical sequence.
            </summary>
            <returns>
            The next sequence number.
            </returns>
            <remarks>
            Can be used to uniquely number things during a deployment.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IDeployContext.Item``1(System.String)">
            <summary>
            Gets item.
            </summary>
            <typeparam name="T">The type of the item.</typeparam>
            <param name="key">The key of the item.</param>
            <returns>
            The item with the specified key and type, if any, else null.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Deploy.IFileSource">
            <summary>
            Represents a file source, ie a mean for a target environment involved in a
            deployment to obtain the content of files being deployed.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IFileSource.GetFileStreamAsync(Umbraco.Cms.Core.StringUdi,System.Threading.CancellationToken)">
            <summary>
            Gets the content of a file as a stream.
            </summary>
            <param name="udi">A file entity identifier.</param>
            <param name="token">A cancellation token.</param>
            <returns>
            A stream with read access to the file content.
            </returns>
            <remarks>
            <para>Returns null if no content could be read.</para>
            <para>The caller should ensure that the stream is properly closed/disposed.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IFileSource.GetFileContentAsync(Umbraco.Cms.Core.StringUdi,System.Threading.CancellationToken)">
            <summary>
            Gets the content of a file as a string.
            </summary>
            <param name="udi">A file entity identifier.</param>
            <param name="token">A cancellation token.</param>
            <returns>
            A string containing the file content.
            </returns>
            <remarks>
            Returns null if no content could be read.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IFileSource.GetFileLengthAsync(Umbraco.Cms.Core.StringUdi,System.Threading.CancellationToken)">
            <summary>
            Gets the length of a file.
            </summary>
            <param name="udi">A file entity identifier.</param>
            <param name="token">A cancellation token.</param>
            <returns>
            The length of the file, or -1 if the file does not exist.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IFileSource.GetFilesAsync(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.StringUdi},Umbraco.Cms.Core.Deploy.IFileTypeCollection,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets files and store them using a file store.
            </summary>
            <param name="udis">The UDIs of the files to get.</param>
            <param name="fileTypes">A collection of file types which can store the files.</param>
            <param name="continueOnFileNotFound">A flag indicating whether to continue if a file isn't found or to stop and throw a FileNotFoundException.</param>
            <param name="token">A cancellation token.</param>
            <returns>
            The task object representing the asynchronous operation.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Deploy.IFileType">
            <summary>
            Represents a deployable file type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.IFileType.CanSetPhysical">
            <summary>
            Gets a value indicating whether the file can be set using a physical path.
            </summary>
            <value>
              <c>true</c> if the file can be set using a physical path; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IFileType.GetStreamAsync(Umbraco.Cms.Core.StringUdi,System.Threading.CancellationToken)">
            <summary>
            Gets the stream in an asynchronous operation.
            </summary>
            <param name="udi">The UDI.</param>
            <param name="token">The cancellation token.</param>
            <returns>
            The task object representing the asynchronous operation. The task result contains the stream.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IFileType.GetChecksumStream(Umbraco.Cms.Core.StringUdi)">
            <summary>
            Gets the checksum stream.
            </summary>
            <param name="udi">The UDI.</param>
            <returns>
            The checksum stream.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IFileType.GetChecksumStreamAsync(Umbraco.Cms.Core.StringUdi,System.Threading.CancellationToken)">
            <summary>
            Gets the checksum stream in an asynchronous operation.
            </summary>
            <param name="udi">The UDI.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The task object representing the asynchronous operation. The task result contains the checksum stream.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IFileType.GetLength(Umbraco.Cms.Core.StringUdi)">
            <summary>
            Gets the file length in bytes or <c>-1</c> if not found.
            </summary>
            <param name="udi">The UDI.</param>
            <returns>
            The file length in bytes or <c>-1</c> if not found.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IFileType.GetLengthAsync(Umbraco.Cms.Core.StringUdi,System.Threading.CancellationToken)">
            <summary>
            Gets the file length in bytes or <c>-1</c> if not found in an asynchronous operation.
            </summary>
            <param name="udi">The UDI.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The task object representing the asynchronous operation. The task result contains the file length in bytes or <c>-1</c> if not found.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IFileType.SetStreamAsync(Umbraco.Cms.Core.StringUdi,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Sets the stream as an asynchronous operation.
            </summary>
            <param name="udi">The UDI.</param>
            <param name="stream">The stream.</param>
            <param name="token">The cancellation token.</param>
            <returns>
            The task object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IFileType.Set(Umbraco.Cms.Core.StringUdi,System.String,System.Boolean)">
            <summary>
            Sets the physical path of the file.
            </summary>
            <param name="udi">The UDI.</param>
            <param name="physicalPath">The physical path.</param>
            <param name="copy">If set to <c>true</c> copies the file instead of moving.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IFileType.GetPhysicalPath(Umbraco.Cms.Core.StringUdi)">
            <summary>
            Gets the path to the file, including the file name. Returns <see cref="F:System.String.Empty" /> if the file is not directly accessible.
            </summary>
            <param name="udi">The UDI.</param>
            <returns>
            The path to the file, including the file name or <see cref="F:System.String.Empty" /> if the file is not directly accessible.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IFileType.GetVirtualPath(Umbraco.Cms.Core.StringUdi)">
            <summary>
            Gets the virtual path or <see cref="F:System.String.Empty"/> if not found.
            </summary>
            <param name="udi">The UDI.</param>
            <returns>
            The virtual path or <see cref="F:System.String.Empty"/> if not found.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Deploy.IFileTypeCollection">
            <summary>
            Represents a collection of deployable file types used for each specific entity type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.IFileTypeCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Umbraco.Cms.Core.Deploy.IFileType"/> for the specified entity type.
            </summary>
            <value>
            The <see cref="T:Umbraco.Cms.Core.Deploy.IFileType"/>.
            </value>
            <param name="entityType">The entity type.</param>
            <returns>
            The <see cref="T:Umbraco.Cms.Core.Deploy.IFileType"/> for the specified entity type.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IFileTypeCollection.TryGetValue(System.String,Umbraco.Cms.Core.Deploy.IFileType@)">
            <summary>
            Gets the <see cref="T:Umbraco.Cms.Core.Deploy.IFileType" /> for the specified entity type.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="fileType">When this method returns, contains the file type associated with the specified entity type, if the item is found; otherwise, <c>null</c>.</param>
            <returns>
              <c>true</c> if the file type associated with the specified entity type was found; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IFileTypeCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains a file type for the specified entity type.
            </summary>
            <param name="entityType">The entity type.</param>
            <returns>
              <c>true</c> if this collection contains a file type for the specified entity type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IFileTypeCollection.GetEntityTypes">
            <summary>
            Gets the entity types.
            </summary>
            <returns>
            The entity types.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Deploy.IImageSourceParser">
            <summary>
            Provides methods to parse image tag sources in property values.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IImageSourceParser.ToArtifactAsync(System.String,System.Collections.Generic.ICollection{Umbraco.Cms.Core.Udi},Umbraco.Cms.Core.Deploy.IContextCache,System.Threading.CancellationToken)">
            <summary>
            Parses an Umbraco property value and produces an artifact property value.
            </summary>
            <param name="value">The property value.</param>
            <param name="dependencies">A list of dependencies.</param>
            <param name="contextCache">The context cache.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains the parsed value.
            </returns>
            <remarks>
            Turns src="/media/..." into src="umb://media/..." and adds the corresponding udi to the dependencies.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IImageSourceParser.FromArtifactAsync(System.String,Umbraco.Cms.Core.Deploy.IContextCache,System.Threading.CancellationToken)">
            <summary>
            Parses an artifact property value and produces an Umbraco property value.
            </summary>
            <param name="value">The artifact property value.</param>
            <param name="contextCache">The context cache.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains the parsed value.
            </returns>
            <remarks>
            Turns umb://media/... into /media/....
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Deploy.ILocalLinkParser">
            <summary>
            Provides methods to parse local link tags in property values.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.ILocalLinkParser.ToArtifactAsync(System.String,System.Collections.Generic.ICollection{Umbraco.Cms.Core.Udi},Umbraco.Cms.Core.Deploy.IContextCache,System.Threading.CancellationToken)">
            <summary>
            Parses an Umbraco property value and produces an artifact property value.
            </summary>
            <param name="value">The property value.</param>
            <param name="dependencies">A list of dependencies.</param>
            <param name="contextCache">The context cache.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains the parsed value.
            </returns>
            <remarks>
            Turns {{localLink:1234}} into {{localLink:umb://{type}/{id}}} and adds the corresponding udi to the dependencies.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.ILocalLinkParser.FromArtifactAsync(System.String,Umbraco.Cms.Core.Deploy.IContextCache,System.Threading.CancellationToken)">
            <summary>
            Parses an artifact property value and produces an Umbraco property value.
            </summary>
            <param name="value">The artifact property value.</param>
            <param name="contextCache">The context cache.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains the parsed value.
            </returns>
            <remarks>
            Turns {{localLink:umb://{type}/{id}}} into {{localLink:1234}}.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Deploy.IServiceConnector">
            <summary>
            Connects to an Umbraco service.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IServiceConnector.GetArtifactAsync(Umbraco.Cms.Core.Udi,Umbraco.Cms.Core.Deploy.IContextCache,System.Threading.CancellationToken)">
            <summary>
            Gets an artifact.
            </summary>
            <param name="udi">The entity identifier of the artifact.</param>
            <param name="contextCache">The context cache.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains the corresponding artifact or <c>null</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IServiceConnector.GetArtifactAsync(System.Object,Umbraco.Cms.Core.Deploy.IContextCache,System.Threading.CancellationToken)">
            <summary>
            Gets an artifact.
            </summary>
            <param name="entity">The entity.</param>
            <param name="contextCache">The context cache.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains the corresponding artifact.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IServiceConnector.ProcessInitAsync(Umbraco.Cms.Core.Deploy.IArtifact,Umbraco.Cms.Core.Deploy.IDeployContext,System.Threading.CancellationToken)">
            <summary>
            Initializes processing for an artifact.
            </summary>
            <param name="artifact">The artifact.</param>
            <param name="context">The deploy context.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains the state of an artifact being deployed.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IServiceConnector.ProcessAsync(Umbraco.Cms.Core.Deploy.ArtifactDeployState,Umbraco.Cms.Core.Deploy.IDeployContext,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Processes an artifact.
            </summary>
            <param name="state">The state of the artifact being deployed.</param>
            <param name="context">The deploy context.</param>
            <param name="pass">The processing pass number.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IServiceConnector.ExpandRangeAsync(Umbraco.Cms.Core.UdiRange,System.Threading.CancellationToken)">
            <summary>
            Expands an UDI range into UDIs.
            </summary>
            <param name="range">The UDI range.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> which when enumerated will asynchronously expand the UDI range into UDIs.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IServiceConnector.GetRangeAsync(Umbraco.Cms.Core.Udi,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a named range for a specified UDI and selector.
            </summary>
            <param name="udi">The UDI.</param>
            <param name="selector">The selector.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains the named range for the specified UDI and selector.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IServiceConnector.GetRangeAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a named range for specified entity type, identifier and selector.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="sid">The identifier.</param>
            <param name="selector">The selector.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains the named range for the specified entity type, identifier and selector.
            </returns>
            <remarks>
            <para>This is temporary. At least we thought it would be, in sept. 2016. What day is it now?</para>
            <para>
            At the moment our UI has a hard time returning proper UDIs, mainly because Core's tree do
            not manage GUIDs but only integers... so we have to provide a way to support it. The string id here
            can be either a real string (for string UDIs) or an "integer as a string", using the value "-1" to
            indicate the "root" i.e. an open UDI.
            </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IServiceConnector.Compare(Umbraco.Cms.Core.Deploy.IArtifact,Umbraco.Cms.Core.Deploy.IArtifact,System.Collections.Generic.ICollection{Umbraco.Cms.Core.Deploy.Difference})">
            <summary>
            Compares two artifacts.
            </summary>
            <param name="art1">The first artifact.</param>
            <param name="art2">The second artifact.</param>
            <param name="differences">A collection of differences to append to, if not <c>null</c>.</param>
            <returns>
            A boolean value indicating whether the artifacts are identical.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Deploy.IUniqueIdentifyingServiceConnector">
            <summary>
            Provides a method to retrieve an artifact's unique identifier.
            </summary>
            <remarks>
            Artifacts are uniquely identified by their <see cref="T:Umbraco.Cms.Core.Udi" />, however they represent
            elements in Umbraco that may be uniquely identified by another value. For example,
            a content type is uniquely identified by its alias. If someone creates a new content
            type, and tries to deploy it to a remote environment where a content type with the
            same alias already exists, both content types end up having different <see cref="T:Umbraco.Cms.Core.Udi" />
            but the same alias. By default, Deploy would fail and throw when trying to save the
            new content type (duplicate alias). However, if the connector also implements this
            interface, the situation can be detected beforehand and reported in a nicer way.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IUniqueIdentifyingServiceConnector.GetUniqueIdentifier(Umbraco.Cms.Core.Deploy.IArtifact)">
            <summary>
            Gets the unique identifier of the specified artifact.
            </summary>
            <param name="artifact">The artifact.</param>
            <returns>
            The unique identifier.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Deploy.IValueConnector">
            <summary>
            Defines methods that can convert a property value to and from an environment-agnostic string.
            </summary>
            <remarks>
            Property values may contain values such as content identifiers, that would be local
            to one environment and need to be converted in order to be deployed. Connectors also deal
            with serializing and deserializing the content value to an environment-agnostic string.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.IValueConnector.PropertyEditorAliases">
            <summary>
            Gets the property editor aliases that the value converter supports by default.
            </summary>
            <value>
            The property editor aliases.
            </value>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IValueConnector.ToArtifactAsync(System.Object,Umbraco.Cms.Core.Models.IPropertyType,System.Collections.Generic.ICollection{Umbraco.Cms.Core.Deploy.ArtifactDependency},Umbraco.Cms.Core.Deploy.IContextCache,System.Threading.CancellationToken)">
            <summary>
            Gets the deploy property value corresponding to a content property value, and gather dependencies.
            </summary>
            <param name="value">The content property value.</param>
            <param name="propertyType">The value property type</param>
            <param name="dependencies">The content dependencies.</param>
            <param name="contextCache">The context cache.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains the deploy property value.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.IValueConnector.FromArtifactAsync(System.String,Umbraco.Cms.Core.Models.IPropertyType,System.Object,Umbraco.Cms.Core.Deploy.IContextCache,System.Threading.CancellationToken)">
            <summary>
            Gets the content property value corresponding to a deploy property value.
            </summary>
            <param name="value">The deploy property value.</param>
            <param name="propertyType">The value property type</param>
            <param name="currentValue">The current content property value.</param>
            <param name="contextCache">The context cache.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains the content property value.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Deploy.PassThroughCache">
            <summary>
            A pass through context cache that always creates the items.
            </summary>
            <seealso cref="T:Umbraco.Cms.Core.Deploy.IContextCache" />
        </member>
        <member name="P:Umbraco.Cms.Core.Deploy.PassThroughCache.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.PassThroughCache.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Umbraco.Cms.Core.Deploy.PassThroughCache"/> class from being created.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.PassThroughCache.Create``1(System.String,``0)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.PassThroughCache.GetOrCreate``1(System.String,System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.PassThroughCache.GetOrCreateAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Deploy.PassThroughCache.Clear">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Diagnostics.IMarchal">
            <summary>
                Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting
                managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Diagnostics.IMarchal.GetExceptionPointers">
            <summary>
                Retrieves a computer-independent description of an exception, and information about the state that existed for the
                thread when the exception occurred.
            </summary>
            <returns>A pointer to an EXCEPTION_POINTERS structure.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Dictionary.ICultureDictionary">
            <summary>
                Represents a dictionary based on a specific culture
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Dictionary.ICultureDictionary.Culture">
            <summary>
                Returns the current culture
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Dictionary.ICultureDictionary.Item(System.String)">
            <summary>
                Returns the dictionary value based on the key supplied
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Dictionary.ICultureDictionary.GetChildren(System.String)">
            <summary>
                Returns the child dictionary entries for a given key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Dictionary.DefaultCultureDictionary">
            <summary>
                A culture dictionary that uses the Umbraco ILocalizationService
            </summary>
            <remarks>
                TODO: The ICultureDictionary needs to represent the 'fast' way to do dictionary item retrieval - for front-end and
                back office.
                The ILocalizationService is the service used for interacting with this data from the database which isn't all that
                fast
                (even though there is caching involved, if there's lots of dictionary items the caching is not great)
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Dictionary.DefaultCultureDictionary.#ctor(Umbraco.Cms.Core.Services.ILocalizationService,Umbraco.Cms.Core.Cache.IAppCache)">
            <summary>
                Default constructor which will use the current thread's culture
            </summary>
            <param name="localizationService"></param>
            <param name="requestCache"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Dictionary.DefaultCultureDictionary.#ctor(System.Globalization.CultureInfo,Umbraco.Cms.Core.Services.ILocalizationService,Umbraco.Cms.Core.Cache.IAppCache)">
            <summary>
                Constructor for testing to specify a static culture
            </summary>
            <param name="specificCulture"></param>
            <param name="localizationService"></param>
            <param name="requestCache"></param>
        </member>
        <member name="P:Umbraco.Cms.Core.Dictionary.DefaultCultureDictionary.Culture">
            <summary>
                Returns the defualt umbraco's back office culture
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Dictionary.DefaultCultureDictionary.Item(System.String)">
            <summary>
                Returns the dictionary value based on the key supplied
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Dictionary.DefaultCultureDictionary.GetChildren(System.String)">
            <summary>
                Returns the child dictionary entries for a given key
            </summary>
            <param name="key"></param>
            <returns></returns>
            <remarks>
                NOTE: The result of this is not cached anywhere - the underlying repository does not cache
                the child lookups because that is done by a query lookup. This method isn't used in our codebase
                so I don't think this is a performance issue but if devs are using this it could be optimized here.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Dictionary.DefaultCultureDictionaryFactory">
            <summary>
                A culture dictionary factory used to create an Umbraco.Core.Dictionary.ICultureDictionary.
            </summary>
            <remarks>
                In the future this will allow use to potentially store dictionary items elsewhere and allows for maximum
                flexibility.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.DisposableObjectSlim">
            <summary>
                Abstract implementation of managed IDisposable.
            </summary>
            <remarks>
                This is for objects that do NOT have unmanaged resources.
                Can also be used as a pattern for when inheriting is not possible.
                See also: https://msdn.microsoft.com/en-us/library/b1yfkh5e%28v=vs.110%29.aspx
                See also: https://lostechies.com/chrispatterson/2012/11/29/idisposable-done-right/
                Note: if an object's ctor throws, it will never be disposed, and so if that ctor
                has allocated disposable objects, it should take care of disposing them.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.DisposableObjectSlim.Disposed">
            <summary>
                Gets a value indicating whether this instance is disposed.
            </summary>
            <remarks>
                for internal tests only (not thread safe)
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.DisposableObjectSlim.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.DisposableObjectSlim.DisposeResources">
            <summary>
                Disposes managed resources
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DisposableObjectSlim.Dispose(System.Boolean)">
            <summary>
                Disposes managed resources
            </summary>
            <param name="disposing">True if disposing via Dispose method and not a finalizer. Always true for this class.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.DistributedLocking.DistributedLockType">
            <summary>
                Represents the type of distributed lock.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.DistributedLocking.Exceptions.DistributedLockingException">
            <summary>
                Base class for all DistributedLockingExceptions.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DistributedLocking.Exceptions.DistributedLockingException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.DistributedLocking.Exceptions.DistributedLockingException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DistributedLocking.Exceptions.DistributedLockingException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.DistributedLocking.Exceptions.DistributedLockingException" /> class.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.DistributedLocking.Exceptions.DistributedLockingTimeoutException">
            <summary>
                Base class for all DistributedLocking timeout related exceptions.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DistributedLocking.Exceptions.DistributedLockingTimeoutException.#ctor(System.Int32,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.DistributedLocking.Exceptions.DistributedLockingTimeoutException" /> class.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.DistributedLocking.Exceptions.DistributedReadLockTimeoutException">
            <summary>
                Exception thrown when a read lock could not be obtained in a timely manner.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DistributedLocking.Exceptions.DistributedReadLockTimeoutException.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.DistributedLocking.Exceptions.DistributedReadLockTimeoutException" /> class.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.DistributedLocking.Exceptions.DistributedWriteLockTimeoutException">
            <summary>
                Exception thrown when a write lock could not be obtained in a timely manner.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DistributedLocking.Exceptions.DistributedWriteLockTimeoutException.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.DistributedLocking.Exceptions.DistributedWriteLockTimeoutException" /> class.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.DistributedLocking.IDistributedLock">
            <summary>
                Interface representing a DistributedLock.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.DistributedLocking.IDistributedLock.LockId">
            <summary>
                Gets the LockId.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.DistributedLocking.IDistributedLock.LockType">
            <summary>
                Gets the DistributedLockType.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.DistributedLocking.IDistributedLockingMechanism">
            <summary>
                Represents a class responsible for managing distributed locks.
            </summary>
            <remarks>
                In general the rules for distributed locks are as follows.
                <list type="bullet">
                    <item>
                        <b>Cannot</b> obtain a write lock if a read lock exists for same lock id (except during an upgrade from
                        reader -> writer)
                    </item>
                    <item>
                        <b>Cannot</b> obtain a write lock if a write lock exists for same lock id.
                    </item>
                    <item>
                        <b>Cannot</b> obtain a read lock if a write lock exists for same lock id.
                    </item>
                    <item>
                        <b>Can</b> obtain a read lock if a read lock exists for same lock id.
                    </item>
                </list>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.DistributedLocking.IDistributedLockingMechanism.Enabled">
            <summary>
                Gets a value indicating whether this distributed locking mechanism can be used.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.DistributedLocking.IDistributedLockingMechanism.ReadLock(System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
                Obtains a distributed read lock.
            </summary>
            <remarks>
                When timeout is null, implementations should use
                <see cref="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.DistributedLockingReadLockDefaultTimeout" />.
            </remarks>
            <exception cref="T:Umbraco.Cms.Core.DistributedLocking.Exceptions.DistributedReadLockTimeoutException">Failed to obtain distributed read lock in time.</exception>
        </member>
        <member name="M:Umbraco.Cms.Core.DistributedLocking.IDistributedLockingMechanism.WriteLock(System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
                Obtains a distributed read lock.
            </summary>
            <remarks>
                When timeout is null, implementations should use
                <see cref="P:Umbraco.Cms.Core.Configuration.Models.GlobalSettings.DistributedLockingWriteLockDefaultTimeout" />.
            </remarks>
            <exception cref="T:Umbraco.Cms.Core.DistributedLocking.Exceptions.DistributedWriteLockTimeoutException">Failed to obtain distributed write lock in time.</exception>
        </member>
        <member name="T:Umbraco.Cms.Core.DistributedLocking.IDistributedLockingMechanismFactory">
            <summary>
                Picks an appropriate IDistributedLockingMechanism when multiple are registered
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.DynamicRoot.DynamicRootNodeQuery">
            <summary>
            Specifies origin and context data with optional query steps to find Dynamic Roots
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.DynamicRoot.IDynamicRootService">
            <summary>
            Supports finding content roots for pickers (like MNTP) in a dynamic fashion
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.DynamicRoot.Origin.IDynamicRootOriginFinder">
            <summary>
            Supports finding the Origin For a given query
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.DynamicRoot.QuerySteps.DynamicRootQueryStep.AnyOfDocTypeKeys">
            <summary>
            Empty means all Doctypes
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Editors.EditorValidator`1">
            <summary>
                Provides a base class for <see cref="T:Umbraco.Cms.Core.Editors.IEditorValidator" /> implementations.
            </summary>
            <typeparam name="T">The validated object type.</typeparam>
        </member>
        <member name="T:Umbraco.Cms.Core.Editors.IEditorValidator">
            <summary>
                Provides a general object validator.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Editors.IEditorValidator.ModelType">
            <summary>
                Gets the object type validated by this validator.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Editors.IEditorValidator.Validate(System.Object)">
            <summary>
                Validates an object.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Editors.UserEditorAuthorizationHelper.IsAuthorized(Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Checks if the current user has access to save the user data
            </summary>
            <param name="currentUser">The current user trying to save user data</param>
            <param name="savingUser">The user instance being saved (can be null if it's a new user)</param>
            <param name="startContentIds">The start content ids of the user being saved (can be null or empty)</param>
            <param name="startMediaIds">The start media ids of the user being saved (can be null or empty)</param>
            <param name="userGroupAliases">The user aliases of the user being saved (can be null or empty)</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Enum`1">
            <summary>
                Provides utility methods for handling enumerations.
            </summary>
            <remarks>
                Taken from http://damieng.com/blog/2010/10/17/enums-better-syntax-improved-performance-and-tryparse-in-net-3-5
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.EnvironmentHelper">
            <summary>
                Currently just used to get the machine name for use with file names
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.EnvironmentHelper.FileSafeMachineName">
            <summary>
                Returns the machine name that is safe to use in file paths.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Events.CancellableEnumerableObjectEventArgs`1">
            <summary>
                Represents event data, for events that support cancellation, and expose impacted objects.
            </summary>
            <typeparam name="TEventObject">The type of the exposed, impacted objects.</typeparam>
        </member>
        <member name="T:Umbraco.Cms.Core.Events.CancellableEventArgs">
            <summary>
                Represents event data for events that support cancellation.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.CancellableEventArgs.CanCancel">
            <summary>
                Flag to determine if this instance will support being cancellable
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.CancellableEventArgs.Cancel">
            <summary>
                If this instance supports cancellation, this gets/sets the cancel value
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.CancellableEventArgs.Messages">
            <summary>
                Returns the EventMessages object which is used to add messages to the message collection for this event
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.CancellableEventArgs.AdditionalData">
            <summary>
                In some cases raised evens might need to contain additional arbitrary readonly data which can be read by event
                subscribers
            </summary>
            <remarks>
                This allows for a bit of flexibility in our event raising - it's not pretty but we need to maintain backwards
                compatibility
                so we cannot change the strongly typed nature for some events.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.CancellableEventArgs.EventState">
            <summary>
                This can be used by event subscribers to store state in the event args so they easily deal with custom state data
                between a starting ("ing")
                event and an ending ("ed") event
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.CancellableEventArgs.CancelOperation(Umbraco.Cms.Core.Events.EventMessage)">
            <summary>
                if this instance supports cancellation, this will set Cancel to true with an affiliated cancellation message
            </summary>
            <param name="cancelationMessage"></param>
        </member>
        <member name="T:Umbraco.Cms.Core.Events.CancellableObjectEventArgs">
            <summary>
                Provides a base class for classes representing event data, for events that support cancellation, and expose an
                impacted object.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.CancellableObjectEventArgs.EventObject">
            <summary>
                Gets or sets the impacted object.
            </summary>
            <remarks>
                This is protected so that inheritors can expose it with their own name
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Events.CancellableObjectEventArgs`1">
            <summary>
                Represent event data, for events that support cancellation, and expose an impacted object.
            </summary>
            <typeparam name="TEventObject">The type of the exposed, impacted object.</typeparam>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.CancellableObjectEventArgs`1.EventObject">
            <summary>
                Gets or sets the impacted object.
            </summary>
            <remarks>
                This is protected so that inheritors can expose it with their own name
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.CopyEventArgs`1.Copy">
            <summary>
                The copied entity
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.CopyEventArgs`1.Original">
            <summary>
                The original entity
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.CopyEventArgs`1.ParentId">
            <summary>
                Gets or Sets the Id of the objects new parent.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.DeleteEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
                Constructor accepting multiple entities that are used in the delete operation
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.DeleteEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
                Constructor accepting multiple entities that are used in the delete operation
            </summary>
            <param name="eventObject"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.DeleteEventArgs`1.#ctor(`0,Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
                Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.DeleteEventArgs`1.#ctor(`0,System.Boolean,Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
                Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.DeleteEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
                Constructor accepting multiple entities that are used in the delete operation
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.DeleteEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Constructor accepting multiple entities that are used in the delete operation
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.DeleteEventArgs`1.#ctor(`0)">
            <summary>
                Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.DeleteEventArgs`1.#ctor(`0,System.Boolean)">
            <summary>
                Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.DeleteEventArgs`1.DeletedEntities">
            <summary>
                Returns all entities that were deleted during the operation
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.DeleteEventArgs`1.MediaFilesToDelete">
            <summary>
                A list of media files that can be added to during a deleted operation for which Umbraco will ensure are removed
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.DeleteEventArgs.Id">
            <summary>
                Gets the Id of the object being deleted.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Events.EventAggregator">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Events.EventAggregator.Publish``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Events.EventAggregator.Publish``2(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Events.EventAggregator.PublishAsync``1(``0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Events.EventAggregator.PublishAsync``2(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Events.EventAggregator.PublishCancelable``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Events.EventAggregator.PublishCancelableAsync``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Events.EventAggregator.#ctor(Umbraco.Cms.Core.Events.ServiceFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventAggregator" /> class.
            </summary>
            <param name="serviceFactory">The service instance factory.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Events.ServiceFactory">
            <summary>
            A factory method used to resolve all services.
            For multiple instances, it will resolve against <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <param name="serviceType">Type of service to resolve.</param>
            <returns>
            An instance of type <paramref name="serviceType" />.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Events.ServiceFactoryExtensions">
            <summary>
            Extensions for <see cref="T:Umbraco.Cms.Core.Events.ServiceFactory" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.ServiceFactoryExtensions.GetInstance``1(Umbraco.Cms.Core.Events.ServiceFactory)">
            <summary>
            Gets an instance of <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="factory">The service factory.</param>
            <returns>
            The new instance.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.ServiceFactoryExtensions.GetInstances``1(Umbraco.Cms.Core.Events.ServiceFactory)">
            <summary>
            Gets a collection of instances of <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The collection item type to return.</typeparam>
            <param name="factory">The service factory.</param>
            <returns>
            The new instance collection.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.NotificationAsyncHandlerWrapperImpl`1.HandleAsync``2(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken,Umbraco.Cms.Core.Events.ServiceFactory,System.Func{System.Collections.Generic.IEnumerable{System.Func{System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task}},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <remarks>
                <para>
                    Background - During v9 build we wanted an in-process message bus to facilitate removal of the old static event
                    handlers. <br />
                    Instead of taking a dependency on MediatR we (the community) implemented our own using MediatR as inspiration.
                </para>
                <para>
                    Some things worth knowing about MediatR.
                    <list type="number">
                        <item>
                            All handlers are by default registered with transient lifetime, but can easily depend on services
                            with state.
                        </item>
                        <item>
                            Both the Mediatr instance and its handler resolver are registered transient and as such it is always
                            possible to depend on scoped services in a handler.
                        </item>
                    </list>
                </para>
                <para>
                    Our EventAggregator started out registered with a transient lifetime but later (before initial release) the
                    registration was changed to singleton, presumably
                    because there are a lot of singleton services in Umbraco which like to publish notifications and it's a pain to
                    use scoped services from a singleton.
                    <br />
                    The problem with a singleton EventAggregator is it forces handlers to create a service scope and service locate
                    any scoped services
                    they wish to make use of e.g. a unit of work (think entity framework DBContext).
                </para>
                <para>
                    Moving forwards it probably makes more sense to register EventAggregator transient but doing so now would mean
                    an awful lot of service location to avoid breaking changes.
                    <br />
                    For now we can do the next best thing which is to create a scope for each published notification, thus enabling
                    the transient handlers to take a dependency on a scoped service.
                </para>
                <para>
                    Did discuss using HttpContextAccessor/IScopedServiceProvider to enable sharing of scopes when publisher has
                    http context,
                    but decided against because it's inconsistent with what happens in background threads and will just cause
                    confusion.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.NotificationHandlerWrapperImpl`1.Handle``2(System.Collections.Generic.IEnumerable{``0},Umbraco.Cms.Core.Events.ServiceFactory,System.Action{System.Collections.Generic.IEnumerable{System.Action{System.Collections.Generic.IEnumerable{``0}}},System.Collections.Generic.IEnumerable{``0}})">
            <remarks>
                See remarks on <see cref="M:Umbraco.Cms.Core.Events.NotificationAsyncHandlerWrapperImpl`1.HandleAsync``2(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken,Umbraco.Cms.Core.Events.ServiceFactory,System.Func{System.Collections.Generic.IEnumerable{System.Func{System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task}},System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task})" /> for explanation on
                what's going on with the IServiceProvider stuff here.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Events.EventDefinitionFilter">
            <summary>
                The filter used in the <see cref="T:Umbraco.Cms.Core.Events.IEventDispatcher" /> GetEvents method which determines
                how the result list is filtered
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Events.EventDefinitionFilter.All">
            <summary>
                Returns all events tracked
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Events.EventDefinitionFilter.FirstIn">
            <summary>
                Deduplicates events and only returns the first duplicate instance tracked
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Events.EventDefinitionFilter.LastIn">
            <summary>
                Deduplicates events and only returns the last duplicate instance tracked
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Events.EventExtensions">
            <summary>
                Extension methods for cancellable event operations
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.EventExtensions.IsRaisedEventCancelled``2(Umbraco.Cms.Core.Events.TypedEventHandler{``0,``1},``1,``0)">
            <summary>
                Raises a cancelable event and returns a value indicating whether the event should be cancelled.
            </summary>
            <typeparam name="TSender">The type of the event source.</typeparam>
            <typeparam name="TArgs">The type of the event data.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <param name="args">The event source.</param>
            <param name="sender">The event data.</param>
            <returns>A value indicating whether the cancelable event should be cancelled</returns>
            <remarks>A cancelable event is raised by a component when it is about to perform an action that can be canceled.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.EventExtensions.RaiseEvent``2(Umbraco.Cms.Core.Events.TypedEventHandler{``0,``1},``1,``0)">
            <summary>
                Raises an event.
            </summary>
            <typeparam name="TSender">The type of the event source.</typeparam>
            <typeparam name="TArgs">The type of the event data.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <param name="args">The event source.</param>
            <param name="sender">The event data.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Events.EventMessage">
            <summary>
                An event message
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.EventMessage.#ctor(System.String,System.String,Umbraco.Cms.Core.Events.EventMessageType)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessage" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.EventMessage.IsDefaultEventMessage">
            <summary>
                This is used to track if this message should be used as a default message so that Umbraco doesn't also append it's
                own default messages
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Events.EventMessages">
            <summary>
                Event messages collection
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Events.EventMessageType">
            <summary>
                The type of event message
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Events.EventNameExtractor">
            <summary>
                There is actually no way to discover an event name in c# at the time of raising the event. It is possible
                to get the event name from the handler that is being executed based on the event being raised, however that is not
                what we want in this case. We need to find the event name before it is being raised - you would think that it's
                possible
                with reflection or anything but that is not the case, the delegate that defines an event has no info attached to
                it, it
                is literally just an event.
                So what this does is take the sender and event args objects, looks up all public/static events on the sender that
                have
                a generic event handler with generic arguments (but only) one, then we match the type of event arguments with the
                ones
                being passed in. As it turns out, in our services this will work for the majority of our events! In some cases it
                may not
                work and we'll have to supply a string but hopefully this saves a bit of magic strings.
                We can also write tests to validate these are all working correctly for all services.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Events.EventNameExtractor.CandidateEvents">
            <summary>
                Used to cache all candidate events for a given type so we don't re-look them up
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Events.EventNameExtractor.MatchedEventNames">
            <summary>
                Used to cache all matched event names by (sender type + arg type) so we don't re-look them up
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.EventNameExtractor.FindEvent(System.Type,System.Type,System.Func{System.String,System.Boolean})">
            <summary>
                Finds the event name on the sender that matches the args type
            </summary>
            <param name="senderType"></param>
            <param name="argsType"></param>
            <param name="exclude">
                A filter to exclude matched event names, this filter should return true to exclude the event name from being
                matched
            </param>
            <returns>
                null if not found or an ambiguous match
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.EventNameExtractor.FindEvent(System.Object,System.Object,System.Func{System.String,System.Boolean})">
            <summary>
                Finds the event name on the sender that matches the args type
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <param name="exclude">
                A filter to exclude matched event names, this filter should return true to exclude the event name from being
                matched
            </param>
            <returns>
                null if not found or an ambiguous match
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.EventNameExtractor.MatchIngNames(System.String)">
            <summary>
                Return true if the event is named with an ING name such as "Saving" or "RollingBack"
            </summary>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.EventNameExtractor.MatchNonIngNames(System.String)">
            <summary>
                Return true if the event is not named with an ING name such as "Saving" or "RollingBack"
            </summary>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Events.IEventAggregator">
            <summary>
            Defines an object that channels events from multiple objects into a single object to simplify registration for clients.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.IEventAggregator.Publish``1(``0)">
            <summary>
            Synchronously send a notification to multiple handlers of both sync and async.
            </summary>
            <typeparam name="TNotification">The type of notification being handled.</typeparam>
            <param name="notification">The notification object.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.IEventAggregator.Publish``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Synchronously send a notifications to multiple handlers of both sync and async.
            </summary>
            <typeparam name="TNotification">The type of notification being handled.</typeparam>
            <typeparam name="TNotificationHandler">The type of the notification handler.</typeparam>
            <param name="notifications">The notification objects.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.IEventAggregator.PublishAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously send a notification to multiple handlers of both sync and async.
            </summary>
            <typeparam name="TNotification">The type of notification being handled.</typeparam>
            <param name="notification">The notification object.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>
            A task that represents the publish operation.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.IEventAggregator.PublishAsync``2(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously send a notifications to multiple handlers of both sync and async.
            </summary>
            <typeparam name="TNotification">The type of notification being handled.</typeparam>
            <typeparam name="TNotificationHandler">The type of the notification handler.</typeparam>
            <param name="notifications">The notification objects.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>
            A task that represents the publish operation.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.IEventAggregator.PublishCancelable``1(``0)">
            <summary>
            Publishes a cancelable notification to the notification subscribers.
            </summary>
            <typeparam name="TCancelableNotification">The type of notification being handled.</typeparam>
            <param name="notification">The notification.</param>
            <returns>
              <c>true</c> if the notification was cancelled by a subscriber; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.IEventAggregator.PublishCancelableAsync``1(``0)">
            <summary>
            Publishes a cancelable notification async to the notification subscribers.
            </summary>
            <typeparam name="TCancelableNotification">The type of notification being handled.</typeparam>
            <param name="notification">The notification.</param>
            <returns>
              <c>true</c> if the notification was cancelled by a subscriber; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Events.EventAggregatorExtensions">
            <summary>
            Extension methods for <see cref="T:Umbraco.Cms.Core.Events.IEventAggregator" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.EventAggregatorExtensions.Publish``1(Umbraco.Cms.Core.Events.IEventAggregator,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Synchronously send a notifications to multiple handlers of both sync and async.
            </summary>
            <typeparam name="TNotification">The type of notification being handled.</typeparam>
            <param name="eventAggregator">The event aggregator.</param>
            <param name="notifications">The notification objects.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.EventAggregatorExtensions.Publish``2(Umbraco.Cms.Core.Events.IEventAggregator,``0)">
            <summary>
            Synchronously send a notifications to multiple handlers of both sync and async.
            </summary>
            <typeparam name="TNotification">The type of notification being handled.</typeparam>
            <typeparam name="TNotificationHandler">The type of the notification handler.</typeparam>
            <param name="eventAggregator">The event aggregator.</param>
            <param name="notification">The notification.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.EventAggregatorExtensions.PublishAsync``1(Umbraco.Cms.Core.Events.IEventAggregator,System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously send a notification to multiple handlers of both sync and async.
            </summary>
            <typeparam name="TNotification">The type of notification being handled.</typeparam>
            <param name="eventAggregator">The event aggregator.</param>
            <param name="notifications">The notifications.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>
            A task that represents the publish operation.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.EventAggregatorExtensions.PublishAsync``2(Umbraco.Cms.Core.Events.IEventAggregator,``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously send a notification to multiple handlers of both sync and async.
            </summary>
            <typeparam name="TNotification">The type of notification being handled.</typeparam>
            <typeparam name="TNotificationHandler">The type of the notification handler.</typeparam>
            <param name="eventAggregator">The event aggregator.</param>
            <param name="notification">The notification object.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>
            A task that represents the publish operation.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Events.IEventDispatcher">
            <summary>
                Dispatches events from within a scope.
            </summary>
            <remarks>
                <para>
                    The name of the event is auto-magically discovered by matching the sender type, args type, and
                    eventHandler type. If the match is not unique, then the name parameter must be used to specify the
                    name in an explicit way.
                </para>
                <para>
                    What happens when an event is dispatched depends on the scope settings. It can be anything from
                    "trigger immediately" to "just ignore". Refer to the scope documentation for more details.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.IEventDispatcher.DispatchCancelable(System.EventHandler,System.Object,Umbraco.Cms.Core.Events.CancellableEventArgs,System.String)">
            <summary>
                Dispatches a cancelable event.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="sender">The object that raised the event.</param>
            <param name="args">The event data.</param>
            <param name="name">The optional name of the event.</param>
            <returns>A value indicating whether the cancelable event was cancelled.</returns>
            <remarks>See general remarks on the interface.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.IEventDispatcher.DispatchCancelable``1(System.EventHandler{``0},System.Object,``0,System.String)">
            <summary>
                Dispatches a cancelable event.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="sender">The object that raised the event.</param>
            <param name="args">The event data.</param>
            <param name="name">The optional name of the event.</param>
            <returns>A value indicating whether the cancelable event was cancelled.</returns>
            <remarks>See general remarks on the interface.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.IEventDispatcher.DispatchCancelable``2(Umbraco.Cms.Core.Events.TypedEventHandler{``0,``1},``0,``1,System.String)">
            <summary>
                Dispatches a cancelable event.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="sender">The object that raised the event.</param>
            <param name="args">The event data.</param>
            <param name="name">The optional name of the event.</param>
            <returns>A value indicating whether the cancelable event was cancelled.</returns>
            <remarks>See general remarks on the interface.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.IEventDispatcher.Dispatch(System.EventHandler,System.Object,System.EventArgs,System.String)">
            <summary>
                Dispatches an event.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="sender">The object that raised the event.</param>
            <param name="args">The event data.</param>
            <param name="name">The optional name of the event.</param>
            <remarks>See general remarks on the interface.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.IEventDispatcher.Dispatch``1(System.EventHandler{``0},System.Object,``0,System.String)">
            <summary>
                Dispatches an event.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="sender">The object that raised the event.</param>
            <param name="args">The event data.</param>
            <param name="name">The optional name of the event.</param>
            <remarks>See general remarks on the interface.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.IEventDispatcher.Dispatch``2(Umbraco.Cms.Core.Events.TypedEventHandler{``0,``1},``0,``1,System.String)">
            <summary>
                Dispatches an event.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="sender">The object that raised the event.</param>
            <param name="args">The event data.</param>
            <param name="name">The optional name of the event.</param>
            <remarks>See general remarks on the interface.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.IEventDispatcher.ScopeExit(System.Boolean)">
            <summary>
                Notifies the dispatcher that the scope is exiting.
            </summary>
            <param name="completed">A value indicating whether the scope completed.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.IEventDispatcher.GetEvents(Umbraco.Cms.Core.Events.EventDefinitionFilter)">
            <summary>
                Gets the collected events.
            </summary>
            <returns>The collected events.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Events.IEventMessagesFactory">
            <summary>
                Event messages factory
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Events.INotificationAsyncHandler`1">
            <summary>
            Defines a handler for a async notification.
            </summary>
            <typeparam name="TNotification">The type of notification being handled.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.INotificationAsyncHandler`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Handles a notification.
            </summary>
            <param name="notification">The notification.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.INotificationAsyncHandler`1.HandleAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Handles the notifications.
            </summary>
            <param name="notifications">The notifications.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Events.INotificationHandler">
            <summary>
            Marker interface for notification handlers.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Events.INotificationHandler`1">
            <summary>
            Defines a handler for a notification.
            </summary>
            <typeparam name="TNotification">The type of notification being handled.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.INotificationHandler`1.Handle(`0)">
            <summary>
            Handles a notification.
            </summary>
            <param name="notification">The notification.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.INotificationHandler`1.Handle(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Handles the notifications.
            </summary>
            <param name="notifications">The notifications.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.IScopedNotificationPublisher.Suppress">
            <summary>
                Suppresses all notifications from being added/created until the result object is disposed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.IScopedNotificationPublisher.PublishCancelable(Umbraco.Cms.Core.Notifications.ICancelableNotification)">
            <summary>
                Publishes a cancelable notification to the notification subscribers
            </summary>
            <param name="notification"></param>
            <returns>True if the notification was cancelled by a subscriber, false otherwise</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.IScopedNotificationPublisher.PublishCancelableAsync(Umbraco.Cms.Core.Notifications.ICancelableNotification)">
            <summary>
                Publishes a cancelable notification to the notification subscribers
            </summary>
            <param name="notification"></param>
            <returns>True if the notification was cancelled by a subscriber, false otherwise</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.IScopedNotificationPublisher.Publish(Umbraco.Cms.Core.Notifications.INotification)">
            <summary>
                Publishes a notification to the notification subscribers
            </summary>
            <param name="notification"></param>
            <remarks>
                The notification is published upon successful completion of the current scope, i.e. when things have been
                saved/published/deleted etc.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.IScopedNotificationPublisher.ScopeExit(System.Boolean)">
            <summary>
                Invokes publishing of all pending notifications within the current scope
            </summary>
            <param name="completed"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.MoveEventArgs`1.#ctor(System.Boolean,Umbraco.Cms.Core.Events.EventMessages,Umbraco.Cms.Core.Events.MoveEventInfo{`0}[])">
            <summary>
                Constructor accepting a collection of MoveEventInfo objects
            </summary>
            <param name="canCancel"></param>
            <param name="eventMessages"></param>
            <param name="moveInfo">
                A collection of MoveEventInfo objects that exposes all entities that have been moved during a single move operation
            </param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.MoveEventArgs`1.#ctor(Umbraco.Cms.Core.Events.EventMessages,Umbraco.Cms.Core.Events.MoveEventInfo{`0}[])">
            <summary>
                Constructor accepting a collection of MoveEventInfo objects
            </summary>
            <param name="eventMessages"></param>
            <param name="moveInfo">
                A collection of MoveEventInfo objects that exposes all entities that have been moved during a single move operation
            </param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.MoveEventArgs`1.#ctor(System.Boolean,Umbraco.Cms.Core.Events.MoveEventInfo{`0}[])">
            <summary>
                Constructor accepting a collection of MoveEventInfo objects
            </summary>
            <param name="canCancel"></param>
            <param name="moveInfo">
                A collection of MoveEventInfo objects that exposes all entities that have been moved during a single move operation
            </param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.MoveEventArgs`1.#ctor(Umbraco.Cms.Core.Events.MoveEventInfo{`0}[])">
            <summary>
                Constructor accepting a collection of MoveEventInfo objects
            </summary>
            <param name="moveInfo">
                A collection of MoveEventInfo objects that exposes all entities that have been moved during a single move operation
            </param>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.MoveEventArgs`1.MoveInfoCollection">
            <summary>
                Gets all MoveEventInfo objects used to create the object
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.NewEventArgs`1.Entity">
            <summary>
                The entity being created
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.NewEventArgs`1.Alias">
            <summary>
                Gets or Sets the Alias.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.NewEventArgs`1.ParentId">
            <summary>
                Gets or Sets the Id of the parent.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.NewEventArgs`1.Parent">
            <summary>
                Gets or Sets the parent IContent object.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Events.PassThroughEventDispatcher">
            <summary>
                An IEventDispatcher that immediately raise all events.
            </summary>
            <remarks>
                This means that events will be raised during the scope transaction,
                whatever happens, and the transaction could roll back in the end.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.PublishEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
                Constructor accepting multiple entities that are used in the publish operation
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.PublishEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
                Constructor accepting multiple entities that are used in the publish operation
            </summary>
            <param name="eventObject"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.PublishEventArgs`1.#ctor(`0,Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
                Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.PublishEventArgs`1.#ctor(`0,System.Boolean,Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
                Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.PublishEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Boolean)">
            <summary>
                Constructor accepting multiple entities that are used in the publish operation
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="isAllPublished"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.PublishEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Constructor accepting multiple entities that are used in the publish operation
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.PublishEventArgs`1.#ctor(`0)">
            <summary>
                Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.PublishEventArgs`1.#ctor(`0,System.Boolean,System.Boolean)">
            <summary>
                Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="isAllPublished"></param>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.PublishEventArgs`1.PublishedEntities">
            <summary>
                Returns all entities that were published during the operation
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Events.QueuingEventDispatcher">
            <summary>
                An IEventDispatcher that queues events, and raise them when the scope
                exits and has been completed.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Events.QueuingEventDispatcherBase">
            <summary>
                An IEventDispatcher that queues events.
            </summary>
            <remarks>
                <para>Can raise, or ignore, cancelable events, depending on option.</para>
                <para>
                    Implementations must override ScopeExitCompleted to define what
                    to do with the events when the scope exits and has been completed.
                </para>
                <para>If the scope exits without being completed, events are ignored.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.RecycleBinEventArgs.NodeObjectType">
            <summary>
                Gets the Id of the node object type of the items
                being deleted from the Recycle Bin.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.RecycleBinEventArgs.RecycleBinEmptiedSuccessfully">
            <summary>
                Boolean indicating whether the Recycle Bin was emptied successfully
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.RecycleBinEventArgs.IsContentRecycleBin">
            <summary>
                Boolean indicating whether this event was fired for the Content's Recycle Bin.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.RecycleBinEventArgs.IsMediaRecycleBin">
            <summary>
                Boolean indicating whether this event was fired for the Media's Recycle Bin.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.RollbackEventArgs`1.Entity">
            <summary>
                The entity being rolledback
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.SaveEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,Umbraco.Cms.Core.Events.EventMessages,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                Constructor accepting multiple entities that are used in the saving operation
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="messages"></param>
            <param name="additionalData"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.SaveEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
                Constructor accepting multiple entities that are used in the saving operation
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.SaveEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
                Constructor accepting multiple entities that are used in the saving operation
            </summary>
            <param name="eventObject"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.SaveEventArgs`1.#ctor(`0,System.Boolean,Umbraco.Cms.Core.Events.EventMessages,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="messages"></param>
            <param name="additionalData"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.SaveEventArgs`1.#ctor(`0,Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
                Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.SaveEventArgs`1.#ctor(`0,System.Boolean,Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
                Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.SaveEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
                Constructor accepting multiple entities that are used in the saving operation
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.SaveEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Constructor accepting multiple entities that are used in the saving operation
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.SaveEventArgs`1.#ctor(`0)">
            <summary>
                Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.SaveEventArgs`1.#ctor(`0,System.Boolean)">
            <summary>
                Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.SaveEventArgs`1.SavedEntities">
            <summary>
                Returns all entities that were saved during the operation
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Events.SendToPublishEventArgs`1.Entity">
            <summary>
                The entity being sent to publish
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Events.SupersedeEventAttribute">
            <summary>
                This is used to know if the event arg attributed should supersede another event arg type when
                tracking events for the same entity. If one event args supersedes another then the event args that have been
                superseded
                will mean that the event will not be dispatched or the args will be filtered to exclude the entity.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Events.TransientEventMessagesFactory">
            <summary>
                A simple/default transient messages factory
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Events.UserNotificationsHandler.Notifier">
            <summary>
                This class is used to send the notifications
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Events.UserNotificationsHandler.Notifier.#ctor(Umbraco.Cms.Core.Security.IBackOfficeSecurityAccessor,Umbraco.Cms.Core.Hosting.IHostingEnvironment,Umbraco.Cms.Core.Services.INotificationService,Umbraco.Cms.Core.Services.IUserService,Umbraco.Cms.Core.Services.ILocalizedTextService,Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.GlobalSettings},Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Events.UserNotificationsHandler.Notifier})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.UserNotificationsHandler.Notifier" /> class.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Exceptions.AuthorizationException">
            <summary>
                The exception that is thrown when authorization failed.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.AuthorizationException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.AuthorizationException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.AuthorizationException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.AuthorizationException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.AuthorizationException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.AuthorizationException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null reference (
                <see langword="Nothing" /> in Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.AuthorizationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.AuthorizationException" /> class.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Exceptions.BootFailedException">
            <summary>
                An exception that is thrown if the Umbraco application cannot boot.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="F:Umbraco.Cms.Core.Exceptions.BootFailedException.DefaultMessage">
            <summary>
                Defines the default boot failed exception message.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.BootFailedException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.BootFailedException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.BootFailedException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.BootFailedException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message
                and a reference to the inner exception which is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The inner exception, or null.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.BootFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.BootFailedException" /> class.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.BootFailedException.Rethrow(Umbraco.Cms.Core.Exceptions.BootFailedException)">
            <summary>
                Rethrows a captured <see cref="T:Umbraco.Cms.Core.Exceptions.BootFailedException" />.
            </summary>
            <param name="bootFailedException">The boot failed exception.</param>
            <exception cref="T:Umbraco.Cms.Core.Exceptions.BootFailedException">
            </exception>
            <remarks>
                The exception can be null, in which case a default message is used.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Exceptions.ConfigurationException">
            <summary>
                An exception that is thrown if the configuration is wrong.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.ConfigurationException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.ConfigurationException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.ConfigurationException" /> class with a specified error message
                and a reference to the inner exception which is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The inner exception, or null.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.ConfigurationException" /> class.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Exceptions.DataOperationException`1">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.DataOperationException`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.DataOperationException`1" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.DataOperationException`1.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.DataOperationException`1" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.DataOperationException`1.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.DataOperationException`1" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null reference (
                <see langword="Nothing" /> in Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.DataOperationException`1.#ctor(`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.DataOperationException`1" /> class.
            </summary>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.DataOperationException`1.#ctor(`0,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.DataOperationException`1" /> class.
            </summary>
            <param name="operation">The operation.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Exceptions.DataOperationException`1.Operation">
            <summary>
                Gets the operation.
            </summary>
            <value>
                The operation.
            </value>
            <remarks>
                This object should be serializable to prevent a <see cref="T:System.Runtime.Serialization.SerializationException" /> to be thrown.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Exceptions.InvalidCompositionException">
            <summary>
                The exception that is thrown when a composition is invalid.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.InvalidCompositionException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.InvalidCompositionException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.InvalidCompositionException.#ctor(System.String,System.String[])">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.InvalidCompositionException" /> class.
            </summary>
            <param name="contentTypeAlias">The content type alias.</param>
            <param name="propertyTypeAliases">The property type aliases.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.InvalidCompositionException.#ctor(System.String,System.String,System.String[])">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.InvalidCompositionException" /> class.
            </summary>
            <param name="contentTypeAlias">The content type alias.</param>
            <param name="addedCompositionAlias">The added composition alias.</param>
            <param name="propertyTypeAliases">The property type aliases.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.InvalidCompositionException.#ctor(System.String,System.String,System.String[],System.String[])">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.InvalidCompositionException" /> class.
            </summary>
            <param name="contentTypeAlias">The content type alias.</param>
            <param name="addedCompositionAlias">The added composition alias.</param>
            <param name="propertyTypeAliases">The property type aliases.</param>
            <param name="propertyGroupAliases">The property group aliases.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.InvalidCompositionException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.InvalidCompositionException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.InvalidCompositionException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.InvalidCompositionException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null reference (
                <see langword="Nothing" /> in Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="P:Umbraco.Cms.Core.Exceptions.InvalidCompositionException.ContentTypeAlias">
            <summary>
                Gets the content type alias.
            </summary>
            <value>
                The content type alias.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Exceptions.InvalidCompositionException.AddedCompositionAlias">
            <summary>
                Gets the added composition alias.
            </summary>
            <value>
                The added composition alias.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Exceptions.InvalidCompositionException.PropertyTypeAliases">
            <summary>
                Gets the property type aliases.
            </summary>
            <value>
                The property type aliases.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Exceptions.InvalidCompositionException.PropertyGroupAliases">
            <summary>
                Gets the property group aliases.
            </summary>
            <value>
                The property group aliases.
            </value>
        </member>
        <member name="T:Umbraco.Cms.Core.Exceptions.PanicException">
            <summary>
                Represents an internal exception that in theory should never been thrown, it is only thrown in circumstances that
                should never happen.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.PanicException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.PanicException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.PanicException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.PanicException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.PanicException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.PanicException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null reference (
                <see langword="Nothing" /> in Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.PanicException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.PanicException" /> class.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Exceptions.UnattendedInstallException">
            <summary>
                An exception that is thrown if an unattended installation occurs.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.UnattendedInstallException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.UnattendedInstallException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.UnattendedInstallException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.UnattendedInstallException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.UnattendedInstallException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.UnattendedInstallException" /> class with a specified error message
                and a reference to the inner exception which is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The inner exception, or null.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Exceptions.UnattendedInstallException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Exceptions.UnattendedInstallException" /> class.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object
                data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
                information about the source or destination.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.ExpressionHelper">
            <summary>
                A set of helper methods for dealing with expressions
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.ExpressionHelper.GetPropertyInfo``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Gets a <see cref="T:System.Reflection.PropertyInfo" /> object from an expression.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="source">The source.</param>
            <param name="propertyLambda">The property lambda.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.ExpressionHelper.GetPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Gets a <see cref="T:System.Reflection.PropertyInfo" /> object from an expression.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyLambda">The property lambda.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.ExpressionHelper.GetMethodInfo``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
                Gets a <see cref="T:System.Reflection.MethodInfo" /> from an <see cref="T:System.Linq.Expressions.Expression`1"/> of <see cref="T:System.Action`1"/> provided it refers to a method call.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fromExpression">From expression.</param>
            <returns>
                The <see cref="T:System.Reflection.MethodInfo" /> or null if <paramref name="fromExpression" /> is null or cannot be converted to
                <see cref="T:System.Linq.Expressions.MethodCallExpression" />.
            </returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.ExpressionHelper.GetMethodInfo``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Gets the method info.
            </summary>
            <typeparam name="TReturn">The return type of the method.</typeparam>
            <param name="fromExpression">From expression.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.ExpressionHelper.GetMethodInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Gets the method info.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="fromExpression">From expression.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.ExpressionHelper.GetMethod(System.Linq.Expressions.Expression)">
            <summary>
                Gets a <see cref="T:System.Reflection.MethodInfo" /> from an <see cref="T:System.Linq.Expressions.Expression" /> provided it refers to a method call.
            </summary>
            <param name="expression">The expression.</param>
            <returns>
                The <see cref="T:System.Reflection.MethodInfo" /> or null if <paramref name="expression" /> cannot be converted to
                <see cref="T:System.Linq.Expressions.MethodCallExpression" />.
            </returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.ExpressionHelper.GetMemberInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Gets a <see cref="T:System.Reflection.MemberInfo" /> from an <see cref="T:System.Linq.Expressions.Expression`1" /> of <see cref="T:System.Func`2"/> provided it refers to member
                access.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TReturn">The type of the return.</typeparam>
            <param name="fromExpression">From expression.</param>
            <returns>
                The <see cref="T:System.Reflection.MemberInfo" /> or null if <paramref name="fromExpression" /> cannot be converted to
                <see cref="T:System.Linq.Expressions.MemberExpression" />.
            </returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.ExpressionHelper.IsMethodSignatureEqualTo(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
                Determines whether the MethodInfo is the same based on signature, not based on the equality operator or HashCode.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
                <c>true</c> if [is method signature equal to] [the specified left]; otherwise, <c>false</c>.
            </returns>
            <remarks>
                This is useful for comparing Expression methods that may contain different generic types
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.ExpressionHelper.GetMember(System.Linq.Expressions.Expression)">
            <summary>
                Gets a <see cref="T:System.Reflection.MemberInfo" /> from an <see cref="T:System.Linq.Expressions.Expression" /> provided it refers to member access.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.ExpressionHelper.GetStaticMethodInfo(System.Delegate)">
            <summary>
                Gets a <see cref="T:System.Reflection.MethodInfo" /> from a <see cref="T:System.Delegate" />
            </summary>
            <param name="fromMethodGroup">From method group.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.ExpressionHelper.IsMethod(System.Linq.Expressions.Expression)">
            <summary>
                Determines whether the specified expression is a method.
            </summary>
            <param name="expression">The expression.</param>
            <returns><c>true</c> if the specified expression is method; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.ExpressionHelper.IsMember(System.Linq.Expressions.Expression)">
            <summary>
                Determines whether the specified expression is a member.
            </summary>
            <param name="expression">The expression.</param>
            <returns><c>true</c> if the specified expression is member; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.ExpressionHelper.IsConstant(System.Linq.Expressions.Expression)">
            <summary>
                Determines whether the specified expression is a constant.
            </summary>
            <param name="expression">The expression.</param>
            <returns><c>true</c> if the specified expression is constant; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.ExpressionHelper.GetFirstValueFromArguments(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
                Gets the first value from the supplied arguments of an expression, for those arguments that can be cast to
                <see cref="T:System.Linq.Expressions.ConstantExpression" />.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Extensions.HostEnvironmentExtensions">
            <summary>
                Contains extension methods for the <see cref="T:Microsoft.Extensions.Hosting.IHostEnvironment" /> interface.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Extensions.HostEnvironmentExtensions.MapPathContentRoot(Microsoft.Extensions.Hosting.IHostEnvironment,System.String)">
            <summary>
                Maps a virtual path to a physical path to the application's content root.
            </summary>
            <remarks>
                Generally the content root is the parent directory of the web root directory.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Extensions.HostEnvironmentExtensions.GetTemporaryApplicationId(Microsoft.Extensions.Hosting.IHostEnvironment)">
            <summary>
                Gets a temporary application id for use before the ioc container is built.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Extensions.LineEndingsExtensions.Lf(System.String)">
            <summary>
                Ensures Lf only everywhere.
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The filtered text.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Extensions.LineEndingsExtensions.CrLf(System.String)">
            <summary>
                Ensures CrLf everywhere.
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The filtered text.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Extensions.LineEndingsExtensions.EnsureNativeLineEndings(System.String)">
            <summary>
            Ensures native line endings.
            </summary>
            <param name="text">the text to ensure native line endings for.</param>
            <returns>the text with native line endings.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Extensions.UmbracoBuilderExtensions.AddNotificationsFromAssembly``1(Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder)">
            <summary>
                Registers all <see cref="T:Umbraco.Cms.Core.Events.INotificationHandler`1" /> within an assembly
            </summary>
            <param name="self">
                <see cref="T:Umbraco.Cms.Core.DependencyInjection.IUmbracoBuilder" />
            </param>
            <typeparam name="T">Type contained within the targeted assembly</typeparam>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Factories.IDatabaseSettingsFactory">
            <summary>
            Creates <see cref="T:Umbraco.Cms.Core.Models.Installer.DatabaseSettingsModel"/> based on the currently configured providers.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Factories.IDatabaseSettingsFactory.GetDatabaseSettings">
            <summary>
            Creates a collection of database settings models for the currently installed database providers
            </summary>
            <returns>Collection of database settings.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if a connection string is preconfigured, but provider name is missing.</exception>
        </member>
        <member name="T:Umbraco.Cms.Core.Features.DisabledFeatures">
            <summary>
                Represents disabled features.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Features.DisabledFeatures.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Features.DisabledFeatures" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Features.DisabledFeatures.Controllers">
            <summary>
                Gets the disabled controllers.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Features.DisabledFeatures.DisableDevicePreview">
            <summary>
                Disables the device preview feature of previewing.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Features.DisabledFeatures.DisableTemplates">
            <summary>
                If true, all references to templates will be removed in the back office and routing
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Features.EnabledFeatures">
            <summary>
                Represents enabled features.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Features.EnabledFeatures.PreviewExtendedView">
            <summary>
                This allows us to inject a razor view into the Umbraco preview view to extend it
            </summary>
            <remarks>
                This is set to a virtual path of a razor view file
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Features.IUmbracoFeature">
            <summary>
                This is a marker interface to allow controllers to be disabled if also marked with FeatureAuthorizeAttribute.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Features.UmbracoFeatures">
            <summary>
                Represents the Umbraco features.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Features.UmbracoFeatures.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Features.UmbracoFeatures" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Features.UmbracoFeatures.Disabled">
            <summary>
                Gets the disabled features.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Features.UmbracoFeatures.Enabled">
            <summary>
                Gets the enabled features.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Features.UmbracoFeatures.IsControllerEnabled(System.Type)">
            <summary>
                Determines whether a controller is enabled.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.GuidUdi">
            <summary>
                Represents a guid-based entity identifier.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.GuidUdi.#ctor(System.String,System.Guid)">
            <summary>
                Initializes a new instance of the GuidUdi class with an entity type and a guid.
            </summary>
            <param name="entityType">The entity type part of the udi.</param>
            <param name="guid">The guid part of the udi.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.GuidUdi.#ctor(System.Uri)">
            <summary>
                Initializes a new instance of the GuidUdi class with an uri value.
            </summary>
            <param name="uriValue">The uri value of the udi.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.GuidUdi.Guid">
            <summary>
                The guid part of the identifier.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.GuidUdi.IsRoot">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.GuidUtils">
            <summary>
                Utility methods for the <see cref="T:System.Guid" /> struct.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.GuidUtils.Combine(System.Guid,System.Guid)">
            <summary>
                Combines two guid instances utilizing an exclusive disjunction.
                The resultant guid is not guaranteed to be unique since the number of unique bits is halved.
            </summary>
            <param name="a">The first guid.</param>
            <param name="b">The seconds guid.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.GuidUtils.ToBase32String(System.Guid,System.Int32)">
            <summary>
                Converts a Guid into a base-32 string.
            </summary>
            <param name="guid">A Guid.</param>
            <param name="length">The string length.</param>
            <returns>A base-32 encoded string.</returns>
            <remarks>
                <para>
                    A base-32 string representation of a Guid is the shortest, efficient, representation
                    that is case insensitive (base-64 is case sensitive).
                </para>
                <para>Length must be 1-26, anything else becomes 26.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.GuidUtils.DecomposedGuid">
            <summary>
                A decomposed guid. Allows access to the high and low bits without unsafe code.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.HashCodeCombiner">
            <summary>
                Used to create a .NET HashCode from multiple objects.
            </summary>
            <remarks>
                .Net has a class the same as this: System.Web.Util.HashCodeCombiner and of course it works for all sorts of things
                which we've not included here as we just need a quick easy class for this in order to create a unique
                hash of directories/files to see if they have changed.
                NOTE: It's probably best to not relying on the hashing result across AppDomains! If you need a constant/reliable
                hash value
                between AppDomains use SHA1. This is perfect for hashing things in a very fast way for a single AppDomain.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.HashCodeCombiner.GetCombinedHashCode">
            <summary>
                Returns the hex code of the combined hash code
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.HashCodeHelper">
            <summary>
                Borrowed from http://stackoverflow.com/a/2575444/694494
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HashCodeHelper.GetHashCodeForOrderNoMatterCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Gets a hashcode for a collection for that the order of items
                does not matter.
                So {1, 2, 3} and {3, 2, 1} will get same hash code.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HashCodeHelper.CombineHashCode``1(System.Int32,``0)">
            <summary>
                Alternative way to get a hashcode is to use a fluent
                interface like this:<br />
                return 0.CombineHashCode(field1).CombineHashCode(field2).
                CombineHashCode(field3);
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.HashGenerator">
            <summary>
                Used to generate a string hash using crypto libraries over multiple objects
            </summary>
            <remarks>
                This should be used to generate a reliable hash that survives AppDomain restarts.
                This will use the crypto libs to generate the hash and will try to ensure that
                strings, etc... are not re-allocated so it's not consuming much memory.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.HashGenerator.GenerateHash">
            <summary>
                Returns the generated hash output of all added objects
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.HealthChecks.Checks.AbstractSettingsCheck">
            <summary>
                Provides a base class for health checks of configuration values.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.AbstractSettingsCheck.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.HealthChecks.Checks.AbstractSettingsCheck" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.AbstractSettingsCheck.ItemPath">
            <summary>
                Gets key within the JSON to check, in the colon-delimited format
                https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-3.1
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.AbstractSettingsCheck.LocalizedTextService">
            <summary>
                Gets the localized text service.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.AbstractSettingsCheck.ReadMoreLink">
            <summary>
                Gets a link to an external resource with more information.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.AbstractSettingsCheck.Values">
            <summary>
                Gets the values to compare against.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.AbstractSettingsCheck.CurrentValue">
            <summary>
                Gets the current value of the config setting
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.AbstractSettingsCheck.ValueComparisonType">
            <summary>
                Gets the comparison type for checking the value.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.AbstractSettingsCheck.CheckSuccessMessage">
            <summary>
                Gets the message for when the check has succeeded.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.AbstractSettingsCheck.CheckErrorMessage">
            <summary>
                Gets the message for when the check has failed.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.AbstractSettingsCheck.GetStatusAsync">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.AbstractSettingsCheck.ExecuteAction(Umbraco.Cms.Core.HealthChecks.HealthCheckAction)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.HealthChecks.Checks.Configuration.NotificationEmailCheck">
            <summary>
                Health check for the recommended production configuration for Notification Email.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Configuration.NotificationEmailCheck.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService,Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.ContentSettings})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.HealthChecks.Checks.Configuration.NotificationEmailCheck" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.Configuration.NotificationEmailCheck.ItemPath">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.Configuration.NotificationEmailCheck.ValueComparisonType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.Configuration.NotificationEmailCheck.Values">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.Configuration.NotificationEmailCheck.CurrentValue">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.Configuration.NotificationEmailCheck.CheckSuccessMessage">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.Configuration.NotificationEmailCheck.CheckErrorMessage">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.Configuration.NotificationEmailCheck.ReadMoreLink">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.HealthChecks.Checks.Data.DatabaseIntegrityCheck">
            <summary>
                Health check for the integrity of the data in the database.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Data.DatabaseIntegrityCheck.#ctor(Umbraco.Cms.Core.Services.IContentService,Umbraco.Cms.Core.Services.IMediaService)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.HealthChecks.Checks.Data.DatabaseIntegrityCheck" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Data.DatabaseIntegrityCheck.GetStatusAsync">
            <summary>
                Get the status for this health check
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Data.DatabaseIntegrityCheck.ExecuteAction(Umbraco.Cms.Core.HealthChecks.HealthCheckAction)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.HealthChecks.Checks.LiveEnvironment.CompilationDebugCheck">
            <summary>
                Health check for the configuration of debug-flag.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.LiveEnvironment.CompilationDebugCheck.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService,Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.HostingSettings})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.HealthChecks.Checks.LiveEnvironment.CompilationDebugCheck" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.LiveEnvironment.CompilationDebugCheck.ItemPath">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.LiveEnvironment.CompilationDebugCheck.ReadMoreLink">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.LiveEnvironment.CompilationDebugCheck.ValueComparisonType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.LiveEnvironment.CompilationDebugCheck.Values">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.LiveEnvironment.CompilationDebugCheck.CurrentValue">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.LiveEnvironment.CompilationDebugCheck.CheckSuccessMessage">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.LiveEnvironment.CompilationDebugCheck.CheckErrorMessage">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.HealthChecks.Checks.LiveEnvironment.RuntimeModeCheck">
            <summary>
                Health check for the recommended production configuration for the runtime mode.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.LiveEnvironment.RuntimeModeCheck.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService,Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.RuntimeSettings})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.HealthChecks.Checks.LiveEnvironment.RuntimeModeCheck" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.LiveEnvironment.RuntimeModeCheck.ItemPath">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.LiveEnvironment.RuntimeModeCheck.ValueComparisonType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.LiveEnvironment.RuntimeModeCheck.Values">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.LiveEnvironment.RuntimeModeCheck.CurrentValue">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.LiveEnvironment.RuntimeModeCheck.CheckSuccessMessage">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.LiveEnvironment.RuntimeModeCheck.CheckErrorMessage">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.LiveEnvironment.RuntimeModeCheck.ReadMoreLink">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.HealthChecks.Checks.Permissions.FolderAndFilePermissionsCheck">
            <summary>
                Health check for the folder and file permissions.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Permissions.FolderAndFilePermissionsCheck.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService,Umbraco.Cms.Core.Install.IFilePermissionHelper)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.HealthChecks.Checks.Permissions.FolderAndFilePermissionsCheck" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Permissions.FolderAndFilePermissionsCheck.GetStatusAsync">
            <summary>
                Get the status for this health check
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Permissions.FolderAndFilePermissionsCheck.ExecuteAction(Umbraco.Cms.Core.HealthChecks.HealthCheckAction)">
            <summary>
                Executes the action and returns it's status
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.HealthChecks.Checks.Security.BaseHttpHeaderCheck">
            <summary>
                Provides a base class for health checks of http header values.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.Security.BaseHttpHeaderCheck.ReadMoreLink">
            <summary>
                Gets a link to an external read more page.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Security.BaseHttpHeaderCheck.GetStatusAsync">
            <summary>
                Get the status for this health check
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Security.BaseHttpHeaderCheck.ExecuteAction(Umbraco.Cms.Core.HealthChecks.HealthCheckAction)">
            <summary>
                Executes the action and returns it's status
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Security.BaseHttpHeaderCheck.CheckForHeader">
            <summary>
                The actual health check method.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.HealthChecks.Checks.Security.ClickJackingCheck">
            <summary>
                Health check for the recommended production setup regarding the X-Frame-Options header.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Security.ClickJackingCheck.#ctor(Umbraco.Cms.Core.Hosting.IHostingEnvironment,Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.HealthChecks.Checks.Security.ClickJackingCheck" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.Security.ClickJackingCheck.ReadMoreLink">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.HealthChecks.Checks.Security.CspCheck">
            <summary>
                Health check for the recommended production setup regarding the content-security-policy header.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Security.CspCheck.#ctor(Umbraco.Cms.Core.Hosting.IHostingEnvironment,Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.HealthChecks.Checks.Security.CspCheck" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.Security.CspCheck.ReadMoreLink">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.HealthChecks.Checks.Security.ExcessiveHeadersCheck">
            <summary>
                Health check for the recommended production setup regarding unnecessary headers.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Security.ExcessiveHeadersCheck.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService,Umbraco.Cms.Core.Hosting.IHostingEnvironment)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.HealthChecks.Checks.Security.ExcessiveHeadersCheck" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Security.ExcessiveHeadersCheck.GetStatusAsync">
            <summary>
                Get the status for this health check
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Security.ExcessiveHeadersCheck.ExecuteAction(Umbraco.Cms.Core.HealthChecks.HealthCheckAction)">
            <summary>
                Executes the action and returns it's status
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.HealthChecks.Checks.Security.HstsCheck">
            <summary>
                Health check for the recommended production setup regarding the Strict-Transport-Security header.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Security.HstsCheck.#ctor(Umbraco.Cms.Core.Hosting.IHostingEnvironment,Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.HealthChecks.Checks.Security.HstsCheck" /> class.
            </summary>
            <remarks>
                The check is mostly based on the instructions in the OWASP CheatSheet
                (https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.md)
                and the blog post of Troy Hunt (https://www.troyhunt.com/understanding-http-strict-transport/)
                If you want do to it perfectly, you have to submit it https://hstspreload.org/,
                but then you should include subdomains and I wouldn't suggest to do that for Umbraco-sites.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.Security.HstsCheck.ReadMoreLink">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Security.HstsCheck.GetStatusAsync">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Security.HstsCheck.CheckForHeader">
            <summary>
            The health check task.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> with the result type reversed on localhost.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.HealthChecks.Checks.Security.HttpsCheck">
            <summary>
                Health checks for the recommended production setup regarding HTTPS.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Security.HttpsCheck.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService,Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.GlobalSettings},Umbraco.Cms.Core.Hosting.IHostingEnvironment)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.HealthChecks.Checks.Security.HttpsCheck" /> class.
            </summary>
            <param name="textService">The text service.</param>
            <param name="globalSettings">The global settings.</param>
            <param name="hostingEnvironment">The hosting environment.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Security.HttpsCheck.GetStatusAsync">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Security.HttpsCheck.ExecuteAction(Umbraco.Cms.Core.HealthChecks.HealthCheckAction)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.HealthChecks.Checks.Security.NoSniffCheck">
            <summary>
                Health check for the recommended production setup regarding the X-Content-Type-Options header.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Security.NoSniffCheck.#ctor(Umbraco.Cms.Core.Hosting.IHostingEnvironment,Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.HealthChecks.Checks.Security.NoSniffCheck" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.Security.NoSniffCheck.ReadMoreLink">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Security.UmbracoApplicationUrlCheck.ExecuteAction(Umbraco.Cms.Core.HealthChecks.HealthCheckAction)">
            <summary>
                Executes the action and returns its status
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Security.UmbracoApplicationUrlCheck.GetStatusAsync">
            <summary>
                Get the status for this health check
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.HealthChecks.Checks.Security.XssProtectionCheck">
            <summary>
                Health check for the recommended production setup regarding the X-XSS-Protection header.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Security.XssProtectionCheck.#ctor(Umbraco.Cms.Core.Hosting.IHostingEnvironment,Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.HealthChecks.Checks.Security.XssProtectionCheck" /> class.
            </summary>
            <remarks>
                This check should not find the header in newer browsers as this can cause security vulnerabilities
                https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.Checks.Security.XssProtectionCheck.ReadMoreLink">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.HealthChecks.Checks.Services.SmtpCheck">
            <summary>
                Health check for the recommended setup regarding SMTP.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Services.SmtpCheck.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService,Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.GlobalSettings})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.HealthChecks.Checks.Services.SmtpCheck" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Services.SmtpCheck.GetStatusAsync">
            <summary>
                Get the status for this health check
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.Checks.Services.SmtpCheck.ExecuteAction(Umbraco.Cms.Core.HealthChecks.HealthCheckAction)">
            <summary>
                Executes the action and returns it's status
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.HealthChecks.HealthCheck">
            <summary>
                Provides a base class for health checks, filling in the healthcheck metadata on construction
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.HealthCheck.GetStatus">
            <summary>
                Get the status for this health check
            </summary>
            <returns></returns>
            <remarks>
                If there are possible actions to take to rectify this check, this method must be overridden by a sub class
                in order to explicitly provide those actions.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.HealthCheck.GetStatusAsync">
            <summary>
                Get the status for this health check
            </summary>
            <returns></returns>
            <remarks>
                If there are possible actions to take to rectify this check, this method must be overridden by a sub class
                in order to explicitly provide those actions.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.HealthCheck.ExecuteAction(Umbraco.Cms.Core.HealthChecks.HealthCheckAction)">
            <summary>
                Executes the action and returns it's status
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.HealthCheck.ExecuteActionAsync(Umbraco.Cms.Core.HealthChecks.HealthCheckAction)">
            <summary>
                Executes the action and returns it's status
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="F:Umbraco.Cms.Core.HealthChecks.HealthCheckAction._name">
            <summary>
                The name of the action - this is used to name the fix button
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.HealthCheckAction.#ctor">
            <summary>
                Empty ctor used for serialization
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HealthChecks.HealthCheckAction.#ctor(System.String,System.Guid)">
            <summary>
                Default ctor
            </summary>
            <param name="alias"></param>
            <param name="healthCheckId"></param>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.HealthCheckAction.Alias">
            <summary>
                The alias of the action - this is used by the Health Check instance to execute the action
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.HealthCheckAction.HealthCheckId">
            <summary>
                The Id of the Health Check instance
            </summary>
            <remarks>
                This is used to find the Health Check instance to execute this action
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.HealthCheckAction.ActionParameters">
            <summary>
                This could be used if the status has a custom view that specifies some parameters to be sent to the server
                when an action needs to be executed
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.HealthCheckAction.Description">
            <summary>
                The description of the action - this is used to give a description before executing the action
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.HealthCheckAction.ValueRequired">
            <summary>
                Indicates if a value is required to rectify the issue
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.HealthCheckAction.ProvidedValueValidation">
            <summary>
                Indicates if a value required, how it is validated
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.HealthCheckAction.ProvidedValueValidationRegex">
            <summary>
                Indicates if a value required, and is validated by a regex, what the regex to use is
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.HealthCheckAction.ProvidedValue">
            <summary>
                Provides a value to rectify the issue
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.HealthChecks.HealthCheckAttribute">
            <summary>
                Metadata attribute for Health checks
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.HealthChecks.HealthCheckNotificationMethodAttribute">
            <summary>
                Metadata attribute for health check notification methods
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.HealthChecks.HealthCheckStatus">
            <summary>
                The status returned for a health check when it performs it check
                TODO: This model will be used in the WebApi result so needs attributes for JSON usage
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.HealthCheckStatus.Message">
            <summary>
                The status message
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.HealthCheckStatus.Description">
            <summary>
                The status description if one is necessary
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.HealthCheckStatus.View">
            <summary>
                This is optional but would allow a developer to specify a path to an angular HTML view
                in order to either show more advanced information and/or to provide input for the admin
                to configure how an action is executed
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.HealthCheckStatus.ResultType">
            <summary>
                The status type
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.HealthCheckStatus.Actions">
            <summary>
                The potential actions to take (in any)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.HealthChecks.HealthCheckStatus.ReadMoreLink">
            <summary>
                This is optional but would allow a developer to specify a link that is shown as a "read more" button.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.HexEncoder">
            <summary>
                Provides methods for encoding byte arrays into hexadecimal strings.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HexEncoder.Encode(System.Byte[])">
            <summary>
                Converts a <see cref="T:byte[]" /> to a hexadecimal formatted <see cref="T:System.String" /> padded to 2 digits.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>The <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.HexEncoder.Encode(System.Byte[],System.Char,System.Int32,System.Int32)">
            <summary>
                Converts a <see cref="T:byte[]" /> to a hexadecimal formatted <see cref="T:System.String" /> padded to 2 digits
                and split into blocks with the given char separator.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="separator">The separator.</param>
            <param name="blockSize">The block size.</param>
            <param name="blockCount">The block count.</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.HostedServices.IBackgroundTaskQueue">
            <summary>
                A Background Task Queue, to enqueue tasks for executing in the background.
            </summary>
            <remarks>
                Borrowed from https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-5.0
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.HostedServices.IBackgroundTaskQueue.QueueBackgroundWorkItem(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
                Enqueue a work item to be executed in the background.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.HostedServices.IBackgroundTaskQueue.DequeueAsync(System.Threading.CancellationToken)">
            <summary>
                Dequeue the first item on the queue.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Hosting.HostingEnvironmentExtensions">
            <summary>
            Extension methods for <see cref="T:Umbraco.Cms.Core.Hosting.IHostingEnvironment" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Hosting.HostingEnvironmentExtensions.GetBackOfficePath(Umbraco.Cms.Core.Hosting.IHostingEnvironment)">
            <summary>
            Gets the absolute URL path of the back office.
            </summary>
            <param name="hostingEnvironment">The hosting environment.</param>
            <returns>The absolute URL path of the back office.</returns>
        </member>
        <member name="P:Umbraco.Cms.Core.Hosting.IHostingEnvironment.ApplicationId">
            <summary>
                The unique application ID for this Umbraco website.
            </summary>
            <remarks>
                <para>
                    The returned value will be the same consistent value for an Umbraco website on a specific server and will the
                    same
                    between restarts of that Umbraco website/application on that specific server.
                </para>
                <para>
                    The value of this does not distinguish between unique workers/servers for this Umbraco application.
                    Usage of this must take into account that the same <see cref="P:Umbraco.Cms.Core.Hosting.IHostingEnvironment.ApplicationId" /> may be returned for the same
                    Umbraco website hosted on different servers.<br />
                    Similarly the usage of this must take into account that a different
                    <see cref="P:Umbraco.Cms.Core.Hosting.IHostingEnvironment.ApplicationId" /> may be returned for the same Umbraco website hosted on different servers.
                </para>
                <para>
                    This returns a hash of the value of IApplicationDiscriminator.Discriminator (which is most likely just the
                    value of <see cref="P:Microsoft.Extensions.Hosting.IHostEnvironment.ContentRootPath" /> unless an alternative
                    implementation of IApplicationDiscriminator has been registered).<br />
                    However during ConfigureServices a temporary instance of IHostingEnvironment is constructed which guarantees
                    that this will be the hash of <see cref="P:Microsoft.Extensions.Hosting.IHostEnvironment.ContentRootPath" />, so
                    the value may differ depend on when the property is used.
                </para>
                <para>
                    If you require this value during ConfigureServices it is probably a code smell.
                </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Hosting.IHostingEnvironment.ApplicationPhysicalPath">
            <summary>
                Will return the physical path to the root of the application
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Hosting.IHostingEnvironment.ApplicationVirtualPath">
            <summary>
                The web application's hosted path
            </summary>
            <remarks>
                In most cases this will return "/" but if the site is hosted in a virtual directory then this will return the
                virtual directory's path such as "/mysite".
                This value must begin with a "/" and cannot end with "/".
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Hosting.IHostingEnvironment.IsHosted">
            <summary>
                Gets a value indicating whether Umbraco is hosted.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Hosting.IHostingEnvironment.ApplicationMainUrl">
            <summary>
                Gets the main application url.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Hosting.IHostingEnvironment.MapPathWebRoot(System.String)">
            <summary>
                Maps a virtual path to a physical path to the application's web root
            </summary>
            <remarks>
                Depending on the runtime 'web root', this result can vary. For example in Net Framework the web root and the
                content root are the same, however
                in netcore the web root is /www therefore this will Map to a physical path within www.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Hosting.IHostingEnvironment.MapPathContentRoot(System.String)">
            <summary>
                Maps a virtual path to a physical path to the application's root (not always equal to the web root)
            </summary>
            <remarks>
                Depending on the runtime 'web root', this result can vary. For example in Net Framework the web root and the
                content root are the same, however
                in netcore the web root is /www therefore this will Map to a physical path within www.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Hosting.IHostingEnvironment.ToAbsolute(System.String)">
            <summary>
                Converts a virtual path to an absolute URL path based on the application's web root
            </summary>
            <param name="virtualPath">The virtual path. Must start with either ~/ or / else an exception is thrown.</param>
            <remarks>
                This maps the virtual path syntax to the web root. For example when hosting in a virtual directory called "site"
                and the value "~/pages/test" is passed in, it will
                map to "/site/pages/test" where "/site" is the value of <see cref="P:Umbraco.Cms.Core.Hosting.IHostingEnvironment.ApplicationVirtualPath" />.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                If virtualPath does not start with ~/ or /
            </exception>
        </member>
        <member name="M:Umbraco.Cms.Core.Hosting.IHostingEnvironment.EnsureApplicationMainUrl(System.Uri)">
            <summary>
                Ensures that the application know its main Url.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Hosting.IUmbracoApplicationLifetime.IsRestarting">
            <summary>
                A value indicating whether the application is restarting after the current request.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Hosting.IUmbracoApplicationLifetime.Restart">
            <summary>
                Terminates the current application. The application restarts the next time a request is received for it.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.HybridAccessorBase`1">
            <summary>
                Provides a base class for hybrid accessors.
            </summary>
            <typeparam name="T">The type of the accessed object.</typeparam>
            <remarks>
                <para>
                    Hybrid accessors store the accessed object in HttpContext if they can,
                    otherwise they rely on the logical call context, to maintain an ambient
                    object that flows with async.
                </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.IBackOfficeInfo.GetAbsoluteUrl">
            <summary>
                Gets the absolute url to the Umbraco Backoffice. This info can be used to build absolute urls for Backoffice to use
                in mails etc.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Install.IFilePermissionHelper">
            <summary>
                Helper to test File and folder permissions
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Install.IFilePermissionHelper.RunFilePermissionTestSuite(System.Collections.Generic.Dictionary{Umbraco.Cms.Core.Install.FilePermissionTest,System.Collections.Generic.IEnumerable{System.String}}@)">
            <summary>
                Run all tests for permissions of the required files and folders.
            </summary>
            <returns>True if all permissions are correct. False otherwise.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Install.InstallException">
            <summary>
                Used for steps to be able to return a JSON structure back to the UI.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Umbraco.Cms.Core.Install.InstallException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Install.InstallException" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Install.InstallException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Install.InstallException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Install.InstallException.#ctor(System.String,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Install.InstallException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Install.InstallException.#ctor(System.String,System.String,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Install.InstallException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="view">The view.</param>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Install.InstallException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Install.InstallException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
                The exception that is the cause of the current exception, or a null reference (
                <see langword="Nothing" /> in Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="P:Umbraco.Cms.Core.Install.InstallException.View">
            <summary>
                Gets the view.
            </summary>
            <value>
                The view.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Install.InstallException.ViewModel">
            <summary>
                Gets the view model.
            </summary>
            <value>
                The view model.
            </value>
            <remarks>
                This object is not included when serializing.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Installer.IInstallStep">
            <summary>
            Defines a step that's required to install Umbraco.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Installer.IInstallStep.ExecuteAsync(Umbraco.Cms.Core.Models.Installer.InstallData)">
            <summary>
            Executes the install step.
            </summary>
            <param name="model">InstallData model containing the data provided by the installer UI.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Installer.IInstallStep.RequiresExecutionAsync(Umbraco.Cms.Core.Models.Installer.InstallData)">
            <summary>
            Determines if the step is required to execute.
            </summary>
            <param name="model">InstallData model containing the data provided by the installer UI.</param>
            <returns>True if the step should execute, otherwise false.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Installer.IUpgradeStep">
            <summary>
            Defines a step that's required to upgrade Umbraco.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Installer.IUpgradeStep.ExecuteAsync">
            <summary>
            Executes the upgrade step.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Installer.IUpgradeStep.RequiresExecutionAsync">
            <summary>
            Determines if the step is required to execute.
            </summary>
            <returns>True if the step should execute, otherwise false.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.IO.FileSystems">
            <summary>
            Provides the system filesystems.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.IO.FileSystems.IsScoped">
            <summary>
            Used be Scope provider to take control over the filesystems, should never be used for anything else.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.IO.FileSystems.PartialViewsFileSystem">
            <summary>
            Gets the partial views filesystem.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.IO.FileSystems.StylesheetsFileSystem">
            <summary>
            Gets the stylesheets filesystem.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.IO.FileSystems.ScriptsFileSystem">
            <summary>
            Gets the scripts filesystem.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.IO.FileSystems.MvcViewsFileSystem">
            <summary>
            Gets the MVC views filesystem.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.FileSystems.SetStylesheetFilesystem(Umbraco.Cms.Core.IO.IFileSystem)">
            <summary>
            Sets the stylesheet filesystem.
            </summary>
            <remarks>
            Be careful when using this, the root path and root url must be correct for this to work.
            </remarks>
            <param name="fileSystem">The <see cref="T:Umbraco.Cms.Core.IO.IFileSystem"/>.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="fileSystem"/> is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException">Throws exception if the StylesheetFileSystem has already been initialized.</exception>
            <exception cref="T:System.InvalidOperationException">Throws exception if full path can't be resolved successfully.</exception>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.FileSystems.Shadow">
            <summary>
            Shadows the filesystem, should never be used outside the Scope class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.FileSystems.CreateShadowWrapper(Umbraco.Cms.Core.IO.IFileSystem,System.String)">
            <summary>
            Creates a shadow wrapper for a filesystem, should never be used outside UmbracoBuilder or testing
            </summary>
            <param name="filesystem"></param>
            <param name="shadowPath"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.IO.IFileProviderFactory">
            <summary>
                Factory for creating <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /> instances.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IFileProviderFactory.Create">
            <summary>
                Creates a new <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /> instance.
            </summary>
            <returns>
                The newly created <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /> instance (or <c>null</c> if not supported).
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.IO.IFileSystem">
            <summary>
                Provides methods allowing the manipulation of files.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.IO.IFileSystem.CanAddPhysical">
            <summary>
                Gets a value indicating whether the filesystem can add/copy
                a file which is on a physical filesystem.
            </summary>
            <remarks>
                In other words, whether the filesystem can copy/move a file
                that is on local disk, in a fast and efficient way.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IFileSystem.GetDirectories(System.String)">
            <summary>
                Gets all directories matching the given path.
            </summary>
            <param name="path">The path to the directories.</param>
            <returns>
                The <see cref="T:System.Collections.Generic.IEnumerable`1" /> representing the matched directories.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IFileSystem.DeleteDirectory(System.String)">
            <summary>
                Deletes the specified directory.
            </summary>
            <param name="path">The name of the directory to remove.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IFileSystem.DeleteDirectory(System.String,System.Boolean)">
            <summary>
                Deletes the specified directory and, if indicated, any subdirectories and files in the directory.
            </summary>
            <remarks>Azure blob storage has no real concept of directories so deletion is always recursive.</remarks>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive">Whether to remove directories, subdirectories, and files in path.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IFileSystem.DirectoryExists(System.String)">
            <summary>
                Determines whether the specified directory exists.
            </summary>
            <param name="path">The directory to check.</param>
            <returns>
                <c>True</c> if the directory exists and the user has permission to view it; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IFileSystem.AddFile(System.String,System.IO.Stream)">
            <summary>
                Adds a file to the file system.
            </summary>
            <param name="path">The path to the given file.</param>
            <param name="stream">The <see cref="T:System.IO.Stream" /> containing the file contents.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IFileSystem.AddFile(System.String,System.IO.Stream,System.Boolean)">
            <summary>
                Adds a file to the file system.
            </summary>
            <param name="path">The path to the given file.</param>
            <param name="stream">The <see cref="T:System.IO.Stream" /> containing the file contents.</param>
            <param name="overrideIfExists">Whether to override the file if it already exists.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IFileSystem.GetFiles(System.String)">
            <summary>
                Gets all files matching the given path.
            </summary>
            <param name="path">The path to the files.</param>
            <returns>
                The <see cref="T:System.Collections.Generic.IEnumerable`1" /> representing the matched files.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IFileSystem.GetFiles(System.String,System.String)">
            <summary>
                Gets all files matching the given path and filter.
            </summary>
            <param name="path">The path to the files.</param>
            <param name="filter">A filter that allows the querying of file extension.
                <example>*.jpg</example>
            </param>
            <returns>
                The <see cref="T:System.Collections.Generic.IEnumerable`1" /> representing the matched files.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IFileSystem.OpenFile(System.String)">
            <summary>
                Gets a <see cref="T:System.IO.Stream" /> representing the file at the given path.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>
                <see cref="T:System.IO.Stream" />.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IFileSystem.DeleteFile(System.String)">
            <summary>
                Deletes the specified file.
            </summary>
            <param name="path">The name of the file to remove.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IFileSystem.FileExists(System.String)">
            <summary>
                Determines whether the specified file exists.
            </summary>
            <param name="path">The file to check.</param>
            <returns>
                <c>True</c> if the file exists and the user has permission to view it; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IFileSystem.GetRelativePath(System.String)">
            <summary>
                Returns the application relative path to the file.
            </summary>
            <param name="fullPathOrUrl">The full path or URL.</param>
            <returns>
                The <see cref="T:System.String" /> representing the relative path.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IFileSystem.GetFullPath(System.String)">
            <summary>
                Gets the full qualified path to the file.
            </summary>
            <param name="path">The file to return the full path for.</param>
            <returns>
                The <see cref="T:System.String" /> representing the full path.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IFileSystem.GetUrl(System.String)">
            <summary>
                Returns the application relative URL to the file.
            </summary>
            <param name="path">The path to return the URL for.</param>
            <returns>
                <see cref="T:System.String" /> representing the relative URL.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IFileSystem.GetLastModified(System.String)">
            <summary>
                Gets the last modified date/time of the file, expressed as a UTC value.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>
                <see cref="T:System.DateTimeOffset" />.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IFileSystem.GetCreated(System.String)">
            <summary>
                Gets the created date/time of the file, expressed as a UTC value.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>
                <see cref="T:System.DateTimeOffset" />.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IFileSystem.GetSize(System.String)">
            <summary>
                Gets the size of a file.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>The size (in bytes) of the file.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IFileSystem.AddFile(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                Adds a file which is on a physical filesystem.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="physicalPath">The absolute physical path to the source file.</param>
            <param name="overrideIfExists">A value indicating what to do if the file already exists.</param>
            <param name="copy">A value indicating whether to move (default) or copy.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.IO.IGridEditorsConfigFileProviderFactory">
            <summary>
                Factory for creating <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /> instances for providing the grid.editors.config.js file.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IIOHelper.MapPath(System.String)">
            <summary>
                Maps a virtual path to a physical path in the content root folder (i.e. www)
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IIOHelper.VerifyEditPath(System.String,System.String)">
            <summary>
                Verifies that the current filepath matches a directory where the user is allowed to edit a file.
            </summary>
            <param name="filePath">The filepath to validate.</param>
            <param name="validDir">The valid directory.</param>
            <returns>A value indicating whether the filepath is valid.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IIOHelper.VerifyEditPath(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Verifies that the current filepath matches one of several directories where the user is allowed to edit a file.
            </summary>
            <param name="filePath">The filepath to validate.</param>
            <param name="validDirs">The valid directories.</param>
            <returns>A value indicating whether the filepath is valid.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IIOHelper.VerifyFileExtension(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Verifies that the current filepath has one of several authorized extensions.
            </summary>
            <param name="filePath">The filepath to validate.</param>
            <param name="validFileExtensions">The valid extensions.</param>
            <returns>A value indicating whether the filepath is valid.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IIOHelper.GetRelativePath(System.String)">
            <summary>
                Get properly formatted relative path from an existing absolute or relative path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IIOHelper.GetTempFolders">
            <summary>
                Retrieves array of temporary folders from the hosting environment.
            </summary>
            <returns>Array of <see cref="T:System.IO.DirectoryInfo" /> instances.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IIOHelper.CleanFolder(System.IO.DirectoryInfo,System.TimeSpan)">
            <summary>
                Cleans contents of a folder by deleting all files older that the provided age.
                If deletition of any file errors (e.g. due to a file lock) the process will continue to try to delete all that it
                can.
            </summary>
            <param name="folder">Folder to clean.</param>
            <param name="age">Age of files within folder to delete.</param>
            <returns>Result of operation</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.IO.IMediaPathScheme">
            <summary>
                Represents a media file path scheme.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IMediaPathScheme.GetFilePath(Umbraco.Cms.Core.IO.MediaFileManager,System.Guid,System.Guid,System.String)">
            <summary>
                Gets a media file path.
            </summary>
            <param name="fileManager">The media filesystem.</param>
            <param name="itemGuid">The (content, media) item unique identifier.</param>
            <param name="propertyGuid">The property type unique identifier.</param>
            <param name="filename">The file name.</param>
            <returns>The filesystem-relative complete file path.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IMediaPathScheme.GetDeleteDirectory(Umbraco.Cms.Core.IO.MediaFileManager,System.String)">
            <summary>
                Gets the directory that can be deleted when the file is deleted.
            </summary>
            <param name="fileSystem">The media filesystem.</param>
            <param name="filepath">The filesystem-relative path of the file.</param>
            <returns>The filesystem-relative path of the directory.</returns>
            <remarks>
                <para>The directory, and anything below it, will be deleted.</para>
                <para>Can return null (or empty) when no directory should be deleted.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IOHelper.VerifyEditPath(System.String,System.String)">
            <summary>
                Verifies that the current filepath matches a directory where the user is allowed to edit a file.
            </summary>
            <param name="filePath">The filepath to validate.</param>
            <param name="validDir">The valid directory.</param>
            <returns>A value indicating whether the filepath is valid.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IOHelper.VerifyEditPath(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Verifies that the current filepath matches one of several directories where the user is allowed to edit a file.
            </summary>
            <param name="filePath">The filepath to validate.</param>
            <param name="validDirs">The valid directories.</param>
            <returns>A value indicating whether the filepath is valid.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IOHelper.VerifyFileExtension(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Verifies that the current filepath has one of several authorized extensions.
            </summary>
            <param name="filePath">The filepath to validate.</param>
            <param name="validFileExtensions">The valid extensions.</param>
            <returns>A value indicating whether the filepath is valid.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IOHelper.GetRelativePath(System.String)">
            <summary>
                Get properly formatted relative path from an existing absolute or relative path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IOHelper.GetTempFolders">
            <summary>
                Retrieves array of temporary folders from the hosting environment.
            </summary>
            <returns>Array of <see cref="T:System.IO.DirectoryInfo" /> instances.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.IOHelper.CleanFolder(System.IO.DirectoryInfo,System.TimeSpan)">
            <summary>
                Cleans contents of a folder by deleting all files older that the provided age.
                If deletition of any file errors (e.g. due to a file lock) the process will continue to try to delete all that it
                can.
            </summary>
            <param name="folder">Folder to clean.</param>
            <param name="age">Age of files within folder to delete.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.IO.IPackageManifestFileProviderFactory">
            <summary>
                Factory for creating <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /> instances for providing the umbraco-package.json file.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.IO.MediaFileManager.FileSystem">
            <summary>
                Gets the media filesystem.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.MediaFileManager.DeleteMediaFiles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Delete media files.
            </summary>
            <param name="files">Files to delete (filesystem-relative paths).</param>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.MediaFileManager.GetMediaPath(System.String,System.Guid,System.Guid)">
            <summary>
                Gets the file path of a media file.
            </summary>
            <param name="filename">The file name.</param>
            <param name="cuid">The unique identifier of the content/media owning the file.</param>
            <param name="puid">The unique identifier of the property type owning the file.</param>
            <returns>The filesystem-relative path to the media file.</returns>
            <remarks>With the old media path scheme, this CREATES a new media path each time it is invoked.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.MediaFileManager.GetFile(Umbraco.Cms.Core.Models.IContentBase,System.String@,System.String,System.String,System.String)">
            <summary>
                Returns a stream (file) for a content item (or a null stream if there is no file).
            </summary>
            <param name="content"></param>
            <param name="mediaFilePath">The file path if a file was found</param>
            <param name="propertyTypeAlias"></param>
            <param name="culture"></param>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.MediaFileManager.StoreFile(Umbraco.Cms.Core.Models.IContentBase,Umbraco.Cms.Core.Models.IPropertyType,System.String,System.IO.Stream,System.String)">
            <summary>
                Stores a media file associated to a property of a content item.
            </summary>
            <param name="content">The content item owning the media file.</param>
            <param name="propertyType">The property type owning the media file.</param>
            <param name="filename">The media file name.</param>
            <param name="filestream">A stream containing the media bytes.</param>
            <param name="oldpath">An optional filesystem-relative filepath to the previous media file.</param>
            <returns>The filesystem-relative filepath to the media file.</returns>
            <remarks>
                <para>The file is considered "owned" by the content/propertyType.</para>
                <para>
                    If an <paramref name="oldpath" /> is provided then that file (and associated thumbnails if any) is deleted
                    before the new file is saved, and depending on the media path scheme, the folder may be reused for the new
                    file.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.MediaFileManager.CopyFile(Umbraco.Cms.Core.Models.IContentBase,Umbraco.Cms.Core.Models.IPropertyType,System.String)">
            <summary>
                Copies a media file as a new media file, associated to a property of a content item.
            </summary>
            <param name="content">The content item owning the copy of the media file.</param>
            <param name="propertyType">The property type owning the copy of the media file.</param>
            <param name="sourcepath">The filesystem-relative path to the source media file.</param>
            <returns>The filesystem-relative path to the copy of the media file.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.IO.MediaPathSchemes.CombinedGuidsMediaPathScheme">
            <summary>
                Implements a combined-guids media path scheme.
            </summary>
            <remarks>
                <para>Path is "{combinedGuid}/{filename}" where combinedGuid is a combination of itemGuid and propertyGuid.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.MediaPathSchemes.CombinedGuidsMediaPathScheme.GetFilePath(Umbraco.Cms.Core.IO.MediaFileManager,System.Guid,System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.IO.MediaPathSchemes.CombinedGuidsMediaPathScheme.GetDeleteDirectory(Umbraco.Cms.Core.IO.MediaFileManager,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.IO.MediaPathSchemes.TwoGuidsMediaPathScheme">
            <summary>
                Implements a two-guids media path scheme.
            </summary>
            <remarks>
                <para>Path is "{itemGuid}/{propertyGuid}/{filename}".</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.MediaPathSchemes.TwoGuidsMediaPathScheme.GetFilePath(Umbraco.Cms.Core.IO.MediaFileManager,System.Guid,System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.IO.MediaPathSchemes.TwoGuidsMediaPathScheme.GetDeleteDirectory(Umbraco.Cms.Core.IO.MediaFileManager,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.IO.MediaPathSchemes.UniqueMediaPathScheme">
            <summary>
                Implements a unique directory media path scheme.
            </summary>
            <remarks>
                <para>This scheme provides deterministic short paths, with potential collisions.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.MediaPathSchemes.UniqueMediaPathScheme.GetFilePath(Umbraco.Cms.Core.IO.MediaFileManager,System.Guid,System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.IO.MediaPathSchemes.UniqueMediaPathScheme.GetDeleteDirectory(Umbraco.Cms.Core.IO.MediaFileManager,System.String)">
            <inheritdoc />
            <remarks>
                <para>
                    Returning null so that <see cref="M:Umbraco.Cms.Core.IO.MediaFileManager.DeleteMediaFiles(System.Collections.Generic.IEnumerable{System.String})" /> does *not*
                    delete any directory. This is because the above shortening of the Guid to 8 chars
                    means we're increasing the risk of collision, and we don't want to delete files
                    belonging to other media items.
                </para>
                <para>
                    And, at the moment, we cannot delete directory "only if it is empty" because of
                    race conditions. We'd need to implement locks in <see cref="T:Umbraco.Cms.Core.IO.MediaFileManager" /> for
                    this.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.PhysicalFileSystem.GetDirectories(System.String)">
            <summary>
            Gets directories in a directory.
            </summary>
            <param name="path">The filesystem-relative path to the directory.</param>
            <returns>The filesystem-relative path to the directories in the directory.</returns>
            <remarks>Filesystem-relative paths use forward-slashes as directory separators.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.PhysicalFileSystem.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory.
            </summary>
            <param name="path">The filesystem-relative path of the directory.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.PhysicalFileSystem.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes a directory.
            </summary>
            <param name="path">The filesystem-relative path of the directory.</param>
            <param name="recursive">A value indicating whether to recursively delete sub-directories.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.PhysicalFileSystem.DirectoryExists(System.String)">
            <summary>
            Gets a value indicating whether a directory exists.
            </summary>
            <param name="path">The filesystem-relative path of the directory.</param>
            <returns>A value indicating whether a directory exists.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.PhysicalFileSystem.AddFile(System.String,System.IO.Stream)">
            <summary>
            Saves a file.
            </summary>
            <param name="path">The filesystem-relative path of the file.</param>
            <param name="stream">A stream containing the file data.</param>
            <remarks>Overrides the existing file, if any.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.PhysicalFileSystem.AddFile(System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Saves a file.
            </summary>
            <param name="path">The filesystem-relative path of the file.</param>
            <param name="stream">A stream containing the file data.</param>
            <param name="overrideExisting">A value indicating whether to override the existing file, if any.</param>
            <remarks>If a file exists and <paramref name="overrideExisting"/> is false, an exception is thrown.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.PhysicalFileSystem.GetFiles(System.String)">
            <summary>
            Gets files in a directory.
            </summary>
            <param name="path">The filesystem-relative path of the directory.</param>
            <returns>The filesystem-relative path to the files in the directory.</returns>
            <remarks>Filesystem-relative paths use forward-slashes as directory separators.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.PhysicalFileSystem.GetFiles(System.String,System.String)">
            <summary>
            Gets files in a directory.
            </summary>
            <param name="path">The filesystem-relative path of the directory.</param>
            <param name="filter">A filter.</param>
            <returns>The filesystem-relative path to the matching files in the directory.</returns>
            <remarks>Filesystem-relative paths use forward-slashes as directory separators.</remarks> //TODO check is this is true on linux and windows..
        </member>
        <member name="M:Umbraco.Cms.Core.IO.PhysicalFileSystem.OpenFile(System.String)">
            <summary>
            Opens a file.
            </summary>
            <param name="path">The filesystem-relative path to the file.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.PhysicalFileSystem.DeleteFile(System.String)">
            <summary>
            Deletes a file.
            </summary>
            <param name="path">The filesystem-relative path to the file.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.PhysicalFileSystem.FileExists(System.String)">
            <summary>
            Gets a value indicating whether a file exists.
            </summary>
            <param name="path">The filesystem-relative path to the file.</param>
            <returns>A value indicating whether the file exists.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.PhysicalFileSystem.GetRelativePath(System.String)">
            <summary>
            Gets the filesystem-relative path of a full path or of an URL.
            </summary>
            <param name="fullPathOrUrl">The full path or URL.</param>
            <returns>The path, relative to this filesystem's root.</returns>
            <remarks>
            <para>The relative path is relative to this filesystem's root, not starting with any
            directory separator. All separators are forward-slashes.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.PhysicalFileSystem.GetFullPath(System.String)">
            <summary>
            Gets the full path.
            </summary>
            <param name="path">The full or filesystem-relative path.</param>
            <returns>The full path.</returns>
            <remarks>
            <para>On the physical filesystem, the full path is the rooted (ie non-relative), safe (ie within this
            filesystem's root) path. All separators are Path.DirectorySeparatorChar.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.PhysicalFileSystem.GetUrl(System.String)">
            <summary>
            Gets the URL.
            </summary>
            <param name="path">The filesystem-relative path.</param>
            <returns>The URL.</returns>
            <remarks>All separators are forward-slashes.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.PhysicalFileSystem.GetLastModified(System.String)">
            <summary>
            Gets the last-modified date of a directory or file.
            </summary>
            <param name="path">The filesystem-relative path to the directory or the file.</param>
            <returns>The last modified date of the directory or the file.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.PhysicalFileSystem.GetCreated(System.String)">
            <summary>
            Gets the created date of a directory or file.
            </summary>
            <param name="path">The filesystem-relative path to the directory or the file.</param>
            <returns>The created date of the directory or the file.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.PhysicalFileSystem.GetSize(System.String)">
            <summary>
            Gets the size of a file.
            </summary>
            <param name="path">The filesystem-relative path to the file.</param>
            <returns>The file of the size, in bytes.</returns>
            <remarks>If the file does not exist, returns -1.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.IO.PhysicalFileSystem.Create">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.IO.ShadowWrapper.Create">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.LambdaExpressionCacheKey">
            <summary>
                Represents a simple <see cref="T:System.Linq.Expressions.LambdaExpression" /> in a form which is suitable for using as a dictionary key
                by exposing the return type, argument types and expression string form in a single concatenated string.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.LambdaExpressionCacheKey.ArgTypes">
            <summary>
                The argument type names of the <see cref="T:System.Linq.Expressions.LambdaExpression" />
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.LambdaExpressionCacheKey.ReturnType">
            <summary>
                The return type of the <see cref="T:System.Linq.Expressions.LambdaExpression" />
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.LambdaExpressionCacheKey.ExpressionAsString">
            <summary>
                The original string representation of the <see cref="T:System.Linq.Expressions.LambdaExpression" />
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.LambdaExpressionCacheKey.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.LambdaExpressionCacheKey.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.LambdaExpressionCacheKey.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Logging.DisposableTimer">
            <summary>
                Starts the timer and invokes a  callback upon disposal. Provides a simple way of timing an operation by wrapping it
                in a <code>using</code> (C#) statement.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.DisposableTimer.Fail(System.String,System.Exception)">
            <summary>
                Reports a failure.
            </summary>
            <param name="failMessage">The fail message.</param>
            <param name="exception">The exception.</param>
            <remarks>Completion of the timer will be reported as an error, with the specified message and exception.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.DisposableTimer.DisposeResources">
            <summary>
                Disposes resources.
            </summary>
            <remarks>Overrides abstract class <see cref="T:Umbraco.Cms.Core.DisposableObjectSlim" /> which handles required locking.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.ILoggingConfiguration.LogDirectory">
            <summary>
                Gets the physical path where logs are stored.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.ILoggingConfiguration.LogFileNameFormat">
            <summary>
                Gets the file name format for the log files.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.ILoggingConfiguration.GetLogFileNameFormatArguments">
            <summary>
                Gets the file name format arguments for the log files.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Logging.IMessageTemplates">
            <summary>
                Provides tools to support message templates.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Logging.IProfiler">
            <summary>
                Defines the profiling service.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.IProfiler.Step(System.String)">
            <summary>
                Gets an <see cref="T:System.IDisposable" /> that will time the code between its creation and disposal.
            </summary>
            <param name="name">The name of the step.</param>
            <returns>A step.</returns>
            <remarks>The returned <see cref="T:System.IDisposable" /> is meant to be used within a <c>using (...) {{ ... }}</c> block.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.IProfiler.Start">
            <summary>
                Starts the profiler.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.IProfiler.Stop(System.Boolean)">
            <summary>
                Stops the profiler.
            </summary>
            <param name="discardResults">A value indicating whether to discard results.</param>
            <remarks>
                Set discardResult to true to abandon all profiling - useful when eg someone is not
                authenticated or you want to clear the results, based upon some other mechanism.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.IProfiler.IsEnabled">
            <summary>
            Whether the profiler is enabled.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Logging.IProfilerHtml">
            <summary>
                Used to render a profiler in a web page
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.IProfilerHtml.Render">
            <summary>
                Renders the profiling results.
            </summary>
            <returns>The profiling results.</returns>
            <remarks>Generally used for HTML rendering.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Logging.IProfilingLogger">
            <summary>
                Defines the profiling logging service.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.IProfilingLogger.TraceDuration``1(System.String,System.Object[])">
            <summary>
                Profiles an action and log as information messages.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.IProfilingLogger.TraceDuration``1(System.String,System.String,System.String,System.Object[],System.Object[],System.Object[])">
            <summary>
                Profiles an action and log as information messages.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.IProfilingLogger.TraceDuration(System.Type,System.String,System.String,System.String,System.Object[],System.Object[],System.Object[])">
            <summary>
                Profiles an action and log as information messages.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.IProfilingLogger.DebugDuration``1(System.String,System.Object[])">
            <summary>
                Profiles an action and log as debug messages.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.IProfilingLogger.DebugDuration``1(System.String,System.String,System.String,System.Int32,System.Object[],System.Object[],System.Object[])">
            <summary>
                Profiles an action and log as debug messages.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.IProfilingLogger.DebugDuration(System.Type,System.String,System.String,System.String,System.Int32,System.Object[],System.Object[],System.Object[])">
            <summary>
                Profiles an action and log as debug messages.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.IProfilingLogger.IsEnabled(Umbraco.Cms.Core.Logging.LogLevel)">
            <summary>
            Checks if the given logLevel is enabled.
            </summary>
            <param name="logLevel">Level to be checked.</param>
            <returns>true if enabled.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Logging.LoggingConfiguration">
            <summary>
            Implements <see cref="T:Umbraco.Cms.Core.Logging.ILoggingConfiguration"/> to provide configuration for logging to files.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Logging.LoggingConfiguration.DefaultLogFileNameFormat">
            <summary>
            The default log file name format.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Logging.LoggingConfiguration.DefaultLogFileNameFormatArguments">
            <summary>
            The default log file name format arguments.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Logging.LoggingConfiguration.SupportedFileNameFormatArguments">
            <summary>
            The collection of supported file name format arguments.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.LoggingConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Logging.LoggingConfiguration"/> class with the default log file name format and arguments.
            </summary>
            <param name="logDirectory">The log file directory.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.LoggingConfiguration.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Logging.LoggingConfiguration"/> class.
            </summary>
            <param name="logDirectory">The log file directory.</param>
            <param name="logFileNameFormat">The log file name format.</param>
            <param name="logFileNameFormatArguments">The log file name format arguments as a comma delimited string.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.LoggingConfiguration.LogDirectory">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.LoggingConfiguration.LogFileNameFormat">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.LoggingConfiguration.GetLogFileNameFormatArguments">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.LoggingTaskExtension.LogErrors(System.Threading.Tasks.Task,System.Action{System.String,System.Exception})">
            <summary>
                This task shouldn't be waited on (as it's not guaranteed to run), and you shouldn't wait on the parent task either
                (because it might throw an
                exception that doesn't get handled). If you want to be waiting on something, use LogErrorsWaitable instead.
                None of these methods are suitable for tasks that return a value. If you're wanting a result, you should probably
                be handling
                errors yourself.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.LoggingTaskExtension.LogErrorsWaitable(System.Threading.Tasks.Task,System.Action{System.String,System.Exception})">
            <summary>
                This task can be waited on (as it's guaranteed to run), and you should wait on this rather than the parent task.
                Because it's
                guaranteed to run, it may be slower than using LogErrors, and you should consider using that method if you don't
                want to wait.
                None of these methods are suitable for tasks that return a value. If you're wanting a result, you should probably
                be handling
                errors yourself.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Logging.LogLevel">
            <summary>
                Specifies the level of a log event.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Logging.LogProfiler">
            <summary>
                Implements <see cref="T:Umbraco.Cms.Core.Logging.IProfiler" /> by writing profiling results to an <see cref="T:Microsoft.Extensions.Logging.ILogger" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.LogProfiler.Step(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.LogProfiler.Start">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.LogProfiler.Stop(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.LogProfiler.IsEnabled">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.NoopProfiler.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.ProfilerExtensions.Step``1(Umbraco.Cms.Core.Logging.IProfiler,System.String)">
            <summary>
                Gets an <see cref="T:System.IDisposable" /> that will time the code between its creation and disposal,
                prefixing the name of the step with a reporting type name.
            </summary>
            <typeparam name="T">The reporting type.</typeparam>
            <param name="profiler">The profiler.</param>
            <param name="name">The name of the step.</param>
            <returns>A step.</returns>
            <remarks>The returned <see cref="T:System.IDisposable" /> is meant to be used within a <c>using (...) {{ ... }}</c> block.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.ProfilerExtensions.Step(Umbraco.Cms.Core.Logging.IProfiler,System.Type,System.String)">
            <summary>
                Gets an <see cref="T:System.IDisposable" /> that will time the code between its creation and disposal,
                prefixing the name of the step with a reporting type name.
            </summary>
            <param name="profiler">The profiler.</param>
            <param name="reporting">The reporting type.</param>
            <param name="name">The name of the step.</param>
            <returns>A step.</returns>
            <remarks>The returned <see cref="T:System.IDisposable" /> is meant to be used within a <c>using (...) {{ ... }}</c> block.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Logging.ProfilingLogger">
            <summary>
                Provides logging and profiling services.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.ProfilingLogger.#ctor(Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Logging.ProfilingLogger},Umbraco.Cms.Core.Logging.IProfiler)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Logging.ProfilingLogger" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.ProfilingLogger.#ctor(Microsoft.Extensions.Logging.ILogger,Umbraco.Cms.Core.Logging.IProfiler)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Logging.ProfilingLogger" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.ProfilingLogger.Logger">
            <summary>
                Gets the underlying <see cref="T:Microsoft.Extensions.Logging.ILogger" /> implementation.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.ProfilingLogger.Profiler">
            <summary>
                Gets the underlying <see cref="T:Umbraco.Cms.Core.Logging.IProfiler" /> implementation.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Logging.ProfilingLogger.IsEnabled(Umbraco.Cms.Core.Logging.LogLevel)">
            <inheritdoc/>
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.Viewer.ILogEntry.Timestamp">
            <summary>
                Gets or sets the time at which the log event occurred.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.Viewer.ILogEntry.Level">
            <summary>
                Gets or sets the level of the log event.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.Viewer.ILogEntry.MessageTemplateText">
            <summary>
                Gets or sets the message template describing the log event.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.Viewer.ILogEntry.RenderedMessage">
            <summary>
                Gets or sets the message template filled with the log event properties.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.Viewer.ILogEntry.Properties">
            <summary>
                Gets or sets the properties associated with the log event.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.Viewer.ILogEntry.Exception">
            <summary>
                Gets or sets an exception associated with the log event, or null.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.Viewer.LogEntry.Timestamp">
            <summary>
                Gets or sets the time at which the log event occurred.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.Viewer.LogEntry.Level">
            <summary>
                Gets or sets the level of the log event.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.Viewer.LogEntry.MessageTemplateText">
            <summary>
                Gets or sets the message template describing the log event.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.Viewer.LogEntry.RenderedMessage">
            <summary>
                Gets or sets the message template filled with the log event properties.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.Viewer.LogEntry.Properties">
            <summary>
                Gets or sets the properties associated with the log event.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Logging.Viewer.LogEntry.Exception">
            <summary>
                Gets or sets an exception associated with the log event, or null.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Mail.IEmailSender">
            <summary>
                Simple abstraction to send an email message
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Mail.ISmsSender">
            <summary>
                Service to send an SMS
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Mail.NotImplementedSmsSender">
            <summary>
                An <see cref="T:Umbraco.Cms.Core.Mail.ISmsSender" /> that throws <see cref="T:System.NotImplementedException" />
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Manifest.BundleOptions.Default">
            <summary>
                The default bundling behavior for assets in the package folder.
            </summary>
            <remarks>
                The assets will be bundled with the typical packages bundle.
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Manifest.BundleOptions.None">
            <summary>
                The assets in the package will not be processed at all and will all be requested as individual assets.
            </summary>
            <remarks>
                This will essentially be a bundle that has composite processing turned off for both debug and production.
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Manifest.BundleOptions.Independent">
            <summary>
                The packages assets will be processed as it's own separate bundle. (in debug, files will not be processed)
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Mapping.IMapDefinition">
            <summary>
                Defines maps for <see cref="T:Umbraco.Cms.Core.Mapping.IUmbracoMapper" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.IMapDefinition.DefineMaps(Umbraco.Cms.Core.Mapping.IUmbracoMapper)">
            <summary>
                Defines maps.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.IUmbracoMapper.Define``2">
            <summary>
                Defines a mapping.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.IUmbracoMapper.Define``2(System.Action{``0,``1,Umbraco.Cms.Core.Mapping.MapperContext})">
            <summary>
                Defines a mapping.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="map">A mapping method.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.IUmbracoMapper.Define``2(System.Func{``0,Umbraco.Cms.Core.Mapping.MapperContext,``1})">
            <summary>
                Defines a mapping.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="ctor">A constructor method.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.IUmbracoMapper.Define``2(System.Func{``0,Umbraco.Cms.Core.Mapping.MapperContext,``1},System.Action{``0,``1,Umbraco.Cms.Core.Mapping.MapperContext})">
            <summary>
                Defines a mapping.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="ctor">A constructor method. Will not be used if the mapping call receives a Target object</param>
            <param name="map">A mapping method.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.IUmbracoMapper.Map``1(System.Object)">
            <summary>
                Maps a source object to a new target object.
            </summary>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.IUmbracoMapper.Map``1(System.Object,System.Action{Umbraco.Cms.Core.Mapping.MapperContext})">
            <summary>
                Maps a source object to a new target object.
            </summary>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <param name="f">A mapper context preparation method.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.IUmbracoMapper.Map``1(System.Object,Umbraco.Cms.Core.Mapping.MapperContext)">
            <summary>
                Maps a source object to a new target object.
            </summary>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <param name="context">A mapper context.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.IUmbracoMapper.Map``2(``0)">
            <summary>
                Maps a source object to a new target object.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.IUmbracoMapper.Map``2(``0,System.Action{Umbraco.Cms.Core.Mapping.MapperContext})">
            <summary>
                Maps a source object to a new target object.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <param name="f">A mapper context preparation method.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.IUmbracoMapper.Map``2(``0,Umbraco.Cms.Core.Mapping.MapperContext)">
            <summary>
                Maps a source object to a new target object.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <param name="context">A mapper context.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.IUmbracoMapper.Map``2(``0,``1)">
            <summary>
                Maps a source object to an existing target object.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <param name="target">The target object.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.IUmbracoMapper.Map``2(``0,``1,System.Action{Umbraco.Cms.Core.Mapping.MapperContext})">
            <summary>
                Maps a source object to an existing target object.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <param name="target">The target object.</param>
            <param name="f">A mapper context preparation method.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.IUmbracoMapper.Map``2(``0,``1,Umbraco.Cms.Core.Mapping.MapperContext)">
            <summary>
                Maps a source object to an existing target object.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <param name="target">The target object.</param>
            <param name="context">A mapper context.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.IUmbracoMapper.MapEnumerable``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Maps an enumerable of source objects to a new list of target objects.
            </summary>
            <typeparam name="TSourceElement">The type of the source objects.</typeparam>
            <typeparam name="TTargetElement">The type of the target objects.</typeparam>
            <param name="source">The source objects.</param>
            <returns>A list containing the target objects.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.IUmbracoMapper.MapEnumerable``2(System.Collections.Generic.IEnumerable{``0},System.Action{Umbraco.Cms.Core.Mapping.MapperContext})">
            <summary>
                Maps an enumerable of source objects to a new list of target objects.
            </summary>
            <typeparam name="TSourceElement">The type of the source objects.</typeparam>
            <typeparam name="TTargetElement">The type of the target objects.</typeparam>
            <param name="source">The source objects.</param>
            <param name="f">A mapper context preparation method.</param>
            <returns>A list containing the target objects.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.IUmbracoMapper.MapEnumerable``2(System.Collections.Generic.IEnumerable{``0},Umbraco.Cms.Core.Mapping.MapperContext)">
            <summary>
                Maps an enumerable of source objects to a new list of target objects.
            </summary>
            <typeparam name="TSourceElement">The type of the source objects.</typeparam>
            <typeparam name="TTargetElement">The type of the target objects.</typeparam>
            <param name="source">The source objects.</param>
            <param name="context">A mapper context.</param>
            <returns>A list containing the target objects.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Mapping.MapperContext">
            <summary>
                Represents a mapper context.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.MapperContext.#ctor(Umbraco.Cms.Core.Mapping.IUmbracoMapper)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Mapping.MapperContext" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Mapping.MapperContext.HasItems">
            <summary>
                Gets a value indicating whether the context has items.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Mapping.MapperContext.Items">
            <summary>
                Gets the context items.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.MapperContext.Map``1(System.Object)">
            <summary>
                Maps a source object to a new target object.
            </summary>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.MapperContext.Map``2(``0)">
            <summary>
                Maps a source object to a new target object.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.MapperContext.Map``2(``0,``1)">
            <summary>
                Maps a source object to an existing target object.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="source">The source object.</param>
            <param name="target">The target object.</param>
            <returns>The target object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Mapping.MapperContext.MapEnumerable``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Maps an enumerable of source objects to a new list of target objects.
            </summary>
            <typeparam name="TSourceElement">The type of the source objects.</typeparam>
            <typeparam name="TTargetElement">The type of the target objects.</typeparam>
            <param name="source">The source objects.</param>
            <returns>A list containing the target objects.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Media.EmbedProviders.DailyMotion">
            <summary>
                Embed Provider for Dailymotion the popular online video-sharing platform.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Media.EmbedProviders.Flickr">
            <summary>
                Embed Provider for Flickr the popular online image hosting and video hosting service.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Media.EmbedProviders.GettyImages">
            <summary>
                Embed Provider for Getty Images supplier of stock images, editorial photography, video and music for business and consumers.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Media.EmbedProviders.Giphy">
            <summary>
                Embed Provider for Giphy.com the popular online GIFs and animated sticker provider.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Media.EmbedProviders.Hulu">
            <summary>
                Embed Provider for Hulu the the popular online subscription streaming service.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Media.EmbedProviders.Issuu">
            <summary>
                Embed Provider for Issuu the popular platform to create interactive flipbooks, social media posts, GIFs, and more from a single piece of static content.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Media.EmbedProviders.Kickstarter">
            <summary>
                Embed Provider for Kickstarter the popular online crowdfunding platform focused on creativity.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Media.EmbedProviders.LottieFiles">
            <summary>
                Embed Provider for lottiefiles.com the popular opensource JSON-based animation format platform.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Media.EmbedProviders.OEmbedResponse">
            <summary>
                Wrapper class for OEmbed response.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Media.EmbedProviders.OEmbedResponseBase`1">
            <summary>
                Base class for OEmbed response.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Media.EmbedProviders.OEmbedResponseBase`1.GetHtml">
            <summary>
                Gets the HTML.
            </summary>
            <returns>The response HTML</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Media.EmbedProviders.OEmbedResponseWithStringDimensions">
            <summary>
                Wrapper class for OEmbed response with width and height as string values.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Media.EmbedProviders.Slideshare">
            <summary>
                Embed Provider for SlideShare for professional online content including presentations, infographics, documents, and videos.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Media.EmbedProviders.Soundcloud">
            <summary>
                Embed Provider for SoundCloud the popular online audio distribution platform and music sharing provider.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Media.EmbedProviders.Ted">
            <summary>
                Embed Provider for Ted that posts talks online for free distribution.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Media.EmbedProviders.Vimeo">
            <summary>
                Embed Provider for Vimeo the popular online video hosting, sharing, and services platform provider.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Media.EmbedProviders.X">
            <summary>
                Embed Provider for X the popular online service for microblogging and social networking.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Media.EmbedProviders.YouTube">
            <summary>
                Embed Provider for YouTube the popular online video sharing and social media platform provider.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Media.IEmbedProvider.ApiEndpoint">
            <summary>
                The OEmbed API Endpoint
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Media.IEmbedProvider.UrlSchemeRegex">
            <summary>
                A string array of Regex patterns to match against the pasted OEmbed URL
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Media.IEmbedProvider.RequestParams">
            <summary>
                A collection of querystring request parameters to append to the API URL
            </summary>
            <example>?key=value&amp;key2=value2</example>
        </member>
        <member name="T:Umbraco.Cms.Core.Media.IImageDimensionExtractor">
            <summary>
            Allows extracting the image dimensions from a stream.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Media.IImageDimensionExtractor.SupportedImageFileTypes">
            <summary>
            Gets the supported image file types/extensions.
            </summary>
            <value>
            The supported image file types/extensions.
            </value>
        </member>
        <member name="M:Umbraco.Cms.Core.Media.IImageDimensionExtractor.GetDimensions(System.IO.Stream)">
            <summary>
            Gets the dimensions.
            </summary>
            <param name="stream">The stream.</param>
            <returns>
            The dimensions of the image if the stream was parsable; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Media.IImageUrlGenerator">
            <summary>
                Exposes a method that generates an image URL based on the specified options.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Media.IImageUrlGenerator.SupportedImageFileTypes">
            <summary>
                Gets the supported image file types/extensions.
            </summary>
            <value>
                The supported image file types/extensions.
            </value>
        </member>
        <member name="M:Umbraco.Cms.Core.Media.IImageUrlGenerator.GetImageUrl(Umbraco.Cms.Core.Models.ImageUrlGenerationOptions)">
            <summary>
                Gets the image URL based on the specified <paramref name="options" />.
            </summary>
            <param name="options">The image URL generation options.</param>
            <returns>
                The generated image URL.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Media.UploadAutoFillProperties">
            <summary>
            Provides methods to manage auto-fill properties for upload fields.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Media.UploadAutoFillProperties.Reset(Umbraco.Cms.Core.Models.IContentBase,Umbraco.Cms.Core.Configuration.Models.ImagingAutoFillUploadField,System.String,System.String)">
            <summary>
            Resets the auto-fill properties of a content item, for a specified auto-fill configuration.
            </summary>
            <param name="content">The content item.</param>
            <param name="autoFillConfig">The auto-fill configuration.</param>
            <param name="culture">Variation language.</param>
            <param name="segment">Variation segment.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Media.UploadAutoFillProperties.Populate(Umbraco.Cms.Core.Models.IContentBase,Umbraco.Cms.Core.Configuration.Models.ImagingAutoFillUploadField,System.String,System.String,System.String)">
            <summary>
            Populates the auto-fill properties of a content item, for a specified auto-fill configuration.
            </summary>
            <param name="content">The content item.</param>
            <param name="autoFillConfig">The auto-fill configuration.</param>
            <param name="filepath">The filesystem path to the uploaded file.</param>
            <param name="culture">Variation language.</param>
            <param name="segment">Variation segment.</param>
            <remarks>
            The <paramref name="filepath" /> parameter is the path relative to the filesystem.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Media.UploadAutoFillProperties.Populate(Umbraco.Cms.Core.Models.IContentBase,Umbraco.Cms.Core.Configuration.Models.ImagingAutoFillUploadField,System.String,System.IO.Stream,System.String,System.String)">
            <summary>
            Populates the auto-fill properties of a content item.
            </summary>
            <param name="content">The content item.</param>
            <param name="autoFillConfig">The automatic fill configuration.</param>
            <param name="filepath">The filesystem-relative filepath, or null to clear properties.</param>
            <param name="filestream">The stream containing the file data.</param>
            <param name="culture">Variation language.</param>
            <param name="segment">Variation segment.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.AuditEntry">
            <summary>
                Represents an audited event.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.AuditEntry.PerformingUserId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.AuditEntry.PerformingDetails">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.AuditEntry.PerformingIp">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.AuditEntry.EventDateUtc">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.AuditEntry.AffectedUserId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.AuditEntry.AffectedDetails">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.AuditEntry.EventType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.AuditEntry.EventDetails">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.AuditItem.#ctor(System.Int32,Umbraco.Cms.Core.Models.AuditType,System.Int32,System.String,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.AuditItem" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.AuditItem.AuditType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.AuditItem.EntityType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.AuditItem.UserId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.AuditItem.Comment">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.AuditItem.Parameters">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.AuditType">
            <summary>
                Defines audit types.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.AuditType.New">
            <summary>
                New node(s) being added.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.AuditType.Save">
            <summary>
                Node(s) being saved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.AuditType.SaveVariant">
            <summary>
                Variant(s) being saved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.AuditType.Open">
            <summary>
                Node(s) being opened.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.AuditType.Delete">
            <summary>
                Node(s) being deleted.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.AuditType.Publish">
            <summary>
                Node(s) being published.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.AuditType.PublishVariant">
            <summary>
                Variant(s) being published.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.AuditType.SendToPublish">
            <summary>
                Node(s) being sent to publishing.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.AuditType.SendToPublishVariant">
            <summary>
                Variant(s) being sent to publishing.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.AuditType.Unpublish">
            <summary>
                Node(s) being unpublished.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.AuditType.UnpublishVariant">
            <summary>
                Variant(s) being unpublished.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.AuditType.Move">
            <summary>
                Node(s) being moved.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.AuditType.Copy">
            <summary>
                Node(s) being copied.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.AuditType.AssignDomain">
            <summary>
                Node(s) being assigned domains.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.AuditType.PublicAccess">
            <summary>
                Node(s) public access changing.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.AuditType.Sort">
            <summary>
                Node(s) being sorted.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.AuditType.Notify">
            <summary>
                Notification(s) being sent to user.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.AuditType.System">
            <summary>
                General system audit message.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.AuditType.RollBack">
            <summary>
                Node's content being rolled back to a previous version.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.AuditType.PackagerInstall">
            <summary>
                Package being installed.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.AuditType.PackagerUninstall">
            <summary>
                Package being uninstalled.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.AuditType.Custom">
            <summary>
                Custom audit message.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.AuditType.ContentVersionPreventCleanup">
            <summary>
                Content version preventCleanup set to true
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.AuditType.ContentVersionEnableCleanup">
            <summary>
                Content version preventCleanup set to false
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.BlockEditorData`2">
            <summary>
                Convertable block data from json
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockEditorData`2.Layout">
            <summary>
                Returns the layout for this specific property editor
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockEditorData`2.BlockValue">
            <summary>
                Returns the reference to the original BlockValue
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.BlockEditorDataConverter`2">
            <summary>
                Converts the block json data into objects
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Blocks.BlockEditorDataConverter`2.GetBlockReferences(System.Collections.Generic.IEnumerable{`1})">
            <summary>
                Return the collection of <see cref="T:Umbraco.Cms.Core.Models.Blocks.IBlockReference" /> from the block editor's Layout
            </summary>
            <param name="layout"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Blocks.BlockGridArea.#ctor(System.Collections.Generic.IList{Umbraco.Cms.Core.Models.Blocks.BlockGridItem},System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockGridArea" /> class.
            </summary>
            <param name="list">The list to wrap.</param>
            <param name="alias">The area alias</param>
            <param name="rowSpan">The number of rows this area should span</param>
            <param name="columnSpan">The number of columns this area should span</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockGridArea.Alias">
            <summary>
            The area alias
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockGridArea.RowSpan">
            <summary>
            The number of rows this area should span.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockGridArea.ColumnSpan">
            <summary>
            The number of columns this area should span.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.BlockGridEditorDataConverter">
            <summary>
            Data converter for the block grid property editor
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.BlockGridItem">
            <summary>
            Represents a layout item for the Block Grid editor.
            </summary>
            <seealso cref="T:Umbraco.Cms.Core.Models.Blocks.IBlockReference`2" />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Blocks.BlockGridItem.#ctor(Umbraco.Cms.Core.Udi,Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,Umbraco.Cms.Core.Udi,Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockGridItem" /> class.
            </summary>
            <param name="contentUdi">The content UDI.</param>
            <param name="content">The content.</param>
            <param name="settingsUdi">The settings UDI.</param>
            <param name="settings">The settings.</param>
            <exception cref="T:System.ArgumentNullException">contentUdi
            or
            content</exception>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockGridItem.ContentKey">
            <summary>
            Gets the content key.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockGridItem.SettingsKey">
            <summary>
            Gets the settings key.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockGridItem.ContentUdi">
            <summary>
            Gets the content UDI.
            </summary>
            <value>
            The content UDI.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockGridItem.Content">
            <summary>
            Gets the content.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockGridItem.SettingsUdi">
            <summary>
            Gets the settings UDI.
            </summary>
            <value>
            The settings UDI.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockGridItem.Settings">
            <summary>
            Gets the settings.
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockGridItem.RowSpan">
            <summary>
            The number of rows this item should span
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockGridItem.ColumnSpan">
            <summary>
            The number of columns this item should span
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockGridItem.Areas">
            <summary>
            The grid areas within this item
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockGridItem.AreaGridColumns">
            <summary>
            The number of columns available for the areas to span
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockGridItem.GridColumns">
            <summary>
            The number of columns in the root grid
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.BlockGridItem`1">
            <summary>
            Represents a layout item with a generic content type for the Block List editor.
            </summary>
            <typeparam name="T">The type of the content.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Blocks.BlockGridItem`1.#ctor(Umbraco.Cms.Core.Udi,`0,Umbraco.Cms.Core.Udi,Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockGridItem`1" /> class.
            </summary>
            <param name="contentUdi">The content UDI.</param>
            <param name="content">The content.</param>
            <param name="settingsUdi">The settings UDI.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockGridItem`1.Content">
            <summary>
            Gets the content.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.BlockGridItem`2">
            <summary>
            Represents a layout item with generic content and settings types for the Block List editor.
            </summary>
            <typeparam name="TContent">The type of the content.</typeparam>
            <typeparam name="TSettings">The type of the settings.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Blocks.BlockGridItem`2.#ctor(Umbraco.Cms.Core.Udi,`0,Umbraco.Cms.Core.Udi,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockGridItem`2" /> class.
            </summary>
            <param name="contentUdi">The content udi.</param>
            <param name="content">The content.</param>
            <param name="settingsUdi">The settings udi.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockGridItem`2.Settings">
            <summary>
            Gets the settings.
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.BlockGridLayoutItem">
            <summary>
            Used for deserializing the block grid layout
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.BlockGridModel">
            <summary>
            The strongly typed model for the Block List editor.
            </summary>
            <seealso cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockGridModel.Empty">
            <summary>
            Gets the empty <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockGridModel" />.
            </summary>
            <value>
            The empty <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockGridModel" />.
            </value>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Blocks.BlockGridModel.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockGridModel" /> class from being created.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Blocks.BlockGridModel.#ctor(System.Collections.Generic.IList{Umbraco.Cms.Core.Models.Blocks.BlockGridItem},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockGridModel" /> class.
            </summary>
            <param name="list">The list to wrap.</param>
            <param name="gridColumns">The number of columns in the grid</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockGridModel.GridColumns">
            <summary>
            The number of columns in the grid
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.BlockGridValue">
            <summary>
            Represents a block grid value.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Blocks.BlockGridValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockGridValue" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Blocks.BlockGridValue.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.Blocks.BlockGridLayoutItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockGridValue" /> class.
            </summary>
            <param name="layouts">The layouts.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockGridValue.PropertyEditorAlias">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.BlockItemData">
            <summary>
                Represents a single block's data in raw form
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockItemData.ContentTypeAlias">
            <summary>
                not serialized, manually set and used during internally
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.BlockListEditorDataConverter">
            <summary>
                Data converter for the block list property editor
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.BlockListItem">
            <summary>
                Represents a layout item for the Block List editor.
            </summary>
            <seealso cref="T:Umbraco.Cms.Core.Models.Blocks.IBlockReference`1" />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Blocks.BlockListItem.#ctor(Umbraco.Cms.Core.Udi,Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,Umbraco.Cms.Core.Udi,Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockListItem" /> class.
            </summary>
            <param name="contentUdi">The content UDI.</param>
            <param name="content">The content.</param>
            <param name="settingsUdi">The settings UDI.</param>
            <param name="settings">The settings.</param>
            <exception cref="T:System.ArgumentNullException">
                contentUdi
                or
                content
            </exception>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockListItem.Content">
            <summary>
                Gets the content.
            </summary>
            <value>
                The content.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockListItem.SettingsUdi">
            <summary>
                Gets the settings UDI.
            </summary>
            <value>
                The settings UDI.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockListItem.ContentUdi">
            <summary>
                Gets the content UDI.
            </summary>
            <value>
                The content UDI.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockListItem.ContentKey">
            <summary>
            Gets the content key.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockListItem.SettingsKey">
            <summary>
            Gets the settings key.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockListItem.Settings">
            <summary>
                Gets the settings.
            </summary>
            <value>
                The settings.
            </value>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.BlockListItem`1">
            <summary>
                Represents a layout item with a generic content type for the Block List editor.
            </summary>
            <typeparam name="T">The type of the content.</typeparam>
            <seealso cref="T:Umbraco.Cms.Core.Models.Blocks.IBlockReference`1" />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Blocks.BlockListItem`1.#ctor(Umbraco.Cms.Core.Udi,`0,Umbraco.Cms.Core.Udi,Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockListItem`1" /> class.
            </summary>
            <param name="contentUdi">The content UDI.</param>
            <param name="content">The content.</param>
            <param name="settingsUdi">The settings UDI.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockListItem`1.Content">
            <summary>
                Gets the content.
            </summary>
            <value>
                The content.
            </value>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.BlockListItem`2">
            <summary>
                Represents a layout item with generic content and settings types for the Block List editor.
            </summary>
            <typeparam name="TContent">The type of the content.</typeparam>
            <typeparam name="TSettings">The type of the settings.</typeparam>
            <seealso cref="T:Umbraco.Cms.Core.Models.Blocks.IBlockReference`1" />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Blocks.BlockListItem`2.#ctor(Umbraco.Cms.Core.Udi,`0,Umbraco.Cms.Core.Udi,`1)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockListItem`2" /> class.
            </summary>
            <param name="contentUdi">The content udi.</param>
            <param name="content">The content.</param>
            <param name="settingsUdi">The settings udi.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockListItem`2.Settings">
            <summary>
                Gets the settings.
            </summary>
            <value>
                The settings.
            </value>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.BlockListLayoutItem">
            <summary>
                Used for deserializing the block list layout
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.BlockListModel">
            <summary>
                The strongly typed model for the Block List editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Blocks.BlockListModel.#ctor(System.Collections.Generic.IList{Umbraco.Cms.Core.Models.Blocks.BlockListItem})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockListModel" /> class.
            </summary>
            <param name="list">The list to wrap.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Blocks.BlockListModel.#ctor">
            <summary>
                Prevents a default instance of the <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockListModel" /> class from being created.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockListModel.Empty">
            <summary>
                Gets the empty <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockListModel" />.
            </summary>
            <value>
                The empty <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockListModel" />.
            </value>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.BlockListValue">
            <summary>
            Represents a block list value.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Blocks.BlockListValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockListValue" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Blocks.BlockListValue.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.Blocks.BlockListLayoutItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockListValue" /> class.
            </summary>
            <param name="layouts">The layouts.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockListValue.PropertyEditorAlias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockModelCollection`1.Item(System.Guid)">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockListItem" /> with the specified content key.
            </summary>
            <value>
                The <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockListItem" />.
            </value>
            <param name="contentKey">The content key.</param>
            <returns>
                The <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockListItem" /> with the specified content key.
            </returns>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockModelCollection`1.Item(Umbraco.Cms.Core.Udi)">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockListItem" /> with the specified content UDI.
            </summary>
            <value>
                The <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockListItem" />.
            </value>
            <param name="contentUdi">The content UDI.</param>
            <returns>
                The <see cref="T:Umbraco.Cms.Core.Models.Blocks.BlockListItem" /> with the specified content UDI.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.BlockValue">
            <summary>
            Represents a block value.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockValue.Layout">
            <summary>
            Gets or sets the layout for specific property editors.
            </summary>
            <value>
            The layout.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockValue.ContentData">
            <summary>
            Gets or sets the content data.
            </summary>
            <value>
            The content data.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockValue.SettingsData">
            <summary>
            Gets or sets the settings data.
            </summary>
            <value>
            The settings data.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockValue.Expose">
            <summary>
            Gets or sets the availability of blocks per variation.
            </summary>
            <remarks>
            Only applicable for block level variance.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.BlockValue.PropertyEditorAlias">
            <summary>
            Gets the property editor alias of the current layout.
            </summary>
            <value>
            The property editor alias of the current layout.
            </value>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.BlockValue`1">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Blocks.BlockValue`1.GetLayouts">
            <summary>
            Gets the layouts of the current property editor.
            </summary>
            <returns>
            The layouts.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.IBlockReference">
            <summary>
                Represents a data item reference for a Block Editor implementation.
            </summary>
            <remarks>
                See:
                https://github.com/umbraco/rfcs/blob/907f3758cf59a7b6781296a60d57d537b3b60b8c/cms/0011-block-data-structure.md#strongly-typed
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.IBlockReference.ContentUdi">
            <summary>
                Gets the content UDI.
            </summary>
            <value>
                The content UDI.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.IBlockReference.ContentKey">
            <summary>
            Gets the content key.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.IBlockReference`1">
            <summary>
                Represents a data item reference with settings for a Block editor implementation.
            </summary>
            <typeparam name="TSettings">The type of the settings.</typeparam>
            <remarks>
                See:
                https://github.com/umbraco/rfcs/blob/907f3758cf59a7b6781296a60d57d537b3b60b8c/cms/0011-block-data-structure.md#strongly-typed
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.IBlockReference`1.Settings">
            <summary>
                Gets the settings.
            </summary>
            <value>
                The settings.
            </value>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.IBlockReference`2">
            <summary>
                Represents a data item reference with content and settings for a Block editor implementation.
            </summary>
            <typeparam name="TContent">The type of the content.</typeparam>
            <typeparam name="TSettings">The type of the settings.</typeparam>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.IBlockReference`2.Content">
            <summary>
                Gets the content.
            </summary>
            <value>
                The content.
            </value>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.RichTextBlockItem">
            <summary>
                Represents a layout item for the Block List editor.
            </summary>
            <seealso cref="T:Umbraco.Cms.Core.Models.Blocks.IBlockReference`1" />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Blocks.RichTextBlockItem.#ctor(Umbraco.Cms.Core.Udi,Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,Umbraco.Cms.Core.Udi,Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Blocks.RichTextBlockItem" /> class.
            </summary>
            <param name="contentUdi">The content UDI.</param>
            <param name="content">The content.</param>
            <param name="settingsUdi">The settings UDI.</param>
            <param name="settings">The settings.</param>
            <exception cref="T:System.ArgumentNullException">
                contentUdi
                or
                content
            </exception>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.RichTextBlockItem.Content">
            <summary>
                Gets the content.
            </summary>
            <value>
                The content.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.RichTextBlockItem.SettingsUdi">
            <summary>
                Gets the settings UDI.
            </summary>
            <value>
                The settings UDI.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.RichTextBlockItem.ContentUdi">
            <summary>
                Gets the content UDI.
            </summary>
            <value>
                The content UDI.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.RichTextBlockItem.Settings">
            <summary>
                Gets the settings.
            </summary>
            <value>
                The settings.
            </value>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.RichTextBlockItem`1">
            <summary>
                Represents a layout item with a generic content type for the Block List editor.
            </summary>
            <typeparam name="T">The type of the content.</typeparam>
            <seealso cref="T:Umbraco.Cms.Core.Models.Blocks.IBlockReference`1" />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Blocks.RichTextBlockItem`1.#ctor(Umbraco.Cms.Core.Udi,`0,Umbraco.Cms.Core.Udi,Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Blocks.RichTextBlockItem`1" /> class.
            </summary>
            <param name="contentUdi">The content UDI.</param>
            <param name="content">The content.</param>
            <param name="settingsUdi">The settings UDI.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.RichTextBlockItem`1.Content">
            <summary>
                Gets the content.
            </summary>
            <value>
                The content.
            </value>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.RichTextBlockItem`2">
            <summary>
                Represents a layout item with generic content and settings types for the Block List editor.
            </summary>
            <typeparam name="TContent">The type of the content.</typeparam>
            <typeparam name="TSettings">The type of the settings.</typeparam>
            <seealso cref="T:Umbraco.Cms.Core.Models.Blocks.IBlockReference`1" />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Blocks.RichTextBlockItem`2.#ctor(Umbraco.Cms.Core.Udi,`0,Umbraco.Cms.Core.Udi,`1)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Blocks.RichTextBlockItem`2" /> class.
            </summary>
            <param name="contentUdi">The content udi.</param>
            <param name="content">The content.</param>
            <param name="settingsUdi">The settings udi.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.RichTextBlockItem`2.Settings">
            <summary>
                Gets the settings.
            </summary>
            <value>
                The settings.
            </value>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.RichTextBlockLayoutItem">
            <summary>
                Used for deserializing the rich text block layouts
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.RichTextBlockModel">
            <summary>
                The strongly typed model for blocks in the Rich Text editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Blocks.RichTextBlockModel.#ctor(System.Collections.Generic.IList{Umbraco.Cms.Core.Models.Blocks.RichTextBlockItem})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Blocks.RichTextBlockModel" /> class.
            </summary>
            <param name="list">The list to wrap.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Blocks.RichTextBlockModel.#ctor">
            <summary>
                Prevents a default instance of the <see cref="T:Umbraco.Cms.Core.Models.Blocks.RichTextBlockModel" /> class from being created.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.RichTextBlockModel.Empty">
            <summary>
                Gets the empty <see cref="T:Umbraco.Cms.Core.Models.Blocks.RichTextBlockModel" />.
            </summary>
            <value>
                The empty <see cref="T:Umbraco.Cms.Core.Models.Blocks.RichTextBlockModel" />.
            </value>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.RichTextBlockValue">
            <summary>
            Represents a rich text block value.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Blocks.RichTextBlockValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Blocks.RichTextBlockValue" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Blocks.RichTextBlockValue.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.Blocks.RichTextBlockLayoutItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Blocks.RichTextBlockValue" /> class.
            </summary>
            <param name="layouts">The layouts.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Blocks.RichTextBlockValue.PropertyEditorAlias">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Blocks.RichTextEditorBlockDataConverter">
            <summary>
                Data converter for blocks in the richtext property editor
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.CacheInstruction">
            <summary>
                Represents a cache instruction.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.CacheInstruction.#ctor(System.Int32,System.DateTime,System.String,System.String,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.CacheInstruction" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.CacheInstruction.Id">
            <summary>
                Cache instruction Id.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.CacheInstruction.UtcStamp">
            <summary>
                Cache instruction created date.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.CacheInstruction.Instructions">
            <summary>
                Serialized instructions.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.CacheInstruction.OriginIdentity">
            <summary>
                Identity of server originating the instruction.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.CacheInstruction.InstructionCount">
            <summary>
                Count of instructions.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.CacheSettings.ContentTypeKeys">
            <summary>
                Gets or sets a value for the collection of content type ids to always have in the cache.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ChangingPasswordModel">
            <summary>
                A model representing the data required to set a member/user password depending on the provider installed.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ChangingPasswordModel.NewPassword">
            <summary>
                The password value
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ChangingPasswordModel.OldPassword">
            <summary>
                The old password - used to change a password when: EnablePasswordRetrieval = false
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ChangingPasswordModel.Id">
            <summary>
                The ID of the current user/member requesting the password change
                For users, required to allow changing password without the entire UserSave model
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ChangingPasswordModel.ResetPasswordToken">
            <summary>
                The reset token that is required if changing your own password without the old password.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Consent">
            <summary>
                Represents a consent.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Consent.HistoryInternal">
            <summary>
                Gets the previous states of this consent.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Consent.Current">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Consent.Source">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Consent.Context">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Consent.Action">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Consent.State">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Consent.Comment">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Consent.History">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ConsentState">
            <summary>
                Represents the state of a consent.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ConsentState.None">
            <summary>
                There is no consent.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ConsentState.Pending">
            <summary>
                Consent is pending and has not been granted yet.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ConsentState.Granted">
            <summary>
                Consent has been granted.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ConsentState.Revoked">
            <summary>
                Consent has been revoked.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Content">
            <summary>
                Represents a Content object
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Content.#ctor(System.String,Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Models.IContentType,System.String)">
            <summary>
                Constructor for creating a Content object
            </summary>
            <param name="name">Name of the content</param>
            <param name="parent">Parent <see cref="T:Umbraco.Cms.Core.Models.IContent" /> object</param>
            <param name="contentType">ContentType for the current Content object</param>
            <param name="culture">An optional culture.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Content.#ctor(System.String,Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Models.IContentType,System.Int32,System.String)">
            <summary>
                Constructor for creating a Content object
            </summary>
            <param name="name">Name of the content</param>
            <param name="parent">Parent <see cref="T:Umbraco.Cms.Core.Models.IContent" /> object</param>
            <param name="contentType">ContentType for the current Content object</param>
            <param name="userId">The identifier of the user creating the Content object</param>
            <param name="culture">An optional culture.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Content.#ctor(System.String,Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Models.IContentType,Umbraco.Cms.Core.Models.PropertyCollection,System.String)">
            <summary>
                Constructor for creating a Content object
            </summary>
            <param name="name">Name of the content</param>
            <param name="parent">Parent <see cref="T:Umbraco.Cms.Core.Models.IContent" /> object</param>
            <param name="contentType">ContentType for the current Content object</param>
            <param name="properties">Collection of properties</param>
            <param name="culture">An optional culture.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Content.#ctor(System.String,System.Int32,Umbraco.Cms.Core.Models.IContentType,System.String)">
            <summary>
                Constructor for creating a Content object
            </summary>
            <param name="name">Name of the content</param>
            <param name="parentId">Id of the Parent content</param>
            <param name="contentType">ContentType for the current Content object</param>
            <param name="culture">An optional culture.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Content.#ctor(System.String,System.Int32,Umbraco.Cms.Core.Models.IContentType,System.Int32,System.String)">
            <summary>
                Constructor for creating a Content object
            </summary>
            <param name="name">Name of the content</param>
            <param name="parentId">Id of the Parent content</param>
            <param name="contentType">ContentType for the current Content object</param>
            <param name="userId">The identifier of the user creating the Content object</param>
            <param name="culture">An optional culture.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Content.#ctor(System.String,System.Int32,Umbraco.Cms.Core.Models.IContentType,Umbraco.Cms.Core.Models.PropertyCollection,System.String)">
            <summary>
                Constructor for creating a Content object
            </summary>
            <param name="name">Name of the content</param>
            <param name="parentId">Id of the Parent content</param>
            <param name="contentType">ContentType for the current Content object</param>
            <param name="properties">Collection of properties</param>
            <param name="culture">An optional culture.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Content.TemplateId">
            <summary>
                Gets or sets the template used by the Content.
                This is used to override the default one from the ContentType.
            </summary>
            <remarks>
                If no template is explicitly set on the Content object,
                the Default template from the ContentType will be returned.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Content.Published">
            <summary>
                Gets or sets a value indicating whether this content item is published or not.
            </summary>
            <remarks>
                the setter is should only be invoked from
                - the ContentFactory when creating a content entity from a dto
                - the ContentRepository when updating a content entity
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Content.PublishedState">
            <summary>
                Gets the published state of the content item.
            </summary>
            <remarks>
                The state should be Published or Unpublished, depending on whether Published
                is true or false, but can also temporarily be Publishing or Unpublishing when the
                content item is about to be saved.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Content.PublishDate">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Content.PublisherId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Content.PublishTemplateId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Content.PublishName">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Content.EditedCultures">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Content.PublishedCultures">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Content.IsCulturePublished(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Content.IsCultureEdited(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Content.PublishCultureInfos">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Content.GetPublishName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Content.GetPublishDate(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Content.IsPropertyDirty(System.String)">
            <inheritdoc />
            <remarks>Overridden to check special keys.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Content.WasPropertyDirty(System.String)">
            <inheritdoc />
            <remarks>Overridden to check special keys.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Content.DeepCloneWithResetIdentities">
            <summary>
                Creates a deep clone of the current entity with its identity and it's property identities reset
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Content.PublishNamesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                Handles culture infos collection changes.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Content.ChangeContentType(Umbraco.Cms.Core.Models.IContentType)">
            <summary>
                Changes the <see cref="T:Umbraco.Cms.Core.Models.ContentType" /> for the current content object
            </summary>
            <param name="contentType">New ContentType for this content</param>
            <remarks>Leaves PropertyTypes intact after change</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Content.ChangeContentType(Umbraco.Cms.Core.Models.IContentType,System.Boolean)">
            <summary>
                Changes the <see cref="T:Umbraco.Cms.Core.Models.ContentType" /> for the current content object and removes PropertyTypes,
                which are not part of the new ContentType.
            </summary>
            <param name="contentType">New ContentType for this content</param>
            <param name="clearProperties">Boolean indicating whether to clear PropertyTypes upon change</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ContentBase">
            <summary>
                Represents an abstract class for base Content properties and methods
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentBase.#ctor(System.String,System.Int32,Umbraco.Cms.Core.Models.IContentTypeComposition,Umbraco.Cms.Core.Models.IPropertyCollection,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.ContentBase" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentBase.#ctor(System.String,Umbraco.Cms.Core.Models.IContentBase,Umbraco.Cms.Core.Models.IContentTypeComposition,Umbraco.Cms.Core.Models.IPropertyCollection,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.ContentBase" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentBase.WriterId">
            <summary>
                Id of the user who wrote/updated this entity
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentBase.ContentTypeId">
            <summary>
                Integer Id of the default ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentBase.Properties">
            <summary>
                Gets or sets the collection of properties for the entity.
            </summary>
            <remarks>
                Marked DoNotClone since we'll manually clone the underlying field to deal with the event handling
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentBase.PerformDeepClone(System.Object)">
            <inheritdoc />
            <remarks>
                Overridden to deal with specific object instances
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentBase.AvailableCultures">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentBase.IsCultureAvailable(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentBase.CultureInfos">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentBase.GetCultureName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentBase.GetUpdateDate(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentBase.SetCultureName(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentBase.CultureInfosCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                Handles culture infos collection changes.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentBase.HasProperty(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentBase.GetValue(System.String,System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentBase.GetValue``1(System.String,System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentBase.SetValue(System.String,System.Object,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentBase.RemoveValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentBase.ResetDirtyProperties(System.Boolean)">
            <inheritdoc />
            <remarks>Overridden to include user properties.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentBase.IsDirty">
            <inheritdoc />
            <remarks>Overridden to include user properties.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentBase.WasDirty">
            <inheritdoc />
            <remarks>Overridden to include user properties.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentBase.IsEntityDirty">
            <summary>
                Gets a value indicating whether the current entity's own properties (not user) are dirty.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentBase.WasEntityDirty">
            <summary>
                Gets a value indicating whether the current entity's own properties (not user) were dirty.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentBase.IsPropertyDirty(System.String)">
            <inheritdoc />
            <remarks>Overridden to include user properties.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentBase.WasPropertyDirty(System.String)">
            <inheritdoc />
            <remarks>Overridden to include user properties.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentBase.GetDirtyProperties">
            <inheritdoc />
            <remarks>Overridden to include user properties.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentBase.GetWereDirtyProperties">
            <inheritdoc />
            <remarks>Overridden to include user properties.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ContentCultureInfos">
            <summary>
                The name of a content variant for a given culture
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentCultureInfos.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.ContentCultureInfos" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentCultureInfos.#ctor(Umbraco.Cms.Core.Models.ContentCultureInfos)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.ContentCultureInfos" /> class.
            </summary>
            <remarks>Used for cloning, without change tracking.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentCultureInfos.Culture">
            <summary>
                Gets the culture.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentCultureInfos.Name">
            <summary>
                Gets the name.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentCultureInfos.Date">
            <summary>
                Gets the date.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentCultureInfos.DeepClone">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentCultureInfos.Equals(Umbraco.Cms.Core.Models.ContentCultureInfos)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentCultureInfos.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentCultureInfos.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentCultureInfos.Deconstruct(System.String@,System.String@)">
            <summary>
                Deconstructs into culture and name.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentCultureInfos.Deconstruct(System.String@,System.String@,System.DateTime@)">
            <summary>
                Deconstructs into culture, name and date.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ContentCultureInfosCollection">
            <summary>
                The culture names of a content's variants
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentCultureInfosCollection.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.ContentCultureInfosCollection" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentCultureInfosCollection.DeepClone">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentCultureInfosCollection.AddOrUpdate(System.String,System.String,System.DateTime)">
            <summary>
                Adds or updates a <see cref="T:Umbraco.Cms.Core.Models.ContentCultureInfos" /> instance.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentDataIntegrityReport.IssueType.InvalidPathAndLevelByParentId">
            <summary>
                The item's level and path are inconsistent with it's parent's path and level
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentDataIntegrityReport.IssueType.InvalidPathEmpty">
            <summary>
                The item's path doesn't contain all required parts
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentDataIntegrityReport.IssueType.InvalidPathLevelMismatch">
            <summary>
                The item's path parts are inconsistent with it's level value
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentDataIntegrityReport.IssueType.InvalidPathById">
            <summary>
                The item's path does not end with it's own ID
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentDataIntegrityReport.IssueType.InvalidPathByParentId">
            <summary>
                The item's path does not have it's parent Id as the 2nd last entry
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentDataIntegrityReportOptions.FixIssues">
            <summary>
                Set to true to try to automatically resolve data integrity issues
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentEditing.GetAvailableCompositionsFilter.FilterPropertyTypes">
            <summary>
                This is normally an empty list but if additional property type aliases are passed in, any content types that have
                these aliases will be filtered out.
                This is required because in the case of creating/modifying a content type because new property types being added to
                it are not yet persisted so cannot
                be looked up via the db, they need to be passed in.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentEditing.GetAvailableCompositionsFilter.FilterContentTypes">
            <summary>
                This is normally an empty list but if additional content type aliases are passed in, any content types containing
                those aliases will be filtered out
                along with any content types that have matching property types that are included in the filtered content types
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentEditing.GetAvailableCompositionsFilter.IsElement">
            <summary>
                Wether the content type is currently marked as an element type
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ContentEditing.UmbracoEntityTypes">
            <summary>
                Represents the type's of Umbraco entities that can be resolved from the EntityController
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentEditing.UmbracoEntityTypes.Language">
            <summary>
                Language
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentEditing.UmbracoEntityTypes.User">
            <summary>
                User
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentEditing.UmbracoEntityTypes.Document">
            <summary>
                Document
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentEditing.UmbracoEntityTypes.Media">
            <summary>
                Media
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentEditing.UmbracoEntityTypes.MemberType">
            <summary>
                Member Type
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentEditing.UmbracoEntityTypes.Template">
            <summary>
                Template
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentEditing.UmbracoEntityTypes.MemberGroup">
            <summary>
                Member Group
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentEditing.UmbracoEntityTypes.MediaType">
            <summary>
                "Media Type
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentEditing.UmbracoEntityTypes.DocumentType">
            <summary>
                Document Type
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentEditing.UmbracoEntityTypes.Stylesheet">
            <summary>
                Stylesheet
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentEditing.UmbracoEntityTypes.Script">
            <summary>
                Script
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentEditing.UmbracoEntityTypes.PartialView">
            <summary>
                Partial View
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentEditing.UmbracoEntityTypes.Member">
            <summary>
                Member
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentEditing.UmbracoEntityTypes.DataType">
            <summary>
                Data Type
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentEditing.UmbracoEntityTypes.PropertyType">
            <summary>
                Property Type
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentEditing.UmbracoEntityTypes.PropertyGroup">
            <summary>
                Property Group
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentEditing.UmbracoEntityTypes.DictionaryItem">
            <summary>
                Dictionary Item
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ContentModel">
            <summary>
                Represents the model for the current Umbraco view.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentModel.#ctor(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.ContentModel" /> class with a content.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentModel.Content">
            <summary>
                Gets the content.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentModel`1.#ctor(`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.ContentModel`1" /> class with a content.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentModel`1.Content">
            <summary>
                Gets the content.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentPropertySettings.ReservedFieldNames">
            <summary>
            Gets a set of standard names for fields that cannot be used for custom properties.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentPublishing.CulturePublishScheduleModel.Culture">
            <summary>
            Gets or sets the culture. Null means invariant.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentPublishing.CulturePublishScheduleModel.Schedule">
            <summary>
            Gets or sets the schedule of publishing. Null means immediately.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ContentSchedule">
            <summary>
                Represents a scheduled action for a document.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentSchedule.#ctor(System.String,System.DateTime,Umbraco.Cms.Core.Models.ContentScheduleAction)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.ContentSchedule" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentSchedule.#ctor(System.Guid,System.String,System.DateTime,Umbraco.Cms.Core.Models.ContentScheduleAction)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.ContentSchedule" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentSchedule.Id">
            <summary>
                Gets the unique identifier of the document targeted by the scheduled action.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentSchedule.Culture">
            <summary>
                Gets the culture of the scheduled action.
            </summary>
            <remarks>
                string.Empty represents the invariant culture.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentSchedule.Date">
            <summary>
                Gets the date of the scheduled action.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentSchedule.Action">
            <summary>
                Gets the action to take.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ContentScheduleAction">
            <summary>
                Defines scheduled actions for documents.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentScheduleAction.Release">
            <summary>
                Release the document.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentScheduleAction.Expire">
            <summary>
                Expire the document.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentScheduleCollection.FullSchedule">
            <summary>
                Returns all schedules registered
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentScheduleCollection.ClearCollectionChangedEvents">
            <summary>
                Clears all <see cref="E:Umbraco.Cms.Core.Models.ContentScheduleCollection.CollectionChanged" /> event handlers
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentScheduleCollection.Add(Umbraco.Cms.Core.Models.ContentSchedule)">
            <summary>
                Add an existing schedule
            </summary>
            <param name="schedule"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentScheduleCollection.Add(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Adds a new schedule for invariant content
            </summary>
            <param name="releaseDate"></param>
            <param name="expireDate"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentScheduleCollection.Add(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Adds a new schedule for a culture
            </summary>
            <param name="culture"></param>
            <param name="releaseDate"></param>
            <param name="expireDate"></param>
            <returns>true if successfully added, false if validation fails</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentScheduleCollection.Remove(Umbraco.Cms.Core.Models.ContentSchedule)">
            <summary>
                Remove a scheduled change
            </summary>
            <param name="change"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentScheduleCollection.Clear(Umbraco.Cms.Core.Models.ContentScheduleAction,System.Nullable{System.DateTime})">
            <summary>
                Clear all of the scheduled change type for invariant content
            </summary>
            <param name="action"></param>
            <param name="changeDate">If specified, will clear all entries with dates less than or equal to the value</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentScheduleCollection.Clear(System.String,Umbraco.Cms.Core.Models.ContentScheduleAction,System.Nullable{System.DateTime})">
            <summary>
                Clear all of the scheduled change type for the culture
            </summary>
            <param name="culture"></param>
            <param name="action"></param>
            <param name="date">If specified, will clear all entries with dates less than or equal to the value</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentScheduleCollection.GetPending(Umbraco.Cms.Core.Models.ContentScheduleAction,System.DateTime)">
            <summary>
                Returns all pending schedules based on the date and type provided
            </summary>
            <param name="action"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentScheduleCollection.GetSchedule(System.Nullable{Umbraco.Cms.Core.Models.ContentScheduleAction})">
            <summary>
                Gets the schedule for invariant content
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentScheduleCollection.GetSchedule(System.String,System.Nullable{Umbraco.Cms.Core.Models.ContentScheduleAction})">
            <summary>
                Gets the schedule for a culture
            </summary>
            <param name="culture"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ContentStatus">
            <summary>
                Describes the states of a document, with regard to (schedule) publishing.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentStatus.Unpublished">
            <summary>
                The document is not trashed, and not published.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentStatus.Published">
            <summary>
                The document is published.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentStatus.Expired">
            <summary>
                The document is not trashed, not published, after being unpublished by a scheduled action.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentStatus.Trashed">
            <summary>
                The document is trashed.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentStatus.AwaitingRelease">
            <summary>
                The document is not trashed, not published, and pending publication by a scheduled action.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ContentType">
            <summary>
                Represents the content type that a <see cref="T:Umbraco.Cms.Core.Models.Content" /> object is based on
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentType.#ctor(Umbraco.Cms.Core.Strings.IShortStringHelper,System.Int32)">
            <summary>
                Constuctor for creating a ContentType with the parent's id.
            </summary>
            <remarks>Only use this for creating ContentTypes at the root (with ParentId -1).</remarks>
            <param name="parentId"></param>
            <param name="shortStringHelper"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentType.#ctor(Umbraco.Cms.Core.Strings.IShortStringHelper,Umbraco.Cms.Core.Models.IContentType,System.String)">
            <summary>
                Constuctor for creating a ContentType with the parent as an inherited type.
            </summary>
            <remarks>Use this to ensure inheritance from parent.</remarks>
            <param name="parent"></param>
            <param name="alias"></param>
            <param name="shortStringHelper"></param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentType.SupportsPublishing">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentType.DefaultTemplate">
            <summary>
                Gets or sets the alias of the default Template.
                TODO: This should be ignored from cloning!!!!!!!!!!!!!!
                - but to do that we have to implement callback hacks, this needs to be fixed in v8,
                we should not store direct entity
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentType.ToSimple">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentType.AllowedTemplates">
            <summary>
                Gets or Sets a list of Templates which are allowed for the ContentType
                TODO: This should be ignored from cloning!!!!!!!!!!!!!!
                - but to do that we have to implement callback hacks, this needs to be fixed in v8,
                we should not store direct entity
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentType.IsAllowedTemplate(System.Int32)">
            <summary>
                Determines if AllowedTemplates contains templateId
            </summary>
            <param name="templateId">The template id to check</param>
            <returns>True if AllowedTemplates contains the templateId else False</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentType.IsAllowedTemplate(System.String)">
            <summary>
                Determines if AllowedTemplates contains templateId
            </summary>
            <param name="templateAlias">The template alias to check</param>
            <returns>True if AllowedTemplates contains the templateAlias else False</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentType.SetDefaultTemplate(Umbraco.Cms.Core.Models.ITemplate)">
            <summary>
                Sets the default template for the ContentType
            </summary>
            <param name="template">Default <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentType.RemoveTemplate(Umbraco.Cms.Core.Models.ITemplate)">
            <summary>
                Removes a template from the list of allowed templates
            </summary>
            <param name="template"><see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> to remove</param>
            <returns>True if template was removed, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentType.Umbraco#Cms#Core#Models#IContentType#DeepCloneWithResetIdentities(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentType.IsDirty">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ContentTypeAvailableCompositionsResult">
            <summary>
                Used when determining available compositions for a given content type
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ContentTypeAvailableCompositionsResults">
            <summary>
                Used when determining available compositions for a given content type
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ContentTypeBase">
            <summary>
                Represents an abstract class for base ContentType properties and methods
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentTypeBase.SupportsPublishing">
            <summary>
                Gets a value indicating whether the content type supports publishing.
            </summary>
            <remarks>
                <para>
                    A publishing content type supports draft and published values for properties.
                    It is possible to retrieve either the draft (default) or published value of a property.
                    Setting the value always sets the draft value, which then needs to be published.
                </para>
                <para>
                    A non-publishing content type only supports one value for properties. Getting
                    the draft or published value of a property returns the same thing, and publishing
                    a value property has no effect.
                </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentTypeBase.Alias">
            <summary>
                The Alias of the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentTypeBase.HasPropertyTypeBeenRemoved">
            <summary>
                A boolean flag indicating if a property type has been removed from this instance.
            </summary>
            <remarks>
                This is currently (specifically) used in order to know that we need to refresh the content cache which
                needs to occur when a property has been removed from a content type
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentTypeBase.PropertyTypeCollection">
            <summary>
                PropertyTypes that are not part of a PropertyGroup
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentTypeBase.Description">
            <summary>
                Description for the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentTypeBase.Icon">
            <summary>
                Name of the icon (sprite class) used to identify the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentTypeBase.Thumbnail">
            <summary>
                Name of the thumbnail used to identify the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentTypeBase.AllowedAsRoot">
            <summary>
                Gets or Sets a boolean indicating whether this ContentType is allowed at the root
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentTypeBase.ListView">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentTypeBase.IsElement">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentTypeBase.AllowedContentTypes">
            <summary>
                Gets or sets a list of integer Ids for allowed ContentTypes
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentTypeBase.Variations">
            <summary>
                Gets or sets the content variation of the content type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentTypeBase.PropertyGroups">
            <inheritdoc />
            <remarks>
                <para>A PropertyGroup corresponds to a Tab in the UI</para>
                <para>Marked DoNotClone because we will manually deal with cloning and the event handlers</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentTypeBase.SupportsVariation(System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentTypeBase.SupportsPropertyVariation(System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentTypeBase.PropertyTypes">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentTypeBase.NoGroupPropertyTypes">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentTypeBase.PropertyTypeExists(System.String)">
            <summary>
                Checks whether a PropertyType with a given alias already exists
            </summary>
            <param name="alias">Alias of the PropertyType</param>
            <returns>Returns <c>True</c> if a PropertyType with the passed in alias exists, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentTypeBase.AddPropertyGroup(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentTypeBase.AddPropertyType(Umbraco.Cms.Core.Models.IPropertyType,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentTypeBase.AddPropertyType(Umbraco.Cms.Core.Models.IPropertyType)">
            <summary>
                Adds a PropertyType, which does not belong to a PropertyGroup.
            </summary>
            <param name="propertyType"><see cref="T:Umbraco.Cms.Core.Models.IPropertyType" /> to add</param>
            <returns>Returns <c>True</c> if PropertyType was added, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentTypeBase.MovePropertyType(System.String,System.String)">
            <summary>
                Moves a PropertyType to a specified PropertyGroup
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to move</param>
            <param name="propertyGroupAlias">Alias of the PropertyGroup to move the PropertyType to</param>
            <returns></returns>
            <remarks>
                If <paramref name="propertyGroupAlias" /> is null then the property is moved back to
                "generic properties" ie does not have a tab anymore.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentTypeBase.RemovePropertyType(System.String)">
            <summary>
                Removes a PropertyType from the current ContentType
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Cms.Core.Models.IPropertyType" /> to remove</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentTypeBase.RemovePropertyGroup(System.String)">
            <summary>
                Removes a PropertyGroup from the current ContentType
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Cms.Core.Models.PropertyGroup" /> to remove</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentTypeBase.IsDirty">
            <summary>
                Indicates whether the current entity is dirty.
            </summary>
            <returns>True if entity is dirty, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentTypeBase.ResetDirtyProperties">
            <summary>
                Resets dirty properties by clearing the dictionary used to track changes.
            </summary>
            <remarks>
                Please note that resetting the dirty properties could potentially
                obstruct the saving of a new or updated entity.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ContentTypeCompositionBase">
            <summary>
                Represents an abstract class for composition specific ContentType properties and methods
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentTypeCompositionBase.ContentTypeComposition">
            <summary>
                Gets or sets the content types that compose this content type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentTypeCompositionBase.CompositionPropertyGroups">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentTypeCompositionBase.CompositionPropertyTypes">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentTypeCompositionBase.GetOriginalComposedPropertyTypes">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentTypeCompositionBase.AddContentType(Umbraco.Cms.Core.Models.IContentTypeComposition)">
            <summary>
                Adds a content type to the composition.
            </summary>
            <param name="contentType">The content type to add.</param>
            <returns>True if the content type was added, otherwise false.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentTypeCompositionBase.RemoveContentType(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentTypeCompositionBase.RemoveContentType(System.String)">
            <summary>
                Removes a content type with a specified alias from the composition.
            </summary>
            <param name="alias">The alias of the content type to remove.</param>
            <returns>True if the content type was removed, otherwise false.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentTypeCompositionBase.ContentTypeCompositionExists(System.String)">
            <summary>
                Checks if a ContentType with the supplied alias exists in the list of composite ContentTypes
            </summary>
            <param name="alias">Alias of a <see cref="T:Umbraco.Cms.Core.Models.ContentType" /></param>
            <returns>True if ContentType with alias exists, otherwise returns False</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentTypeCompositionBase.PropertyTypeExists(System.String)">
            <summary>
                Checks whether a PropertyType with a given alias already exists
            </summary>
            <param name="alias">Alias of the PropertyType</param>
            <returns>Returns <c>True</c> if a PropertyType with the passed in alias exists, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentTypeCompositionBase.AddPropertyGroup(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentTypeCompositionBase.AddPropertyType(Umbraco.Cms.Core.Models.IPropertyType,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentTypeCompositionBase.CompositionAliases">
            <summary>
                Gets a list of ContentType aliases from the current composition
            </summary>
            <returns>An enumerable list of string aliases</returns>
            <remarks>Does not contain the alias of the Current ContentType</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentTypeCompositionBase.CompositionIds">
            <summary>
                Gets a list of ContentType Ids from the current composition
            </summary>
            <returns>An enumerable list of integer ids</returns>
            <remarks>Does not contain the Id of the Current ContentType</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentTypeCompositionBase.CompositionKeys">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ContentTypeEditing.ContentTypeEditingModelBase`2">
            <summary>
            <para>
            This is the common model for all content types, Documents, Media, Members.
            All the properties are common across all content types. Additionally most properties of the property types are shared as well.
            </para>
            To allow for common validation and such, the property types are required to inherit from the same base.
            The same goes for the property type containers. (I.E Tabs and Groups)
            </summary>
            <typeparam name="TPropertyType">The type of the property types, I.E <see cref="T:Umbraco.Cms.Core.Models.ContentTypeEditing.ContentTypePropertyTypeModel"/>.</typeparam>
            <typeparam name="TPropertyTypeContainer">The type of the content type containers, I.E <see cref="T:Umbraco.Cms.Core.Models.ContentTypeEditing.ContentTypePropertyContainerModel"/>.</typeparam>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ContentTypeSort">
            <summary>
                Represents a POCO for setting sort order on a ContentType reference
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ContentTypeSort.#ctor(System.Guid,System.Int32,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Object" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentTypeSort.SortOrder">
            <summary>
                Gets or sets the Sort Order of the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentTypeSort.Alias">
            <summary>
                Gets or sets the Alias of the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ContentTypeSort.Key">
            <summary>
                Gets or sets the unique Key of the ContentType
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ContentVariation">
            <summary>
                Indicates how values can vary.
            </summary>
            <remarks>
                <para>Values can vary by nothing, or culture, or segment, or both.</para>
                <para>
                    Varying by culture implies that each culture version of a document can
                    be available or not, and published or not, individually. Varying by segment
                    is a property-level thing.
                </para>
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentVariation.Nothing">
            <summary>
                Values do not vary.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentVariation.Culture">
            <summary>
                Values vary by culture.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentVariation.Segment">
            <summary>
                Values vary by segment.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ContentVariation.CultureAndSegment">
            <summary>
                Values vary by culture and segment.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Context.BackOfficeVariationContext">
            <summary>
                Represents the back-office variation context.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Context.BackOfficeVariationContext.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Context.BackOfficeVariationContext" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Context.BackOfficeVariationContext.Culture">
            <summary>
                Gets the culture.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Context.BackOfficeVariationContext.Segment">
            <summary>
                Gets the segment.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Context.HttpContextBackOfficeVariationContextAccessor">
            <summary>
                Implements <see cref="T:Umbraco.Cms.Core.Models.Context.IBackOfficeVariationContextAccessor" /> on top of <see cref="T:Umbraco.Cms.Core.Cache.IRequestCache" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Context.HttpContextBackOfficeVariationContextAccessor.#ctor(Umbraco.Cms.Core.Cache.IRequestCache)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Context.HttpContextBackOfficeVariationContextAccessor" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Context.HttpContextBackOfficeVariationContextAccessor.VariationContext">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Context.IBackOfficeVariationContextAccessor">
            <summary>
                Gives access to the current <see cref="T:Umbraco.Cms.Core.Models.Context.BackOfficeVariationContext" />.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Context.IBackOfficeVariationContextAccessor.VariationContext">
            <summary>
                Gets or sets the current <see cref="T:Umbraco.Cms.Core.Models.Context.BackOfficeVariationContext" />.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.CultureImpact">
            <summary>
                Represents the impact of a culture set.
            </summary>
            <remarks>
                <para>
                    A set of cultures can be either all cultures (including the invariant culture), or
                    the invariant culture, or a specific culture.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.CultureImpact.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.CultureImpact" /> class.
            </summary>
            <param name="culture">The culture code.</param>
            <param name="isDefault">A value indicating whether the culture is the default culture.</param>
            <param name="allowEditInvariantFromNonDefault">A value indicating if publishing invariant properties from non-default language.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.CultureImpact.All">
            <summary>
                Gets the impact of 'all' cultures (including the invariant culture).
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.CultureImpact.Invariant">
            <summary>
                Gets the impact of the invariant culture.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.CultureImpact.Culture">
            <summary>
                Gets the culture code.
            </summary>
            <remarks>
                <para>Can be null (invariant) or * (all cultures) or a specific culture code.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.CultureImpact.ImpactsAllCultures">
            <summary>
                Gets a value indicating whether this impact impacts all cultures, including,
                indirectly, the invariant culture.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.CultureImpact.ImpactsOnlyInvariantCulture">
            <summary>
                Gets a value indicating whether this impact impacts only the invariant culture,
                directly, not because all cultures are impacted.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.CultureImpact.ImpactsExplicitCulture">
            <summary>
                Gets a value indicating whether this impact impacts an implicit culture.
            </summary>
            <remarks>
                And then it does not impact the invariant culture. The impacted
                explicit culture could be the default culture.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.CultureImpact.ImpactsOnlyDefaultCulture">
            <summary>
                Gets a value indicating whether this impact impacts the default culture, directly,
                not because all cultures are impacted.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.CultureImpact.ImpactsInvariantProperties">
            <summary>
                Gets a value indicating whether this impact impacts the invariant properties, either
                directly, or because all cultures are impacted, or because the default culture is impacted.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.CultureImpact.ImpactsAlsoInvariantProperties">
            <summary>
                Gets a value indicating whether this also impact impacts the invariant properties,
                even though it does not impact the invariant culture, neither directly (ImpactsInvariantCulture)
                nor indirectly (ImpactsAllCultures).
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.CultureImpact.GetCultureForInvariantErrors(Umbraco.Cms.Core.Models.IContent,System.String[],System.String)">
            <summary>
                Utility method to return the culture used for invariant property errors based on what cultures are being actively
                saved,
                the default culture and the state of the current content item
            </summary>
            <param name="content"></param>
            <param name="savingCultures"></param>
            <param name="defaultCulture"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.CultureImpact.Explicit(System.String,System.Boolean)">
            <summary>
                Creates an impact instance representing the impact of a specific culture.
            </summary>
            <param name="culture">The culture code.</param>
            <param name="isDefault">A value indicating whether the culture is the default culture.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.DataType">
            <summary>
                Implements <see cref="T:Umbraco.Cms.Core.Models.IDataType" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.DataType.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataEditor,Umbraco.Cms.Core.Serialization.IConfigurationEditorJsonSerializer,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.DataType" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.DataType.Editor">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.DataType.EditorAlias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.DataType.EditorUiAlias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.DataType.DatabaseType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.DataType.ConfigurationData">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.DataType.ConfigurationObject">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.DataType.SetConfigurationData(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                Sets the configuration without invoking property changed events.
            </summary>
            <remarks>
                <para>
                    This method is meant to be used when building entities from database, exclusively.
                    It does NOT register a property change to dirty. It ignores the fact that the configuration
                    may contain the database type, because the datatype DTO should also contain that database
                    type, and they should be the same.
                </para>
                <para>Think before using!</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.DataType.GetLazyConfigurationObject">
            <summary>
                Gets a lazy configuration.
            </summary>
            <remarks>
                <para>The configuration object will be lazily de-serialized.</para>
                <para>This method is meant to be used when creating published datatypes, exclusively.</para>
                <para>Think before using!</para>
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.DeepCloneHelper.PropCache">
            <summary>
                Used to avoid constant reflection (perf)
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.DeepCloneHelper.DeepCloneRefProperties(Umbraco.Cms.Core.Models.IDeepCloneable,Umbraco.Cms.Core.Models.IDeepCloneable)">
            <summary>
                Used to deep clone any reference properties on the object (should be done after a MemberwiseClone for which the
                outcome is 'output')
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.DeepCloneHelper.ClonePropertyInfo">
            <summary>
                Stores the metadata for the properties for a given type so we know how to create them
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.DictionaryItem">
            <summary>
                Represents a Dictionary Item
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.DictionaryItem.ParentId">
            <summary>
                Gets or Sets the Parent Id of the Dictionary Item
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.DictionaryItem.ItemKey">
            <summary>
                Gets or sets the Key for the Dictionary Item
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.DictionaryItem.Translations">
            <summary>
                Gets or sets a list of translations for the Dictionary Item
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.DictionaryTranslation">
            <summary>
                Represents a translation for a <see cref="T:Umbraco.Cms.Core.Models.DictionaryItem" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.DictionaryTranslation.Value">
            <summary>
                Gets or sets the translated text
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.DoNotCloneAttribute">
            <summary>
                Used to attribute properties that have a setter and are a reference type
                that should be ignored for cloning when using the DeepCloneHelper
            </summary>
            <remarks>
                This attribute must be used:
                * when the property is backed by a field but the result of the property is the un-natural data stored in the field
                This attribute should not be used:
                * when the property is virtual
                * when the setter performs additional required logic other than just setting the underlying field
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Editors.ContentPropertyData">
            <summary>
                Represents data that has been submitted to be saved for a content property
            </summary>
            <remarks>
                This object exists because we may need to save additional data for each property, more than just
                the string representation of the value being submitted. An example of this is uploaded files.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Editors.ContentPropertyData.Value">
            <summary>
                The value submitted for the property
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Editors.ContentPropertyData.DataTypeConfiguration">
            <summary>
                The data type configuration for the property.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Editors.ContentPropertyData.ContentKey">
            <summary>
                Gets or sets the unique identifier of the content owning the property.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Editors.ContentPropertyData.PropertyTypeKey">
            <summary>
                Gets or sets the unique identifier of the property type.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Editors.UmbracoEntityReference">
            <summary>
            Used to track a reference to another entity in a property value.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Editors.UmbracoEntityReference.#ctor(Umbraco.Cms.Core.Udi,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Editors.UmbracoEntityReference" /> struct.
            </summary>
            <param name="udi">The UDI.</param>
            <param name="relationTypeAlias">The relation type alias.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Editors.UmbracoEntityReference.#ctor(Umbraco.Cms.Core.Udi)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Editors.UmbracoEntityReference" /> struct for a document or media item.
            </summary>
            <param name="udi">The UDI.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Editors.UmbracoEntityReference.Udi">
            <summary>
            Gets the UDI.
            </summary>
            <value>
            The UDI.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Editors.UmbracoEntityReference.RelationTypeAlias">
            <summary>
            Gets the relation type alias.
            </summary>
            <value>
            The relation type alias.
            </value>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Editors.UmbracoEntityReference.Empty">
            <summary>
            Gets an empty reference.
            </summary>
            <returns>
            An empty reference.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Editors.UmbracoEntityReference.IsEmpty(Umbraco.Cms.Core.Models.Editors.UmbracoEntityReference)">
            <summary>
            Determines whether the specified reference is empty.
            </summary>
            <param name="reference">The reference.</param>
            <returns>
              <c>true</c> if the specified reference is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Editors.UmbracoEntityReference.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Editors.UmbracoEntityReference.Equals(Umbraco.Cms.Core.Models.Editors.UmbracoEntityReference)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Editors.UmbracoEntityReference.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Editors.UmbracoEntityReference.op_Equality(Umbraco.Cms.Core.Models.Editors.UmbracoEntityReference,Umbraco.Cms.Core.Models.Editors.UmbracoEntityReference)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Editors.UmbracoEntityReference.op_Inequality(Umbraco.Cms.Core.Models.Editors.UmbracoEntityReference,Umbraco.Cms.Core.Models.Editors.UmbracoEntityReference)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Email.NotificationEmailAddress">
            <summary>
                Represents an email address used for notifications. Contains both the address and its display name.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Email.NotificationEmailModel">
            <summary>
                Represents an email when sent with notifications.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Entities.BeingDirty">
            <summary>
                Provides a concrete implementation of <see cref="T:Umbraco.Cms.Core.Models.Entities.BeingDirtyBase" />.
            </summary>
            <remarks>
                <para>
                    This class is provided for classes that cannot inherit from <see cref="T:Umbraco.Cms.Core.Models.Entities.BeingDirtyBase" />
                    and therefore need to implement <see cref="T:Umbraco.Cms.Core.Models.Entities.IRememberBeingDirty" />, by re-using some of
                    <see cref="T:Umbraco.Cms.Core.Models.Entities.BeingDirtyBase" /> logic.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.BeingDirty.SetPropertyValueAndDetectChanges``1(``0,``0@,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Sets a property value, detects changes and manages the dirty flag.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The new value.</param>
            <param name="valueRef">A reference to the value to set.</param>
            <param name="propertyName">The property name.</param>
            <param name="comparer">A comparer to compare property values.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.BeingDirty.OnPropertyChanged(System.String)">
            <summary>
                Registers that a property has changed.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Entities.BeingDirtyBase">
            <summary>
                Provides a base implementation of <see cref="T:Umbraco.Cms.Core.Models.Entities.ICanBeDirty" /> and <see cref="T:Umbraco.Cms.Core.Models.Entities.IRememberBeingDirty" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.BeingDirtyBase.IsDirty">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.BeingDirtyBase.IsPropertyDirty(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.BeingDirtyBase.GetDirtyProperties">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.BeingDirtyBase.ResetDirtyProperties">
            <inheritdoc />
            <remarks>Saves dirty properties so they can be checked with WasDirty.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.BeingDirtyBase.WasDirty">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.BeingDirtyBase.WasPropertyDirty(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.BeingDirtyBase.ResetWereDirtyProperties">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.BeingDirtyBase.ResetDirtyProperties(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.BeingDirtyBase.GetWereDirtyProperties">
            <inheritdoc />
        </member>
        <member name="E:Umbraco.Cms.Core.Models.Entities.BeingDirtyBase.PropertyChanged">
            <summary>
                Occurs when a property changes.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.BeingDirtyBase.OnPropertyChanged(System.String)">
            <summary>
                Registers that a property has changed.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.BeingDirtyBase.DisableChangeTracking">
            <summary>
                Disables change tracking.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.BeingDirtyBase.EnableChangeTracking">
            <summary>
                Enables change tracking.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.BeingDirtyBase.SetPropertyValueAndDetectChanges``1(``0,``0@,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Sets a property value, detects changes and manages the dirty flag.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The new value.</param>
            <param name="valueRef">A reference to the value to set.</param>
            <param name="propertyName">The property name.</param>
            <param name="comparer">A comparer to compare property values.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.BeingDirtyBase.DetectChanges``1(``0,``0,System.String,System.Collections.Generic.IEqualityComparer{``0},System.Boolean)">
            <summary>
                Detects changes and manages the dirty flag.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The new value.</param>
            <param name="orig">The original value.</param>
            <param name="propertyName">The property name.</param>
            <param name="comparer">A comparer to compare property values.</param>
            <param name="changed">A value indicating whether we know values have changed and no comparison is required.</param>
            <returns>True if a change was detected, false otherwise.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Entities.ContentEntitySlim">
            <summary>
                Implements <see cref="T:Umbraco.Cms.Core.Models.Entities.IContentEntitySlim" />.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.ContentEntitySlim.ContentTypeAlias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.ContentEntitySlim.ContentTypeKey">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.ContentEntitySlim.ContentTypeIcon">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.ContentEntitySlim.ContentTypeThumbnail">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Entities.DocumentEntitySlim">
            <summary>
                Implements <see cref="T:Umbraco.Cms.Core.Models.Entities.IDocumentEntitySlim" />.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.DocumentEntitySlim.CultureNames">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.DocumentEntitySlim.PublishedCultures">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.DocumentEntitySlim.EditedCultures">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.DocumentEntitySlim.Published">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.DocumentEntitySlim.Edited">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Entities.EntityBase">
            <summary>
                Provides a base class for entities.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.EntityBase.Id">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.EntityBase.Key">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.EntityBase.CreateDate">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.EntityBase.UpdateDate">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.EntityBase.DeleteDate">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.EntityBase.HasIdentity">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.EntityBase.ResetIdentity">
            <summary>
                Resets the entity identity.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.EntityBase.PerformDeepClone(System.Object)">
            <summary>
                Used by inheritors to modify the DeepCloning logic
            </summary>
            <param name="clone"></param>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Entities.EntitySlim">
            <summary>
                Implementation of <see cref="T:Umbraco.Cms.Core.Models.Entities.IEntitySlim" /> for internal use.
            </summary>
            <remarks>
                <para>
                    Although it implements <see cref="T:Umbraco.Cms.Core.Models.Entities.IEntitySlim" />, this class does not
                    implement <see cref="T:Umbraco.Cms.Core.Models.Entities.IRememberBeingDirty" /> and everything this interface defines, throws.
                </para>
                <para>
                    Although it implements <see cref="T:Umbraco.Cms.Core.Models.Entities.IEntitySlim" />, this class does not
                    implement <see cref="T:Umbraco.Cms.Core.Models.IDeepCloneable" /> and deep-cloning throws.
                </para>
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.Entities.EntitySlim.Root">
            <summary>
                Gets an entity representing "root".
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.EntitySlim.Id">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.EntitySlim.Key">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.EntitySlim.CreateDate">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.EntitySlim.UpdateDate">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.EntitySlim.DeleteDate">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.EntitySlim.HasIdentity">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.EntitySlim.Name">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.EntitySlim.CreatorId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.EntitySlim.ParentId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.EntitySlim.Level">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.EntitySlim.SetParent(Umbraco.Cms.Core.Models.Entities.ITreeEntity)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.EntitySlim.Path">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.EntitySlim.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.EntitySlim.Trashed">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.EntitySlim.NodeObjectType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.EntitySlim.HasChildren">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.EntitySlim.IsContainer">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.EntitySlim.DeepClone">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Entities.ICanBeDirty">
            <summary>
                Defines an entity that tracks property changes and can be dirty.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.ICanBeDirty.IsDirty">
            <summary>
                Determines whether the current entity is dirty.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.ICanBeDirty.IsPropertyDirty(System.String)">
            <summary>
                Determines whether a specific property is dirty.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.ICanBeDirty.GetDirtyProperties">
            <summary>
                Gets properties that are dirty.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.ICanBeDirty.ResetDirtyProperties">
            <summary>
                Resets dirty properties.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.ICanBeDirty.DisableChangeTracking">
            <summary>
                Disables change tracking.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.ICanBeDirty.EnableChangeTracking">
            <summary>
                Enables change tracking.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Entities.IContentEntitySlim">
            <summary>
                Represents a lightweight content entity, managed by the entity service.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.IContentEntitySlim.ContentTypeAlias">
            <summary>
                Gets the content type alias.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.IContentEntitySlim.ContentTypeKey">
            <summary>
            Gets the content type key.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.IContentEntitySlim.ListViewKey">
            <summary>
            Gets the listview key.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.IContentEntitySlim.ContentTypeIcon">
            <summary>
                Gets the content type icon.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.IContentEntitySlim.ContentTypeThumbnail">
            <summary>
                Gets the content type thumbnail.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Entities.IDocumentEntitySlim">
            <summary>
                Represents a lightweight document entity, managed by the entity service.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.IDocumentEntitySlim.CultureNames">
            <summary>
                Gets the variant name for each culture
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.IDocumentEntitySlim.PublishedCultures">
            <summary>
                Gets the published cultures.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.IDocumentEntitySlim.EditedCultures">
            <summary>
                Gets the edited cultures.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.IDocumentEntitySlim.Variations">
            <summary>
                Gets the content variation of the content type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.IDocumentEntitySlim.Published">
            <summary>
                Gets a value indicating whether the content is published.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.IDocumentEntitySlim.Edited">
            <summary>
                Gets a value indicating whether the content has been edited.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Entities.IEntity">
            <summary>
                Defines an entity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.IEntity.Id">
            <summary>
                Gets or sets the integer identifier of the entity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.IEntity.Key">
            <summary>
                Gets or sets the Guid unique identifier of the entity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.IEntity.CreateDate">
            <summary>
                Gets or sets the creation date.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.IEntity.UpdateDate">
            <summary>
                Gets or sets the last update date.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.IEntity.DeleteDate">
            <summary>
                Gets or sets the delete date.
            </summary>
            <remarks>
                <para>The delete date is null when the entity has not been deleted.</para>
                <para>
                    The delete date has a value when the entity instance has been deleted, but this value
                    is transient and not persisted in database (since the entity does not exist anymore).
                </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.IEntity.HasIdentity">
            <summary>
                Gets a value indicating whether the entity has an identity.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Entities.IEntitySlim">
            <summary>
                Represents a lightweight entity, managed by the entity service.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.IEntitySlim.NodeObjectType">
            <summary>
                Gets or sets the entity object type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.IEntitySlim.HasChildren">
            <summary>
                Gets or sets a value indicating whether the entity has children.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.IEntitySlim.IsContainer">
            <summary>
                Gets a value indicating whether the entity is a container.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Entities.IMediaEntitySlim">
            <summary>
                Represents a lightweight media entity, managed by the entity service.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.IMediaEntitySlim.MediaPath">
            <summary>
                The media file's path/URL
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Entities.IRememberBeingDirty">
            <summary>
                Defines an entity that tracks property changes and can be dirty, and remembers
                which properties were dirty when the changes were committed.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.IRememberBeingDirty.WasDirty">
            <summary>
                Determines whether the current entity is dirty.
            </summary>
            <remarks>A property was dirty if it had been changed and the changes were committed.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.IRememberBeingDirty.WasPropertyDirty(System.String)">
            <summary>
                Determines whether a specific property was dirty.
            </summary>
            <remarks>A property was dirty if it had been changed and the changes were committed.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.IRememberBeingDirty.ResetWereDirtyProperties">
            <summary>
                Resets properties that were dirty.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.IRememberBeingDirty.ResetDirtyProperties(System.Boolean)">
            <summary>
                Resets dirty properties.
            </summary>
            <param name="rememberDirty">A value indicating whether to remember dirty properties.</param>
            <remarks>
                When <paramref name="rememberDirty" /> is true, dirty properties are saved so they can be checked with
                WasDirty.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.IRememberBeingDirty.GetWereDirtyProperties">
            <summary>
                Gets properties that were dirty.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Entities.ITreeEntity">
            <summary>
                Defines an entity that belongs to a tree.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.ITreeEntity.Name">
            <summary>
                Gets or sets the name of the entity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.ITreeEntity.CreatorId">
            <summary>
                Gets or sets the identifier of the user who created this entity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.ITreeEntity.ParentId">
            <summary>
                Gets or sets the identifier of the parent entity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.ITreeEntity.Level">
            <summary>
                Gets or sets the level of the entity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.ITreeEntity.Path">
            <summary>
                Gets or sets the path to the entity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.ITreeEntity.SortOrder">
            <summary>
                Gets or sets the sort order of the entity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.ITreeEntity.Trashed">
            <summary>
                Gets a value indicating whether this entity is trashed.
            </summary>
            <remarks>
                <para>Trashed entities are located in the recycle bin.</para>
                <para>Always false for entities that do not support being trashed.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.ITreeEntity.SetParent(Umbraco.Cms.Core.Models.Entities.ITreeEntity)">
            <summary>
                Sets the parent entity.
            </summary>
            <remarks>
                Use this method to set the parent entity when the parent entity is known, but has not
                been persistent and does not yet have an identity. The parent identifier will be retrieved
                from the parent entity when needed. If the parent entity still does not have an entity by that
                time, an exception will be thrown by <see cref="P:Umbraco.Cms.Core.Models.Entities.ITreeEntity.ParentId" /> getter.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Entities.IUmbracoEntity">
            <summary>
                Represents an entity that can be managed by the entity service.
            </summary>
            <remarks>
                <para>An IUmbracoEntity can be related to another via the IRelationService.</para>
                <para>IUmbracoEntities can be retrieved with the IEntityService.</para>
                <para>An IUmbracoEntity can participate in notifications.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Entities.IValueObject">
            <summary>
                Marker interface for value object, eg. objects without
                the same kind of identity as an Entity (with its Id).
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Entities.MediaEntitySlim">
            <summary>
                Implements <see cref="T:Umbraco.Cms.Core.Models.Entities.IMediaEntitySlim" />.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Entities.TreeEntityBase">
            <summary>
                Provides a base class for tree entities.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.TreeEntityBase.Name">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.TreeEntityBase.CreatorId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.TreeEntityBase.ParentId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.TreeEntityBase.Level">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Entities.TreeEntityBase.SetParent(Umbraco.Cms.Core.Models.Entities.ITreeEntity)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.TreeEntityBase.Path">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.TreeEntityBase.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.TreeEntityBase.Trashed">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Entities.TreeEntityPath">
            <summary>
                Represents the path of a tree entity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.TreeEntityPath.Id">
            <summary>
                Gets or sets the identifier of the entity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Entities.TreeEntityPath.Path">
            <summary>
                Gets or sets the path of the entity.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.EntityContainer">
            <summary>
                Represents a folder for organizing entities such as content types and data types.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.EntityContainer.#ctor(System.Guid)">
            <summary>
                Initializes a new instance of an <see cref="T:Umbraco.Cms.Core.Models.EntityContainer" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.EntityContainer.#ctor(System.Int32,System.Guid,System.Int32,System.String,System.Int32,System.Int32,System.Guid,System.String,System.Int32)">
            <summary>
                Initializes a new instance of an <see cref="T:Umbraco.Cms.Core.Models.EntityContainer" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.EntityContainer.ContainedObjectType">
            <summary>
                Gets or sets the node object type of the contained objects.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.EntityContainer.ContainerObjectType">
            <summary>
                Gets the node object type of the container objects.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.EntityContainer.GetContainerObjectType(System.Guid)">
            <summary>
                Gets the container object type corresponding to a contained object type.
            </summary>
            <param name="containedObjectType">The contained object type.</param>
            <returns>The object type of containers containing objects of the contained object type.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.EntityContainer.GetContainedObjectType(System.Guid)">
            <summary>
                Gets the contained object type corresponding to a container object type.
            </summary>
            <param name="containerObjectType">The container object type.</param>
            <returns>The object type of objects that containers of the container object type can contain.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.File">
            <summary>
                Represents an abstract file which provides basic functionality for a File with an Alias and Name
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.File.Name">
            <summary>
                Gets or sets the Name of the File including extension
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.File.Alias">
            <summary>
                Gets or sets the Alias of the File, which is the name without the extension
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.File.Path">
            <summary>
                Gets or sets the Path to the File from the root of the file's associated IFileSystem
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.File.OriginalPath">
            <summary>
                Gets the original path of the file
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.File.Content">
            <summary>
                Gets or sets the Content of a File
            </summary>
            <remarks>Marked as DoNotClone, because it should be lazy-reloaded from disk.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.File.ResetOriginalPath">
            <summary>
                Called to re-set the OriginalPath to the Path
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.File.VirtualPath">
            <summary>
                Gets or sets the file's virtual path (i.e. the file path relative to the root of the website)
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.IAuditEntry">
            <summary>
                Represents an audited event.
            </summary>
            <remarks>
                <para>
                    The free-form details properties can be used to capture relevant infos (for example,
                    a user email and identifier) at the time of the audited event, even though they may change
                    later on - but we want to keep a track of their value at that time.
                </para>
                <para>
                    Depending on audit loggers, these properties can be purely free-form text, or
                    contain json serialized objects.
                </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IAuditEntry.PerformingUserId">
            <summary>
                Gets or sets the identifier of the user triggering the audited event.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IAuditEntry.PerformingDetails">
            <summary>
                Gets or sets free-form details about the user triggering the audited event.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IAuditEntry.PerformingIp">
            <summary>
                Gets or sets the IP address or the request triggering the audited event.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IAuditEntry.EventDateUtc">
            <summary>
                Gets or sets the date and time of the audited event.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IAuditEntry.AffectedUserId">
            <summary>
                Gets or sets the identifier of the user affected by the audited event.
            </summary>
            <remarks>Not used when no single user is affected by the event.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IAuditEntry.AffectedDetails">
            <summary>
                Gets or sets free-form details about the entity affected by the audited event.
            </summary>
            <remarks>The entity affected by the event can be another user, a member...</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IAuditEntry.EventType">
            <summary>
                Gets or sets the type of the audited event.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IAuditEntry.EventDetails">
            <summary>
                Gets or sets free-form details about the audited event.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.IAuditItem">
            <summary>
                Represents an audit item.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IAuditItem.AuditType">
            <summary>
                Gets the audit type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IAuditItem.EntityType">
            <summary>
                Gets the audited entity type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IAuditItem.UserId">
            <summary>
                Gets the audit user identifier.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IAuditItem.Comment">
            <summary>
                Gets the audit comments.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IAuditItem.Parameters">
            <summary>
                Gets optional additional data parameters.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.IConsent">
            <summary>
                Represents a consent state.
            </summary>
            <remarks>
                <para>
                    A consent is fully identified by a source (whoever is consenting), a context (for
                    example, an application), and an action (whatever is consented).
                </para>
                <para>A consent state registers the state of the consent (granted, revoked...).</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IConsent.Current">
            <summary>
                Determines whether the consent entity represents the current state.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IConsent.Source">
            <summary>
                Gets the unique identifier of whoever is consenting.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IConsent.Context">
            <summary>
                Gets the unique identifier of the context of the consent.
            </summary>
            <remarks>
                <para>Represents the domain, application, scope... of the action.</para>
                <para>When the action is a Udi, this should be the Udi type.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IConsent.Action">
            <summary>
                Gets the unique identifier of the consented action.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IConsent.State">
            <summary>
                Gets the state of the consent.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IConsent.Comment">
            <summary>
                Gets some additional free text.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IConsent.History">
            <summary>
                Gets the previous states of this consent.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.IContent">
            <summary>
                Represents a document.
            </summary>
            <remarks>
                <para>A document can be published, rendered by a template.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContent.TemplateId">
            <summary>
                Gets or sets the template id used to render the content.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContent.Published">
            <summary>
                Gets a value indicating whether the content is published.
            </summary>
            <remarks>The <see cref="P:Umbraco.Cms.Core.Models.IContent.PublishedVersionId" /> property tells you which version of the content is currently published.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContent.Edited">
            <summary>
                Gets a value indicating whether the content has been edited.
            </summary>
            <remarks>
                Will return `true` once unpublished edits have been made after the version with
                <see cref="P:Umbraco.Cms.Core.Models.IContent.PublishedVersionId" /> has been published.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContent.PublishedVersionId">
            <summary>
                Gets the version identifier for the currently published version of the content.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContent.Blueprint">
            <summary>
                Gets a value indicating whether the content item is a blueprint.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContent.PublishTemplateId">
            <summary>
                Gets the template id used to render the published version of the content.
            </summary>
            <remarks>When editing the content, the template can change, but this will not until the content is published.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContent.PublishName">
            <summary>
                Gets the name of the published version of the content.
            </summary>
            <remarks>When editing the content, the name can change, but this will not until the content is published.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContent.PublisherId">
            <summary>
                Gets the identifier of the user who published the content.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContent.PublishDate">
            <summary>
                Gets the date and time the content was published.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContent.PublishCultureInfos">
            <summary>
                Gets the published culture infos of the content.
            </summary>
            <remarks>
                <para>
                    Because a dictionary key cannot be <c>null</c> this cannot get the invariant
                    name, which must be get via the <see cref="P:Umbraco.Cms.Core.Models.IContent.PublishName" /> property.
                </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContent.PublishedCultures">
            <summary>
                Gets the published cultures.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContent.EditedCultures">
            <summary>
                Gets the edited cultures.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContent.IsCulturePublished(System.String)">
            <summary>
                Gets a value indicating whether a culture is published.
            </summary>
            <remarks>
                <para>
                    A culture becomes published whenever values for this culture are published,
                    and the content published name for this culture is non-null. It becomes non-published
                    whenever values for this culture are unpublished.
                </para>
                <para>
                    A culture becomes published as soon as PublishCulture has been invoked,
                    even though the document might not have been saved yet (and can have no identity).
                </para>
                <para>Does not support the '*' wildcard (returns false).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContent.GetPublishDate(System.String)">
            <summary>
                Gets the date a culture was published.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContent.IsCultureEdited(System.String)">
            <summary>
                Gets a value indicated whether a given culture is edited.
            </summary>
            <remarks>
                <para>
                    A culture is edited when it is available, and not published or published but
                    with changes.
                </para>
                <para>A culture can be edited even though the document might now have been saved yet (and can have no identity).</para>
                <para>Does not support the '*' wildcard (returns false).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContent.GetPublishName(System.String)">
            <summary>
                Gets the name of the published version of the content for a given culture.
            </summary>
            <remarks>
                <para>When editing the content, the name can change, but this will not until the content is published.</para>
                <para>
                    When <paramref name="culture" /> is <c>null</c>, gets the invariant
                    language, which is the value of the <see cref="P:Umbraco.Cms.Core.Models.IContent.PublishName" /> property.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContent.DeepCloneWithResetIdentities">
            <summary>
                Creates a deep clone of the current entity with its identity/alias and it's property identities reset
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.IContentBase">
            <summary>
                Provides a base class for content items.
            </summary>
            <remarks>
                <para>Content items are documents, medias and members.</para>
                <para>Content items have a content type, and properties.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentBase.ContentTypeId">
            <summary>
                Integer Id of the default ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentBase.ContentType">
            <summary>
                Gets the content type of this content.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentBase.WriterId">
            <summary>
                Gets the identifier of the writer.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentBase.VersionId">
            <summary>
                Gets the version identifier.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentBase.CultureInfos">
            <summary>
                Gets culture infos of the content item.
            </summary>
            <remarks>
                <para>
                    Because a dictionary key cannot be <c>null</c> this cannot contain the invariant
                    culture name, which must be get or set via the <see cref="P:Umbraco.Cms.Core.Models.Entities.TreeEntityBase.Name" /> property.
                </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentBase.AvailableCultures">
            <summary>
                Gets the available cultures.
            </summary>
            <remarks>
                <para>Cannot contain the invariant culture, which is always available.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentBase.Properties">
            <summary>
                List of properties, which make up all the data available for this Content object
            </summary>
            <remarks>Properties are loaded as part of the Content object graph</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentBase.SetCultureName(System.String,System.String)">
            <summary>
                Sets the name of the content item for a specified culture.
            </summary>
            <remarks>
                <para>
                    When <paramref name="culture" /> is null, sets the invariant
                    culture name, which sets the <see cref="P:Umbraco.Cms.Core.Models.Entities.TreeEntityBase.Name" /> property.
                </para>
                <para>
                    When <paramref name="culture" /> is not null, throws if the content
                    type does not vary by culture.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentBase.GetCultureName(System.String)">
            <summary>
                Gets the name of the content item for a specified language.
            </summary>
            <remarks>
                <para>
                    When <paramref name="culture" /> is null, gets the invariant
                    culture name, which is the value of the <see cref="P:Umbraco.Cms.Core.Models.Entities.TreeEntityBase.Name" /> property.
                </para>
                <para>
                    When <paramref name="culture" /> is not null, and the content type
                    does not vary by culture, returns null.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentBase.IsCultureAvailable(System.String)">
            <summary>
                Gets a value indicating whether a given culture is available.
            </summary>
            <remarks>
                <para>
                    A culture becomes available whenever the content name for this culture is
                    non-null, and it becomes unavailable whenever the content name is null.
                </para>
                <para>
                    Returns <c>false</c> for the invariant culture, in order to be consistent
                    with <seealso cref="P:Umbraco.Cms.Core.Models.IContentBase.AvailableCultures" />, even though the invariant culture is
                    always available.
                </para>
                <para>Does not support the '*' wildcard (returns false).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentBase.GetUpdateDate(System.String)">
            <summary>
                Gets the date a culture was updated.
            </summary>
            <remarks>
                <para>When <paramref name="culture" /> is <c>null</c>, returns <c>null</c>.</para>
                <para>If the specified culture is not available, returns <c>null</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentBase.HasProperty(System.String)">
            <summary>
                Gets a value indicating whether the content entity has a property with the supplied alias.
            </summary>
            <remarks>
                Indicates that the content entity has a property with the supplied alias, but
                not necessarily that the content has a value for that property. Could be missing.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentBase.GetValue(System.String,System.String,System.String,System.Boolean)">
            <summary>
                Gets the value of a Property
            </summary>
            <remarks>Values 'null' and 'empty' are equivalent for culture and segment.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentBase.GetValue``1(System.String,System.String,System.String,System.Boolean)">
            <summary>
                Gets the typed value of a Property
            </summary>
            <remarks>Values 'null' and 'empty' are equivalent for culture and segment.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentBase.SetValue(System.String,System.Object,System.String,System.String)">
            <summary>
                Sets the (edited) value of a Property
            </summary>
            <remarks>Values 'null' and 'empty' are equivalent for culture and segment.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentBase.RemoveValue(System.String)">
            <summary>
                Removes a Property value.
            </summary>
            <param name="propertyTypeAlias">The alias of the property value to remove.</param>
            <remarks>This removes the value for all cultures and segments.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.IContentModel">
            <summary>
                The basic view model returned for front-end Umbraco controllers
            </summary>
            <remarks>
                <para>
                    <see cref="T:Umbraco.Cms.Core.Models.IContentModel" /> exists in order to unify all view models in Umbraco, whether it's a normal
                    template view or a user's custom model that they have created when doing route hijacking or custom routes.
                </para>
                <para>
                    By default all front-end template views inherit from UmbracoViewPage which has a model of
                    <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent" /> but the model returned
                    from the controllers is <see cref="T:Umbraco.Cms.Core.Models.IContentModel" /> which in normal circumstances would not work. This works
                    with UmbracoViewPage because it
                    performs model binding between IContentModel and IPublishedContent. This offers a lot of flexibility when
                    rendering views. In some cases if you
                    are route hijacking and returning a custom implementation of <see cref="T:Umbraco.Cms.Core.Models.IContentModel" /> and your view is
                    strongly typed to this model, you can still
                    render partial views created in the back office that have the default model of IPublishedContent without having
                    to worry about explicitly passing
                    that model to the view.
                </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentModel.Content">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent" />
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.IContentType">
            <summary>
                Defines a ContentType, which Content is based on
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentType.DefaultTemplateId">
            <summary>
                Internal property to store the Id of the default template
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentType.DefaultTemplate">
            <summary>
                Gets the default Template of the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentType.AllowedTemplates">
            <summary>
                Gets or Sets a list of Templates which are allowed for the ContentType
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentType.IsAllowedTemplate(System.Int32)">
            <summary>
                Determines if AllowedTemplates contains templateId
            </summary>
            <param name="templateId">The template id to check</param>
            <returns>True if AllowedTemplates contains the templateId else False</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentType.IsAllowedTemplate(System.String)">
            <summary>
                Determines if AllowedTemplates contains templateId
            </summary>
            <param name="templateAlias">The template alias to check</param>
            <returns>True if AllowedTemplates contains the templateAlias else False</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentType.SetDefaultTemplate(Umbraco.Cms.Core.Models.ITemplate)">
            <summary>
                Sets the default template for the ContentType
            </summary>
            <param name="template">Default <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentType.RemoveTemplate(Umbraco.Cms.Core.Models.ITemplate)">
            <summary>
                Removes a template from the list of allowed templates
            </summary>
            <param name="template"><see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> to remove</param>
            <returns>True if template was removed, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentType.DeepCloneWithResetIdentities(System.String)">
            <summary>
                Creates a deep clone of the current entity with its identity/alias and it's property identities reset
            </summary>
            <param name="newAlias"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentType.HistoryCleanup">
            <summary>
            Gets or sets the history cleanup configuration.
            </summary>
            <value>The history cleanup configuration.</value>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.IContentTypeBase">
            <summary>
                Defines the base for a ContentType with properties that
                are shared between ContentTypes and MediaTypes.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentTypeBase.Alias">
            <summary>
                Gets or Sets the Alias of the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentTypeBase.Description">
            <summary>
                Gets or Sets the Description for the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentTypeBase.Icon">
            <summary>
                Gets or sets the icon for the content type. The value is a CSS class name representing
                the icon (eg. <c>icon-home</c>) along with an optional CSS class name representing the
                color (eg. <c>icon-blue</c>). Put together, the value for this scenario would be
                <c>icon-home color-blue</c>.
                If a class name for the color isn't specified, the icon color will default to black.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentTypeBase.Thumbnail">
            <summary>
                Gets or Sets the Thumbnail for the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentTypeBase.AllowedAsRoot">
            <summary>
                Gets or Sets a boolean indicating whether this ContentType is allowed at the root
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentTypeBase.ListView">
            <summary>
                Gets or Sets a Guid, which is the key of the listview.
            </summary>
            <remarks>
                ContentType Containers doesn't show children in the tree, but rather in grid-type view.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentTypeBase.IsElement">
            <summary>
                Gets or sets a value indicating whether this content type is for an element.
            </summary>
            <remarks>
                <para>
                    By default a content type is for a true media, member or document, but
                    it can also be for an element, ie a subset that can for instance be used in
                    nested content.
                </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentTypeBase.Variations">
            <summary>
                Gets or sets the content variation of the content type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentTypeBase.AllowedContentTypes">
            <summary>
                Gets or Sets a list of integer Ids of the ContentTypes allowed under the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentTypeBase.PropertyGroups">
            <summary>
                Gets or sets the local property groups.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentTypeBase.PropertyTypes">
            <summary>
                Gets all local property types all local property groups or ungrouped.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentTypeBase.NoGroupPropertyTypes">
            <summary>
                Gets or sets the local property types that do not belong to a group.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentTypeBase.SupportsVariation(System.String,System.String,System.Boolean)">
            <summary>
                Validates that a combination of culture and segment is valid for the content type.
            </summary>
            <param name="culture">The culture.</param>
            <param name="segment">The segment.</param>
            <param name="wildcards">A value indicating whether wildcard are supported.</param>
            <returns>True if the combination is valid; otherwise false.</returns>
            <remarks>
                <para>
                    The combination must match the content type variation exactly. For instance, if the content type varies by
                    culture,
                    then an invariant culture would be invalid.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentTypeBase.SupportsPropertyVariation(System.String,System.String,System.Boolean)">
            <summary>
                Validates that a combination of culture and segment is valid for the content type properties.
            </summary>
            <param name="culture">The culture.</param>
            <param name="segment">The segment.</param>
            <param name="wildcards">A value indicating whether wildcard are supported.</param>
            <returns>True if the combination is valid; otherwise false.</returns>
            <remarks>
                <para>
                    The combination must be valid for properties of the content type. For instance, if the content type varies by
                    culture,
                    then an invariant culture is valid, because some properties may be invariant. On the other hand, if the content
                    type is invariant,
                    then a variant culture is invalid, because no property could possibly vary by culture.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentTypeBase.RemovePropertyType(System.String)">
            <summary>
                Removes a PropertyType from the current ContentType
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Cms.Core.Models.IPropertyType" /> to remove</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentTypeBase.RemovePropertyGroup(System.String)">
            <summary>
                Removes a property group from the current content type.
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Cms.Core.Models.PropertyGroup" /> to remove</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentTypeBase.PropertyTypeExists(System.String)">
            <summary>
                Checks whether a PropertyType with a given alias already exists
            </summary>
            <param name="alias">Alias of the PropertyType</param>
            <returns>Returns <c>True</c> if a PropertyType with the passed in alias exists, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentTypeBase.AddPropertyType(Umbraco.Cms.Core.Models.IPropertyType,System.String,System.String)">
            <summary>
                Adds the property type to the specified property group (creates a new group if not found and a name is specified).
            </summary>
            <param name="propertyType">The property type to add.</param>
            <param name="propertyGroupAlias">The alias of the property group to add the property type to.</param>
            <param name="propertyGroupName">The name of the property group to create when not found.</param>
            <returns>
                Returns <c>true</c> if the property type was added; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentTypeBase.AddPropertyType(Umbraco.Cms.Core.Models.IPropertyType)">
            <summary>
                Adds a PropertyType, which does not belong to a PropertyGroup.
            </summary>
            <param name="propertyType"><see cref="T:Umbraco.Cms.Core.Models.IPropertyType" /> to add</param>
            <returns>Returns <c>True</c> if PropertyType was added, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentTypeBase.AddPropertyGroup(System.String,System.String)">
            <summary>
                Adds a property group with the specified <paramref name="name" /> and <paramref name="alias" />.
            </summary>
            <param name="alias">The alias.</param>
            <param name="name">Name of the group.</param>
            <returns>
                Returns <c>true</c> if a property group with specified <paramref name="alias" /> was added; otherwise, <c>false</c>
                .
            </returns>
            <remarks>
                This method will also check if a group already exists with the same alias.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentTypeBase.MovePropertyType(System.String,System.String)">
            <summary>
                Moves a PropertyType to a specified PropertyGroup
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to move</param>
            <param name="propertyGroupAlias">Alias of the PropertyGroup to move the PropertyType to</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentTypeBase.ToSimple">
            <summary>
                Gets an <see cref="T:Umbraco.Cms.Core.Models.ISimpleContentType" /> corresponding to this content type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentTypeBase.DeepCloneWithResetIdentities(System.String)">
            <summary>
            Deep clones itself while resetting identities so it is treated as a new entity
            </summary>
            <param name="alias">The new alias of the <see cref="T:Umbraco.Cms.Core.Models.IContentTypeBase"/>.</param>
            <returns>The copied, reset instance.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.IContentTypeComposition">
            <summary>
                Defines the Composition of a ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentTypeComposition.ContentTypeComposition">
            <summary>
                Gets or sets the content types that compose this content type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentTypeComposition.CompositionPropertyGroups">
            <summary>
                Gets the property groups for the entire composition.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentTypeComposition.CompositionPropertyTypes">
            <summary>
                Gets the property types for the entire composition.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IContentTypeComposition.RemovedContentTypes">
            <summary>
                Returns a list of content type ids that have been removed from this instance's composition
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentTypeComposition.AddContentType(Umbraco.Cms.Core.Models.IContentTypeComposition)">
            <summary>
                Adds a new ContentType to the list of composite ContentTypes
            </summary>
            <param name="contentType"><see cref="T:Umbraco.Cms.Core.Models.IContentType" /> to add</param>
            <returns>True if ContentType was added, otherwise returns False</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentTypeComposition.RemoveContentType(System.String)">
            <summary>
                Removes a ContentType with the supplied alias from the list of composite ContentTypes
            </summary>
            <param name="alias">Alias of a <see cref="T:Umbraco.Cms.Core.Models.IContentType" /></param>
            <returns>True if ContentType was removed, otherwise returns False</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentTypeComposition.RemoveContentType(System.Guid)">
            <summary>
            Removes a content type with a specified key from the composition.
            </summary>
            <param name="key">The key of the content type to remove.</param>
            <returns>True if the content type was removed, otherwise false.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentTypeComposition.ContentTypeCompositionExists(System.String)">
            <summary>
                Checks if a ContentType with the supplied alias exists in the list of composite ContentTypes
            </summary>
            <param name="alias">Alias of a <see cref="T:Umbraco.Cms.Core.Models.IContentType" /></param>
            <returns>True if ContentType with alias exists, otherwise returns False</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentTypeComposition.CompositionAliases">
            <summary>
                Gets a list of ContentType aliases from the current composition
            </summary>
            <returns>An enumerable list of string aliases</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentTypeComposition.CompositionIds">
            <summary>
                Gets a list of ContentType Ids from the current composition
            </summary>
            <returns>An enumerable list of integer ids</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentTypeComposition.CompositionKeys">
            <summary>
                Gets a list of ContentType keys from the current composition
            </summary>
            <returns>An enumerable list of integer ids.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IContentTypeComposition.GetOriginalComposedPropertyTypes">
            <summary>
                Gets the property types obtained via composition.
            </summary>
            <remarks>
                <para>Gets them raw, ie with their original variation.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.IDataType">
            <summary>
                Represents a data type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IDataType.Editor">
            <summary>
                Gets or sets the property editor.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IDataType.EditorAlias">
            <summary>
                Gets the property editor alias.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IDataType.EditorUiAlias">
            <summary>
                Gets the property editor UI alias.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IDataType.DatabaseType">
            <summary>
                Gets or sets the database type for the data type values.
            </summary>
            <remarks>
                In most cases this is imposed by the property editor, but some editors
                may support storing different types.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IDataType.ConfigurationData">
            <summary>
            Gets or sets the configuration data.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IDataType.ConfigurationObject">
            <summary>
            Gets an object representation of the configuration data.
            </summary>
            <remarks>
            The object type is dictated by the underlying <see cref="T:Umbraco.Cms.Core.PropertyEditors.IConfigurationEditor"/> implementation of the <see cref="P:Umbraco.Cms.Core.Models.IDataType.Editor"/>.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IDataType.DeepCloneWithResetIdentities">
            <summary>
            Creates a deep clone of the current entity with its identity/alias reset
            We have the default implementation here to avoid breaking changes for the user
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.IDataValueEditor">
            <summary>
                Represents an editor for editing data values.
            </summary>
            <remarks>This is the base interface for parameter and property value editors.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IDataValueEditor.ValueType">
            <summary>
                Gets the type of the value.
            </summary>
            <remarks>The value has to be a valid <see cref="T:Umbraco.Cms.Core.PropertyEditors.ValueTypes" /> value.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IDataValueEditor.IsReadOnly">
            <summary>
                Gets a value indicating whether the edited value is read-only.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IDataValueEditor.SupportsReadOnly">
            <summary>
            Gets a value indicating whether the IDataValueEditor supports readonly mode
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IDataValueEditor.Validators">
            <summary>
                Gets the validators to use to validate the edited value.
            </summary>
            <remarks>
                <para>Use this property to add validators, not to validate. Use <see cref="M:Umbraco.Cms.Core.Models.IDataValueEditor.Validate(System.Object,System.Boolean,System.String,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)" /> instead.</para>
                TODO: replace with AddValidator? WithValidator?
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IDataValueEditor.Validate(System.Object,System.Boolean,System.String,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <summary>
                Validates a property value.
            </summary>
            <param name="value">The property value.</param>
            <param name="required">A value indicating whether the property value is required.</param>
            <param name="format">A specific format (regex) that the property value must respect.</param>
            <param name="validationContext">The context in which the property value is being validated.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IDataValueEditor.FromEditor(Umbraco.Cms.Core.Models.Editors.ContentPropertyData,System.Object)">
            <summary>
                Converts a value posted by the editor to a property value.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IDataValueEditor.ToEditor(Umbraco.Cms.Core.Models.IProperty,System.String,System.String)">
            <summary>
                Converts a property value to a value for the editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IDataValueEditor.ConvertDbToXml(Umbraco.Cms.Core.Models.IProperty,System.Boolean)">
            <summary>
                Used for serializing an <see cref="T:Umbraco.Cms.Core.Models.IContent" /> item for packaging
            </summary>
            <param name="property"></param>
            <param name="published"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IDataValueEditor.ConvertDbToXml(Umbraco.Cms.Core.Models.IPropertyType,System.Object)">
            <summary>
                Used for serializing an <see cref="T:Umbraco.Cms.Core.Models.IContent" /> item for packaging
            </summary>
            <param name="propertyType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.IDeepCloneable">
            <summary>
                Provides a mean to deep-clone an object.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IDictionaryItem.ParentId">
            <summary>
                Gets or Sets the Parent Id of the Dictionary Item
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IDictionaryItem.ItemKey">
            <summary>
                Gets or sets the Key for the Dictionary Item
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IDictionaryItem.Translations">
            <summary>
                Gets or sets a list of translations for the Dictionary Item
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IDictionaryTranslation.LanguageIsoCode">
            <summary>
                Gets the ISO code of the language.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IDictionaryTranslation.Value">
            <summary>
                Gets or sets the translated text.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.IDomain">
            <summary>
            Represents a domain name, optionally assigned to a content and/or language ID.
            </summary>
            <seealso cref="T:Umbraco.Cms.Core.Models.Entities.IEntity" />
            <seealso cref="T:Umbraco.Cms.Core.Models.Entities.IRememberBeingDirty" />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IDomain.DomainName">
            <summary>
            Gets or sets the name of the domain.
            </summary>
            <value>
            The name of the domain.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IDomain.IsWildcard">
            <summary>
            Gets a value indicating whether this is a wildcard domain (only specifying the language of a content node).
            </summary>
            <value>
              <c>true</c> if this is a wildcard domain; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IDomain.LanguageId">
            <summary>
            Gets or sets the language ID assigned to the domain.
            </summary>
            <value>
            The language ID assigned to the domain.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IDomain.LanguageIsoCode">
            <summary>
            Gets the language ISO code.
            </summary>
            <value>
            The language ISO code.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IDomain.RootContentId">
            <summary>
            Gets or sets the root content ID assigned to the domain.
            </summary>
            <value>
            The root content ID assigned to the domain.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IDomain.SortOrder">
            <summary>
            Gets or sets the sort order.
            </summary>
            <value>
            The sort order.
            </value>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.IFile">
            <summary>
                Defines a File
            </summary>
            <remarks>Used for Scripts, Stylesheets and Templates</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IFile.Name">
            <summary>
                Gets the Name of the File including extension
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IFile.Alias">
            <summary>
                Gets the Alias of the File, which is the name without the extension
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IFile.Path">
            <summary>
                Gets or sets the Path to the File from the root of the file's associated IFileSystem
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IFile.OriginalPath">
            <summary>
                Gets the original path of the file
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IFile.Content">
            <summary>
                Gets or sets the Content of a File
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IFile.VirtualPath">
            <summary>
                Gets or sets the file's virtual path (i.e. the file path relative to the root of the website)
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IFile.ResetOriginalPath">
            <summary>
                Called to re-set the OriginalPath to the Path
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ILanguage">
            <summary>
                Represents a language.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ILanguage.IsoCode">
            <summary>
                Gets or sets the ISO code of the language.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ILanguage.CultureName">
            <summary>
                Gets or sets the culture name of the language.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ILanguage.CultureInfo">
            <summary>
                Gets the <see cref="P:Umbraco.Cms.Core.Models.ILanguage.CultureInfo" /> object for the language.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ILanguage.IsDefault">
            <summary>
                Gets or sets a value indicating whether the language is the default language.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ILanguage.IsMandatory">
            <summary>
                Gets or sets a value indicating whether the language is mandatory.
            </summary>
            <remarks>
                <para>
                    When a language is mandatory, a multi-lingual document cannot be published
                    without that language being published, and unpublishing that language unpublishes
                    the entire document.
                </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ILanguage.FallbackIsoCode">
            <summary>
                Gets or sets the ISO code of a fallback language.
            </summary>
            <remarks>
                <para>
                    The fallback language can be used in multi-lingual scenarios, to help
                    define fallback strategies when a value does not exist for a requested language.
                </para>
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ImageCropMode.Crop">
            <summary>
                Resizes the image to the given dimensions. If the set dimensions do not match the aspect ratio of the original
                image then the output is cropped to match the new aspect ratio.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ImageCropMode.Max">
            <summary>
                Resizes the image to the given dimensions. If the set dimensions do not match the aspect ratio of the original
                image then the output is resized to the maximum possible value in each direction while maintaining the original
                aspect ratio.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ImageCropMode.Stretch">
            <summary>
                Resizes the image to the given dimensions. If the set dimensions do not match the aspect ratio of the original
                image then the output is stretched to match the new aspect ratio.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ImageCropMode.Pad">
            <summary>
                Passing a single dimension will automatically preserve the aspect ratio of the original image. If the requested
                aspect ratio is different then the image will be padded to fit.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ImageCropMode.BoxPad">
            <summary>
                When upscaling an image the image pixels themselves are not resized, rather the image is padded to fit the given
                dimensions.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ImageCropMode.Min">
            <summary>
                Resizes the image until the shortest side reaches the set given dimension. This will maintain the aspect ratio of
                the original image. Upscaling is disabled in this mode and the original image will be returned if attempted.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ImageUrlGenerationOptions">
            <summary>
                These are options that are passed to the IImageUrlGenerator implementation to determine the URL that is generated.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ImageUrlGenerationOptions.FocalPointPosition">
            <summary>
                The focal point position, in whatever units the registered IImageUrlGenerator uses, typically a percentage of the
                total image from 0.0 to 1.0.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ImageUrlGenerationOptions.CropCoordinates">
            <summary>
                The bounds of the crop within the original image, in whatever units the registered IImageUrlGenerator uses,
                typically a percentage between 0.0 and 1.0.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.IMediaType">
            <summary>
                Defines a ContentType, which Media is based on
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IMediaType.DeepCloneWithResetIdentities(System.String)">
            <summary>
                Creates a deep clone of the current entity with its identity/alias and it's property identities reset
            </summary>
            <param name="newAlias"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.IMediaUrlGenerator">
            <summary>
                Used to generate paths to media items for a specified property editor alias
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IMediaUrlGenerator.TryGetMediaPath(System.String,System.Object,System.String@)">
            <summary>
                Tries to get a media path for a given property editor alias
            </summary>
            <param name="propertyEditorAlias">The property editor alias</param>
            <param name="value">The value of the property</param>
            <param name="mediaPath">The media path</param>
            <returns>
                True if a media path was returned
            </returns>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IMember.ContentTypeAlias">
            <summary>
                String alias of the default ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IMember.LongStringPropertyValue">
            <summary>
                Internal/Experimental - only used for mapping queries.
            </summary>
            <remarks>
                Adding these to have first level properties instead of the Properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IMember.ShortStringPropertyValue">
            <summary>
                Internal/Experimental - only used for mapping queries.
            </summary>
            <remarks>
                Adding these to have first level properties instead of the Properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IMember.IntegerPropertyValue">
            <summary>
                Internal/Experimental - only used for mapping queries.
            </summary>
            <remarks>
                Adding these to have first level properties instead of the Properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IMember.BoolPropertyValue">
            <summary>
                Internal/Experimental - only used for mapping queries.
            </summary>
            <remarks>
                Adding these to have first level properties instead of the Properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IMember.DateTimePropertyValue">
            <summary>
                Internal/Experimental - only used for mapping queries.
            </summary>
            <remarks>
                Adding these to have first level properties instead of the Properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IMember.PropertyTypeAlias">
            <summary>
                Internal/Experimental - only used for mapping queries.
            </summary>
            <remarks>
                Adding these to have first level properties instead of the Properties collection.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.IMemberGroup">
            <summary>
                Represents a member type
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IMemberGroup.Name">
            <summary>
                The name of the member group
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IMemberGroup.CreatorId">
            <summary>
                Profile of the user who created this Entity
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.IMemberType">
            <summary>
                Defines a MemberType, which Member is based on
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IMemberType.MemberCanEditProperty(System.String)">
            <summary>
                Gets a boolean indicating whether a Property is editable by the Member.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to check</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IMemberType.MemberCanViewProperty(System.String)">
            <summary>
                Gets a boolean indicating whether a Property is visible on the Members profile.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to check</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IMemberType.IsSensitiveProperty(System.String)">
            <summary>
                Gets a boolean indicating whether a Property is marked as storing sensitive values on the Members profile.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to check</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IMemberType.SetMemberCanEditProperty(System.String,System.Boolean)">
            <summary>
                Sets a boolean indicating whether a Property is editable by the Member.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to set</param>
            <param name="value">Boolean value, true or false</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IMemberType.SetMemberCanViewProperty(System.String,System.Boolean)">
            <summary>
                Sets a boolean indicating whether a Property is visible on the Members profile.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to set</param>
            <param name="value">Boolean value, true or false</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IMemberType.SetIsSensitiveProperty(System.String,System.Boolean)">
            <summary>
                Sets a boolean indicating whether a Property is a sensitive value on the Members profile.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to set</param>
            <param name="value">Boolean value, true or false</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.INavigationModel.Id">
            <summary>
                Gets or sets the integer identifier of the entity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.INavigationModel.Key">
            <summary>
                Gets or sets the Guid unique identifier of the entity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.INavigationModel.ContentTypeKey">
            <summary>
                Gets or sets the Guid unique identifier of the entity's content type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.INavigationModel.ParentId">
            <summary>
                Gets or sets the integer identifier of the parent entity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.INavigationModel.SortOrder">
            <summary>
                Gets or sets the sort order of the entity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.INavigationModel.Trashed">
            <summary>
                Gets or sets a value indicating whether this entity is in the recycle bin.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Installer.InstallationResult.ErrorMessage">
            <summary>
            Gets ore sets a string specifying why the installation failed.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IProperty.PropertyType">
            <summary>
                Returns the PropertyType, which this Property is based on
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IProperty.Values">
            <summary>
                Gets the list of values.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IProperty.Alias">
            <summary>
                Returns the Alias of the PropertyType, which this Property is based on
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IProperty.GetValue(System.String,System.String,System.Boolean)">
            <summary>
                Gets the value.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IProperty.SetValue(System.Object,System.String,System.String)">
            <summary>
                Sets a value.
            </summary>
            <returns>true if the value was set (updated), false otherwise.</returns>
            <remarks>
            A false return value does not indicate failure, but rather that the property value was not changed
            (i.e. the value passed in was equal to the current property value).
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IPropertyCollection.Item(System.String)">
            <summary>
                Gets the property with the specified alias.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IPropertyCollection.Item(System.Int32)">
            <summary>
                Gets the property at the specified index.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IPropertyCollection.EnsurePropertyTypes(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IPropertyType})">
            <summary>
                Ensures that the collection contains properties for the specified property types.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IPropertyCollection.EnsureCleanPropertyTypes(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IPropertyType})">
            <summary>
                Ensures that the collection does not contain properties not in the specified property types.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IPropertyCollection.Add(Umbraco.Cms.Core.Models.IProperty)">
            <summary>
                Adds or updates a property.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IPropertyType.Name">
            <summary>
                Gets of sets the name of the property type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IPropertyType.Alias">
            <summary>
                Gets of sets the alias of the property type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IPropertyType.Description">
            <summary>
                Gets of sets the description of the property type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IPropertyType.DataTypeId">
            <summary>
                Gets or sets the identifier of the datatype for this property type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IPropertyType.PropertyEditorAlias">
            <summary>
                Gets or sets the alias of the property editor for this property type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IPropertyType.ValueStorageType">
            <summary>
                Gets or sets the database type for storing value for this property type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IPropertyType.PropertyGroupId">
            <summary>
                Gets or sets the identifier of the property group this property type belongs to.
            </summary>
            <remarks>For generic properties, the value is <c>null</c>.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IPropertyType.Mandatory">
            <summary>
                Gets of sets a value indicating whether a value for this property type is required.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IPropertyType.LabelOnTop">
            <summary>
                Gets or sets a value indicating whether the label of this property type should be displayed on top.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IPropertyType.SortOrder">
            <summary>
                Gets of sets the sort order of the property type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IPropertyType.ValidationRegExp">
            <summary>
                Gets or sets the regular expression validating the property values.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IPropertyType.Variations">
            <summary>
                Gets or sets the content variation of the property type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IPropertyType.MandatoryMessage">
            <summary>
                Gets or sets the custom validation message used when a value for this PropertyType is required
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IPropertyType.ValidationRegExpMessage">
            <summary>
                Gets or sets the custom validation message used when a pattern for this PropertyType must be matched
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IPropertyType.SupportsVariation(System.String,System.String,System.Boolean)">
            <summary>
                Determines whether the property type supports a combination of culture and segment.
            </summary>
            <param name="culture">The culture.</param>
            <param name="segment">The segment.</param>
            <param name="wildcards">A value indicating whether wildcards are valid.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IPropertyValue.Culture">
            <summary>
                Gets or sets the culture of the property.
            </summary>
            <remarks>
                The culture is either null (invariant) or a non-empty string. If the property is
                set with an empty or whitespace value, its value is converted to null.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IPropertyValue.Segment">
            <summary>
                Gets or sets the segment of the property.
            </summary>
            <remarks>
                The segment is either null (neutral) or a non-empty string. If the property is
                set with an empty or whitespace value, its value is converted to null.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IPropertyValue.EditedValue">
            <summary>
                Gets or sets the edited value of the property.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IPropertyValue.PublishedValue">
            <summary>
                Gets or sets the published value of the property.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IPropertyValue.Clone">
            <summary>
                Clones the property value.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IReadOnlyContentBase.Id">
            <summary>
                Gets the integer identifier of the entity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IReadOnlyContentBase.Key">
            <summary>
                Gets the Guid unique identifier of the entity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IReadOnlyContentBase.CreateDate">
            <summary>
                Gets the creation date.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IReadOnlyContentBase.UpdateDate">
            <summary>
                Gets the last update date.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IReadOnlyContentBase.Name">
            <summary>
                Gets the name of the entity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IReadOnlyContentBase.CreatorId">
            <summary>
                Gets the identifier of the user who created this entity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IReadOnlyContentBase.ParentId">
            <summary>
                Gets the identifier of the parent entity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IReadOnlyContentBase.Level">
            <summary>
                Gets the level of the entity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IReadOnlyContentBase.Path">
            <summary>
                Gets the path to the entity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IReadOnlyContentBase.SortOrder">
            <summary>
                Gets the sort order of the entity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IReadOnlyContentBase.ContentTypeId">
            <summary>
                Gets the content type id
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IReadOnlyContentBase.WriterId">
            <summary>
                Gets the identifier of the writer.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IReadOnlyContentBase.VersionId">
            <summary>
                Gets the version identifier.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.IRedirectUrl">
            <summary>
                Represents a redirect URL.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IRedirectUrl.ContentId">
            <summary>
                Gets or sets the identifier of the content item.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IRedirectUrl.ContentKey">
            <summary>
                Gets or sets the unique key identifying the content item.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IRedirectUrl.CreateDateUtc">
            <summary>
                Gets or sets the redirect URL creation date.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IRedirectUrl.Culture">
            <summary>
                Gets or sets the culture.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IRedirectUrl.Url">
            <summary>
                Gets or sets the redirect URL route.
            </summary>
            <remarks>Is a proper Umbraco route eg /path/to/foo or 123/path/tofoo.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IRelation.ParentId">
            <summary>
                Gets or sets the Parent Id of the Relation (Source)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IRelation.ChildId">
            <summary>
                Gets or sets the Child Id of the Relation (Destination)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IRelation.RelationType">
            <summary>
                Gets or sets the <see cref="P:Umbraco.Cms.Core.Models.IRelation.RelationType" /> for the Relation
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IRelation.Comment">
            <summary>
                Gets or sets a comment for the Relation
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IRelation.RelationTypeId">
            <summary>
                Gets the Id of the <see cref="P:Umbraco.Cms.Core.Models.IRelation.RelationType" /> that this Relation is based on.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IRelationTypeWithIsDependency.IsDependency">
            <summary>
                Gets or sets a boolean indicating whether the RelationType should be returned in "Used by"-queries.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IRelationType.Name">
            <summary>
                Gets or sets the Name of the RelationType
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IRelationType.Alias">
            <summary>
                Gets or sets the Alias of the RelationType
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IRelationType.IsBidirectional">
            <summary>
                Gets or sets a boolean indicating whether the RelationType is Bidirectional (true) or Parent to Child (false)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IRelationType.ParentObjectType">
            <summary>
                Gets or sets the Parents object type id
            </summary>
            <remarks>Corresponds to the NodeObjectType in the umbracoNode table</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IRelationType.ChildObjectType">
            <summary>
                Gets or sets the Childs object type id
            </summary>
            <remarks>Corresponds to the NodeObjectType in the umbracoNode table</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IServerRegistration.ServerIdentity">
            <summary>
                Gets or sets the server unique identity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IServerRegistration.IsActive">
            <summary>
                Gets or sets a value indicating whether the server is active.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IServerRegistration.IsSchedulingPublisher">
            <summary>
                Gets or sets a value indicating whether the server is has the SchedulingPublisher role.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IServerRegistration.Registered">
            <summary>
                Gets the date and time the registration was created.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IServerRegistration.Accessed">
            <summary>
                Gets the date and time the registration was last accessed.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ISimpleContentType">
            <summary>
                Represents a simplified view of a content type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ISimpleContentType.Alias">
            <summary>
                Gets the alias of the content type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ISimpleContentType.DefaultTemplate">
            <summary>
                Gets the default template of the content type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ISimpleContentType.Variations">
            <summary>
                Gets the content variation of the content type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ISimpleContentType.Icon">
            <summary>
                Gets the icon of the content type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ISimpleContentType.ListView">
            <summary>
                Gets the list view of the content type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ISimpleContentType.AllowedAsRoot">
            <summary>
                Gets a value indicating whether content of that type can be created at the root of the tree.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ISimpleContentType.IsElement">
            <summary>
                Gets a value indicating whether the content type is an element content type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ISimpleContentType.SupportsPropertyVariation(System.String,System.String,System.Boolean)">
            <summary>
                Validates that a combination of culture and segment is valid for the content type properties.
            </summary>
            <param name="culture">The culture.</param>
            <param name="segment">The segment.</param>
            <param name="wildcards">A value indicating whether wildcard are supported.</param>
            <returns>True if the combination is valid; otherwise false.</returns>
            <remarks>
                <para>
                    The combination must be valid for properties of the content type. For instance, if the content type varies by
                    culture,
                    then an invariant culture is valid, because some properties may be invariant. On the other hand, if the content
                    type is invariant,
                    then a variant culture is invalid, because no property could possibly vary by culture.
                </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.IStylesheet.Properties">
            <summary>
                Returns a list of umbraco back office enabled stylesheet properties
            </summary>
            <remarks>
                An umbraco back office enabled stylesheet property has a special prefix, for example:
                /** umb_name: MyPropertyName */ p { font-size: 1em; }
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IStylesheet.AddProperty(Umbraco.Cms.Core.Models.IStylesheetProperty)">
            <summary>
                Adds an Umbraco stylesheet property for use in the back office
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.IStylesheet.RemoveProperty(System.String)">
            <summary>
                Removes an Umbraco stylesheet property
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ITag">
            <summary>
                Represents a tag entity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ITag.Group">
            <summary>
                Gets or sets the tag group.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ITag.Text">
            <summary>
                Gets or sets the tag text.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ITag.LanguageId">
            <summary>
                Gets or sets the tag language.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ITag.NodeCount">
            <summary>
                Gets the number of nodes tagged with this tag.
            </summary>
            <remarks>Only when returning from queries.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ITemplate">
            <summary>
                Defines a Template File (Mvc View)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ITemplate.Name">
            <summary>
                Gets the Name of the File including extension
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ITemplate.Alias">
            <summary>
                Gets the Alias of the File, which is the name without the extension
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ITemplate.IsMasterTemplate">
            <summary>
                Returns true if the template is used as a layout for other templates (i.e. it has 'children')
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ITemplate.MasterTemplateAlias">
            <summary>
                returns the master template alias
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ITemplate.SetMasterTemplate(Umbraco.Cms.Core.Models.ITemplate)">
            <summary>
                Set the mastertemplate
            </summary>
            <param name="masterTemplate"></param>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.KeyValue">
            <summary>
                Implements <see cref="T:Umbraco.Cms.Core.Models.IKeyValue" />.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.KeyValue.Identifier">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.KeyValue.Value">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Language">
            <summary>
                Represents a Language.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Language.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Language" /> class.
            </summary>
            <param name="isoCode">The ISO code of the language.</param>
            <param name="cultureName">The name of the language.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Language.IsoCode">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Language.CultureName">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Language.CultureInfo">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Language.IsDefault">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Language.IsMandatory">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Language.FallbackIsoCode">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Media">
            <summary>
                Represents a Media object
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Media.#ctor(System.String,Umbraco.Cms.Core.Models.IMedia,Umbraco.Cms.Core.Models.IMediaType)">
            <summary>
                Constructor for creating a Media object
            </summary>
            <param name="name">name of the Media object</param>
            <param name="parent">Parent <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> object</param>
            <param name="mediaType">MediaType for the current Media object</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Media.#ctor(System.String,Umbraco.Cms.Core.Models.IMedia,Umbraco.Cms.Core.Models.IMediaType,Umbraco.Cms.Core.Models.IPropertyCollection)">
            <summary>
                Constructor for creating a Media object
            </summary>
            <param name="name">name of the Media object</param>
            <param name="parent">Parent <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> object</param>
            <param name="mediaType">MediaType for the current Media object</param>
            <param name="properties">Collection of properties</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Media.#ctor(System.String,System.Int32,Umbraco.Cms.Core.Models.IMediaType)">
            <summary>
                Constructor for creating a Media object
            </summary>
            <param name="name">name of the Media object</param>
            <param name="parentId">Id of the Parent IMedia</param>
            <param name="mediaType">MediaType for the current Media object</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Media.#ctor(System.String,System.Int32,Umbraco.Cms.Core.Models.IMediaType,Umbraco.Cms.Core.Models.IPropertyCollection)">
            <summary>
                Constructor for creating a Media object
            </summary>
            <param name="name">Name of the Media object</param>
            <param name="parentId">Id of the Parent IMedia</param>
            <param name="mediaType">MediaType for the current Media object</param>
            <param name="properties">Collection of properties</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Media.ChangeContentType(Umbraco.Cms.Core.Models.IMediaType)">
            <summary>
                Changes the <see cref="T:Umbraco.Cms.Core.Models.IMediaType" /> for the current Media object
            </summary>
            <param name="mediaType">New MediaType for this Media</param>
            <remarks>Leaves PropertyTypes intact after change</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Media.ChangeContentType(Umbraco.Cms.Core.Models.IMediaType,System.Boolean)">
            <summary>
                Changes the <see cref="T:Umbraco.Cms.Core.Models.IMediaType" /> for the current Media object and removes PropertyTypes,
                which are not part of the new MediaType.
            </summary>
            <param name="mediaType">New MediaType for this Media</param>
            <param name="clearProperties">Boolean indicating whether to clear PropertyTypes upon change</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.MediaPropertySettings.ReservedFieldNames">
            <summary>
            Gets a set of standard names for fields that cannot be used for custom properties.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.MediaType">
            <summary>
                Represents the content type that a <see cref="T:Umbraco.Cms.Core.Models.Media" /> object is based on
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.MediaType.#ctor(Umbraco.Cms.Core.Strings.IShortStringHelper,System.Int32)">
            <summary>
                Constuctor for creating a MediaType with the parent's id.
            </summary>
            <remarks>Only use this for creating MediaTypes at the root (with ParentId -1).</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.MediaType.#ctor(Umbraco.Cms.Core.Strings.IShortStringHelper,Umbraco.Cms.Core.Models.IMediaType)">
            <summary>
                Constuctor for creating a MediaType with the parent as an inherited type.
            </summary>
            <remarks>Use this to ensure inheritance from parent.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.MediaType.#ctor(Umbraco.Cms.Core.Strings.IShortStringHelper,Umbraco.Cms.Core.Models.IMediaType,System.String)">
            <summary>
                Constuctor for creating a MediaType with the parent as an inherited type.
            </summary>
            <remarks>Use this to ensure inheritance from parent.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.MediaType.SupportsPublishing">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.MediaType.ToSimple">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.MediaType.Alias">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.MediaType.DeepCloneWithResetIdentities(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Member">
            <summary>
                Represents a Member object
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Member.#ctor(Umbraco.Cms.Core.Models.IMemberType)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Member" /> class.
                Constructor for creating an empty Member object
            </summary>
            <param name="contentType">ContentType for the current Content object</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Member.#ctor(System.String,Umbraco.Cms.Core.Models.IMemberType)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Member" /> class.
                Constructor for creating a Member object
            </summary>
            <param name="name">Name of the content</param>
            <param name="contentType">ContentType for the current Content object</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Member.#ctor(System.String,System.String,System.String,Umbraco.Cms.Core.Models.IMemberType,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Member" /> class.
                Constructor for creating a Member object
            </summary>
            <param name="name"></param>
            <param name="email"></param>
            <param name="username"></param>
            <param name="contentType"></param>
            <param name="isApproved"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Member.#ctor(System.String,System.String,System.String,Umbraco.Cms.Core.Models.IMemberType,System.Int32,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Member" /> class.
                Constructor for creating a Member object
            </summary>
            <param name="name"></param>
            <param name="email"></param>
            <param name="username"></param>
            <param name="contentType"></param>
            <param name="userId"></param>
            <param name="isApproved"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Member.#ctor(System.String,System.String,System.String,System.String,Umbraco.Cms.Core.Models.IMemberType)">
            <summary>
                Constructor for creating a Member object
            </summary>
            <param name="name"></param>
            <param name="email"></param>
            <param name="username"></param>
            <param name="rawPasswordValue">
                The password value passed in to this parameter should be the encoded/encrypted/hashed format of the member's
                password
            </param>
            <param name="contentType"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Member.#ctor(System.String,System.String,System.String,System.String,Umbraco.Cms.Core.Models.IMemberType,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Member" /> class.
                Constructor for creating a Member object
            </summary>
            <param name="name"></param>
            <param name="email"></param>
            <param name="username"></param>
            <param name="rawPasswordValue">
                The password value passed in to this parameter should be the encoded/encrypted/hashed format of the member's
                password
            </param>
            <param name="contentType"></param>
            <param name="isApproved"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Member.#ctor(System.String,System.String,System.String,System.String,Umbraco.Cms.Core.Models.IMemberType,System.Boolean,System.Int32)">
            <summary>
                Constructor for creating a Member object
            </summary>
            <param name="name"></param>
            <param name="email"></param>
            <param name="username"></param>
            <param name="rawPasswordValue">
                The password value passed in to this parameter should be the encoded/encrypted/hashed format of the member's
                password
            </param>
            <param name="contentType"></param>
            <param name="isApproved"></param>
            <param name="userId"></param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Member.Groups">
            <summary>
                Gets or sets the Groups that Member is part of
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Member.Username">
            <summary>
                Gets or sets the Username
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Member.Email">
            <summary>
                Gets or sets the Email
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Member.RawPasswordValue">
            <summary>
                Gets or sets the raw password value
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Member.Comments">
            <summary>
                Gets or set the comments for the member
            </summary>
            <remarks>
                Alias: umbracoMemberComments
                Part of the standard properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Member.IsApproved">
            <summary>
                Gets or sets a value indicating whether the Member is approved
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Member.IsLockedOut">
            <summary>
                Gets or sets a boolean indicating whether the Member is locked out
            </summary>
            <remarks>
                Alias: umbracoMemberLockedOut
                Part of the standard properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Member.LastLoginDate">
            <summary>
                Gets or sets the date for last login
            </summary>
            <remarks>
                Alias: umbracoMemberLastLogin
                Part of the standard properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Member.LastPasswordChangeDate">
            <summary>
                Gest or sets the date for last password change
            </summary>
            <remarks>
                Alias: umbracoMemberLastPasswordChangeDate
                Part of the standard properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Member.LastLockoutDate">
            <summary>
                Gets or sets the date for when Member was locked out
            </summary>
            <remarks>
                Alias: umbracoMemberLastLockoutDate
                Part of the standard properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Member.FailedPasswordAttempts">
            <summary>
                Gets or sets the number of failed password attempts.
                This is the number of times the password was entered incorrectly upon login.
            </summary>
            <remarks>
                Alias: umbracoMemberFailedPasswordAttempts
                Part of the standard properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Member.ContentTypeAlias">
            <summary>
                String alias of the default ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Member.SecurityStamp">
            <summary>
                The security stamp used by ASP.Net identity
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Member.LongStringPropertyValue">
            <summary>
                Internal/Experimental - only used for mapping queries.
            </summary>
            <remarks>
                Adding these to have first level properties instead of the Properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Member.ShortStringPropertyValue">
            <summary>
                Internal/Experimental - only used for mapping queries.
            </summary>
            <remarks>
                Adding these to have first level properties instead of the Properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Member.IntegerPropertyValue">
            <summary>
                Internal/Experimental - only used for mapping queries.
            </summary>
            <remarks>
                Adding these to have first level properties instead of the Properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Member.BoolPropertyValue">
            <summary>
                Internal/Experimental - only used for mapping queries.
            </summary>
            <remarks>
                Adding these to have first level properties instead of the Properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Member.DateTimePropertyValue">
            <summary>
                Internal/Experimental - only used for mapping queries.
            </summary>
            <remarks>
                Adding these to have first level properties instead of the Properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Member.PropertyTypeAlias">
            <summary>
                Internal/Experimental - only used for mapping queries.
            </summary>
            <remarks>
                Adding these to have first level properties instead of the Properties collection.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.MemberGroup">
            <summary>
                Represents a member type
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.MemberPropertyModel">
            <summary>
                A simple representation of an Umbraco member property
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.MemberPropertySettings.ReservedFieldNames">
            <summary>
            Gets a set of standard names for fields that cannot be used for custom properties.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.ChangeBackOfficeUserPasswordModel.OldPassword">
            <summary>
                The old password - used to change a password when: EnablePasswordRetrieval = false
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.ChangeBackOfficeUserPasswordModel.User">
            <summary>
                The user requesting the password change
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.ChangeBackOfficeUserPasswordModel.ResetPasswordToken">
            <summary>
                The reset token that is required if changing your own password without the old password.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Membership.ContentPermissionSet">
            <summary>
                Represents an <see cref="T:Umbraco.Cms.Core.Models.IContent" /> -> user group &amp; permission key value pair collection
            </summary>
            <remarks>
                This implements <see cref="T:Umbraco.Cms.Core.Models.Entities.IEntity" /> purely so it can be used with the repository layer which is why it's
                explicitly implemented.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Membership.EntityPermission">
            <summary>
                Represents an entity permission (defined on the user group and derived to retrieve permissions for a given user)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.EntityPermission.AssignedPermissions">
            <summary>
                The assigned permissions for the user/entity combo
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.EntityPermission.IsDefaultPermissions">
            <summary>
                True if the permissions assigned to this object are the group's default permissions and not explicitly defined
                permissions
            </summary>
            <remarks>
                This will be the case when looking up entity permissions and falling back to the default permissions
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Membership.EntityPermissionCollection">
            <summary>
                A <see cref="T:System.Collections.Generic.HashSet`1" /> of <see cref="T:Umbraco.Cms.Core.Models.Membership.EntityPermission" />
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Membership.EntityPermissionCollection.GetAllPermissions(System.Int32)">
            <summary>
                Returns the aggregate permissions in the permission set for a single node
            </summary>
            <returns></returns>
            <remarks>
                This value is only calculated once per node
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Membership.EntityPermissionCollection.GetAllPermissions">
            <summary>
                Returns the aggregate permissions in the permission set for all nodes
            </summary>
            <returns></returns>
            <remarks>
                This value is only calculated once
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Membership.EntityPermissionSet">
            <summary>
                Represents an entity -&gt; user group &amp; permission key value pair collection
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.EntityPermissionSet.EntityId">
            <summary>
                The entity id with permissions assigned
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.EntityPermissionSet.PermissionsSet">
            <summary>
                The key/value pairs of user group id &amp; single permission
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Membership.EntityPermissionSet.Empty">
            <summary>
                Returns an empty permission set
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Membership.EntityPermissionSet.GetAllPermissions">
            <summary>
                Returns the aggregate permissions in the permission set
            </summary>
            <returns></returns>
            <remarks>
                This value is only calculated once
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser">
            <summary>
                Defines the base contract for <see cref="T:Umbraco.Cms.Core.Models.IMember" /> and <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.IMembershipUser.RawPasswordValue">
            <summary>
                Gets or sets the raw password value
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.IMembershipUser.PasswordConfiguration">
            <summary>
                The user's specific password config (i.e. algorithm type, etc...)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.IMembershipUser.FailedPasswordAttempts">
            <summary>
                Gets or sets the number of failed password attempts.
                This is the number of times the password was entered incorrectly upon login.
            </summary>
            <remarks>
                Alias: umbracoMemberFailedPasswordAttempts
                Part of the standard properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.IMembershipUser.SecurityStamp">
            <summary>
                Gets or sets the security stamp used by ASP.NET Identity
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Membership.IProfile">
            <summary>
                Defines the User Profile interface
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Membership.IReadOnlyUserGroup">
            <summary>
                A readonly user group providing basic information
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.IReadOnlyUserGroup.Alias">
            <summary>
                The alias
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Membership.IUser">
            <summary>
                Defines the interface for a <see cref="T:Umbraco.Cms.Core.Models.Membership.User" />
            </summary>
            <remarks>Will be left internal until a proper Membership implementation is part of the roadmap</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.IUser.Groups">
            <summary>
                Gets the groups that user is part of
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.IUser.ProfileData">
            <summary>
                Exposes the basic profile data
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.IUser.Avatar">
            <summary>
                Will hold the media file system relative path of the users custom avatar if they uploaded one
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.IUser.Kind">
            <summary>
                The type of user.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.IUserGroup.Icon">
            <summary>
                The icon
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.IUserGroup.Name">
            <summary>
                The name
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.IUserGroup.HasAccessToAllLanguages">
            <summary>
                If this property is true it will give the group access to all languages
            </summary>
            This is set to return true as default to avoid breaking changes
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.IUserGroup.Permissions">
            <summary>
            The set of permissions provided by the frontend.
            </summary>
            <remarks>
            By default the server has no concept of what all of these strings mean, we simple store them and return them to the UI.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.IUserGroup.UserCount">
            <summary>
                Specifies the number of users assigned to this group
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Membership.MemberCountType">
            <summary>
                The types of members to count
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Membership.PersistedPasswordSettings">
            <summary>
                The data stored against the user for their password configuration
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.PersistedPasswordSettings.HashAlgorithm">
            <summary>
                The algorithm name
            </summary>
            <remarks>
                This doesn't explicitly need to map to a 'true' algorithm name, this may match an algorithm name alias that
                uses many different options such as PBKDF2.ASPNETCORE.V3 which would map to the aspnetcore's v3 implementation of
                PBKDF2
                PBKDF2 with HMAC-SHA256, 128-bit salt, 256-bit subkey, 10000 iterations.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Membership.User">
            <summary>
                Represents a backoffice user
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Membership.User.#ctor(Umbraco.Cms.Core.Configuration.Models.GlobalSettings)">
            <summary>
                Constructor for creating a new/empty user
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Membership.User.#ctor(Umbraco.Cms.Core.Configuration.Models.GlobalSettings,System.String,System.String,System.String,System.String)">
            <summary>
                Constructor for creating a new/empty user
            </summary>
            <param name="name"></param>
            <param name="email"></param>
            <param name="username"></param>
            <param name="rawPasswordValue"></param>
            <param name="globalSettings"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Membership.User.#ctor(Umbraco.Cms.Core.Configuration.Models.GlobalSettings,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.Membership.IReadOnlyUserGroup},System.Int32[],System.Int32[])">
            <summary>
                Constructor for creating a new User instance for an existing user
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="email"></param>
            <param name="username"></param>
            <param name="rawPasswordValue"></param>
            <param name="passwordConfig"></param>
            <param name="userGroups"></param>
            <param name="startContentIds"></param>
            <param name="startMediaIds"></param>
            <param name="globalSettings"></param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.User.SecurityStamp">
            <summary>
                The security stamp used by ASP.Net identity
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.User.SessionTimeout">
            <summary>
                Gets or sets the session timeout.
            </summary>
            <value>
                The session timeout.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.User.StartContentIds">
            <summary>
                Gets or sets the start content id.
            </summary>
            <value>
                The start content id.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.User.StartMediaIds">
            <summary>
                Gets or sets the start media id.
            </summary>
            <value>
                The start media id.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.User.Groups">
            <summary>
                Gets the groups that user is part of
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Membership.User.WrappedUserProfile">
            <summary>
                Internal class used to wrap the user in a profile
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Membership.UserFilter.Merge(Umbraco.Cms.Core.Models.Membership.UserFilter)">
            <summary>
            Merges two user filters
            </summary>
            <param name="target">User filter to merge with.</param>
            <returns>A new filter containing the union of the two filters. </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Membership.UserGroup">
            <summary>
                Represents a Group for a Backoffice User
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Membership.UserGroup.#ctor(Umbraco.Cms.Core.Strings.IShortStringHelper)">
            <summary>
                Constructor to create a new user group
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Membership.UserGroup.#ctor(Umbraco.Cms.Core.Strings.IShortStringHelper,System.Int32,System.String,System.String,System.String)">
            <summary>
                Constructor to create an existing user group
            </summary>
            <param name="userCount"></param>
            <param name="alias"></param>
            <param name="name"></param>
            <param name="icon"></param>
            <param name="shortStringHelper"></param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Membership.UserGroup.Permissions">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Membership.UserState">
            <summary>
                The state of a user
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.MemberType">
            <summary>
                Represents the content type that a <see cref="T:Umbraco.Cms.Core.Models.Member" /> object is based on
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.MemberType._memberTypePropertyTypes">
            <summary>
                Gets or Sets a Dictionary of Tuples (MemberCanEdit, VisibleOnProfile, IsSensitive) by the PropertyTypes' alias.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.MemberType.SupportsPublishing">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.MemberType.ToSimple">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.MemberType.Alias">
            <summary>
                The Alias of the ContentType
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.MemberType.MemberCanEditProperty(System.String)">
            <summary>
                Gets a boolean indicating whether a Property is editable by the Member.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to check</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.MemberType.MemberCanViewProperty(System.String)">
            <summary>
                Gets a boolean indicating whether a Property is visible on the Members profile.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to check</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.MemberType.IsSensitiveProperty(System.String)">
            <summary>
                Gets a boolean indicating whether a Property is marked as storing sensitive values on the Members profile.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to check</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.MemberType.SetMemberCanEditProperty(System.String,System.Boolean)">
            <summary>
                Sets a boolean indicating whether a Property is editable by the Member.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to set</param>
            <param name="value">Boolean value, true or false</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.MemberType.SetMemberCanViewProperty(System.String,System.Boolean)">
            <summary>
                Sets a boolean indicating whether a Property is visible on the Members profile.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to set</param>
            <param name="value">Boolean value, true or false</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.MemberType.SetIsSensitiveProperty(System.String,System.Boolean)">
            <summary>
                Sets a boolean indicating whether a Property is a sensitive value on the Members profile.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to set</param>
            <param name="value">Boolean value, true or false</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.MemberTypePropertyProfileAccess">
            <summary>
                Used to track the property types that are visible/editable on member profiles
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.NodePermissions">
            <summary>
            A model representing a set of permissions for a given node.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.NotificationEmailBodyParams.Summary">
            <summary>
                This will either be an HTML or text based summary depending on the email type being sent
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ObjectTypes">
            <summary>
                Provides utilities and extension methods to handle object types.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ObjectTypes.GetUmbracoObjectType(System.String)">
            <summary>
                Gets the Umbraco object type corresponding to a name.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ObjectTypes.GetUmbracoObjectType(System.Guid)">
            <summary>
                Gets the Umbraco object type corresponding to an object type Guid.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ObjectTypes.GetUdiType(System.Guid)">
            <summary>
                Gets the Udi type corresponding to an object type Guid.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ObjectTypes.GetClrType(System.Guid)">
            <summary>
                Gets the CLR type corresponding to an object type Guid.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ObjectTypes.GetGuid(Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <summary>
                Gets the object type Guid corresponding to this Umbraco object type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ObjectTypes.GetUdiType(Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <summary>
                Gets the Udi type corresponding to this Umbraco object type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ObjectTypes.GetName(Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <summary>
                Gets the name corresponding to this Umbraco object type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ObjectTypes.GetFriendlyName(Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <summary>
                Gets the friendly name corresponding to this Umbraco object type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ObjectTypes.GetClrType(Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <summary>
                Gets the CLR type corresponding to this Umbraco object type.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Packaging.CompiledPackage">
            <summary>
                The model of the umbraco package data manifest (xml file)
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Packaging.CompiledPackageContentBase">
            <summary>
                Compiled representation of a content base (Document or Media)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Packaging.CompiledPackageContentBase.XmlData">
            <summary>
                The serialized version of the content
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PagedResult">
            <summary>
                Represents a paged result for a model collection
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PagedResult.GetSkipSize">
            <summary>
                Calculates the skip size based on the paged parameters specified
            </summary>
            <remarks>
                Returns 0 if the page number or page size is zero
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PagedResult`1">
            <summary>
                Represents a paged result for a model collection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PartialView">
            <summary>
                Represents a Partial View file
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PasswordChangedModel">
            <summary>
                A model representing an attempt at changing a password
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PasswordChangedModel.ResetPassword">
            <summary>
                If the password was reset, this is the value it has been changed to
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Property">
            <summary>
                Represents a property.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Property.#ctor(Umbraco.Cms.Core.Models.IPropertyType)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Property" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Property.#ctor(System.Int32,Umbraco.Cms.Core.Models.IPropertyType)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Property" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Property.PropertyType">
            <summary>
                Returns the PropertyType, which this Property is based on
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Property.Values">
            <summary>
                Gets the list of values.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Property.Alias">
            <summary>
                Returns the Alias of the PropertyType, which this Property is based on
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Property.PropertyTypeId">
            <summary>
                Returns the Id of the PropertyType, which this Property is based on
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Property.ValueStorageType">
            <summary>
                Returns the DatabaseType that the underlaying DataType is using to store its values
            </summary>
            <remarks>
                Only used internally when saving the property value.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Property.CreateWithValues(System.Int32,Umbraco.Cms.Core.Models.IPropertyType,Umbraco.Cms.Core.Models.Property.InitialPropertyValue[])">
            <summary>
                Creates a new <see cref="T:Umbraco.Cms.Core.Models.Property" /> instance for existing <see cref="T:Umbraco.Cms.Core.Models.IProperty" />
            </summary>
            <param name="id"></param>
            <param name="propertyType"></param>
            <param name="values">
                Generally will contain a published and an unpublished property values
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Property.GetValue(System.String,System.String,System.Boolean)">
            <summary>
                Gets the value.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Property.SetValue(System.Object,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Property.TryConvertAssignedValue(System.Object,System.Boolean,System.Object@)">
            <summary>
                Tries to convert a value assigned to a property.
            </summary>
            <remarks>
                <para></para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Property.IsOfExpectedPropertyType(System.Object)">
            <summary>
                Determines whether a value is of the expected type for this property type.
            </summary>
            <remarks>
                <para>
                    If the value is of the expected type, it can be directly assigned to the property.
                    Otherwise, some conversion is required.
                </para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Property.InitialPropertyValue">
            <summary>
                Used for constructing a new <see cref="T:Umbraco.Cms.Core.Models.Property" /> instance
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Property.PropertyValue">
            <summary>
                Represents a property value.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Property.PropertyValue.Culture">
            <summary>
                Gets or sets the culture of the property.
            </summary>
            <remarks>
                The culture is either null (invariant) or a non-empty string. If the property is
                set with an empty or whitespace value, its value is converted to null.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Property.PropertyValue.Segment">
            <summary>
                Gets or sets the segment of the property.
            </summary>
            <remarks>
                The segment is either null (neutral) or a non-empty string. If the property is
                set with an empty or whitespace value, its value is converted to null.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Property.PropertyValue.EditedValue">
            <summary>
                Gets or sets the edited value of the property.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Property.PropertyValue.PublishedValue">
            <summary>
                Gets or sets the published value of the property.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Property.PropertyValue.Clone">
            <summary>
                Clones the property value.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PropertyCollection">
            <summary>
                Represents a collection of property values.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyCollection.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.PropertyCollection" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyCollection.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IProperty})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.PropertyCollection" /> class.
            </summary>
        </member>
        <member name="E:Umbraco.Cms.Core.Models.PropertyCollection.CollectionChanged">
            <summary>
                Occurs when the collection changes.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PropertyCollection.Item(Umbraco.Cms.Core.Models.IPropertyType)">
            <summary>
                Gets the property with the specified PropertyType.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyCollection.Add(Umbraco.Cms.Core.Models.IProperty)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyCollection.EnsurePropertyTypes(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IPropertyType})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyCollection.EnsureCleanPropertyTypes(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IPropertyType})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyCollection.DeepClone">
            <summary>
                Deep clones.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyCollection.SetItem(System.Int32,Umbraco.Cms.Core.Models.IProperty)">
            <summary>
                Replaces the property at the specified index with the specified property.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyCollection.Reset(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IProperty})">
            <summary>
                Replaces all properties, whilst maintaining validation delegates.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyCollection.RemoveItem(System.Int32)">
            <summary>
                Removes the property at the specified index.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyCollection.InsertItem(System.Int32,Umbraco.Cms.Core.Models.IProperty)">
            <summary>
                Inserts the specified property at the specified index.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyCollection.ClearItems">
            <summary>
                Removes all properties.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyCollection.IndexOfKey(System.String)">
            <summary>
                Gets the index for a specified property alias.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PropertyGroup">
            <summary>
                Represents a group of property types.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PropertyGroup.Type">
            <summary>
                Gets or sets the type of the group.
            </summary>
            <value>
                The type.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PropertyGroup.Name">
            <summary>
                Gets or sets the name of the group.
            </summary>
            <value>
                The name.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PropertyGroup.Alias">
            <summary>
                Gets or sets the alias of the group.
            </summary>
            <value>
                The alias.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PropertyGroup.SortOrder">
            <summary>
                Gets or sets the sort order of the group.
            </summary>
            <value>
                The sort order.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PropertyGroup.PropertyTypes">
            <summary>
                Gets or sets a collection of property types for the group.
            </summary>
            <value>
                The property types.
            </value>
            <remarks>
                Marked with DoNotClone, because we will manually deal with cloning and the event handlers.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PropertyGroupCollection">
            <summary>
                Represents a collection of <see cref="T:Umbraco.Cms.Core.Models.PropertyGroup" /> objects
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyGroupCollection.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.PropertyGroupCollection" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyGroupCollection.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.PropertyGroup})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.PropertyGroupCollection" /> class.
            </summary>
            <param name="groups">The groups.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyGroupCollection.Reset(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.PropertyGroup})">
            <summary>
                Resets the collection to only contain the <see cref="T:Umbraco.Cms.Core.Models.PropertyGroup" /> instances referenced in the
                <paramref name="groups" /> parameter.
            </summary>
            <param name="groups">The property groups.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyGroupCollection.ClearCollectionChangedEvents">
            <summary>
                Clears all <see cref="E:Umbraco.Cms.Core.Models.PropertyGroupCollection.CollectionChanged" /> event handlers
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyGroupExtensions.GetLocalAlias(Umbraco.Cms.Core.Models.PropertyGroup)">
            <summary>
                Gets the local alias.
            </summary>
            <param name="propertyGroup">The property group.</param>
            <returns>
                The local alias.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyGroupExtensions.UpdateLocalAlias(Umbraco.Cms.Core.Models.PropertyGroup,System.String)">
            <summary>
                Updates the local alias.
            </summary>
            <param name="propertyGroup">The property group.</param>
            <param name="localAlias">The local alias.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyGroupExtensions.GetParentAlias(Umbraco.Cms.Core.Models.PropertyGroup)">
            <summary>
                Gets the parent alias.
            </summary>
            <param name="propertyGroup">The property group.</param>
            <returns>
                The parent alias.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyGroupExtensions.UpdateParentAlias(Umbraco.Cms.Core.Models.PropertyGroup,System.String)">
            <summary>
                Updates the parent alias.
            </summary>
            <param name="propertyGroup">The property group.</param>
            <param name="parentAlias">The parent alias.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PropertyGroupType">
            <summary>
                Represents the type of a property group.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PropertyGroupType.Group">
            <summary>
                Display property types in a group.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PropertyGroupType.Tab">
            <summary>
                Display property types in a tab.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PropertyType">
            <summary>
                Represents a property type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyType.#ctor(Umbraco.Cms.Core.Strings.IShortStringHelper,Umbraco.Cms.Core.Models.IDataType)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.PropertyType" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyType.#ctor(Umbraco.Cms.Core.Strings.IShortStringHelper,Umbraco.Cms.Core.Models.IDataType,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.PropertyType" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyType.#ctor(Umbraco.Cms.Core.Strings.IShortStringHelper,System.String,Umbraco.Cms.Core.Models.ValueStorageType)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.PropertyType" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyType.#ctor(Umbraco.Cms.Core.Strings.IShortStringHelper,System.String,Umbraco.Cms.Core.Models.ValueStorageType,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.PropertyType" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyType.#ctor(Umbraco.Cms.Core.Strings.IShortStringHelper,System.String,Umbraco.Cms.Core.Models.ValueStorageType,System.Boolean,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.PropertyType" /> class.
            </summary>
            <remarks>
                Set <paramref name="forceValueStorageType" /> to true to force the value storage type. Values assigned to
                the property, eg from the underlying datatype, will be ignored.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PropertyType.SupportsPublishing">
            <summary>
                Gets a value indicating whether the content type owning this property type is publishing.
            </summary>
            <remarks>
                <para>
                    A publishing content type supports draft and published values for properties.
                    It is possible to retrieve either the draft (default) or published value of a property.
                    Setting the value always sets the draft value, which then needs to be published.
                </para>
                <para>
                    A non-publishing content type only supports one value for properties. Getting
                    the draft or published value of a property returns the same thing, and publishing
                    a value property has no effect.
                </para>
                <para>
                    When true, getting the property value returns the edited value by default, but
                    it is possible to get the published value using the appropriate 'published' method
                    parameter.
                </para>
                <para>
                    When false, getting the property value always return the edited value,
                    regardless of the 'published' method parameter.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyType.Equals(Umbraco.Cms.Core.Models.PropertyType)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PropertyType.Name">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PropertyType.Alias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PropertyType.Description">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PropertyType.DataTypeId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PropertyType.PropertyEditorAlias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PropertyType.ValueStorageType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PropertyType.PropertyGroupId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PropertyType.Mandatory">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PropertyType.MandatoryMessage">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PropertyType.LabelOnTop">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PropertyType.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PropertyType.ValidationRegExp">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PropertyType.ValidationRegExpMessage">
            <summary>
                Gets or sets the custom validation message used when a pattern for this PropertyType must be matched
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PropertyType.Variations">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyType.SupportsVariation(System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyType.PerformDeepClone(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyType.SanitizeAlias(System.String)">
            <summary>
                Sanitizes a property type alias.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PropertyTypeCollection">
            <summary>
                Represents a collection of <see cref="T:Umbraco.Cms.Core.Models.IPropertyType" /> objects.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PropertyTypeCollection.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyTypeCollection.Contains(System.String)">
            <summary>
                Determines whether this collection contains a <see cref="T:Umbraco.Cms.Core.Models.Property" /> whose alias matches the specified
                PropertyType.
            </summary>
            <param name="propertyAlias">Alias of the PropertyType.</param>
            <returns><c>true</c> if the collection contains the specified alias; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyTypeCollection.Reset(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IPropertyType})">
            <summary>
                Resets the collection to only contain the <see cref="T:Umbraco.Cms.Core.Models.IPropertyType" /> instances referenced in the
                <paramref name="properties" /> parameter.
            </summary>
            <param name="properties">The properties.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyTypeCollection.Item_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
                Occurs when a property changes on a IPropertyType that exists in this collection
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PropertyTypeCollection.ClearCollectionChangedEvents">
            <summary>
                Clears all <see cref="E:Umbraco.Cms.Core.Models.PropertyTypeCollection.CollectionChanged" /> event handlers
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishBranchFilter">
            <summary>
            Describes the options available with publishing a content branch for force publishing.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PublishBranchFilter.Default">
            <summary>
            The default behavior is to publish only the published content that has changed.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PublishBranchFilter.IncludeUnpublished">
            <summary>
            For publishing a branch, publish all changed content, including content that is not published.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PublishBranchFilter.ForceRepublish">
            <summary>
            For publishing a branch, force republishing of all published content, including content that has not changed.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PublishBranchFilter.All">
            <summary>
            For publishing a branch, publish all content, including content that is not published and content that has not changed.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.Fallback">
            <summary>
            Manages the built-in fallback policies.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PublishedContent.Fallback.None">
            <summary>
            Do not fallback.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.Fallback.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.Fallback" /> struct with values.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.Fallback.To(System.Int32[])">
            <summary>
            Gets an ordered set of fallback policies.
            </summary>
            <param name="values">The values.</param>
            <returns>
            The fallback policy.
            </returns>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PublishedContent.Fallback.DefaultValue">
            <summary>
            Fallback to the default value.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PublishedContent.Fallback.Language">
            <summary>
            Fallback to other languages.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PublishedContent.Fallback.Ancestors">
            <summary>
            Fallback to tree ancestors.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PublishedContent.Fallback.DefaultLanguage">
            <summary>
            Fallback to the default language.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.Fallback.ToDefaultLanguage">
            <summary>
            Gets the fallback to the default language policy.
            </summary>
            <value>
            The default language fallback policy.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.Fallback.ToDefaultValue">
            <summary>
            Gets the fallback to the default value policy.
            </summary>
            <value>
            The default value fallback policy.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.Fallback.ToLanguage">
            <summary>
            Gets the fallback to language policy.
            </summary>
            <value>
            The language fallback policy.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.Fallback.ToAncestors">
            <summary>
            Gets the fallback to tree ancestors policy.
            </summary>
            <value>
            The tree ancestors fallback policy.
            </value>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.Fallback.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.Fallback.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.HttpContextVariationContextAccessor">
            <summary>
                Implements <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IVariationContextAccessor" /> on top of <see cref="T:Umbraco.Cms.Core.Cache.IRequestCache" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.HttpContextVariationContextAccessor.#ctor(Umbraco.Cms.Core.Cache.IRequestCache)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.HttpContextVariationContextAccessor" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.HttpContextVariationContextAccessor.VariationContext">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.HybridVariationContextAccessor">
            <summary>
                Implements a hybrid <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IVariationContextAccessor" />.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.HybridVariationContextAccessor.VariationContext">
            <summary>
                Gets or sets the <see cref="P:Umbraco.Cms.Core.Models.PublishedContent.HybridVariationContextAccessor.VariationContext" /> object.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.IAutoPublishedModelFactory">
            <summary>
                Provides a live published model creation service.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IAutoPublishedModelFactory.SyncRoot">
            <summary>
                Gets an object that can be used to synchronize access to the factory.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IAutoPublishedModelFactory.Enabled">
            <summary>
                If the live model factory
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IAutoPublishedModelFactory.Reset">
            <summary>
                Tells the factory that it should build a new generation of models
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1">
            <summary>
                Represents an item in an array that stores its own index and the total count.
            </summary>
            <typeparam name="TContent">The type of the content.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.#ctor(`0,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1" /> class.
            </summary>
            <param name="content">The content.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.Content">
            <summary>
                Gets the content.
            </summary>
            <value>
                The content.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.Index">
            <summary>
                Gets the index.
            </summary>
            <value>
                The index.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.TotalCount">
            <summary>
                Gets the total count.
            </summary>
            <value>
                The total count.
            </value>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsFirst">
            <summary>
                Determines whether this item is the first.
            </summary>
            <returns>
                <c>true</c> if this item is the first; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsFirst(System.String)">
            <summary>
                If this item is the first, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise,
                <see cref="F:System.String.Empty" />.
            </summary>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
                The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsFirst(System.String,System.String)">
            <summary>
                If this item is the first, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise,
                <paramref name="valueIfFalse" />.
            </summary>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
                The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsNotFirst">
            <summary>
                Determines whether this item is not the first.
            </summary>
            <returns>
                <c>true</c> if this item is not the first; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsNotFirst(System.String)">
            <summary>
                If this item is not the first, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise,
                <see cref="F:System.String.Empty" />.
            </summary>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
                The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsNotFirst(System.String,System.String)">
            <summary>
                If this item is not the first, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise,
                <paramref name="valueIfFalse" />.
            </summary>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
                The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsIndex(System.Int32)">
            <summary>
                Determines whether this item is at the specified <paramref name="index" />.
            </summary>
            <param name="index">The index.</param>
            <returns>
                <c>true</c> if this item is at the specified <paramref name="index" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsIndex(System.Int32,System.String)">
            <summary>
                If this item is at the specified <paramref name="index" />, the HTML encoded <paramref name="valueIfTrue" /> will
                be returned; otherwise, <see cref="F:System.String.Empty" />.
            </summary>
            <param name="index">The index.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
                The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsIndex(System.Int32,System.String,System.String)">
            <summary>
                If this item is at the specified <paramref name="index" />, the HTML encoded <paramref name="valueIfTrue" /> will
                be returned; otherwise, <paramref name="valueIfFalse" />.
            </summary>
            <param name="index">The index.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
                The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsModZero(System.Int32)">
            <summary>
                Determines whether this item is at an index that can be divided by the specified <paramref name="modulus" />.
            </summary>
            <param name="modulus">The modulus.</param>
            <returns>
                <c>true</c> if this item is at an index that can be divided by the specified <paramref name="modulus" />;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsModZero(System.Int32,System.String)">
            <summary>
                If this item is at an index that can be divided by the specified <paramref name="modulus" />, the HTML encoded
                <paramref name="valueIfTrue" /> will be returned; otherwise, <see cref="F:System.String.Empty" />.
            </summary>
            <param name="modulus">The modulus.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
                The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsModZero(System.Int32,System.String,System.String)">
            <summary>
                If this item is at an index that can be divided by the specified <paramref name="modulus" />, the HTML encoded
                <paramref name="valueIfTrue" /> will be returned; otherwise, <paramref name="valueIfFalse" />.
            </summary>
            <param name="modulus">The modulus.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
                The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsNotModZero(System.Int32)">
            <summary>
                Determines whether this item is not at an index that can be divided by the specified <paramref name="modulus" />.
            </summary>
            <param name="modulus">The modulus.</param>
            <returns>
                <c>true</c> if this item is not at an index that can be divided by the specified <paramref name="modulus" />;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsNotModZero(System.Int32,System.String)">
            <summary>
                If this item is not at an index that can be divided by the specified <paramref name="modulus" />, the HTML encoded
                <paramref name="valueIfTrue" /> will be returned; otherwise, <see cref="F:System.String.Empty" />.
            </summary>
            <param name="modulus">The modulus.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
                The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsNotModZero(System.Int32,System.String,System.String)">
            <summary>
                If this item is not at an index that can be divided by the specified <paramref name="modulus" />, the HTML encoded
                <paramref name="valueIfTrue" /> will be returned; otherwise, <paramref name="valueIfFalse" />.
            </summary>
            <param name="modulus">The modulus.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
                The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsNotIndex(System.Int32)">
            <summary>
                Determines whether this item is not at the specified <paramref name="index" />.
            </summary>
            <param name="index">The index.</param>
            <returns>
                <c>true</c> if this item is not at the specified <paramref name="index" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsNotIndex(System.Int32,System.String)">
            <summary>
                If this item is not at the specified <paramref name="index" />, the HTML encoded <paramref name="valueIfTrue" />
                will be returned; otherwise, <see cref="F:System.String.Empty" />.
            </summary>
            <param name="index">The index.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
                The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsNotIndex(System.Int32,System.String,System.String)">
            <summary>
                If this item is at the specified <paramref name="index" />, the HTML encoded <paramref name="valueIfTrue" /> will
                be returned; otherwise, <paramref name="valueIfFalse" />.
            </summary>
            <param name="index">The index.</param>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
                The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsLast">
            <summary>
                Determines whether this item is the last.
            </summary>
            <returns>
                <c>true</c> if this item is the last; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsLast(System.String)">
            <summary>
                If this item is the last, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise,
                <see cref="F:System.String.Empty" />.
            </summary>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
                The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsLast(System.String,System.String)">
            <summary>
                If this item is the last, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise,
                <paramref name="valueIfFalse" />.
            </summary>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
                The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsNotLast">
            <summary>
                Determines whether this item is not the last.
            </summary>
            <returns>
                <c>true</c> if this item is not the last; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsNotLast(System.String)">
            <summary>
                If this item is not the last, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise,
                <see cref="F:System.String.Empty" />.
            </summary>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
                The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsNotLast(System.String,System.String)">
            <summary>
                If this item is not the last, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise,
                <paramref name="valueIfFalse" />.
            </summary>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
                The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsEven">
            <summary>
                Determines whether this item is at an even index.
            </summary>
            <returns>
                <c>true</c> if this item is at an even index; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsEven(System.String)">
            <summary>
                If this item is at an even index, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise,
                <see cref="F:System.String.Empty" />.
            </summary>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
                The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsEven(System.String,System.String)">
            <summary>
                If this item is at an even index, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise,
                <paramref name="valueIfFalse" />.
            </summary>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
                The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsOdd">
            <summary>
                Determines whether this item is at an odd index.
            </summary>
            <returns>
                <c>true</c> if this item is at an odd index; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsOdd(System.String)">
            <summary>
                If this item is at an odd index, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise,
                <see cref="F:System.String.Empty" />.
            </summary>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <returns>
                The HTML encoded value.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IndexedArrayItem`1.IsOdd(System.String,System.String)">
            <summary>
                If this item is at an odd index, the HTML encoded <paramref name="valueIfTrue" /> will be returned; otherwise,
                <paramref name="valueIfFalse" />.
            </summary>
            <param name="valueIfTrue">The value if <c>true</c>.</param>
            <param name="valueIfFalse">The value if <c>false</c>.</param>
            <returns>
                The HTML encoded value.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent">
            <inheritdoc />
            <summary>
                Represents a published content item.
            </summary>
            <remarks>
                <para>Can be a published document, media or member.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent.Id">
            <summary>
                Gets the unique identifier of the content item.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent.Name">
            <summary>
                Gets the name of the content item for the current culture.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent.UrlSegment">
            <summary>
                Gets the URL segment of the content item for the current culture.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent.SortOrder">
            <summary>
                Gets the sort order of the content item.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent.Level">
            <summary>
                Gets the tree level of the content item.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent.Path">
            <summary>
                Gets the tree path of the content item.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent.TemplateId">
            <summary>
                Gets the identifier of the template to use to render the content item.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent.CreatorId">
            <summary>
                Gets the identifier of the user who created the content item.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent.CreateDate">
            <summary>
                Gets the date the content item was created.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent.WriterId">
            <summary>
                Gets the identifier of the user who last updated the content item.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent.UpdateDate">
            <summary>
                Gets the date the content item was last updated.
            </summary>
            <remarks>
                <para>For published content items, this is also the date the item was published.</para>
                <para>
                    This date is always global to the content item, see CultureDate() for the
                    date each culture was published.
                </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent.Cultures">
            <summary>
                Gets available culture infos.
            </summary>
            <remarks>
                <para>
                    Contains only those culture that are available. For a published content, these are
                    the cultures that are published. For a draft content, those that are 'available' ie
                    have a non-empty content name.
                </para>
                <para>Does not contain the invariant culture.</para>
                // TODO?
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent.ItemType">
            <summary>
                Gets the type of the content item (document, media...).
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent.Parent">
            <summary>
                Gets the parent of the content item.
            </summary>
            <remarks>The parent of root content is <c>null</c>.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent.IsDraft(System.String)">
            <summary>
                Gets a value indicating whether the content is draft.
            </summary>
            <remarks>
                <para>
                    A content is draft when it is the unpublished version of a content, which may
                    have a published version, or not.
                </para>
                <para>
                    When retrieving documents from cache in non-preview mode, IsDraft is always false,
                    as only published documents are returned. When retrieving in preview mode, IsDraft can
                    either be true (document is not published, or has been edited, and what is returned
                    is the edited version) or false (document is published, and has not been edited, and
                    what is returned is the published version).
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent.IsPublished(System.String)">
            <summary>
                Gets a value indicating whether the content is published.
            </summary>
            <remarks>
                <para>A content is published when it has a published version.</para>
                <para>
                    When retrieving documents from cache in non-preview mode, IsPublished is always
                    true, as only published documents are returned. When retrieving in draft mode, IsPublished
                    can either be true (document has a published version) or false (document has no
                    published version).
                </para>
                <para>
                    It is therefore possible for both IsDraft and IsPublished to be true at the same
                    time, meaning that the content is the draft version, and a published version exists.
                </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent.Children">
            <summary>
                Gets the children of the content item that are available for the current culture.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType">
            <summary>
                Represents an <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement" /> type.
            </summary>
            <remarks>
                Instances implementing the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType" /> interface should be
                immutable, ie if the content type changes, then a new instance needs to be created.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType.Key">
            <summary>
                Gets the unique key for the content type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType.Id">
            <summary>
                Gets the content type identifier.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType.Alias">
            <summary>
                Gets the content type alias.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType.ItemType">
            <summary>
                Gets the content item type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType.CompositionAliases">
            <summary>
                Gets the aliases of the content types participating in the composition.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType.Variations">
            <summary>
                Gets the content variations of the content type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType.IsElement">
            <summary>
                Gets a value indicating whether this content type is for an element.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType.PropertyTypes">
            <summary>
                Gets the content type properties.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType.GetPropertyIndex(System.String)">
            <summary>
                Gets a property type index.
            </summary>
            <remarks>The alias is case-insensitive. This is the only place where alias strings are compared.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType.GetPropertyType(System.String)">
            <summary>
                Gets a property type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType.GetPropertyType(System.Int32)">
            <summary>
                Gets a property type.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentTypeFactory">
            <summary>
                Creates published content types.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentTypeFactory.CreateContentType(Umbraco.Cms.Core.Models.IContentTypeComposition)">
            <summary>
                Creates a published content type.
            </summary>
            <param name="contentType">An content type.</param>
            <returns>A published content type corresponding to the item type and content type.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentTypeFactory.CreatePropertyType(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType,Umbraco.Cms.Core.Models.IPropertyType)">
            <summary>
                Creates a published property type.
            </summary>
            <param name="contentType">The published content type owning the property.</param>
            <param name="propertyType">A property type.</param>
            <remarks>Is used by <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentType" /> constructor to create property types.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentTypeFactory.CreatePropertyType(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType,System.String,System.Int32,Umbraco.Cms.Core.Models.ContentVariation)">
            <summary>
                Creates a published property type.
            </summary>
            <param name="contentType">The published content type owning the property.</param>
            <param name="propertyTypeAlias">The property type alias.</param>
            <param name="dataTypeId">The datatype identifier.</param>
            <param name="variations">The variations.</param>
            <remarks>Is used by <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentType" /> constructor to create special property types.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentTypeFactory.CreateCorePropertyType(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType,System.String,System.Int32,Umbraco.Cms.Core.Models.ContentVariation)">
            <summary>
                Creates a core (non-user) published property type.
            </summary>
            <param name="contentType">The published content type owning the property.</param>
            <param name="propertyTypeAlias">The property type alias.</param>
            <param name="dataTypeId">The datatype identifier.</param>
            <param name="variations">The variations.</param>
            <remarks>Is used by <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentType" /> constructor to create special property types.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentTypeFactory.GetDataType(System.Int32)">
            <summary>
                Gets a published datatype.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentTypeFactory.NotifyDataTypeChanges(System.Int32[])">
            <summary>
                Notifies the factory of datatype changes.
            </summary>
            <remarks>
                <para>This is so the factory can flush its caches.</para>
                <para>Invoked by the IPublishedSnapshotService.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement">
            <summary>
                Represents a published element.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement.ContentType">
            <summary>
                Gets the content type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement.Key">
            <summary>
                Gets the unique key of the published element.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement.Properties">
            <summary>
                Gets the properties of the element.
            </summary>
            <remarks>
                Contains one <c>IPublishedProperty</c> for each property defined for the content type, including
                inherited properties. Some properties may have no value.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement.GetProperty(System.String)">
            <summary>
                Gets a property identified by its alias.
            </summary>
            <param name="alias">The property alias.</param>
            <returns>The property identified by the alias.</returns>
            <remarks>
                <para>If the content type has no property with that alias, including inherited properties, returns <c>null</c>,</para>
                <para>otherwise return a property -- that may have no value (ie <c>HasValue</c> is <c>false</c>).</para>
                <para>The alias is case-insensitive.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedModelFactory">
            <summary>
                Provides the published model creation service.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedModelFactory.CreateModel(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement)">
            <summary>
                Creates a strongly-typed model representing a published element.
            </summary>
            <param name="element">The original published element.</param>
            <returns>
                The strongly-typed model representing the published element,
                or the published element itself it the factory has no model for the corresponding element type.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedModelFactory.CreateModelList(System.String)">
            <summary>
                Creates a List{T} of a strongly-typed model for a model type alias.
            </summary>
            <param name="alias">The model type alias.</param>
            <returns>
                A List{T} of the strongly-typed model, exposed as an IList.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedModelFactory.GetModelType(System.String)">
            <summary>
                Gets the Type of a strongly-typed model for a model type alias.
            </summary>
            <param name="alias">The model type alias.</param>
            <returns>
                The type of the strongly-typed model.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedModelFactory.MapModelType(System.Type)">
            <summary>
                Maps a CLR type that may contain model types, to an actual CLR type.
            </summary>
            <param name="type">The CLR type.</param>
            <returns>
                The actual CLR type.
            </returns>
            <remarks>
                See <seealso cref="T:Umbraco.Cms.Core.Models.PublishedContent.ModelType" /> for more details.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedProperty">
            <summary>
                Represents a property of an <c>IPublishedElement</c>.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedProperty.Alias">
            <summary>
                Gets the alias of the property.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedProperty.HasValue(System.String,System.String)">
            <summary>
                Gets a value indicating whether the property has a value.
            </summary>
            <remarks>
                <para>
                    This is somewhat implementation-dependent -- depending on whatever IPublishedCache considers
                    a missing value.
                </para>
                <para>
                    The XmlPublishedCache raw values are strings, and it will consider missing, null or empty (and
                    that includes whitespace-only) strings as "no value".
                </para>
                <para>
                    Other caches that get their raw value from the database would consider that a property has "no
                    value" if it is missing, null, or an empty string (including whitespace-only).
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedProperty.GetSourceValue(System.String,System.String)">
            <summary>
                Gets the source value of the property.
            </summary>
            <remarks>
                <para>
                    The source value is whatever was passed to the property when it was instantiated, and it is
                    somewhat implementation-dependent -- depending on how the IPublishedCache is implemented.
                </para>
                <para>The XmlPublishedCache source values are strings exclusively since they come from the Xml cache.</para>
                <para>
                    For other caches that get their source value from the database, it would be either a string,
                    an integer (Int32), a date and time (DateTime) or a decimal (double).
                </para>
                <para>
                    If you're using that value, you're probably wrong, unless you're doing some internal
                    Umbraco stuff.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedProperty.GetValue(System.String,System.String)">
            <summary>
                Gets the object value of the property.
            </summary>
            <remarks>
                <para>The value is what you want to use when rendering content in an MVC view ie in C#.</para>
                <para>It can be null, or any type of CLR object.</para>
                <para>It has been fully prepared and processed by the appropriate converter.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedProperty.GetDeliveryApiValue(System.Boolean,System.String,System.String)">
            <summary>
                Gets the object value of the property for Delivery API representation.
            </summary>
            <remarks>
                <para>The value is what you want to use when rendering content through the Delivery API.</para>
                <para>It can be null, or any type of CLR object.</para>
                <para>It has been fully prepared and processed by the appropriate converter.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType">
            <summary>
                Represents a published property type.
            </summary>
            <remarks>
                Instances implementing the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyType" /> interface should be
                immutable, ie if the property type changes, then a new instance needs to be created.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType.ContentType">
            <summary>
                Gets the published content type containing the property type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType.DataType">
            <summary>
                Gets the data type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType.Alias">
            <summary>
                Gets property type alias.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType.EditorAlias">
            <summary>
                Gets the property editor alias.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType.EditorUiAlias">
            <summary>
                Gets the property editor UI alias.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType.IsUserProperty">
            <summary>
                Gets a value indicating whether the property is a user content property.
            </summary>
            <remarks>
                A non-user content property is a property that has been added to a
                published content type by Umbraco but does not corresponds to a user-defined
                published property.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType.Variations">
            <summary>
                Gets the content variations of the property type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType.CacheLevel">
            <summary>
                Gets the property cache level.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType.DeliveryApiCacheLevel">
            <summary>
                Gets the property cache level for Delivery API representation.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType.DeliveryApiCacheLevelForExpansion">
            <summary>
                Gets the property cache level for Delivery API representation when expanding the property.
            </summary>
            <remarks>Defaults to the value of <see cref="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType.DeliveryApiCacheLevel"/>.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType.ModelClrType">
            <summary>
                Gets the property model CLR type.
            </summary>
            <remarks>
                <para>The model CLR type may be a <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.ModelType" /> type, or may contain <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.ModelType" /> types.</para>
                <para>For the actual CLR type, see <see cref="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType.ClrType" />.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType.DeliveryApiModelClrType">
            <summary>
                Gets the property model Delivery Api CLR type.
            </summary>
            <remarks>
                <para>The model CLR type may be a <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.ModelType" /> type, or may contain <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.ModelType" /> types.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType.ClrType">
            <summary>
                Gets the property CLR type.
            </summary>
            <remarks>
                <para>Returns the actual CLR type which does not contain <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.ModelType" /> types.</para>
                <para>
                    Mapping from <see cref="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType.ModelClrType" /> may throw if some <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.ModelType" /> instances
                    could not be mapped to actual CLR types.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType.IsValue(System.Object,Umbraco.Cms.Core.PropertyEditors.PropertyValueLevel)">
            <summary>
                Determines whether a value is an actual value, or not a value.
            </summary>
            <remarks>Used by property.HasValue and, for instance, in fallback scenarios.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType.ConvertSourceToInter(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,System.Object,System.Boolean)">
            <summary>
                Converts the source value into the intermediate value.
            </summary>
            <param name="owner">The published element owning the property.</param>
            <param name="source">The source value.</param>
            <param name="preview">A value indicating whether content should be considered draft.</param>
            <returns>The intermediate value.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType.ConvertInterToObject(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,Umbraco.Cms.Core.PropertyEditors.PropertyCacheLevel,System.Object,System.Boolean)">
            <summary>
                Converts the intermediate value into the object value.
            </summary>
            <param name="owner">The published element owning the property.</param>
            <param name="referenceCacheLevel">The reference cache level.</param>
            <param name="inter">The intermediate value.</param>
            <param name="preview">A value indicating whether content should be considered draft.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType.ConvertInterToDeliveryApiObject(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,Umbraco.Cms.Core.PropertyEditors.PropertyCacheLevel,System.Object,System.Boolean,System.Boolean)">
            <summary>
                Converts the intermediate value into the object value for Delivery API representation.
            </summary>
            <param name="owner">The published element owning the property.</param>
            <param name="referenceCacheLevel">The reference cache level.</param>
            <param name="inter">The intermediate value.</param>
            <param name="preview">A value indicating whether content should be considered draft.</param>
            <param name="expanding">A value indicating whether the property value should be expanded.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedValueFallback">
            <summary>
                Provides a fallback strategy for getting <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement" /> values.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedValueFallback.TryGetValue(Umbraco.Cms.Core.Models.PublishedContent.IPublishedProperty,System.String,System.String,Umbraco.Cms.Core.Models.PublishedContent.Fallback,System.Object,System.Object@)">
            <summary>
                Tries to get a fallback value for a property.
            </summary>
            <param name="property">The property.</param>
            <param name="culture">The requested culture.</param>
            <param name="segment">The requested segment.</param>
            <param name="fallback">A fallback strategy.</param>
            <param name="defaultValue">An optional default value.</param>
            <param name="value">The fallback value.</param>
            <returns>A value indicating whether a fallback value could be provided.</returns>
            <remarks>
                <para>
                    This method is called whenever property.Value(culture, segment, defaultValue) is called, and
                    property.HasValue(culture, segment) is false.
                </para>
                <para>It can only fallback at property level (no recurse).</para>
                <para>
                    At property level, property.GetValue() does *not* implement fallback, and one has to
                    get property.Value() or property.Value{T}() to trigger fallback.
                </para>
                <para>
                    Note that <paramref name="culture" /> and <paramref name="segment" /> may not be contextualized,
                    so the variant context should be used to contextualize them (see our default implementation in
                    the web project.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedValueFallback.TryGetValue``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedProperty,System.String,System.String,Umbraco.Cms.Core.Models.PublishedContent.Fallback,``0,``0@)">
            <summary>
                Tries to get a fallback value for a property.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="property">The property.</param>
            <param name="culture">The requested culture.</param>
            <param name="segment">The requested segment.</param>
            <param name="fallback">A fallback strategy.</param>
            <param name="defaultValue">An optional default value.</param>
            <param name="value">The fallback value.</param>
            <returns>A value indicating whether a fallback value could be provided.</returns>
            <remarks>
                <para>
                    This method is called whenever property.Value{T}(culture, segment, defaultValue) is called, and
                    property.HasValue(culture, segment) is false.
                </para>
                <para>It can only fallback at property level (no recurse).</para>
                <para>
                    At property level, property.GetValue() does *not* implement fallback, and one has to
                    get property.Value() or property.Value{T}() to trigger fallback.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedValueFallback.TryGetValue(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,System.String,System.String,System.String,Umbraco.Cms.Core.Models.PublishedContent.Fallback,System.Object,System.Object@)">
            <summary>
                Tries to get a fallback value for a published element property.
            </summary>
            <param name="content">The published element.</param>
            <param name="alias">The property alias.</param>
            <param name="culture">The requested culture.</param>
            <param name="segment">The requested segment.</param>
            <param name="fallback">A fallback strategy.</param>
            <param name="defaultValue">An optional default value.</param>
            <param name="value">The fallback value.</param>
            <returns>A value indicating whether a fallback value could be provided.</returns>
            <remarks>
                <para>
                    This method is called whenever getting the property value for the specified alias, culture and
                    segment, either returned no property at all, or a property with HasValue(culture, segment) being false.
                </para>
                <para>It can only fallback at element level (no recurse).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedValueFallback.TryGetValue``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,System.String,System.String,System.String,Umbraco.Cms.Core.Models.PublishedContent.Fallback,``0,``0@)">
            <summary>
                Tries to get a fallback value for a published element property.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="content">The published element.</param>
            <param name="alias">The property alias.</param>
            <param name="culture">The requested culture.</param>
            <param name="segment">The requested segment.</param>
            <param name="fallback">A fallback strategy.</param>
            <param name="defaultValue">An optional default value.</param>
            <param name="value">The fallback value.</param>
            <returns>A value indicating whether a fallback value could be provided.</returns>
            <remarks>
                <para>
                    This method is called whenever getting the property value for the specified alias, culture and
                    segment, either returned no property at all, or a property with HasValue(culture, segment) being false.
                </para>
                <para>It can only fallback at element level (no recurse).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedValueFallback.TryGetValue(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String,System.String,System.String,Umbraco.Cms.Core.Models.PublishedContent.Fallback,System.Object,System.Object@,Umbraco.Cms.Core.Models.PublishedContent.IPublishedProperty@)">
            <summary>
                Tries to get a fallback value for a published content property.
            </summary>
            <param name="content">The published element.</param>
            <param name="alias">The property alias.</param>
            <param name="culture">The requested culture.</param>
            <param name="segment">The requested segment.</param>
            <param name="fallback">A fallback strategy.</param>
            <param name="defaultValue">An optional default value.</param>
            <param name="value">The fallback value.</param>
            <param name="noValueProperty">The property that does not have a value.</param>
            <returns>A value indicating whether a fallback value could be provided.</returns>
            <remarks>
                <para>
                    This method is called whenever getting the property value for the specified alias, culture and
                    segment, either returned no property at all, or a property with HasValue(culture, segment) being false.
                </para>
                <para>
                    In an <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent" />, because walking up the tree is possible, the content itself may not
                    even
                    have a property with the specified alias, but such a property may exist up in the tree. The
                    <paramref name="noValueProperty" />
                    parameter is used to return a property with no value. That can then be used to invoke a converter and get the
                    converter's interpretation of "no value".
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedValueFallback.TryGetValue``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String,System.String,System.String,Umbraco.Cms.Core.Models.PublishedContent.Fallback,``0,``0@,Umbraco.Cms.Core.Models.PublishedContent.IPublishedProperty@)">
            <summary>
                Tries to get a fallback value for a published content property.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="content">The published element.</param>
            <param name="alias">The property alias.</param>
            <param name="culture">The requested culture.</param>
            <param name="segment">The requested segment.</param>
            <param name="fallback">A fallback strategy.</param>
            <param name="defaultValue">An optional default value.</param>
            <param name="value">The fallback value.</param>
            <param name="noValueProperty">The property that does not have a value.</param>
            <returns>A value indicating whether a fallback value could be provided.</returns>
            <remarks>
                <para>
                    This method is called whenever getting the property value for the specified alias, culture and
                    segment, either returned no property at all, or a property with HasValue(culture, segment) being false.
                </para>
                <para>
                    In an <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent" />, because walking up the tree is possible, the content itself may not
                    even
                    have a property with the specified alias, but such a property may exist up in the tree. The
                    <paramref name="noValueProperty" />
                    parameter is used to return a property with no value. That can then be used to invoke a converter and get the
                    converter's interpretation of "no value".
                </para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.IVariationContextAccessor">
            <summary>
                Gives access to the current <see cref="P:Umbraco.Cms.Core.Models.PublishedContent.IVariationContextAccessor.VariationContext" />.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.IVariationContextAccessor.VariationContext">
            <summary>
                Gets or sets the current <see cref="P:Umbraco.Cms.Core.Models.PublishedContent.IVariationContextAccessor.VariationContext" />.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.ModelType">
            <inheritdoc />
            <summary>
                Represents the CLR type of a model.
            </summary>
            <example>
                ModelType.For("alias")
                typeof (IEnumerable{}).MakeGenericType(ModelType.For("alias"))
                Model.For("alias").MakeArrayType()
            </example>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.ModelType.ContentTypeAlias">
            <summary>
                Gets the content type alias.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.ModelType.UnderlyingSystemType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.ModelType.BaseType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.ModelType.Name">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.ModelType.GUID">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.ModelType.Module">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.ModelType.Assembly">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.ModelType.FullName">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.ModelType.Namespace">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.ModelType.AssemblyQualifiedName">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.For(System.String)">
            <summary>
                Gets the model type for a published element type.
            </summary>
            <param name="alias">The published element type alias.</param>
            <returns>The model type for the published element type.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.ToString">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.Map(System.Type,System.Collections.Generic.Dictionary{System.String,System.Type})">
            <summary>
                Gets the actual CLR type by replacing model types, if any.
            </summary>
            <param name="type">The type.</param>
            <param name="modelTypes">The model types map.</param>
            <returns>The actual CLR type.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.MapToName(System.Type,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                Gets the actual CLR type name by replacing model types, if any.
            </summary>
            <param name="type">The type.</param>
            <param name="map">The model types map.</param>
            <returns>The actual CLR type name.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.Equals(System.Type,System.Type)">
            <summary>
                Gets a value indicating whether two <see cref="T:System.Type" /> instances are equal.
            </summary>
            <param name="t1">The first instance.</param>
            <param name="t2">The second instance.</param>
            <returns>A value indicating whether the two instances are equal.</returns>
            <remarks>Knows how to compare <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.ModelType" /> instances.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.GetConstructors(System.Reflection.BindingFlags)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.GetInterfaces">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.GetAttributeFlagsImpl">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.GetInterface(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.GetEvents(System.Reflection.BindingFlags)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.GetEvent(System.String,System.Reflection.BindingFlags)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.GetNestedTypes(System.Reflection.BindingFlags)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.GetNestedType(System.String,System.Reflection.BindingFlags)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.GetProperties(System.Reflection.BindingFlags)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.GetMethods(System.Reflection.BindingFlags)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.GetFields(System.Reflection.BindingFlags)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.GetField(System.String,System.Reflection.BindingFlags)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.GetMembers(System.Reflection.BindingFlags)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.GetCustomAttributes(System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.GetCustomAttributes(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.IsDefined(System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.GetElementType">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.HasElementTypeImpl">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.IsArrayImpl">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.IsByRefImpl">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.IsPointerImpl">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.IsPrimitiveImpl">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.IsCOMObjectImpl">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.ModelType.MakeArrayType">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.ModelTypeArrayType">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.NoopPublishedModelFactory">
            <inheritdoc />
            <summary>Represents a no-operation factory.</summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.NoopPublishedModelFactory.CreateModel(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.NoopPublishedModelFactory.CreateModelList(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.NoopPublishedModelFactory.GetModelType(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.NoopPublishedModelFactory.MapModelType(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.NoopPublishedValueFallback">
            <summary>
                Provides a noop implementation for <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedValueFallback" />.
            </summary>
            <remarks>
                <para>This is for tests etc - does not implement fallback at all.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.NoopPublishedValueFallback.TryGetValue(Umbraco.Cms.Core.Models.PublishedContent.IPublishedProperty,System.String,System.String,Umbraco.Cms.Core.Models.PublishedContent.Fallback,System.Object,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.NoopPublishedValueFallback.TryGetValue``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedProperty,System.String,System.String,Umbraco.Cms.Core.Models.PublishedContent.Fallback,``0,``0@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.NoopPublishedValueFallback.TryGetValue(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,System.String,System.String,System.String,Umbraco.Cms.Core.Models.PublishedContent.Fallback,System.Object,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.NoopPublishedValueFallback.TryGetValue``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,System.String,System.String,System.String,Umbraco.Cms.Core.Models.PublishedContent.Fallback,``0,``0@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.NoopPublishedValueFallback.TryGetValue(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String,System.String,System.String,Umbraco.Cms.Core.Models.PublishedContent.Fallback,System.Object,System.Object@,Umbraco.Cms.Core.Models.PublishedContent.IPublishedProperty@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.NoopPublishedValueFallback.TryGetValue``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String,System.String,System.String,Umbraco.Cms.Core.Models.PublishedContent.Fallback,``0,``0@,Umbraco.Cms.Core.Models.PublishedContent.IPublishedProperty@)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentBase">
            <summary>
            Provide an abstract base class for <c>IPublishedContent</c> implementations.
            </summary>
            <remarks>This base class does which (a) consistently resolves and caches the URL, (b) provides an implementation
            for this[alias], and (c) provides basic content set management.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentBase.Key">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentBase.Id">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentBase.Name">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentBase.UrlSegment">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentBase.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentBase.Level">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentBase.Path">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentBase.TemplateId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentBase.CreatorId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentBase.CreateDate">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentBase.WriterId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentBase.UpdateDate">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentBase.Cultures">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentBase.ItemType">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentBase.IsDraft(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentBase.IsPublished(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentBase.Parent">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentBase.Children">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentBase.Properties">
            <inheritdoc cref="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement.Properties"/>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentBase.GetProperty(System.String)">
            <inheritdoc cref="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement.GetProperty(System.String)"/>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentModel">
            <summary>
                Represents a strongly-typed published content.
            </summary>
            <remarks>
                Every strongly-typed published content class should inherit from <c>PublishedContentModel</c>
                (or inherit from a class that inherits from... etc.) so they are picked by the factory.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentModel.#ctor(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Models.PublishedContent.IPublishedValueFallback)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentModel" /> class with
                an original <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent" /> instance.
            </summary>
            <param name="content">The original content.</param>
            <param name="publishedValueFallback">the PublishedValueFallback</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentType">
            <summary>
            Represents an <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement"/> type.
            </summary>
            <remarks>Instances of the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentType"/> class are immutable, ie
            if the content type changes, then a new class needs to be created.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentType.#ctor(Umbraco.Cms.Core.Models.IContentTypeComposition,Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentTypeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentType"/> class with a content type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentType.#ctor(System.Guid,System.Int32,System.String,Umbraco.Cms.Core.Models.PublishedContent.PublishedItemType,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyType},Umbraco.Cms.Core.Models.ContentVariation,System.Boolean)">
            <summary>
            This constructor is for tests and is not intended to be used directly from application code.
            </summary>
            <remarks>
            <para>Values are assumed to be consistent and are not checked.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentType.#ctor(System.Guid,System.Int32,System.String,Umbraco.Cms.Core.Models.PublishedContent.PublishedItemType,System.Collections.Generic.IEnumerable{System.String},System.Func{Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType}},Umbraco.Cms.Core.Models.ContentVariation,System.Boolean)">
            <summary>
            This constructor is for tests and is not intended to be used directly from application code.
            </summary>
            <remarks>
            <para>Values are assumed to be consistent and are not checked.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentType.Key">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentType.Id">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentType.Alias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentType.ItemType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentType.CompositionAliases">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentType.Variations">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentType.PropertyTypes">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentType.GetPropertyIndex(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentType.GetPropertyType(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentType.GetPropertyType(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentType.IsElement">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentTypeFactory">
            <summary>
                Provides a default implementation for <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentTypeFactory" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentTypeFactory.CreateContentType(Umbraco.Cms.Core.Models.IContentTypeComposition)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentTypeFactory.CreatePropertyType(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType,Umbraco.Cms.Core.Models.IPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentTypeFactory.CreatePropertyType(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType,System.String,System.Int32,Umbraco.Cms.Core.Models.ContentVariation)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentTypeFactory.CreateCorePropertyType(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType,System.String,System.Int32,Umbraco.Cms.Core.Models.ContentVariation)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentTypeFactory.GetDataType(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentTypeFactory.NotifyDataTypeChanges(System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentTypeFactory.CreateContentType(System.Guid,System.Int32,System.String,System.Func{Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType}},Umbraco.Cms.Core.Models.ContentVariation,System.Boolean)">
            <summary>
                This method is for tests and is not intended to be used directly from application code.
            </summary>
            <remarks>Values are assumed to be consisted and are not checked.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentTypeFactory.CreateContentType(System.Guid,System.Int32,System.String,System.Collections.Generic.IEnumerable{System.String},System.Func{Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType}},Umbraco.Cms.Core.Models.ContentVariation,System.Boolean)">
            <summary>
                This method is for tests and is not intended to be used directly from application code.
            </summary>
            <remarks>Values are assumed to be consisted and are not checked.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentTypeFactory.CreatePropertyType(System.String,System.Int32,System.Boolean,Umbraco.Cms.Core.Models.ContentVariation)">
            <summary>
                This method is for tests and is not intended to be used directly from application code.
            </summary>
            <remarks>Values are assumed to be consisted and are not checked.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped">
            <summary>
                Provides an abstract base class for <c>IPublishedContent</c> implementations that
                wrap and extend another <c>IPublishedContent</c>.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped.#ctor(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Models.PublishedContent.IPublishedValueFallback)">
            <summary>
                Initialize a new instance of the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped" /> class
                with an <c>IPublishedContent</c> instance to wrap.
            </summary>
            <param name="content">The content to wrap.</param>
            <param name="publishedValueFallback">The published value fallback.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped.ContentType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped.Key">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped.Id">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped.Unwrap">
            <summary>
                Gets the wrapped content.
            </summary>
            <returns>The wrapped content, that was passed as an argument to the constructor.</returns>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped.Name">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped.UrlSegment">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped.Level">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped.Path">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped.TemplateId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped.CreatorId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped.CreateDate">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped.WriterId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped.UpdateDate">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped.Cultures">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped.ItemType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped.Parent">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped.IsDraft(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped.IsPublished(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped.Children">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped.Properties">
            <inheritdoc cref="P:Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement.Properties" />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedContentWrapped.GetProperty(System.String)">
            <inheritdoc cref="M:Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement.GetProperty(System.String)" />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedCultureInfo">
            <summary>
                Contains culture specific values for <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedCultureInfo.#ctor(System.String,System.String,System.String,System.DateTime)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedCultureInfo" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedCultureInfo.Culture">
            <summary>
                Gets the culture.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedCultureInfo.Name">
            <summary>
                Gets the name of the item.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedCultureInfo.UrlSegment">
            <summary>
                Gets the URL segment of the item.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedCultureInfo.Date">
            <summary>
                Gets the date associated with the culture.
            </summary>
            <remarks>
                <para>
                    For published culture, this is the date the culture was published. For draft
                    cultures, this is the date the culture was made available, ie the last time its
                    name changed.
                </para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedDataType">
            <summary>
                Represents a published data type.
            </summary>
            <remarks>
                <para>
                    Instances of the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedDataType" /> class are immutable, ie
                    if the data type changes, then a new class needs to be created.
                </para>
                <para>These instances should be created by an <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentTypeFactory" />.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedDataType.#ctor(System.Int32,System.String,System.String,System.Lazy{System.Object})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedDataType" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedDataType.Id">
            <summary>
                Gets the datatype identifier.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedDataType.EditorAlias">
            <summary>
                Gets the data type editor alias.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedDataType.EditorUiAlias">
            <summary>
                Gets the data type editor UI alias.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedDataType.ConfigurationObject">
            <summary>
                Gets the data type configuration object.
            </summary>
            <seealso cref="P:Umbraco.Cms.Core.Models.IDataType.ConfigurationObject"/>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedDataType.ConfigurationAs``1">
            <summary>
                Gets the configuration object.
            </summary>
            <typeparam name="T">The expected type of the configuration object.</typeparam>
            <exception cref="T:System.InvalidCastException">When the datatype configuration is not of the expected type.</exception>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedElementModel">
            <inheritdoc />
            <summary>
                Represents a strongly-typed published element.
            </summary>
            <remarks>
                Every strongly-typed property set class should inherit from <c>PublishedElementModel</c>
                (or inherit from a class that inherits from... etc.) so they are picked by the factory.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedElementModel.#ctor(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,Umbraco.Cms.Core.Models.PublishedContent.IPublishedValueFallback)">
            <inheritdoc />
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedElementModel" /> class with
                an original <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement" /> instance.
            </summary>
            <param name="content">The original content.</param>
            <param name="publishedValueFallback">The published value fallback.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedElementWrapped">
            <summary>
                Provides an abstract base class for <c>IPublishedElement</c> implementations that
                wrap and extend another <c>IPublishedElement</c>.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedElementWrapped.#ctor(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,Umbraco.Cms.Core.Models.PublishedContent.IPublishedValueFallback)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedElementWrapped" /> class
                with an <c>IPublishedElement</c> instance to wrap.
            </summary>
            <param name="content">The content to wrap.</param>
            <param name="publishedValueFallback">The published value fallback.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedElementWrapped.ContentType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedElementWrapped.Key">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedElementWrapped.Properties">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedElementWrapped.GetProperty(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedElementWrapped.Unwrap">
            <summary>
                Gets the wrapped content.
            </summary>
            <returns>The wrapped content, that was passed as an argument to the constructor.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedItemType">
            <summary>
                The type of published element.
            </summary>
            <remarks>Can be a simple element, or a document, a media, a member.</remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PublishedContent.PublishedItemType.Unknown">
            <summary>
                Unknown.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PublishedContent.PublishedItemType.Element">
            <summary>
                An element.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PublishedContent.PublishedItemType.Content">
            <summary>
                A document.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PublishedContent.PublishedItemType.Media">
            <summary>
                A media.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PublishedContent.PublishedItemType.Member">
            <summary>
                A member.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedModelAttribute">
            <inheritdoc />
            <summary>
                Indicates that the class is a published content model for a specified content type.
            </summary>
            <remarks>
                By default, the name of the class is assumed to be the content type alias. The
                <c>PublishedContentModelAttribute</c> can be used to indicate a different alias.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedModelAttribute.#ctor(System.String)">
            <inheritdoc />
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedModelAttribute" /> class with a content type alias.
            </summary>
            <param name="contentTypeAlias">The content type alias.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedModelAttribute.ContentTypeAlias">
            <summary>
                Gets or sets the content type alias.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedModelFactory">
            <summary>
                Implements a strongly typed content model factory
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedModelFactory.#ctor(System.Collections.Generic.IEnumerable{System.Type},Umbraco.Cms.Core.Models.PublishedContent.IPublishedValueFallback)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedModelFactory" /> class with types.
            </summary>
            <param name="types">The model types.</param>
            <param name="publishedValueFallback"></param>
            <remarks>
                <para>
                    Types must implement <c>IPublishedContent</c> and have a unique constructor that
                    accepts one IPublishedContent as a parameter.
                </para>
                <para>To activate,</para>
                <code>
            var types = TypeLoader.Current.GetTypes{PublishedContentModel}();
            var factory = new PublishedContentModelFactoryImpl(types);
            PublishedContentModelFactoryResolver.Current.SetFactory(factory);
            </code>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedModelFactory.CreateModel(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedModelFactory.CreateModelList(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedModelFactory.GetModelType(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedModelFactory.MapModelType(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyBase">
            <summary>
                Provides a base class for <c>IPublishedProperty</c> implementations which converts and caches
                the value source to the actual value to use when rendering content.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyBase.#ctor(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType,Umbraco.Cms.Core.PropertyEditors.PropertyCacheLevel)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyBase" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyBase.ReferenceCacheLevel">
            <summary>
                Gets the property reference cache level.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyBase.PropertyType">
            <summary>
                Gets the property type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyBase.Alias">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyBase.HasValue(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyBase.GetSourceValue(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyBase.GetValue(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyBase.GetDeliveryApiValue(System.Boolean,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyType">
            <summary>
            Represents a published property type.
            </summary>
            <remarks>Instances of the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyType"/> class are immutable, ie
            if the property type changes, then a new class needs to be created.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyType.#ctor(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType,Umbraco.Cms.Core.Models.IPropertyType,Umbraco.Cms.Core.PropertyEditors.PropertyValueConverterCollection,Umbraco.Cms.Core.Models.PublishedContent.IPublishedModelFactory,Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentTypeFactory)">
            <summary>
            Initialize a new instance of the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyType"/> class with a property type.
            </summary>
            <remarks>
            <para>The new published property type belongs to the published content type.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyType.#ctor(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType,System.String,System.Int32,System.Boolean,Umbraco.Cms.Core.Models.ContentVariation,Umbraco.Cms.Core.PropertyEditors.PropertyValueConverterCollection,Umbraco.Cms.Core.Models.PublishedContent.IPublishedModelFactory,Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentTypeFactory)">
            <summary>
            This constructor is for tests and is not intended to be used directly from application code.
            </summary>
            <remarks>
            <para>Values are assumed to be consisted and are not checked.</para>
            <para>The new published property type belongs to the published content type.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyType.#ctor(System.String,System.Int32,System.Boolean,Umbraco.Cms.Core.Models.ContentVariation,Umbraco.Cms.Core.PropertyEditors.PropertyValueConverterCollection,Umbraco.Cms.Core.Models.PublishedContent.IPublishedModelFactory,Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentTypeFactory)">
            <summary>
            This constructor is for tests and is not intended to be used directly from application code.
            </summary>
            <remarks>
            <para>Values are assumed to be consistent and are not checked.</para>
            <para>The new published property type does not belong to a published content type.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyType.ContentType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyType.DataType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyType.Alias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyType.EditorAlias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyType.EditorUiAlias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyType.IsUserProperty">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyType.Variations">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyType.IsValue(System.Object,Umbraco.Cms.Core.PropertyEditors.PropertyValueLevel)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyType.CacheLevel">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyType.DeliveryApiCacheLevel">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyType.DeliveryApiCacheLevelForExpansion">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyType.ConvertSourceToInter(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyType.ConvertInterToObject(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,Umbraco.Cms.Core.PropertyEditors.PropertyCacheLevel,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyType.ConvertInterToDeliveryApiObject(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,Umbraco.Cms.Core.PropertyEditors.PropertyCacheLevel,System.Object,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyType.ModelClrType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyType.DeliveryApiModelClrType">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.PublishedPropertyType.ClrType">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedValueFallback">
            <summary>
                Provides a default implementation for <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedValueFallback" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedValueFallback.#ctor(Umbraco.Cms.Core.Services.ServiceContext,Umbraco.Cms.Core.Models.PublishedContent.IVariationContextAccessor)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.PublishedValueFallback" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedValueFallback.TryGetValue(Umbraco.Cms.Core.Models.PublishedContent.IPublishedProperty,System.String,System.String,Umbraco.Cms.Core.Models.PublishedContent.Fallback,System.Object,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedValueFallback.TryGetValue``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedProperty,System.String,System.String,Umbraco.Cms.Core.Models.PublishedContent.Fallback,``0,``0@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedValueFallback.TryGetValue(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,System.String,System.String,System.String,Umbraco.Cms.Core.Models.PublishedContent.Fallback,System.Object,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedValueFallback.TryGetValue``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,System.String,System.String,System.String,Umbraco.Cms.Core.Models.PublishedContent.Fallback,``0,``0@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedValueFallback.TryGetValue(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String,System.String,System.String,Umbraco.Cms.Core.Models.PublishedContent.Fallback,System.Object,System.Object@,Umbraco.Cms.Core.Models.PublishedContent.IPublishedProperty@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.PublishedValueFallback.TryGetValue``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String,System.String,System.String,Umbraco.Cms.Core.Models.PublishedContent.Fallback,``0,``0@,Umbraco.Cms.Core.Models.PublishedContent.IPublishedProperty@)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.RawValueProperty">
            <inheritdoc />
            <summary>
                Represents a published property that has a unique invariant-neutral value
                and caches conversion results locally.
            </summary>
            <remarks>
                <para>
                    Conversions results are stored within the property and will not
                    be refreshed, so this class is not suitable for cached properties.
                </para>
                <para>
                    Does not support variations: the ctor throws if the property type
                    supports variations.
                </para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.ThreadCultureVariationContextAccessor">
            <summary>
                Provides a CurrentUICulture-based implementation of <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IVariationContextAccessor" />.
            </summary>
            <remarks>
                <para>This accessor does not support segments. There is no need to set the current context.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.UrlMode">
            <summary>
                Specifies the type of URLs that the URL provider should produce, Auto is the default.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PublishedContent.UrlMode.Default">
            <summary>
                Indicates that the URL provider should do what it has been configured to do.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PublishedContent.UrlMode.Relative">
            <summary>
                Indicates that the URL provider should produce relative URLs exclusively.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PublishedContent.UrlMode.Absolute">
            <summary>
                Indicates that the URL provider should produce absolute URLs exclusively.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PublishedContent.UrlMode.Auto">
            <summary>
                Indicates that the URL provider should determine automatically whether to return relative or absolute URLs.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedContent.VariationContext">
            <summary>
                Represents the variation context.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.VariationContext.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.VariationContext" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.VariationContext.Culture">
            <summary>
                Gets the culture.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedContent.VariationContext.Segment">
            <summary>
                Gets the segment.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.PublishedContent.VariationContext.GetSegment(System.Int32)">
            <summary>
                Gets the segment for the content item
            </summary>
            <param name="contentId"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedDocumentUrlSegment">
            <summary>
            Represents a URL segment for a published document.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedDocumentUrlSegment.DocumentKey">
            <summary>
            Gets or sets the document key.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedDocumentUrlSegment.LanguageId">
            <summary>
            Gets or sets the language Id.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedDocumentUrlSegment.UrlSegment">
            <summary>
            Gets or sets the URL segment string.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedDocumentUrlSegment.IsDraft">
            <summary>
            Gets or sets a value indicating whether the URL segment is for a draft.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.PublishedDocumentUrlSegment.IsPrimary">
            <summary>
            Gets or sets a value indicating whether the URL segment is the primary one (first resolved from the collection of URL providers).
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishedState">
            <summary>
                The states of a content item.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PublishedState.Published">
            <summary>
                The content item is published.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PublishedState.Unpublished">
            <summary>
                The content item is not published.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PublishedState.Publishing">
            <summary>
                The version is being saved, in order to publish the content.
            </summary>
            <remarks>
                The
                <value>Publishing</value>
                state is transitional. Once the version
                is saved, its state changes to
                <value>Published</value>
                .
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PublishedState.Unpublishing">
            <summary>
                The version is being saved, in order to unpublish the content.
            </summary>
            <remarks>
                The
                <value>Unpublishing</value>
                state is transitional. Once the version
                is saved, its state changes to
                <value>Unpublished</value>
                .
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.PublishNotificationSaveOptions">
            <summary>
            Specifies options for publishing notifcations when saving.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PublishNotificationSaveOptions.None">
            <summary>
            Do not publish any notifications.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PublishNotificationSaveOptions.Saving">
            <summary>
            Only publish the saving notification.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PublishNotificationSaveOptions.Saved">
            <summary>
            Only publish the saved notification.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.PublishNotificationSaveOptions.All">
            <summary>
            Publish all the notifications.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Range`1">
            <summary>
                Represents a range with a minimum and maximum value.
            </summary>
            <typeparam name="T">The type of the minimum and maximum values.</typeparam>
            <remarks>
            See also <see cref="T:System.IEquatable`1"/> of <see cref="T:Umbraco.Cms.Core.Models.Range`1"/>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Range`1.Minimum">
            <summary>
                Gets or sets the minimum value.
            </summary>
            <value>
                The minimum value.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Range`1.Maximum">
            <summary>
                Gets or sets the maximum value.
            </summary>
            <value>
                The maximum value.
            </value>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Range`1.Equals(Umbraco.Cms.Core.Models.Range{`0})">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
                <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Range`1.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Range`1.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">
                A composite format string for a single value (minimum and maximum are equal). Use {0} for the
                minimum and {1} for the maximum value.
            </param>
            <param name="formatRange">
                A composite format string for the range values. Use {0} for the minimum and {1} for the
                maximum value.
            </param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Range`1.ToString(System.String,System.IFormatProvider)">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">
                A composite format string for the range values. Use {0} for the minimum and {1} for the maximum
                value.
            </param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Range`1.IsValid">
            <summary>
                Determines whether this range is valid (the minimum value is lower than or equal to the maximum value).
            </summary>
            <returns>
                <c>true</c> if this range is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Range`1.ContainsValue(`0)">
            <summary>
                Determines whether this range contains the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if this range contains the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Range`1.IsInsideRange(Umbraco.Cms.Core.Models.Range{`0})">
            <summary>
                Determines whether this range is inside the specified range.
            </summary>
            <param name="range">The range.</param>
            <returns>
                <c>true</c> if this range is inside the specified range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Range`1.ContainsRange(Umbraco.Cms.Core.Models.Range{`0})">
            <summary>
                Determines whether this range contains the specified range.
            </summary>
            <param name="range">The range.</param>
            <returns>
                <c>true</c> if this range contains the specified range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Range`1.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Range`1.Equals(`0,`0)">
            <summary>
                Determines whether the specified <paramref name="minimum" /> and <paramref name="maximum" /> values are equal to
                this instance values.
            </summary>
            <param name="minimum">The minimum value.</param>
            <param name="maximum">The maximum value.</param>
            <returns>
                <c>true</c> if the specified <paramref name="minimum" /> and <paramref name="maximum" /> values are equal to this
                instance values; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Range`1.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ReadOnlyRelation">
            <summary>
                A read only relation. Can be used to bulk save witch performs better than the normal save operation,
                but do not populate Ids back to the model
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.RedirectUrl">
            <summary>
                Implements <see cref="T:Umbraco.Cms.Core.Models.IRedirectUrl" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.RedirectUrl.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.RedirectUrl" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.RedirectUrl.ContentId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.RedirectUrl.ContentKey">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.RedirectUrl.CreateDateUtc">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.RedirectUrl.Culture">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.RedirectUrl.Url">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Relation">
            <summary>
                Represents a Relation between two items
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Relation.#ctor(System.Int32,System.Int32,Umbraco.Cms.Core.Models.IRelationType)">
            <summary>
                Constructor for constructing the entity to be created
            </summary>
            <param name="parentId"></param>
            <param name="childId"></param>
            <param name="relationType"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Relation.#ctor(System.Int32,System.Int32,System.Guid,System.Guid,Umbraco.Cms.Core.Models.IRelationType)">
            <summary>
                Constructor for reconstructing the entity from the data source
            </summary>
            <param name="parentId"></param>
            <param name="childId"></param>
            <param name="parentObjectType"></param>
            <param name="childObjectType"></param>
            <param name="relationType"></param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Relation.ParentId">
            <summary>
                Gets or sets the Parent Id of the Relation (Source)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Relation.ChildId">
            <summary>
                Gets or sets the Child Id of the Relation (Destination)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Relation.RelationType">
            <summary>
                Gets or sets the <see cref="P:Umbraco.Cms.Core.Models.Relation.RelationType" /> for the Relation
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Relation.Comment">
            <summary>
                Gets or sets a comment for the Relation
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Relation.RelationTypeId">
            <summary>
                Gets the Id of the <see cref="P:Umbraco.Cms.Core.Models.Relation.RelationType" /> that this Relation is based on.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.RelationDirectionFilter">
            <summary>
            Definition of relation directions used as a filter when requesting if a given item has relations.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.RelationType">
            <summary>
                Represents a RelationType
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.RelationType.Name">
            <summary>
                Gets or sets the Name of the RelationType
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.RelationType.Alias">
            <summary>
                Gets or sets the Alias of the RelationType
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.RelationType.IsBidirectional">
            <summary>
                Gets or sets a boolean indicating whether the RelationType is Bidirectional (true) or Parent to Child (false)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.RelationType.ParentObjectType">
            <summary>
                Gets or sets the Parents object type id
            </summary>
            <remarks>Corresponds to the NodeObjectType in the umbracoNode table</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.RelationType.ChildObjectType">
            <summary>
                Gets or sets the Childs object type id
            </summary>
            <remarks>Corresponds to the NodeObjectType in the umbracoNode table</remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Script">
            <summary>
                Represents a Script file
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Script.HasIdentity">
            <summary>
                Indicates whether the current entity has an identity, which in this case is a path/name.
            </summary>
            <remarks>
                Overrides the default Entity identity check.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ServerEvents.SeverEventAuthorizationResult.AuthorizedEventSources">
            <summary>
            The list of events the user should be authorized to listen to
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ServerEvents.SeverEventAuthorizationResult.UnauthorizedEventSources">
            <summary>
            The list of events the user should not be authorized to listen to
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ServerRegistration">
            <summary>
                Represents a registered server in a multiple-servers environment.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ServerRegistration.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.ServerRegistration" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ServerRegistration.#ctor(System.Int32,System.String,System.String,System.DateTime,System.DateTime,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.ServerRegistration" /> class.
            </summary>
            <param name="id">The unique id of the server registration.</param>
            <param name="serverAddress">The server URL.</param>
            <param name="serverIdentity">The unique server identity.</param>
            <param name="registered">The date and time the registration was created.</param>
            <param name="accessed">The date and time the registration was last accessed.</param>
            <param name="isActive">A value indicating whether the registration is active.</param>
            <param name="isSchedulingPublisher">A value indicating whether the registration is scheduling publisher.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ServerRegistration.#ctor(System.String,System.String,System.DateTime)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.ServerRegistration" /> class.
            </summary>
            <param name="serverAddress">The server URL.</param>
            <param name="serverIdentity">The unique server identity.</param>
            <param name="registered">The date and time the registration was created.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ServerRegistration.ServerAddress">
            <summary>
                Gets or sets the server URL.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ServerRegistration.ServerIdentity">
            <summary>
                Gets or sets the server unique identity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ServerRegistration.IsActive">
            <summary>
                Gets or sets a value indicating whether the server is active.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ServerRegistration.IsSchedulingPublisher">
            <summary>
                Gets or sets a value indicating whether the server has the SchedulingPublisher role
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ServerRegistration.Registered">
            <summary>
                Gets the date and time the registration was created.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.ServerRegistration.Accessed">
            <summary>
                Gets the date and time the registration was last accessed.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.ServerRegistration.ToString">
            <summary>
                Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.SimpleContentType">
            <summary>
                Implements <see cref="T:Umbraco.Cms.Core.Models.ISimpleContentType" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.SimpleContentType.#ctor(Umbraco.Cms.Core.Models.IContentType)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.SimpleContentType" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.SimpleContentType.#ctor(Umbraco.Cms.Core.Models.IMediaType)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.SimpleContentType" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.SimpleContentType.#ctor(Umbraco.Cms.Core.Models.IMemberType)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.SimpleContentType" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.SimpleContentType.DefaultTemplate">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Stylesheet">
            <summary>
                Represents a Stylesheet file
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Stylesheet.Content">
            <summary>
                Gets or sets the Content of a File
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Stylesheet.Properties">
            <summary>
                Returns a list of umbraco back office enabled stylesheet properties
            </summary>
            <remarks>
                An umbraco back office enabled stylesheet property has a special prefix, for example:
                /** umb_name: MyPropertyName */ p { font-size: 1em; }
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Stylesheet.HasIdentity">
            <summary>
                Indicates whether the current entity has an identity, which in this case is a path/name.
            </summary>
            <remarks>
                Overrides the default Entity identity check.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Stylesheet.AddProperty(Umbraco.Cms.Core.Models.IStylesheetProperty)">
            <summary>
                Adds an Umbraco stylesheet property for use in the back office
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Stylesheet.RemoveProperty(System.String)">
            <summary>
                Removes an Umbraco stylesheet property
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Stylesheet.Property_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
                If the property has changed then we need to update the content
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.StylesheetProperty">
            <summary>
                Represents a Stylesheet Property
            </summary>
            <remarks>
                Properties are always formatted to have a single selector, so it can be used in the backoffice
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.StylesheetProperty.Name">
            <summary>
                The CSS rule name that can be used by Umbraco in the back office
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.StylesheetProperty.Alias">
            <summary>
                This is the CSS Selector
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.StylesheetProperty.Value">
            <summary>
                The CSS value for the selector
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Tag">
            <summary>
                Represents a tag entity.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Tag.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Tag" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Tag.#ctor(System.Int32,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.Tag" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Tag.Group">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Tag.Text">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Tag.LanguageId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Tag.NodeCount">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.TaggableObjectTypes">
            <summary>
                Enum representing the taggable object types
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.TaggedEntity">
            <summary>
                Represents a tagged entity.
            </summary>
            <remarks>
                Note that it is the properties of an entity (like Content, Media, Members, etc.) that are tagged,
                which is why this class is composed of a list of tagged properties and the identifier the actual entity.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.TaggedEntity.#ctor(System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.TaggedProperty})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.TaggedEntity" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.TaggedEntity.EntityId">
            <summary>
                Gets the identifier of the entity.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.TaggedEntity.TaggedProperties">
            <summary>
                Gets the tagged properties.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.TaggedProperty">
            <summary>
                Represents a tagged property on an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.TaggedProperty.#ctor(System.Int32,System.String,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.ITag})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.TaggedProperty" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.TaggedProperty.PropertyTypeId">
            <summary>
                Gets the identifier of the property type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.TaggedProperty.PropertyTypeAlias">
            <summary>
                Gets the alias of the property type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.TaggedProperty.Tags">
            <summary>
                Gets the tags.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.TagsStorageType">
            <summary>
                Defines how tags are stored.
            </summary>
            <remarks>
                Tags are always stored as a string, but the string can
                either be a delimited string, or a serialized Json array.
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.TagsStorageType.Csv">
            <summary>
                Store tags as a delimited string.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.TagsStorageType.Json">
            <summary>
                Store tags as serialized Json.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Template">
            <summary>
                Represents a Template file.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Template.IsMasterTemplate">
            <summary>
                Returns true if the template is used as a layout for other templates (i.e. it has 'children')
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.TemplateOnDisk">
            <summary>
                Represents a Template file that can have its content on disk.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.TemplateOnDisk.#ctor(Umbraco.Cms.Core.Strings.IShortStringHelper,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.TemplateOnDisk" /> class.
            </summary>
            <param name="name">The name of the template.</param>
            <param name="alias">The alias of the template.</param>
            <param name="shortStringHelper">The short string helper</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.TemplateOnDisk.IsOnDisk">
            <summary>
                Gets or sets a value indicating whether the content is on disk already.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.TemplateOnDisk.Content">
            <summary>
                Gets or sets the content.
            </summary>
            <remarks>
                <para>
                    Getting the content while the template is "on disk" throws,
                    the template must be saved before its content can be retrieved.
                </para>
                <para>
                    Setting the content means it is not "on disk" anymore, and the
                    template becomes (and behaves like) a normal template.
                </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.TextFileRenameModel.Name">
            <summary>
             The new name of the file.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.TextFileUpdateModel.Content">
            <summary>
             The new content of the file.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.UmbracoDomain">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Models.UmbracoDomain.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.UmbracoDomain" /> class.
            </summary>
            <param name="domainName">The name of the domain.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.UmbracoDomain.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.UmbracoDomain" /> class.
            </summary>
            <param name="domainName">The name of the domain.</param>
            <param name="languageIsoCode">The language ISO code.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.UmbracoDomain.DomainName">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.UmbracoDomain.IsWildcard">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.UmbracoDomain.LanguageId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.UmbracoDomain.LanguageIsoCode">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.UmbracoDomain.RootContentId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Models.UmbracoDomain.SortOrder">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Models.UmbracoObjectTypes">
            <summary>
                Enum used to represent the Umbraco Object Types and their associated GUIDs
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.UmbracoObjectTypes.Unknown">
            <summary>
                Default value
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.UmbracoObjectTypes.ROOT">
            <summary>
                Root
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.UmbracoObjectTypes.Document">
            <summary>
                Document
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.UmbracoObjectTypes.Media">
            <summary>
                Media
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.UmbracoObjectTypes.MemberType">
            <summary>
                Member Type
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.UmbracoObjectTypes.Template">
            <summary>
                Template
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.UmbracoObjectTypes.MemberGroup">
            <summary>
                Member Group
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.UmbracoObjectTypes.MediaType">
            <summary>
                "Media Type
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.UmbracoObjectTypes.DocumentType">
            <summary>
                Document Type
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.UmbracoObjectTypes.RecycleBin">
            <summary>
                Recycle Bin
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.UmbracoObjectTypes.Member">
            <summary>
                Member
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.UmbracoObjectTypes.DataType">
            <summary>
                Data Type
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.UmbracoObjectTypes.DocumentTypeContainer">
            <summary>
                Document type container
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.UmbracoObjectTypes.MediaTypeContainer">
            <summary>
                Media type container
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.UmbracoObjectTypes.DataTypeContainer">
            <summary>
                Media type container
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.UmbracoObjectTypes.DocumentBlueprintContainer">
            <summary>
                Document blueprint container.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.UmbracoObjectTypes.RelationType">
            <summary>
                Relation type
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.UmbracoObjectTypes.FormsForm">
            <summary>
                Forms Form
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.UmbracoObjectTypes.FormsPreValue">
            <summary>
                Forms PreValue
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.UmbracoObjectTypes.FormsDataSource">
            <summary>
                Forms DataSource
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.UmbracoObjectTypes.Language">
            <summary>
                Language
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.UmbracoObjectTypes.DocumentBlueprint">
            <summary>
                Document Blueprint
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.UmbracoObjectTypes.IdReservation">
            <summary>
                Reserved Identifier
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.UserExtensions.GetUserAvatarUrls(Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Cache.IAppCache,Umbraco.Cms.Core.IO.MediaFileManager,Umbraco.Cms.Core.Media.IImageUrlGenerator)">
            <summary>
                Tries to lookup the user's Gravatar to see if the endpoint can be reached, if so it returns the valid URL
            </summary>
            <param name="user"></param>
            <param name="cache"></param>
            <param name="mediaFileManager"></param>
            <param name="imageUrlGenerator"></param>
            <returns>
                A list of 5 different sized avatar URLs
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.UserExtensions.HasAccessToSensitiveData(Umbraco.Cms.Core.Models.Membership.IUser)">
            <summary>
                Determines whether this user has access to view sensitive data
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.UserExtensions.CalculateAllowedLanguageIds(Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Services.ILocalizationService)">
            <summary>
                Calculate start nodes, combining groups' and user's, and excluding what's in the bin
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.UserExtensions.CalculateMediaStartNodeIds(Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Services.IEntityService,Umbraco.Cms.Core.Cache.AppCaches)">
            <summary>
                Calculate start nodes, combining groups' and user's, and excluding what's in the bin
            </summary>
            <param name="user"></param>
            <param name="entityService"></param>
            <param name="appCaches"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Validation.RequiredForPersistenceAttribute">
            <summary>
                Specifies that a data field value is required in order to persist an object.
            </summary>
            <remarks>
                <para>
                    There are two levels of validation in Umbraco. (1) value validation is performed by
                    <see cref="T:Umbraco.Cms.Core.PropertyEditors.IValueValidator" />
                    instances; it can prevent a content item from being published, but not from being saved. (2) required
                    validation
                    of properties marked with <see cref="T:Umbraco.Cms.Core.Models.Validation.RequiredForPersistenceAttribute" />; it does prevent an object from being
                    saved
                    and is used for properties that are absolutely mandatory, such as the name of a content item.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Models.Validation.RequiredForPersistenceAttribute.HasRequiredValuesForPersistence(System.Object)">
            <summary>
                Determines whether an object has all required values for persistence.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.ValueStorageType">
            <summary>
                Represents the supported database types for storing a value.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ValueStorageType.Ntext">
            <summary>
                Store property value as NText.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ValueStorageType.Nvarchar">
            <summary>
                Store property value as NVarChar.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ValueStorageType.Integer">
            <summary>
                Store property value as Integer.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ValueStorageType.Date">
            <summary>
                Store property value as Date.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Models.ValueStorageType.Decimal">
            <summary>
                Store property value as Decimal.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Models.Verify2FACodeModel">
            <summary>
                Used for 2FA verification
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Verify2FACodeModel.IsPersistent">
            <summary>
                Flag indicating whether the sign-in cookie should persist after the browser is closed.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Models.Verify2FACodeModel.RememberClient">
            <summary>
                Flag indicating whether the current browser should be remember, suppressing all further two factor authentication
                prompts.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedMemberCache.Get(Umbraco.Cms.Core.Models.IMember)">
            <summary>
                Get an <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent" /> from an <see cref="T:Umbraco.Cms.Core.Models.IMember" />
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedMemberCache.GetContentType(System.Int32)">
            <summary>
                Gets a content type identified by its unique identifier.
            </summary>
            <param name="id">The content type unique identifier.</param>
            <returns>The content type, or null.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedMemberCache.GetContentType(System.String)">
            <summary>
                Gets a content type identified by its alias.
            </summary>
            <param name="alias">The content type alias.</param>
            <returns>The content type, or null.</returns>
            <remarks>The alias is case-insensitive.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedMemberCache.GetAsync(Umbraco.Cms.Core.Models.IMember)">
            <summary>
                Get an <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent" /> from an <see cref="T:Umbraco.Cms.Core.Models.IMember" />
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.PublishedCache.DefaultCultureAccessor">
            <summary>
                Provides the default implementation of <see cref="T:Umbraco.Cms.Core.PublishedCache.IDefaultCultureAccessor" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.DefaultCultureAccessor.#ctor(Umbraco.Cms.Core.Services.ILocalizationService,Umbraco.Cms.Core.Services.IRuntimeState,Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.GlobalSettings})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PublishedCache.DefaultCultureAccessor" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PublishedCache.DefaultCultureAccessor.DefaultCulture">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.PublishedCache.ICacheManager.Content">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.PublishedCache.IPublishedContentCache" />.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PublishedCache.ICacheManager.Media">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.PublishedCache.IPublishedMediaCache" />.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PublishedCache.ICacheManager.Members">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.PublishedCache.IPublishedMemberCache" />.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PublishedCache.ICacheManager.Domains">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.PublishedCache.IDomainCache" />.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PublishedCache.ICacheManager.ElementsCache">
            <summary>
                Gets the elements-level cache.
            </summary>
            <remarks>
                <para>
                    The elements-level cache is shared by all snapshots relying on the same elements,
                    ie all snapshots built on top of unchanging content / media / etc.
                </para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.PublishedCache.IDatabaseCacheRebuilder">
            <summary>
            Defines operations for rebuild of the published content cache in the database.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IDatabaseCacheRebuilder.IsRebuilding">
            <summary>
            Indicates if the database cache is in the process of being rebuilt.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IDatabaseCacheRebuilder.Rebuild">
            <summary>
            Rebuilds the database cache.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IDatabaseCacheRebuilder.Rebuild(System.Boolean)">
            <summary>
            Rebuilds the database cache, optionally using a background thread.
            </summary>
            <param name="useBackgroundThread">Flag indicating whether to use a background thread for the operation and immediately return to the caller.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IDatabaseCacheRebuilder.RebuildDatabaseCacheIfSerializerChanged">
            <summary>
            Rebuids the database cache if the configured serializer has changed.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PublishedCache.IDefaultCultureAccessor">
            <summary>
                Gives access to the default culture.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PublishedCache.IDefaultCultureAccessor.DefaultCulture">
            <summary>
                Gets the system default culture.
            </summary>
            <remarks>
                <para>Implementations must NOT return a null value. Return an empty string for the invariant culture.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.PublishedCache.IDomainCache.DefaultCulture">
            <summary>
                Gets the system default culture.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IDomainCache.GetAll(System.Boolean)">
            <summary>
                Gets all <see cref="T:Umbraco.Cms.Core.Routing.Domain" /> in the current domain cache, including any domains that may be referenced by
                documents that are no longer published.
            </summary>
            <param name="includeWildcards"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IDomainCache.GetAssigned(System.Int32,System.Boolean)">
            <summary>
                Gets all assigned <see cref="T:Umbraco.Cms.Core.Routing.Domain" /> for specified document, even if it is not published.
            </summary>
            <param name="documentId">The document identifier.</param>
            <param name="includeWildcards">A value indicating whether to consider wildcard domains.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IDomainCache.HasAssigned(System.Int32,System.Boolean)">
            <summary>
                Determines whether a document has domains.
            </summary>
            <param name="documentId">The document identifier.</param>
            <param name="includeWildcards">A value indicating whether to consider wildcard domains.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IDomainCacheService.GetAll(System.Boolean)">
            <summary>
                Gets all <see cref="T:Umbraco.Cms.Core.Routing.Domain" /> in the current domain cache, including any domains that may be referenced by
                documents that are no longer published.
            </summary>
            <param name="includeWildcards"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IDomainCacheService.GetAssigned(System.Int32,System.Boolean)">
            <summary>
                Gets all assigned <see cref="T:Umbraco.Cms.Core.Routing.Domain" /> for specified document, even if it is not published.
            </summary>
            <param name="documentId">The document identifier.</param>
            <param name="includeWildcards">A value indicating whether to consider wildcard domains.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IDomainCacheService.HasAssigned(System.Int32,System.Boolean)">
            <summary>
                Determines whether a document has domains.
            </summary>
            <param name="documentId">The document identifier.</param>
            <param name="includeWildcards">A value indicating whether to consider wildcard domains.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.PublishedCache.IPublishedCache">
            <summary>
                Provides access to cached contents.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedCache.GetById(System.Boolean,System.Int32)">
            <summary>
                Gets a content identified by its unique identifier.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="contentId">The content unique identifier.</param>
            <returns>The content, or null.</returns>
            <remarks>The value of <paramref name="preview" /> overrides defaults.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedCache.GetById(System.Boolean,System.Guid)">
            <summary>
                Gets a content identified by its unique identifier.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="contentId">The content unique identifier.</param>
            <returns>The content, or null.</returns>
            <remarks>The value of <paramref name="preview" /> overrides defaults.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedCache.GetById(System.Boolean,Umbraco.Cms.Core.Udi)">
            <summary>
                Gets a content identified by its Udi identifier.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="contentId">The content Udi identifier.</param>
            <returns>The content, or null.</returns>
            <remarks>The value of <paramref name="preview" /> overrides defaults.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedCache.GetById(System.Int32)">
            <summary>
                Gets a content identified by its unique identifier.
            </summary>
            <param name="contentId">The content unique identifier.</param>
            <returns>The content, or null.</returns>
            <remarks>Considers published or unpublished content depending on defaults.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedCache.GetById(System.Guid)">
            <summary>
                Gets a content identified by its unique identifier.
            </summary>
            <param name="contentId">The content unique identifier.</param>
            <returns>The content, or null.</returns>
            <remarks>Considers published or unpublished content depending on defaults.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedCache.GetById(Umbraco.Cms.Core.Udi)">
            <summary>
                Gets a content identified by its unique identifier.
            </summary>
            <param name="contentId">The content unique identifier.</param>
            <returns>The content, or null.</returns>
            <remarks>Considers published or unpublished content depending on defaults.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedCache.GetAtRoot(System.Boolean,System.String)">
            <summary>
                Gets contents at root.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="culture">A culture.</param>
            <returns>The contents.</returns>
            <remarks>The value of <paramref name="preview" /> overrides defaults.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedCache.GetAtRoot(System.String)">
            <summary>
                Gets contents at root.
            </summary>
            <param name="culture">A culture.</param>
            <returns>The contents.</returns>
            <remarks>Considers published or unpublished content depending on defaults.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedCache.HasContent(System.Boolean)">
            <summary>
                Gets a value indicating whether the cache contains published content.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <returns>A value indicating whether the cache contains published content.</returns>
            <remarks>The value of <paramref name="preview" /> overrides defaults.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedCache.HasContent">
            <summary>
                Gets a value indicating whether the cache contains published content.
            </summary>
            <returns>A value indicating whether the cache contains published content.</returns>
            <remarks>Considers published or unpublished content depending on defaults.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedContentCache.GetByIdAsync(System.Int32,System.Nullable{System.Boolean})">
            <summary>
                Gets a content identified by its unique identifier.
            </summary>
            <param name="id">The content unique identifier.</param>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <returns>The content, or null.</returns>
            <remarks>Considers published or unpublished content depending on defaults.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedContentCache.GetByIdAsync(System.Guid,System.Nullable{System.Boolean})">
            <summary>
                Gets a content identified by its unique identifier.
            </summary>
            <param name="key">The content unique identifier.</param>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <returns>The content, or null.</returns>
            <remarks>Considers published or unpublished content depending on defaults.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedContentCache.GetByRoute(System.Boolean,System.String,System.Nullable{System.Boolean},System.String)">
            <summary>
                Gets content identified by a route.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="route">The route</param>
            <param name="hideTopLevelNode">A value forcing the HideTopLevelNode setting.</param>
            <param name="culture">the culture</param>
            <returns>The content, or null.</returns>
            <remarks>
                <para>
                    A valid route is either a simple path eg <c>/foo/bar/nil</c> or a root node id and a path, eg
                    <c>123/foo/bar/nil</c>.
                </para>
                <para>
                    If
                    <paramref name="hideTopLevelNode" />
                    is <c>null</c> then the settings value is used.
                </para>
                <para>The value of <paramref name="preview" /> overrides defaults.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedContentCache.GetByRoute(System.String,System.Nullable{System.Boolean},System.String)">
            <summary>
                Gets content identified by a route.
            </summary>
            <param name="route">The route</param>
            <param name="hideTopLevelNode">A value forcing the HideTopLevelNode setting.</param>
            <param name="culture">The culture</param>
            <returns>The content, or null.</returns>
            <remarks>
                <para>
                    A valid route is either a simple path eg <c>/foo/bar/nil</c> or a root node id and a path, eg
                    <c>123/foo/bar/nil</c>.
                </para>
                <para>
                    If
                    <paramref name="hideTopLevelNode" />
                    is <c>null</c> then the settings value is used.
                </para>
                <para>Considers published or unpublished content depending on defaults.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedContentCache.GetRouteById(System.Boolean,System.Int32,System.String)">
            <summary>
                Gets the route for a content identified by its unique identifier.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="contentId">The content unique identifier.</param>
            <param name="culture">The culture</param>
            <returns>A special string formatted route path.</returns>
            <remarks>
                <para>
                    The resulting string is a special encoded route string that may contain the domain ID
                    for the current route. If a domain is present the string will be prefixed with the domain ID integer, example:
                    {domainId}/route-path-of-item
                </para>
                <para>The value of <paramref name="preview" /> overrides defaults.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedContentCache.GetRouteById(System.Int32,System.String)">
            <summary>
                Gets the route for a content identified by its unique identifier.
            </summary>
            <param name="contentId">The content unique identifier.</param>
            <param name="culture">The culture</param>
            <returns>A special string formatted route path.</returns>
            <remarks>Considers published or unpublished content depending on defaults.</remarks>
            <para>
                The resulting string is a special encoded route string that may contain the domain ID
                for the current route. If a domain is present the string will be prefixed with the domain ID integer, example:
                {domainId}/route-path-of-item
            </para>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedContentTypeCache.ClearAll">
            <summary>
                Clears the entire cache.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedContentTypeCache.ClearContentType(System.Int32)">
            <summary>
                Clears a cached content type.
            </summary>
            <param name="id">An identifier.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedContentTypeCache.ClearContentTypes(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Clears cached content types.
            </summary>
            <param name="ids">ContentType IDs to clear</param>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedContentTypeCache.ClearDataType(System.Int32)">
            <summary>
                Clears all cached content types referencing a data type.
            </summary>
            <param name="id">A data type identifier.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedContentTypeCache.ClearByDataTypeId(System.Int32)">
            <summary>
            Clears all cached content types referencing a data type.
            </summary>
            <param name="id">The data type id to remove content types by</param>
            <returns>The removed content types</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedContentTypeCache.Get(Umbraco.Cms.Core.Models.PublishedContent.PublishedItemType,System.Guid)">
            <summary>
                Gets a published content type.
            </summary>
            <param name="itemType">An item type.</param>
            <param name="key">An key.</param>
            <returns>The published content type corresponding to the item key.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedContentTypeCache.Get(Umbraco.Cms.Core.Models.PublishedContent.PublishedItemType,System.String)">
            <summary>
                Gets a published content type.
            </summary>
            <param name="itemType">An item type.</param>
            <param name="alias">An alias.</param>
            <returns>The published content type corresponding to the item type and alias.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedContentTypeCache.Get(Umbraco.Cms.Core.Models.PublishedContent.PublishedItemType,System.Int32)">
            <summary>
                Gets a published content type.
            </summary>
            <param name="itemType">An item type.</param>
            <param name="id">An identifier.</param>
            <returns>The published content type corresponding to the item type and identifier.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedMediaCache.GetByIdAsync(System.Int32)">
            <summary>
                Gets a content identified by its unique identifier.
            </summary>
            <param name="id">The content unique identifier.</param>
            <returns>The content, or null.</returns>
            <remarks>Considers published or unpublished content depending on defaults.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.IPublishedMediaCache.GetByIdAsync(System.Guid)">
            <summary>
                Gets a content identified by its unique identifier.
            </summary>
            <param name="key">The content unique identifier.</param>
            <returns>The content, or null.</returns>
            <remarks>Considers published or unpublished content depending on defaults.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.ITagQuery.GetContentByTag(System.String,System.String,System.String)">
            <summary>
                Gets all documents tagged with the specified tag.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.ITagQuery.GetContentByTagGroup(System.String,System.String)">
            <summary>
                Gets all documents tagged with any tag in the specified group.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.ITagQuery.GetMediaByTag(System.String,System.String,System.String)">
            <summary>
                Gets all media tagged with the specified tag.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.ITagQuery.GetMediaByTagGroup(System.String,System.String)">
            <summary>
                Gets all media tagged with any tag in the specified group.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.ITagQuery.GetAllTags(System.String,System.String)">
            <summary>
                Gets all tags.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.ITagQuery.GetAllContentTags(System.String,System.String)">
            <summary>
                Gets all document tags.
            </summary>
            <remarks>
                If no culture is specified, it retrieves tags with an invariant culture.
                If a culture is specified, it only retrieves tags for that culture.
                Use "*" to retrieve tags for all cultures.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.ITagQuery.GetAllMediaTags(System.String,System.String)">
            <summary>
                Gets all media tags.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.ITagQuery.GetAllMemberTags(System.String,System.String)">
            <summary>
                Gets all member tags.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.ITagQuery.GetTagsForProperty(System.Int32,System.String,System.String,System.String)">
            <summary>
                Gets all tags attached to an entity via a property.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PublishedCache.ITagQuery.GetTagsForEntity(System.Int32,System.String,System.String)">
            <summary>
                Gets all tags attached to an entity.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.NamedUdiRange">
            <summary>
                Represents a <see cref="T:Umbraco.Cms.Core.UdiRange" /> complemented with a name.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.NamedUdiRange.#ctor(Umbraco.Cms.Core.Udi,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.NamedUdiRange" /> class  with a <see cref="T:Umbraco.Cms.Core.Udi" /> and an optional
                selector.
            </summary>
            <param name="udi">A <see cref="T:Umbraco.Cms.Core.Udi" />.</param>
            <param name="selector">An optional selector.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.NamedUdiRange.#ctor(Umbraco.Cms.Core.Udi,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.NamedUdiRange" /> class  with a <see cref="T:Umbraco.Cms.Core.Udi" />, a name, and an
                optional selector.
            </summary>
            <param name="udi">A <see cref="T:Umbraco.Cms.Core.Udi" />.</param>
            <param name="name">A name.</param>
            <param name="selector">An optional selector.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.NamedUdiRange.Name">
            <summary>
                Gets or sets the name of the range.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.AssignedMemberRolesNotification">
            <summary>
             A notification that is used to trigger the IMemberService when the AssignRoles and ReplaceRoles methods are called in the API.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.AssignedMemberRolesNotification.#ctor(System.Int32[],System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.AssignedMemberRolesNotification"/>.
            </summary>
            <param name="memberIds">
            Collection of Ids of the members the roles are being assigned to.
            </param>
            <param name="roles">
            Collection of role names being assigned.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.CacheRefresherNotification">
            <summary>
                Base class for cache refresher notifications
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentCacheRefresherNotification">
            <summary>
             A notification that is used to trigger the Content Cache Refresher.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.ContentCacheRefresherNotification.#ctor(System.Object,Umbraco.Cms.Core.Sync.MessageType)">
            <summary>
             Initializes a new instance of the  <see cref="T:Umbraco.Cms.Core.Notifications.ContentCacheRefresherNotification"/>
            </summary>
            <param name="messageObject">
            The refresher payload.
            </param>
            <param name="messageType">
            Type of the cache refresher message, <see cref="T:Umbraco.Cms.Core.Sync.MessageType"/>
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentCopiedNotification">
            <summary>
            A notification that is used to trigger the IContentService when the Copy method is called in the API.
            The notification is published after the content object has been copied.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.ContentCopiedNotification.#ctor(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Models.IContent,System.Int32,System.Boolean,Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
             Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.ContentCopiedNotification"/>.
            </summary>
            <param name="original">
            Gets the original <see cref="T:Umbraco.Cms.Core.Models.IContent"/> object.
            </param>
            <param name="copy">
            Gets the <see cref="T:Umbraco.Cms.Core.Models.IContent"/> object being copied.
            </param>
            <param name="parentId">
            Gets the ID of the parent of the <see cref="T:Umbraco.Cms.Core.Models.IContent"/> being copied.
            </param>
            <param name="relateToOriginal">
            Boolean indicating whether the copy was related to the orginal.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentCopyingNotification">
            <summary>
            A notification that is used to trigger the IContentService when the Copy method is called in the API.
            The notification is published after a copy object has been created and had its parentId updated and its state has been set to unpublished.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.ContentCopyingNotification.#ctor(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Models.IContent,System.Int32,Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
             Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.ContentCopyingNotification"/>.
            </summary>
            <param name="original">
            Gets the original <see cref="T:Umbraco.Cms.Core.Models.IContent"/> object.
            </param>
            <param name="copy">
            Gets the <see cref="T:Umbraco.Cms.Core.Models.IContent"/> object being copied.
            </param>
            <param name="parentId">
            Gets the ID of the parent of the <see cref="T:Umbraco.Cms.Core.Models.IContent"/> being copied.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentDeletedBlueprintNotification">
            <summary>
            A notification that is used to trigger the IContentService when the DeletedBlueprint method is called in the API.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.ContentDeletedBlueprintNotification.DeletedBlueprints">
            <summary>
            The collection of deleted blueprint IContent.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentDeletedNotification">
            <summary>
            A notification that is used to trigger the IContentService when the Delete and EmptyRecycleBin methods are called in the API.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentDeletedVersionsNotification">
            <summary>
            A notification that is used to trigger the IContentService when the DeleteVersion and DeleteVersions methods are called in the API, and the version has been deleted.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.ContentDeletedVersionsNotification.#ctor(System.Int32,Umbraco.Cms.Core.Events.EventMessages,System.Int32,System.Boolean,System.DateTime)">
            <summary>
             Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.ContentDeletedVersionsNotification"/>.
            </summary>
            <param name="id">
            Gets the ID of the <see cref="T:Umbraco.Cms.Core.Models.IContent"/> object being deleted.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
            <param name="specificVersion">
             Gets the id of the IContent object version being deleted.
            </param>
            <param name="deletePriorVersions">
             False by default.
            </param>
            <param name="dateToRetain">
            Gets the latest version date.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentDeletingNotification">
            <summary>
            A notification that is used to trigger the IContentService when the DeleteContentOfType, Delete and EmptyRecycleBin methods are called in the API.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentDeletingVersionsNotification">
            <summary>
            A notification that is used to trigger the IContentService when the DeleteVersion and DeleteVersions methods are called in the API.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.ContentDeletingVersionsNotification.#ctor(System.Int32,Umbraco.Cms.Core.Events.EventMessages,System.Int32,System.Boolean,System.DateTime)">
            <summary>
             Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.ContentDeletingVersionsNotification"/>.
            </summary>
            <param name="id">
            Gets the ID of the <see cref="T:Umbraco.Cms.Core.Models.IContent"/> object being deleted.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
            <param name="specificVersion">
             Gets the id of the IContent object version being deleted.
            </param>
            <param name="deletePriorVersions">
             False by default.
            </param>
            <param name="dateToRetain">
            Gets the latest version date.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentEmptiedRecycleBinNotification">
            <summary>
            A notification that is used to trigger the IContentService when the EmptyRecycleBin method is called in the API, after the RecycleBin has been deleted.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.ContentEmptiedRecycleBinNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IContent},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
             Initializes a new instance of the  <see cref="T:Umbraco.Cms.Core.Notifications.ContentEmptyingRecycleBinNotification"/>
            </summary>
            <param name="deletedEntities">
             The collection of deleted IContent object.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentEmptyingRecycleBinNotification">
            <summary>
            A notification that is used to trigger the IContentService when the EmptyRecycleBin method is called in the API.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.ContentEmptyingRecycleBinNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IContent},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
             Initializes a new instance of the  <see cref="T:Umbraco.Cms.Core.Notifications.ContentEmptyingRecycleBinNotification"/>
            </summary>
            <param name="deletedEntities">
             The collection of IContent objects being deleted.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentMovedNotification">
            <summary>
            A notification that is used to trigger the IContentService when the Move method is called in the API.
            The notification is published and called after the content object has been moved.
            NOTE: If the target parent is the Recycle bin, this notification is never published. Try the <see cref="T:Umbraco.Cms.Core.Notifications.ContentMovedToRecycleBinNotification"/> instead.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentMovedToRecycleBinNotification">
            <summary>
            A notification that is used to trigger the IContentService when the MoveToRecycleBin method is called in the API.
            Is published after the content has been moved to the Recycle Bin.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentMovingNotification">
            <summary>
            A notification that is used to trigger the IContentService when the Move method is called in the API.
            Called while content is moving, but before it has been moved. Cancel the operation to prevent the movement.
            NOTE: If the target parent is the Recycle bin, this notification is never published. Try the <see cref="T:Umbraco.Cms.Core.Notifications.ContentMovingToRecycleBinNotification"/> instead.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentMovingToRecycleBinNotification">
            <summary>
            A notification that is used to trigger the IContentService when the MoveToRecycleBin method is called in the API.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.ContentNotificationExtensions.IsSavingCulture``1(Umbraco.Cms.Core.Notifications.SavingNotification{``0},``0,System.String)">
            <summary>
                Determines whether a culture is being saved, during a Saving notification
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.ContentNotificationExtensions.HasSavedCulture``1(Umbraco.Cms.Core.Notifications.SavedNotification{``0},``0,System.String)">
            <summary>
                Determines whether a culture has been saved, during a Saved notification
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.ContentNotificationExtensions.IsPublishingCulture(Umbraco.Cms.Core.Notifications.ContentPublishingNotification,Umbraco.Cms.Core.Models.IContent,System.String)">
            <summary>
                Determines whether a culture is being published, during a Publishing notification
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.ContentNotificationExtensions.IsUnpublishingCulture(Umbraco.Cms.Core.Notifications.ContentPublishingNotification,Umbraco.Cms.Core.Models.IContent,System.String)">
            <summary>
                Determines whether a culture is being unpublished, during an Publishing notification
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.ContentNotificationExtensions.IsUnpublishingCulture(Umbraco.Cms.Core.Notifications.ContentUnpublishingNotification,Umbraco.Cms.Core.Models.IContent,System.String)">
            <summary>
                Determines whether a culture is being unpublished, during a Unpublishing notification
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.ContentNotificationExtensions.HasPublishedCulture(Umbraco.Cms.Core.Notifications.ContentPublishedNotification,Umbraco.Cms.Core.Models.IContent,System.String)">
            <summary>
                Determines whether a culture has been published, during a Published notification
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.ContentNotificationExtensions.HasUnpublishedCulture(Umbraco.Cms.Core.Notifications.ContentPublishedNotification,Umbraco.Cms.Core.Models.IContent,System.String)">
            <summary>
                Determines whether a culture has been unpublished, during a Published notification
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.ContentNotificationExtensions.HasUnpublishedCulture(Umbraco.Cms.Core.Notifications.ContentUnpublishedNotification,Umbraco.Cms.Core.Models.IContent,System.String)">
            <summary>
                Determines whether a culture has been unpublished, during an Unpublished notification
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentPublishedNotification">
            <summary>
            A notification that is used to trigger the IContentService when the Publish method is called in the API and after data has been published.
            Called after content has been published.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.ContentPublishedNotification.PublishedEntities">
            <summary>
            Gets a enumeration of <see cref="T:Umbraco.Cms.Core.Models.IContent"/> which are being published.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentPublishingNotification">
            <summary>
            A notification that is used to trigger the IContentService when the Publishing method is called in the API.
            Called while publishing content but before content has been published. Cancel the operation to prevent the publish.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.ContentPublishingNotification.PublishedEntities">
            <summary>
            Gets a enumeration of <see cref="T:Umbraco.Cms.Core.Models.IContent"/> which are being published.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentRolledBackNotification">
            <summary>
            A notification that is used to trigger the IContentService when the Rollback method is called in the API, after the content has been rolled back.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentRollingBackNotification">
            <summary>
            A notification that is used to trigger the IContentService when the Rollback method is called in the API.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentSavedBlueprintNotification">
            <summary>
            A notification that is used to trigger the IContentService when the SavedBlueprint method is called in the API.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.ContentSavedBlueprintNotification.SavedBlueprint">
            <summary>
            Getting the saved blueprint <see cref="T:Umbraco.Cms.Core.Models.IContent"/> object.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentSavedNotification">
            <summary>
            A notification that is used to trigger the IContentService when the Save method is called in the API and after the data has been persisted.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.ContentSavedNotification.#ctor(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
             Initializes a new instance of the  <see cref="T:Umbraco.Cms.Core.Notifications.ContentSavedNotification"/>
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.ContentSavedNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IContent},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Gets a enumeration of <see cref="T:Umbraco.Cms.Core.Models.IContent"/>.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentSavingNotification">
            <summary>
            A notification that is used to trigger the IContentService when the Save method is called in the API.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.ContentSavingNotification.#ctor(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
             Initializes a new instance of the  <see cref="T:Umbraco.Cms.Core.Notifications.ContentSavingNotification"/>
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.ContentSavingNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IContent},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Gets a enumeration of <see cref="T:Umbraco.Cms.Core.Models.IContent"/>.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentScaffoldedNotification">
            <summary>
            Notification that is send out when a Content item has been scaffolded from an original item and basic cleaning has been performed
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentSendingToPublishNotification">
            <summary>
            A notification that is used to trigger the IContentService when the SendToPublication method is called in the API.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.ContentSendingToPublishNotification.Entity">
            <summary>
            Getting the IContent object being sent to publish.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentSentToPublishNotification">
            <summary>
            A notification that is used to trigger the IContentService when the SendToPublication method is called in the API, after the entity has been sent to publication.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.ContentSentToPublishNotification.Entity">
            <summary>
            Getting the IContent object being sent to publish.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentSortedNotification">
            <summary>
            Called after content has been sorted.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentSortingNotification">
            <summary>
            Called while content is sorting, but before content has been sorted. Cancel the operation to cancel the sorting.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentTypeChangedNotification">
            <summary>
             A notification that is published when a ContentType is saved or deleted, after the transaction has completed.
             This is mainly used for caching purposes, and generally not recommended. Use <see cref="T:Umbraco.Cms.Core.Notifications.ContentTypeSavedNotification"/> and <see cref="T:Umbraco.Cms.Core.Notifications.ContentTypeDeletedNotification"/> instead.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentTypeDeletedNotification">
            <summary>
             A notification that is used to trigger the ContentTypeService when the Delete method is called in the API, after the entities have been deleted.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentTypeDeletingNotification">
            <summary>
            A notification that is used to trigger the ContentTypeService when the Delete method is called in the API.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentTypeMovedNotification">
            <summary>
             A notification that is used to trigger the ContentTypeService when the Move method is called in the API, after the entities have been moved.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentTypeMovingNotification">
            <summary>
             A notification that is used to trigger the ContentTypeService when the Move method is called in the API.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentTypeSavedNotification">
            <summary>
             A notification that is used to trigger the ContentTypeService when the Save method is called in the API, after the entities have been saved.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentTypeSavingNotification">
            <summary>
             A notification that is used to trigger the ContentTypeService when the Save method is called in the API.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentUnpublishedNotification">
            <summary>
            A notification that is used to trigger the IContentService when the UnPublish method is called in the API and after data has been unpublished.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.ContentUnpublishedNotification.UnpublishedEntities">
            <summary>
            Gets a enumeration of <see cref="T:Umbraco.Cms.Core.Models.IContent"/> which are being unpublished.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ContentUnpublishingNotification">
            <summary>
            A notification that is used to trigger the IContentService when the UnPublishing method is called in the API.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.ContentUnpublishingNotification.UnpublishedEntities">
            <summary>
            Gets a enumeration of <see cref="T:Umbraco.Cms.Core.Models.IContent"/> which are being unpublished.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.CreatingRequestNotification">
            <summary>
                Used for notifying when an Umbraco request is being created
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.CreatingRequestNotification.#ctor(System.Uri)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.CreatingRequestNotification" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.CreatingRequestNotification.Url">
            <summary>
                Gets or sets the URL for the request
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.DataTypeDeletedNotification">
            <summary>
             A notification that is used to trigger the DataTypeService when the Delete method is called in the API, after the IDataType objects have been deleted.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.DataTypeDeletingNotification">
            <summary>
             A notification that is used to trigger the DataTypeService when the Delete method is called in the API.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.DataTypeMovedNotification">
            <summary>
             A notification that is used to trigger the DataTypeService when the Move method is called in the API, after the IDataType has been moved.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.DataTypeMovingNotification">
            <summary>
             A notification that is used to trigger the DataTypeService when the Move method is called in the API.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.DataTypeSavedNotification">
            <summary>
             A notification that is used to trigger the DataTypeService when the Save method is called in the API, and after data has been persisted.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.DataTypeSavingNotification">
            <summary>
             A notification that is used to trigger the DataTypeService when the Save method is called in the API.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.DictionaryItemDeletedNotification">
            <summary>
             A notification that is used to trigger the ILocalizationService when the Delete (IDictionaryItem overload) method is called in the API, after the dictionary items has been deleted.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.DictionaryItemDeletedNotification.#ctor(Umbraco.Cms.Core.Models.IDictionaryItem,Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.DictionaryItemDeletedNotification"/>.
            </summary>
            <param name="target">
            Gets the collection of the deleted IDictionaryItem objects.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.DictionaryItemDeletingNotification">
            <summary>
             A notification that is used to trigger the ILocalizationService when the Delete (IDictionaryItem overload) method is called in the API.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.DictionaryItemDeletingNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IDictionaryItem},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.DictionaryItemDeletingNotification"/>.
            </summary>
            <param name="target">
            Gets the collection of deleted IDictionaryItem objects.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.DictionaryItemSavedNotification">
            <summary>
             A notification that is used to trigger the ILocalizationService when the Save (IDictionaryItem overload) method is called in the API and the data has been persisted.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.DictionaryItemSavedNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IDictionaryItem},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the  <see cref="T:Umbraco.Cms.Core.Notifications.DictionaryItemSavedNotification"/>
            </summary>
            <param name="target">
            Gets the saved collection of IDictionary objects.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.DictionaryItemSavingNotification">
            <summary>
             A notification that is used to trigger the ILocalizationService when the Save (IDictionaryItem overload) method is called in the API.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.DictionaryItemSavingNotification.#ctor(Umbraco.Cms.Core.Models.IDictionaryItem,Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the  <see cref="T:Umbraco.Cms.Core.Notifications.DictionaryItemSavingNotification"/>
            </summary>
            <param name="target">
            Gets the collection of IDictionaryItem objects being saved.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.INotification">
            <summary>
                A marker interface to represent a notification.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.IUmbracoApplicationLifetimeNotification">
            <summary>
                Represents an Umbraco application lifetime (starting, started, stopping, stopped) notification.
            </summary>
            <seealso cref="T:Umbraco.Cms.Core.Notifications.INotification" />
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.IUmbracoApplicationLifetimeNotification.IsRestarting">
            <summary>
                Gets a value indicating whether Umbraco is restarting (e.g. after an install or upgrade).
            </summary>
            <value>
                <c>true</c> if Umbraco is restarting; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.LanguageDeletedNotification">
            <summary>
             A notification that is used to trigger the ILocalizationService when the Delete (ILanguage overload) method is called in the API, after the languages have been deleted.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.LanguageDeletingNotification">
            <summary>
             A notification that is used to trigger the ILocalizationService when the Delete (ILanguage overload) method is called in the API.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.LanguageSavedNotification">
            <summary>
             A notification that is used to trigger the ILocalizationService when the Save (ILanguage overload) method is called in the API, after data has been persisted.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.LanguageSavingNotification">
            <summary>
             A notification that is used to trigger the ILocalizationService when the Save (ILanguage overload) method is called in the API.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MediaCacheRefresherNotification">
            <summary>
            A notification that is used to trigger the Media Cache Refresher.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.MediaCacheRefresherNotification.#ctor(System.Object,Umbraco.Cms.Core.Sync.MessageType)">
            <summary>
             Initializes a new instance of the  <see cref="T:Umbraco.Cms.Core.Notifications.MediaCacheRefresherNotification"/>
            </summary>
            <param name="messageObject">
            The refresher payload.
            </param>
            <param name="messageType">
            Type of the cache refresher message, <see cref="T:Umbraco.Cms.Core.Sync.MessageType"/>
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MediaDeletedNotification">
            <summary>
             A notification that is used to trigger the IMediaService when the Delete and EmptyRecycleBin methods are called in the API, after the media has been deleted.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MediaDeletedVersionsNotification">
            <summary>
             A notification that is used to trigger the IMediaService when the DeleteVersion and DeleteVersions methods are called in the API, after the media version has been deleted.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.MediaDeletedVersionsNotification.#ctor(System.Int32,Umbraco.Cms.Core.Events.EventMessages,System.Int32,System.Boolean,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.MediaDeletingVersionsNotification"/>.
            </summary>
            <param name="id">
            Gets the id of the deleted <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> object.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
            <param name="specificVersion">
            Gets the id of the deleted <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> object version.
            </param>
            <param name="deletePriorVersions">
            False by default.
            </param>
            <param name="dateToRetain">
            Gets the latest version date.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MediaDeletingNotification">
            <summary>
             A notification that is used to trigger the IMediaService when the DeleteMediaOfType, Delete and EmptyRecycleBin methods are called in the API.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.MediaDeletingNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IMedia},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.MediaDeletingNotification"/>.
            </summary>
            <param name="target">
             Gets the collection of <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> objects being deleted.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MediaDeletingVersionsNotification">
            <summary>
             A notification that is used to trigger the IMediaService when the DeleteVersion and DeleteVersions methods are called in the API.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.MediaDeletingVersionsNotification.#ctor(System.Int32,Umbraco.Cms.Core.Events.EventMessages,System.Int32,System.Boolean,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.MediaDeletingVersionsNotification"/>.
            </summary>
            <param name="id">
            Gets the id of the <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> object being deleted.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
            <param name="specificVersion">
            Gets the id of the <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> object version being deleted.
            </param>
            <param name="deletePriorVersions">
            False by default.
            </param>
            <param name="dateToRetain">
            Gets the latest version date.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MediaMovedNotification">
            <summary>
             A notification that is used to trigger the IMediaService when the Move method is called in the API. The event is fired after the media object has been moved.
             NOTE: If the target parent is the Recycle bin, this notification is never published. Try the <see cref="T:Umbraco.Cms.Core.Notifications.MediaMovedToRecycleBinNotification"/> instead.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MediaMovedToRecycleBinNotification">
            <summary>
             A notification that is used to trigger the IMediaService when the MoveToRecycleBin method is called in the API, after the media object has been moved to the RecycleBin.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MediaMovingNotification">
            <summary>
             A notification that is used to trigger the IMediaService when the Move method is called in the API.
             NOTE: If the target parent is the Recycle bin, this notification is never published. Try the <see cref="T:Umbraco.Cms.Core.Notifications.MediaMovingToRecycleBinNotification"/> instead.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MediaMovingToRecycleBinNotification">
            <summary>
             A notification that is used to trigger the IMediaService when the MoveToRecycleBin method is called in the API.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MediaSavedNotification">
            <summary>
             A notification that is used to trigger the IMediaService when the Save method is called in the API and after the data has been persisted.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.MediaSavedNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IMedia},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.MediaSavedNotification"/>.
            </summary>
            <param name="target">
             Gets the saved collection of <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> objects.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MediaSavingNotification">
            <summary>
             A notification that is used to trigger the IMediaService when the Save method is called in the API.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.MediaSavingNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IMedia},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.MediaSavingNotification"/>.
            </summary>
            <param name="target">
             Gets the collection of <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> objects being saved.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MediaTypeChangedNotification">
            <summary>
             A notification that is published when a MediaType is saved or deleted, after the transaction has completed. This is mainly used for caching purposes, and generally not recommended. Use <see cref="T:Umbraco.Cms.Core.Notifications.MediaTypeSavedNotification"/> and <see cref="T:Umbraco.Cms.Core.Notifications.MediaTypeDeletedNotification"/> instead.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MediaTypeDeletedNotification">
            <summary>
             A notification that is used to trigger the IMediaTypeService when the Delete method is called in the API, after the entities has been deleted.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.MediaTypeDeletedNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IMediaType},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.MediaTypeDeletedNotification"/>.
            </summary>
            <param name="target">
            Gets the collection of deleted <see cref="T:Umbraco.Cms.Core.Models.IMediaType"/> objects.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MediaTypeDeletingNotification">
            <summary>
             A notification that is used to trigger the IMediaTypeService when the Delete method is called in the API.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.MediaTypeDeletingNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IMediaType},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.MediaTypeDeletingNotification"/>.
            </summary>
            <param name="target">
            Gets the collection of <see cref="T:Umbraco.Cms.Core.Models.IMediaType"/> objects being deleted.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MediaTypeMovedNotification">
            <summary>
             A notification that is used to trigger the IMediaTypeService when the Move method is called in the API, after the entities has been moved.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.MediaTypeMovedNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Events.MoveEventInfo{Umbraco.Cms.Core.Models.IMediaType}},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.MediaTypeMovedNotification"/>.
            </summary>
            <param name="target">
            Gets the <see cref="T:Umbraco.Cms.Core.Models.IMediaType"/> object being moved.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MediaTypeMovingNotification">
            <summary>
             A notification that is used to trigger the IMediaTypeService when the Move method is called in the API.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.MediaTypeMovingNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Events.MoveEventInfo{Umbraco.Cms.Core.Models.IMediaType}},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.MediaTypeMovingNotification"/>.
            </summary>
            <param name="target">
            Gets the <see cref="T:Umbraco.Cms.Core.Models.IMediaType"/> object being moved.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MediaTypeSavedNotification">
            <summary>
             A notification that is used to trigger the IMediaTypeService when the Save method is called in the API, after the entities has been saved.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.MediaTypeSavedNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IMediaType},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.MediaTypeSavedNotification"/>.
            </summary>
            <param name="target">
            Gets the collection of saved <see cref="T:Umbraco.Cms.Core.Models.IMediaType"/> objects.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MediaTypeSavingNotification">
            <summary>
             A notification that is used to trigger the IMediaTypeService when the Save method is called in the API.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.MediaTypeSavingNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IMediaType},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.MediaTypeSavingNotification"/>.
            </summary>
            <param name="target">
            Gets the collection of <see cref="T:Umbraco.Cms.Core.Models.IMediaType"/> objects being saved.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MemberCacheRefresherNotification">
            <summary>
            A notification that is used to trigger the Member Cache Refresher.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.MemberCacheRefresherNotification.#ctor(System.Object,Umbraco.Cms.Core.Sync.MessageType)">
            <summary>
             Initializes a new instance of the  <see cref="T:Umbraco.Cms.Core.Notifications.MemberCacheRefresherNotification"/>
            </summary>
            <param name="messageObject">
            The refresher payload.
            </param>
            <param name="messageType">
            Type of the cache refresher message, <see cref="T:Umbraco.Cms.Core.Sync.MessageType"/>
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MemberDeletedNotification">
            <summary>
             A notification that is used to trigger the IMemberService when the Delete and DeleteMembersOfType methods are called in the API, after the members have been deleted.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.MemberDeletedNotification.#ctor(Umbraco.Cms.Core.Models.IMember,Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.MemberDeletedNotification"/>.
            </summary>
            <param name="target">
            Gets the collection of deleted <see cref="T:Umbraco.Cms.Core.Models.IMember"/> objects.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MemberDeletingNotification">
            <summary>
             A notification that is used to trigger the IMemberService when the Delete and DeleteMembersOfType methods are called in the API.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.MemberDeletingNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IMember},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.MemberDeletingNotification"/>.
            </summary>
            <param name="target">
            Gets the collection of <see cref="T:Umbraco.Cms.Core.Models.IMember"/> objects being deleted.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MemberSavedNotification">
            <summary>
             A notification that is used to trigger the IMemberService when the Save method is called in the API and after data has been persisted.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.MemberSavedNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IMember},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.MemberSavedNotification"/>.
            </summary>
            <param name="target">
            Gets the saved collection of <see cref="T:Umbraco.Cms.Core.Models.IMember"/> objects.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MemberSavingNotification">
            <summary>
             A notification that is used to trigger the IMemberService when the Saving method is called in the API.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.MemberSavingNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IMember},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.MemberSavingNotification"/>.
            </summary>
            <param name="target">
            Gets the collection of <see cref="T:Umbraco.Cms.Core.Models.IMember"/> objects being saved.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MemberTypeChangedNotification">
            <summary>
             A notification that is published when a MemberType is saved or deleted, after the transaction has completed.
             This is mainly used for caching purposes, and generally not recommended. Use <see cref="T:Umbraco.Cms.Core.Notifications.MemberTypeSavedNotification"/> and <see cref="T:Umbraco.Cms.Core.Notifications.MemberTypeDeletedNotification"/> instead.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MemberTypeDeletedNotification">
            <summary>
             A notification that is used to trigger the IMemberTypeService when the Delete method is called in the API, after the entities have been deleted.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.MemberTypeDeletedNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IMemberType},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.MemberTypeDeletedNotification"/>.
            </summary>
            <param name="target">
            Gets the collection of deleted <see cref="T:Umbraco.Cms.Core.Models.IMemberType"/> objects.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MemberTypeDeletingNotification">
            <summary>
             A notification that is used to trigger the IMemberTypeService when the Delete method is called in the API.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.MemberTypeDeletingNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IMemberType},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.MemberTypeDeletingNotification"/>.
            </summary>
            <param name="target">
            Gets the collection of <see cref="T:Umbraco.Cms.Core.Models.IMemberType"/> objects being deleted.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MemberTypeMovingNotification">
            <summary>
             A notification that is used to trigger the IMemberTypeService when the Move method is called in the API.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MemberTypeSavedNotification">
            <summary>
             A notification that is used to trigger the IMemberTypeService when the Save method is called in the API, after the entities have been saved.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.MemberTypeSavedNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IMemberType},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.MemberTypeSavedNotification"/>.
            </summary>
            <param name="target">
            Gets the collection of saved <see cref="T:Umbraco.Cms.Core.Models.IMemberType"/> objects.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.MemberTypeSavingNotification">
            <summary>
             A notification that is used to trigger the IMemberTypeService when the Save method is called in the API.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.MemberTypeSavingNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IMemberType},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.MemberTypeSavingNotification"/>.
            </summary>
            <param name="target">
            Gets the collection of <see cref="T:Umbraco.Cms.Core.Models.IMemberType"/> objects being saved.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ModelBindingErrorNotification">
            <summary>
                Contains event data for the <see cref="T:Umbraco.Cms.Web.Common.ModelBinders.ModelBindingException" /> event.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.ModelBindingErrorNotification.#ctor(System.Type,System.Type,System.Text.StringBuilder)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.ModelBindingErrorNotification" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.ModelBindingErrorNotification.SourceType">
            <summary>
                Gets the type of the source object.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.ModelBindingErrorNotification.ModelType">
            <summary>
                Gets the type of the view model.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.ModelBindingErrorNotification.Message">
            <summary>
                Gets the message string builder.
            </summary>
            <remarks>Handlers of the event can append text to the message.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.MovedNotification`1.MoveInfoCollection">
            <summary>
            Gets a enumeration of <see cref="T:Umbraco.Cms.Core.Events.MoveEventInfo`1"/> with the moved entities.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.MovingNotification`1.MoveInfoCollection">
            <summary>
            Gets a enumeration of <see cref="T:Umbraco.Cms.Core.Events.MoveEventInfo`1"/> with the moving entities.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.RelationDeletedNotification">
            <summary>
             A notification that is published when a relation has been deleted.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.RelationDeletedNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IRelation},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.RelationDeletedNotification"/>.
            </summary>
            <param name="target">
            Gets the collection of <see cref="T:Umbraco.Cms.Core.Models.IRelation"/> objects having been deleted.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.RelationDeletingNotification">
            <summary>
             A notification that is published when a relation is being deleted.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.RelationDeletingNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IRelation},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.RelationDeletingNotification"/>.
            </summary>
            <param name="target">
            Gets the collection of <see cref="T:Umbraco.Cms.Core.Models.IRelation"/> objects being deleted.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.RelationSavedNotification">
            <summary>
             A notification that is published when a relation has been saved.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.RelationSavedNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IRelation},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.RelationSavedNotification"/>.
            </summary>
            <param name="target">
            Gets the collection of <see cref="T:Umbraco.Cms.Core.Models.IRelation"/> objects having been saved.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.RelationSavingNotification">
            <summary>
             A notification that is published when a relation is being saved.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.RelationSavingNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IRelation},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.RelationSavingNotification"/>.
            </summary>
            <param name="target">
            Gets the collection of <see cref="T:Umbraco.Cms.Core.Models.IRelation"/> objects being saved.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.RelationTypeDeletedNotification">
            <summary>
             A notification that is published when a relation type has been deleted.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.RelationTypeDeletingNotification">
            <summary>
             A notification that is published when a relation type is being deleted.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.RelationTypeDeletingNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IRelationType},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.RelationTypeDeletingNotification"/>.
            </summary>
            <param name="target">
            Gets the collection of <see cref="T:Umbraco.Cms.Core.Models.IRelationType"/> objects being deleted.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.RelationTypeSavedNotification">
            <summary>
             A notification that is published when a relation type has been saved.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.RelationTypeSavedNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IRelationType},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.RelationTypeSavedNotification"/>.
            </summary>
            <param name="target">
            Gets the collection of <see cref="T:Umbraco.Cms.Core.Models.IRelationType"/> objects having been saved.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.RelationTypeSavingNotification">
            <summary>
             A notification that is published when a relation type is being saved.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.RelationTypeSavingNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IRelationType},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.RelationTypeSavingNotification"/>.
            </summary>
            <param name="target">
            Gets the collection of <see cref="T:Umbraco.Cms.Core.Models.IRelationType"/> objects being saved.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.RemovedMemberRolesNotification">
            <summary>
             A notification that is used to trigger the IMemberService when the DissociateRoles method is called in the API.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.RemovedMemberRolesNotification.#ctor(System.Int32[],System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.RemovedMemberRolesNotification"/>.
            </summary>
            <param name="memberIds">
            Collection of Ids of the members the roles are being removed from.
            </param>
            <param name="roles">
            Collection of role names being removed.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.RoutingRequestNotification">
            <summary>
                Used for notifying when an Umbraco request is being built
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.RoutingRequestNotification.#ctor(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.RoutingRequestNotification" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.RoutingRequestNotification.RequestBuilder">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.RuntimePremigrationsUpgradeNotification.UpgradeResult">
            <summary>
                Gets/sets the result of the upgrade
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.RuntimeUnattendedInstallNotification">
            <summary>
                Used to notify when the core runtime can do an unattended install.
            </summary>
            <remarks>
                It is entirely up to the handler to determine if an unattended installation should occur and
                to perform the logic.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.RuntimeUnattendedUpgradeNotification">
            <summary>
                Used to notify when the core runtime can do an unattended upgrade.
            </summary>
            <remarks>
                It is entirely up to the handler to determine if an unattended upgrade should occur and
                to perform the logic.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.RuntimeUnattendedUpgradeNotification.UnattendedUpgradeResult">
            <summary>
                Gets/sets the result of the unattended upgrade
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ScriptDeletedNotification">
            <summary>
             A notification that is used to trigger the IFileService when the DeleteScript method is called in the API, after the script has been deleted.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ScriptDeletingNotification">
            <summary>
             A notification that is used to trigger the IFileService when the DeleteScript method is called in the API.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ScriptSavedNotification">
            <summary>
             A notification that is used to trigger the IFileService when the SaveScript method is called in the API, after the script has been saved.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ScriptSavingNotification">
            <summary>
             A notification that is used to trigger the IFileService when the SaveScript method is called in the API.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.SendEmailNotification.EmailType">
            <summary>
                Some metadata about the email which can be used by handlers to determine if they should handle the email or not
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.SendEmailNotification.IsHandled">
            <summary>
                Returns true if the email sending is handled.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.SendEmailNotification.HandleEmail">
            <summary>
                Call to tell Umbraco that the email sending is handled.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.ServerVariablesParsingNotification">
            <summary>
                A notification for when server variables are parsing
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.ServerVariablesParsingNotification.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.ServerVariablesParsingNotification" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.ServerVariablesParsingNotification.ServerVariables">
            <summary>
                Gets a mutable dictionary of server variables
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.StatefulNotification.State">
            <summary>
                This can be used by event subscribers to store state in the notification so they easily deal with custom state data
                between a starting ("ing") and an ending ("ed") notification
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.StylesheetDeletedNotification">
            <summary>
             A notification that is used to trigger the IFileService when the DeleteStylesheet method is called in the API, after the stylesheet has been deleted.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.StylesheetDeletingNotification">
            <summary>
             A notification that is used to trigger the IFileService when the DeleteStylesheet method is called in the API.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.StylesheetSavedNotification">
            <summary>
             A notification that is used to trigger the IFileService when the SaveStyleSheet method is called in the API, after the script has been saved.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.StylesheetSavingNotification">
            <summary>
             A notification that is used to trigger the IFileService when the SaveStyleSheet method is called in the API.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.TemplateDeletedNotification">
            <summary>
             A notification that is used to trigger the IFileService when the DeleteTemplate method is called in the API, after the template has been deleted.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.TemplateDeletingNotification">
            <summary>
             A notification that is used to trigger the IFileService when the DeleteTemplate method is called in the API.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.TemplateSavedNotification">
            <summary>
             A notification that is used to trigger the IFileService when the SaveTemplate  method is called in the API, after the template has been saved.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.TemplateSavingNotification">
            <summary>
             A notification that is used to trigger the IFileService when the SaveTemplate  method is called in the API.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.TemplateSavingNotification.#ctor(Umbraco.Cms.Core.Models.ITemplate,Umbraco.Cms.Core.Events.EventMessages,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.TemplateSavingNotification"/>
            </summary>
            <param name="target">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Models.ITemplate"/>.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
            <param name="createTemplateForContentType">
             Boolean value determining if the template is created for a Document Type. It's not recommended to change this value.
            </param>
            <param name="contentTypeAlias">
            This is the alias of the ContentType the template is for. This is used when creating a Document Type with Template. It's not recommended to try and change or set this.
            </param>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.TemplateSavingNotification.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.ITemplate},Umbraco.Cms.Core.Events.EventMessages,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.TemplateSavingNotification"/>
            </summary>
            <param name="target">
            Gets a enumeration of the <see cref="T:Umbraco.Cms.Core.Models.ITemplate"/>.
            </param>
            <param name="messages">
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Events.EventMessages"/>.
            </param>
            <param name="createTemplateForContentType">
             Boolean value determining if the template is created for a Document Type. It's not recommended to change this value.
            </param>
            <param name="contentTypeAlias">
            This is the alias of the ContentType the template is for. This is used when creating a Document Type with Template. It's not recommended to try and change or set this.
            </param>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.UmbracoApplicationStartedNotification">
            <summary>
                Notification that occurs when Umbraco has completely booted up and the request processing pipeline is configured.
            </summary>
            <seealso cref="T:Umbraco.Cms.Core.Notifications.IUmbracoApplicationLifetimeNotification" />
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.UmbracoApplicationStartedNotification.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.UmbracoApplicationStartedNotification" /> class.
            </summary>
            <param name="isRestarting">Indicates whether Umbraco is restarting.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.UmbracoApplicationStartedNotification.IsRestarting">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.UmbracoApplicationStartingNotification">
            <summary>
            Notification that occurs at the very end of the Umbraco boot process (after all components are initialized).
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.UmbracoApplicationStartingNotification.#ctor(Umbraco.Cms.Core.RuntimeLevel,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.UmbracoApplicationStartingNotification" /> class.
            </summary>
            <param name="runtimeLevel">The runtime level</param>
            <param name="isRestarting">Indicates whether Umbraco is restarting.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.UmbracoApplicationStartingNotification.RuntimeLevel">
            <summary>
            Gets the runtime level.
            </summary>
            <value>
            The runtime level.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.UmbracoApplicationStartingNotification.IsRestarting">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.UmbracoApplicationStoppedNotification">
            <summary>
                Notification that occurs when Umbraco has completely shutdown.
            </summary>
            <seealso cref="T:Umbraco.Cms.Core.Notifications.IUmbracoApplicationLifetimeNotification" />
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.UmbracoApplicationStoppedNotification.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.UmbracoApplicationStoppedNotification" /> class.
            </summary>
            <param name="isRestarting">Indicates whether Umbraco is restarting.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.UmbracoApplicationStoppedNotification.IsRestarting">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.UmbracoApplicationStoppingNotification">
            <summary>
            Notification that occurs when Umbraco is shutting down (after all components are terminated).
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.UmbracoApplicationStoppingNotification.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.UmbracoApplicationStoppingNotification" /> class.
            </summary>
            <param name="isRestarting">Indicates whether Umbraco is restarting.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.UmbracoApplicationStoppingNotification.IsRestarting">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.UmbracoRequestBeginNotification">
            <summary>
                Notification raised on each request begin.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.UmbracoRequestBeginNotification.#ctor(Umbraco.Cms.Core.Web.IUmbracoContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.UmbracoRequestBeginNotification" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.UmbracoRequestBeginNotification.UmbracoContext">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Web.IUmbracoContext" />
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.UmbracoRequestEndNotification">
            <summary>
                Notification raised on each request end.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.UmbracoRequestEndNotification.#ctor(Umbraco.Cms.Core.Web.IUmbracoContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Notifications.UmbracoRequestEndNotification" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.UmbracoRequestEndNotification.UmbracoContext">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Web.IUmbracoContext" />
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.UnattendedInstallNotification">
            <summary>
                Used to notify that an Unattended install has completed
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Notifications.UserCacheRefresherNotification">
            <summary>
            A notification that is used to trigger the User Cache Refresher.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Notifications.UserCacheRefresherNotification.#ctor(System.Object,Umbraco.Cms.Core.Sync.MessageType)">
            <summary>
             Initializes a new instance of the  <see cref="T:Umbraco.Cms.Core.Notifications.UserCacheRefresherNotification"/>
            </summary>
            <param name="messageObject">
            The refresher payload.
            </param>
            <param name="messageType">
            Type of the cache refresher message, <see cref="T:Umbraco.Cms.Core.Sync.MessageType"/>
            </param>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.UserNotification.DateTimeUtc">
            <summary>
                Current date/time in UTC format
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.UserNotification.IpAddress">
            <summary>
                The source IP address of the user performing the action
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.UserNotification.AffectedUserId">
            <summary>
                The user affected by the event raised
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Notifications.UserNotification.PerformingUserId">
            <summary>
                If a user is performing an action on a different user, then this will be set. Otherwise it will be -1
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Packaging.CompiledPackageXmlParser">
            <summary>
                Parses the xml document contained in a compiled (zip) Umbraco package
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Packaging.ICreatedPackagesRepository">
            <summary>
                Manages the storage of created package definitions
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Packaging.ICreatedPackagesRepository.ExportPackage(Umbraco.Cms.Core.Packaging.PackageDefinition)">
            <summary>
                Creates the package file and returns it's physical path
            </summary>
            <param name="definition"></param>
        </member>
        <member name="P:Umbraco.Cms.Core.Packaging.InstalledPackage.HasMigrations">
            <summary>
            Gets a value indicating whether this package has migrations.
            </summary>
            <value>
              <c>true</c> if this package has migrations; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Packaging.InstalledPackage.HasPendingMigrations">
            <summary>
            Gets a value indicating whether this package has pending migrations.
            </summary>
            <value>
              <c>true</c> if this package has pending migrations; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Packaging.InstalledPackageMigrationPlans.FinalMigrationId">
            <summary>
                If the package has migrations, this will be it's final migration Id
            </summary>
            <remarks>
                This can be used to determine if the package advertises any migrations
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Packaging.InstalledPackageMigrationPlans.CurrentMigrationId">
            <summary>
                If the package has migrations, this will be it's current migration Id
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Packaging.IPackageDefinitionRepository">
            <summary>
                Defines methods for persisting package definitions to storage
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Packaging.IPackageDefinitionRepository.SavePackage(Umbraco.Cms.Core.Packaging.PackageDefinition)">
            <summary>
                Persists a package definition to storage
            </summary>
            <returns>
                true if creating/updating the package was successful, otherwise false
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Packaging.IPackageInstallation.InstallPackageData(Umbraco.Cms.Core.Models.Packaging.CompiledPackage,System.Int32,Umbraco.Cms.Core.Packaging.PackageDefinition@)">
            <summary>
                Installs a packages data and entities
            </summary>
            <param name="packageDefinition"></param>
            <param name="compiledPackage"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Packaging.IPackageInstallation.ReadPackage(System.Xml.Linq.XDocument)">
            <summary>
                Reads the package xml and returns the <see cref="T:Umbraco.Cms.Core.Models.Packaging.CompiledPackage" /> model
            </summary>
            <param name="packageXmlFile"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Packaging.PackageDefinition">
            <summary>
                A created package in the back office.
            </summary>
            <remarks>
                This data structure is persisted to createdPackages.config when creating packages in the back office.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Packaging.PackageDefinition.PackagePath">
            <summary>
                The full path to the package's XML file.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Packaging.PackageDefinitionXmlParser">
            <summary>
                Converts a <see cref="T:Umbraco.Cms.Core.Packaging.PackageDefinition" /> to and from XML
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Packaging.PackagesRepository">
            <summary>
                Manages the storage of installed/created package definitions
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Packaging.PackagesRepository.#ctor(Umbraco.Cms.Core.Services.IContentService,Umbraco.Cms.Core.Services.IContentTypeService,Umbraco.Cms.Core.Services.IDataTypeService,Umbraco.Cms.Core.Services.IFileService,Umbraco.Cms.Core.Services.ILocalizationService,Umbraco.Cms.Core.Hosting.IHostingEnvironment,Umbraco.Cms.Core.Services.IEntityXmlSerializer,Microsoft.Extensions.Options.IOptions{Umbraco.Cms.Core.Configuration.Models.GlobalSettings},Umbraco.Cms.Core.Services.IMediaService,Umbraco.Cms.Core.Services.IMediaTypeService,Umbraco.Cms.Core.IO.MediaFileManager,Umbraco.Cms.Core.IO.FileSystems,System.String,System.String,System.String,System.String)">
            <summary>
                Constructor
            </summary>
            <param name="contentService"></param>
            <param name="contentTypeService"></param>
            <param name="dataTypeService"></param>
            <param name="fileService"></param>
            <param name="languageService"></param>
            <param name="hostingEnvironment"></param>
            <param name="serializer"></param>
            <param name="globalSettings"></param>
            <param name="packageRepositoryFileName">
                The file name for storing the package definitions (i.e. "createdPackages.config")
            </param>
            <param name="tempFolderPath"></param>
            <param name="packagesFolderPath"></param>
            <param name="mediaFolderPath"></param>
            <param name="mediaService"></param>
            <param name="mediaTypeService"></param>
            <param name="mediaFileManager"></param>
            <param name="fileSystems"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Packaging.PackagesRepository.GetStylesheetXml(System.String,System.Boolean)">
            <summary>
                Converts a umbraco stylesheet to a package xml node
            </summary>
            <param name="path">The path of the stylesheet.</param>
            <param name="includeProperties">if set to <c>true</c> [include properties].</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Persistence.IQueryRepository`1">
            <summary>
                Defines the base implementation of a querying repository.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.IQueryRepository`1.Get(Umbraco.Cms.Core.Persistence.Querying.IQuery{`0})">
            <summary>
                Gets entities.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.IQueryRepository`1.Count(Umbraco.Cms.Core.Persistence.Querying.IQuery{`0})">
            <summary>
                Counts entities.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Persistence.IReadRepository`2">
            <summary>
                Defines the base implementation of a reading repository.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.IReadRepository`2.Get(`0)">
            <summary>
                Gets an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.IReadRepository`2.GetMany(`0[])">
            <summary>
                Gets entities.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.IReadRepository`2.Exists(`0)">
            <summary>
                Gets a value indicating whether an entity exists.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Persistence.IReadWriteQueryRepository`2">
            <summary>
                Defines the base implementation of a reading, writing and querying repository.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Persistence.IRepository">
            <summary>
                Defines the base implementation of a repository.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Persistence.IWriteRepository`1">
            <summary>
                Defines the base implementation of a writing repository.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.IWriteRepository`1.Save(`0)">
            <summary>
                Saves an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.IWriteRepository`1.Delete(`0)">
            <summary>
                Deletes an entity.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:Umbraco.Cms.Core.Persistence.Querying.IQuery`1">
            <summary>
                Represents a query for building Linq translatable SQL queries
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Querying.IQuery`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                Adds a where clause to the query
            </summary>
            <param name="predicate"></param>
            <returns>This instance so calls to this method are chainable</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Querying.IQuery`1.GetWhereClauses">
            <summary>
                Returns all translated where clauses and their sql parameters
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Querying.IQuery`1.WhereIn(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.IEnumerable)">
            <summary>
                Adds a where-in clause to the query
            </summary>
            <param name="fieldSelector"></param>
            <param name="values"></param>
            <returns>This instance so calls to this method are chainable</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Querying.IQuery`1.WhereAny(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}})">
            <summary>
                Adds a set of OR-ed where clauses to the query.
            </summary>
            <param name="predicates"></param>
            <returns>This instance so calls to this method are chainable.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType">
            <summary>
                Determines how to match a string property value
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Persistence.Querying.ValuePropertyMatchType">
            <summary>
                Determine how to match a number or data value
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Persistence.Repositories.IAuditEntryRepository">
            <summary>
                Represents a repository for <see cref="T:Umbraco.Cms.Core.Models.IAuditEntry" /> entities.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IAuditEntryRepository.GetPage(System.Int64,System.Int32,System.Int64@)">
            <summary>
                Gets a page of entries.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IAuditEntryRepository.IsAvailable">
            <summary>
                Determines whether the repository is available.
            </summary>
            <remarks>During an upgrade, the repository may not be available, until the table has been created.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IAuditRepository.GetPagedResultsByQuery(Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IAuditItem},System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Direction,Umbraco.Cms.Core.Models.AuditType[],Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IAuditItem})">
            <summary>
                Return the audit items as paged result
            </summary>
            <param name="query">
                The query coming from the service
            </param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="orderDirection"></param>
            <param name="auditTypeFilter">
                Since we currently do not have enum support with our expression parser, we cannot query on AuditType in the query
                or the custom filter
                so we need to do that here
            </param>
            <param name="customFilter">
                A user supplied custom filter
            </param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Persistence.Repositories.ICacheInstructionRepository">
            <summary>
                Represents a repository for <see cref="T:Umbraco.Cms.Core.Models.CacheInstruction" /> entities.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ICacheInstructionRepository.CountAll">
            <summary>
                Gets the count of pending cache instruction records.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ICacheInstructionRepository.CountPendingInstructions(System.Int32)">
            <summary>
                Gets the count of pending cache instructions.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ICacheInstructionRepository.GetMaxId">
            <summary>
                Gets the most recent cache instruction record Id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ICacheInstructionRepository.Exists(System.Int32)">
            <summary>
                Checks to see if a single cache instruction by Id exists.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ICacheInstructionRepository.Add(Umbraco.Cms.Core.Models.CacheInstruction)">
            <summary>
                Adds a new cache instruction record.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ICacheInstructionRepository.GetPendingInstructions(System.Int32,System.Int32)">
            <summary>
                Gets a collection of cache instructions created later than the provided Id.
            </summary>
            <param name="lastId">Last id processed.</param>
            <param name="maxNumberToRetrieve">The maximum number of instructions to retrieve.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ICacheInstructionRepository.DeleteInstructionsOlderThan(System.DateTime)">
            <summary>
                Deletes cache instructions older than the provided date.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Persistence.Repositories.IConsentRepository">
            <summary>
                Represents a repository for <see cref="T:Umbraco.Cms.Core.Models.IConsent" /> entities.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IConsentRepository.ClearCurrent(System.String,System.String,System.String)">
            <summary>
                Clears the current flag.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Persistence.Repositories.IContentRepository`2">
            <summary>
                Defines the base implementation of a repository for content items.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Persistence.Repositories.IContentRepository`2.RecycleBinId">
            <summary>
                Gets the recycle bin identifier.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IContentRepository`2.GetAllVersions(System.Int32)">
            <summary>
                Gets versions.
            </summary>
            <remarks>Current version is first, and then versions are ordered with most recent first.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IContentRepository`2.GetAllVersionsSlim(System.Int32,System.Int32,System.Int32)">
            <summary>
                Gets versions.
            </summary>
            <remarks>Current version is first, and then versions are ordered with most recent first.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IContentRepository`2.GetVersionIds(System.Int32,System.Int32)">
            <summary>
                Gets version identifiers.
            </summary>
            <remarks>Current version is first, and then versions are ordered with most recent first.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IContentRepository`2.GetVersion(System.Int32)">
            <summary>
                Gets a version.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IContentRepository`2.DeleteVersion(System.Int32)">
            <summary>
                Deletes a version.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IContentRepository`2.DeleteVersions(System.Int32,System.DateTime)">
            <summary>
                Deletes all versions older than a date.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IContentRepository`2.GetRecycleBin">
            <summary>
                Gets the recycle bin content.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IContentRepository`2.Count(System.String)">
            <summary>
                Gets the count of content items of a given content type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IContentRepository`2.CountChildren(System.Int32,System.String)">
            <summary>
                Gets the count of child content items of a given parent content, of a given content type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IContentRepository`2.CountDescendants(System.Int32,System.String)">
            <summary>
                Gets the count of descendant content items of a given parent content, of a given content type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IContentRepository`2.GetPage(Umbraco.Cms.Core.Persistence.Querying.IQuery{`1},System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{`1},Umbraco.Cms.Core.Services.Ordering)">
            <summary>
                Gets paged content items.
            </summary>
            <remarks>Here, <paramref name="filter" /> can be null but <paramref name="ordering" /> cannot.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Persistence.Repositories.IContentTypeCommonRepository">
            <summary>
                Represents the content types common repository, dealing with document, media and member types.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IContentTypeCommonRepository.GetAllTypes">
            <summary>
                Gets and cache all types.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IContentTypeCommonRepository.ClearCache">
            <summary>
                Clears the cache.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IContentTypeRepository.GetByQuery(Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.PropertyType})">
            <summary>
                Gets all entities of the specified <see cref="T:Umbraco.Cms.Core.Models.IPropertyType" /> query
            </summary>
            <param name="query"></param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IContentType" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IContentTypeRepository.GetAllPropertyTypeAliases">
            <summary>
                Gets all property type aliases.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IContentTypeRepository.GetAllContentTypeAliases(System.Guid[])">
            <summary>
                Gets all content type aliases
            </summary>
            <param name="objectTypes">
                If this list is empty, it will return all content type aliases for media, members and content, otherwise
                it will only return content type aliases for the object types specified
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IContentTypeRepositoryBase`1.GetUniqueAlias(System.String)">
            <summary>
                Derives a unique alias from an existing alias.
            </summary>
            <param name="alias">The original alias.</param>
            <returns>The original alias with a number appended to it, so that it is unique.</returns>
            <remarks>Unique across all content, media and member types.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IContentTypeRepositoryBase`1.HasContainerInPath(System.String)">
            <summary>
                Gets a value indicating whether there is a list view content item in the path.
            </summary>
            <param name="contentPath"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IContentTypeRepositoryBase`1.HasContainerInPath(System.Int32[])">
            <summary>
                Gets a value indicating whether there is a list view content item in the path.
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IContentTypeRepositoryBase`1.HasContentNodes(System.Int32)">
            <summary>
                Returns true or false depending on whether content nodes have been created based on the provided content type id.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IDataTypeRepository.FindUsages(System.Int32)">
            <summary>
                Returns a dictionary of content type <see cref="T:Umbraco.Cms.Core.Udi" />s and the property type aliases that use a
                <see cref="T:Umbraco.Cms.Core.Models.IDataType" />
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IDataTypeRepository.FindListViewUsages(System.Int32)">
            <summary>
                Returns a dictionary of content type <see cref="T:Umbraco.Cms.Core.Udi" />s and the data type (List view) aliases that use a
                <see cref="T:Umbraco.Cms.Core.Models.IDataType" />
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IDocumentRepository.GetContentSchedule(System.Int32)">
            <summary>
                Gets publish/unpublish schedule for a content node.
            </summary>
            <param name="contentId"></param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.ContentScheduleCollection" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IDocumentRepository.PersistContentSchedule(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Models.ContentScheduleCollection)">
            <summary>
                Persists publish/unpublish schedule for a content node.
            </summary>
            <param name="content"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IDocumentRepository.ClearSchedule(System.DateTime)">
            <summary>
                Clears the publishing schedule for all entries having an a date before (lower than, or equal to) a specified date.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IDocumentRepository.GetContentForExpiration(System.DateTime)">
            <summary>
                Gets <see cref="T:Umbraco.Cms.Core.Models.IContent" /> objects having an expiration date before (lower than, or equal to) a specified date.
            </summary>
            <remarks>
                The content returned from this method may be culture variant, in which case you can use
                <see cref="M:Umbraco.Extensions.ContentExtensions.GetStatus(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Models.ContentScheduleCollection,System.String)" /> to get the status for a specific culture.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IDocumentRepository.GetContentForRelease(System.DateTime)">
            <summary>
                Gets <see cref="T:Umbraco.Cms.Core.Models.IContent" /> objects having a release date before (lower than, or equal to) a specified date.
            </summary>
            <remarks>
                The content returned from this method may be culture variant, in which case you can use
                <see cref="M:Umbraco.Extensions.ContentExtensions.GetStatus(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Models.ContentScheduleCollection,System.String)" /> to get the status for a specific culture.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IDocumentRepository.CountPublished(System.String)">
            <summary>
                Get the count of published items
            </summary>
            <returns></returns>
            <remarks>
                We require this on the repo because the IQuery{IContent} cannot supply the 'newest' parameter
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IDocumentRepository.ReplaceContentPermissions(Umbraco.Cms.Core.Models.Membership.EntityPermissionSet)">
            <summary>
                Used to bulk update the permissions set for a content item. This will replace all permissions
                assigned to an entity with a list of user id &amp; permission pairs.
            </summary>
            <param name="permissionSet"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IDocumentRepository.AssignEntityPermission(Umbraco.Cms.Core.Models.IContent,System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Assigns a single permission to the current content item for the specified user group ids
            </summary>
            <param name="entity"></param>
            <param name="permission"></param>
            <param name="groupIds"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IDocumentRepository.GetPermissionsForEntity(System.Int32)">
            <summary>
                Gets the explicit list of permissions for the content item
            </summary>
            <param name="entityId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IDocumentRepository.AddOrUpdatePermissions(Umbraco.Cms.Core.Models.Membership.ContentPermissionSet)">
            <summary>
                Used to add/update a permission for a content item
            </summary>
            <param name="permission"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IDocumentRepository.RecycleBinSmells">
            <summary>
                Returns true if there is any content in the recycle bin
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IDocumentVersionRepository.GetDocumentVersionsEligibleForCleanup">
            <summary>
                Gets a list of all historic content versions.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IDocumentVersionRepository.GetCleanupPolicies">
            <summary>
                Gets cleanup policy override settings per content type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IDocumentVersionRepository.GetPagedItemsByContentId(System.Int32,System.Int64,System.Int32,System.Int64@,System.Nullable{System.Int32})">
            <summary>
                Gets paginated content versions for given content id paginated.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IDocumentVersionRepository.DeleteVersions(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Deletes multiple content versions by ID.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IDocumentVersionRepository.SetPreventCleanup(System.Int32,System.Boolean)">
            <summary>
                Updates the prevent cleanup flag on a content version.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IDocumentVersionRepository.Get(System.Int32)">
            <summary>
                Gets the content version metadata for a specific version.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IEntityRepository.GetByQuery(Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.Entities.IUmbracoEntity})">
            <summary>
                Gets entities for a query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IEntityRepository.GetByQuery(Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.Entities.IUmbracoEntity},System.Guid)">
            <summary>
                Gets entities for a query and a specific object type allowing the query to be slightly more optimized
            </summary>
            <param name="query"></param>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IEntityRepository.Exists(System.Guid,System.Guid)">
            <summary>
            Asserts if an entity with the given object type exists.
            </summary>
            <param name="key">The Key of the entity to find.</param>
            <param name="objectType">The object type key of the entity.</param>
            <returns>True if an entity with the given key and object type exists.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IEntityRepository.Exists(System.Int32,System.Guid)">
            <summary>
            Asserts if an entity with the given object type exists.
            </summary>
            <param name="id">The id of the entity to find.</param>
            <param name="objectType">The object type key of the entity.</param>
            <returns>True if an entity with the given id and object type exists.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IEntityRepository.GetPagedResultsByQuery(Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.Entities.IUmbracoEntity},System.Guid,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.Entities.IUmbracoEntity},Umbraco.Cms.Core.Services.Ordering)">
            <summary>
                Gets paged entities for a query and a specific object type
            </summary>
            <param name="query"></param>
            <param name="objectType"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="filter"></param>
            <param name="ordering"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Persistence.Repositories.IExternalLoginWithKeyRepository">
            <summary>
                Repository for external logins with Guid as key, so it can be shared for members and users.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IExternalLoginWithKeyRepository.Save(System.Guid,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Security.IExternalLogin})">
            <summary>
                Replaces all external login providers for the user/member key.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IExternalLoginWithKeyRepository.Save(System.Guid,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Security.IExternalLoginToken})">
            <summary>
                Replaces all external login provider tokens for the providers specified for the user/member key.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IExternalLoginWithKeyRepository.DeleteUserLogins(System.Guid)">
            <summary>
                Deletes all external logins for the specified the user/member key.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IExternalLoginWithKeyRepository.DeleteUserLoginsForRemovedProviders(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Deletes external logins that aren't associated with the current collection of providers.
            </summary>
            <param name="currentLoginProviders">The names of the currently configured providers.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IKeyValueRepository.FindByKeyPrefix(System.String)">
            <summary>
                Returns key/value pairs for all keys with the specified prefix.
            </summary>
            <param name="keyPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ILanguageRepository.GetIdByIsoCode(System.String,System.Boolean)">
            <summary>
                Gets a language identifier from its ISO code.
            </summary>
            <remarks>
                <para>This can be optimized and bypass all deep cloning.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ILanguageRepository.GetIsoCodeById(System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Gets a language ISO code from its identifier.
            </summary>
            <remarks>
                <para>This can be optimized and bypass all deep cloning.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ILanguageRepository.GetDefaultIsoCode">
            <summary>
                Gets the default language ISO code.
            </summary>
            <remarks>
                <para>This can be optimized and bypass all deep cloning.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ILanguageRepository.GetDefaultId">
            <summary>
                Gets the default language identifier.
            </summary>
            <remarks>
                <para>This can be optimized and bypass all deep cloning.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IMemberGroupRepository.Get(System.Guid)">
            <summary>
                Gets a member group by it's uniqueId
            </summary>
            <param name="uniqueId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IMemberGroupRepository.GetByName(System.String)">
            <summary>
                Gets a member group by it's name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IMemberGroupRepository.CreateIfNotExists(System.String)">
            <summary>
                Creates the new member group if it doesn't already exist
            </summary>
            <param name="roleName"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IMemberGroupRepository.GetMemberGroupsForMember(System.Int32)">
            <summary>
                Returns the member groups for a given member
            </summary>
            <param name="memberId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IMemberGroupRepository.GetMemberGroupsForMember(System.String)">
            <summary>
                Returns the member groups for a given member
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IMemberRepository.FindMembersInRole(System.String,System.String,Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
                Finds members in a given role
            </summary>
            <param name="roleName"></param>
            <param name="usernameToMatch"></param>
            <param name="matchType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IMemberRepository.GetByMemberGroup(System.String)">
            <summary>
                Get all members in a specific group
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IMemberRepository.Exists(System.String)">
            <summary>
                Checks if a member with the username exists
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IMemberRepository.GetCountByQuery(Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IMember})">
            <summary>
                Gets the count of items based on a complex query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.INavigationRepository.GetContentNodesByObjectType(System.Guid)">
            <summary>
                Retrieves a collection of content nodes as navigation models based on the object type key.
            </summary>
            <param name="objectTypeKey">The unique identifier for the object type.</param>
            <returns>A collection of navigation models.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.INavigationRepository.GetTrashedContentNodesByObjectType(System.Guid)">
            <summary>
                Retrieves a collection of trashed content nodes as navigation models based on the object type key.
            </summary>
            <param name="objectTypeKey">The unique identifier for the object type.</param>
            <returns>A collection of navigation models.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Persistence.Repositories.IRedirectUrlRepository">
            <summary>
                Defines the <see cref="T:Umbraco.Cms.Core.Models.IRedirectUrl" /> repository.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IRedirectUrlRepository.Get(System.String,System.Guid,System.String)">
            <summary>
                Gets a redirect URL.
            </summary>
            <param name="url">The Umbraco redirect URL route.</param>
            <param name="contentKey">The content unique key.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IRedirectUrlRepository.Delete(System.Guid)">
            <summary>
                Deletes a redirect URL.
            </summary>
            <param name="id">The redirect URL identifier.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IRedirectUrlRepository.DeleteAll">
            <summary>
                Deletes all redirect URLs.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IRedirectUrlRepository.DeleteContentUrls(System.Guid)">
            <summary>
                Deletes all redirect URLs for a given content.
            </summary>
            <param name="contentKey">The content unique key.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IRedirectUrlRepository.GetMostRecentUrl(System.String)">
            <summary>
                Gets the most recent redirect URL corresponding to an Umbraco redirect URL route.
            </summary>
            <param name="url">The Umbraco redirect URL route.</param>
            <returns>The most recent redirect URL corresponding to the route.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IRedirectUrlRepository.GetMostRecentUrlAsync(System.String)">
            <summary>
                Gets the most recent redirect URL corresponding to an Umbraco redirect URL route.
            </summary>
            <param name="url">The Umbraco redirect URL route.</param>
            <returns>The most recent redirect URL corresponding to the route.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IRedirectUrlRepository.GetMostRecentUrl(System.String,System.String)">
            <summary>
            Gets the most recent redirect URL corresponding to an Umbraco redirect URL route.
            </summary>
            <param name="url">The Umbraco redirect URL route.</param>
            <param name="culture">The culture the domain is associated with</param>
            <returns>The most recent redirect URL corresponding to the route.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IRedirectUrlRepository.GetMostRecentUrlAsync(System.String,System.String)">
            <summary>
            Gets the most recent redirect URL corresponding to an Umbraco redirect URL route.
            </summary>
            <param name="url">The Umbraco redirect URL route.</param>
            <param name="culture">The culture the domain is associated with</param>
            <returns>The most recent redirect URL corresponding to the route.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IRedirectUrlRepository.GetContentUrls(System.Guid)">
            <summary>
                Gets all redirect URLs for a content item.
            </summary>
            <param name="contentKey">The content unique key.</param>
            <returns>All redirect URLs for the content item.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IRedirectUrlRepository.GetAllUrls(System.Int64,System.Int32,System.Int64@)">
            <summary>
                Gets all redirect URLs.
            </summary>
            <param name="pageIndex">The page index.</param>
            <param name="pageSize">The page size.</param>
            <param name="total">The total count of redirect URLs.</param>
            <returns>The redirect URLs.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IRedirectUrlRepository.GetAllUrls(System.Int32,System.Int64,System.Int32,System.Int64@)">
            <summary>
                Gets all redirect URLs below a given content item.
            </summary>
            <param name="rootContentId">The content unique identifier.</param>
            <param name="pageIndex">The page index.</param>
            <param name="pageSize">The page size.</param>
            <param name="total">The total count of redirect URLs.</param>
            <returns>The redirect URLs.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IRedirectUrlRepository.SearchUrls(System.String,System.Int64,System.Int32,System.Int64@)">
            <summary>
                Searches for all redirect URLs that contain a given search term in their URL property.
            </summary>
            <param name="searchTerm">The term to search for.</param>
            <param name="pageIndex">The page index.</param>
            <param name="pageSize">The page size.</param>
            <param name="total">The total count of redirect URLs.</param>
            <returns>The redirect URLs.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IRelationRepository.Save(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IRelation})">
            <summary>
                Persist multiple <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> at once
            </summary>
            <param name="relations"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IRelationRepository.SaveBulk(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.ReadOnlyRelation})">
            <summary>
                Persist multiple <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> at once but Ids are not returned on created relations
            </summary>
            <param name="relations"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IRelationRepository.DeleteByParent(System.Int32,System.String[])">
            <summary>
                Deletes all relations for a parent for any specified relation type alias
            </summary>
            <param name="parentId"></param>
            <param name="relationTypeAliases">
                A list of relation types to match for deletion, if none are specified then all relations for this parent id are deleted.
            </param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ITagRepository.Assign(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.ITag},System.Boolean)">
            <summary>
                Assign tags to a content property.
            </summary>
            <param name="contentId">The identifier of the content item.</param>
            <param name="propertyTypeId">The identifier of the property type.</param>
            <param name="tags">The tags to assign.</param>
            <param name="replaceTags">A value indicating whether to replace already assigned tags.</param>
            <remarks>
                <para>
                    When <paramref name="replaceTags" /> is false, the tags specified in <paramref name="tags" /> are added to
                    those already assigned.
                </para>
                <para>
                    When <paramref name="tags" /> is empty and <paramref name="replaceTags" /> is true, all assigned tags are
                    removed.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ITagRepository.Remove(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.ITag})">
            <summary>
                Removes assigned tags from a content property.
            </summary>
            <param name="contentId">The identifier of the content item.</param>
            <param name="propertyTypeId">The identifier of the property type.</param>
            <param name="tags">The tags to remove.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ITagRepository.RemoveAll(System.Int32)">
            <summary>
                Removes all assigned tags from a content item.
            </summary>
            <param name="contentId">The identifier of the content item.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ITagRepository.RemoveAll(System.Int32,System.Int32)">
            <summary>
                Removes all assigned tags from a content property.
            </summary>
            <param name="contentId">The identifier of the content item.</param>
            <param name="propertyTypeId">The identifier of the property type.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ITagRepository.GetTaggedEntityByKey(System.Guid)">
            <summary>
                Gets a tagged entity.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ITagRepository.GetTaggedEntityById(System.Int32)">
            <summary>
                Gets a tagged entity.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ITagRepository.GetTaggedEntitiesByTagGroup(Umbraco.Cms.Core.Models.TaggableObjectTypes,System.String,System.String)">
            Gets all entities of a type, tagged with any tag in the specified group.
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ITagRepository.GetTaggedEntitiesByTag(Umbraco.Cms.Core.Models.TaggableObjectTypes,System.String,System.String,System.String)">
            <summary>
                Gets all entities of a type, tagged with the specified tag.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ITagRepository.GetTagsForEntityType(Umbraco.Cms.Core.Models.TaggableObjectTypes,System.String,System.String)">
            <summary>
                Gets all tags for an entity type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ITagRepository.GetTagsForEntity(System.Int32,System.String,System.String)">
            <summary>
                Gets all tags attached to an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ITagRepository.GetTagsForEntity(System.Guid,System.String,System.String)">
            <summary>
                Gets all tags attached to an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ITagRepository.GetTagsForProperty(System.Int32,System.String,System.String,System.String)">
            <summary>
                Gets all tags attached to an entity via a property.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ITagRepository.GetTagsForProperty(System.Guid,System.String,System.String,System.String)">
            <summary>
                Gets all tags attached to an entity via a property.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Persistence.Repositories.ITemporaryFileRepository">
            <summary>
            Persists temporary files.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ITemporaryFileRepository.GetAsync(System.Guid)">
            <summary>
            Gets a temporary file from its key.
            </summary>
            <param name="key">The unique key of the temporary file.</param>
            <returns>The temporary file model if found on that specified key, otherwise null.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ITemporaryFileRepository.SaveAsync(Umbraco.Cms.Core.Models.TemporaryFile.TemporaryFileModel)">
            <summary>
            Creates or update a temporary file.
            </summary>
            <param name="model">The model for the temporary file</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ITemporaryFileRepository.DeleteAsync(System.Guid)">
            <summary>
            Deletes a temporary file using it's unique key.
            </summary>
            <param name="key">The unique key for the temporary file.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ITemporaryFileRepository.CleanUpOldTempFiles(System.DateTime)">
            <summary>
            Removes all temporary files that have its TempFileModel.AvailableUntil lower than a specified time.
            </summary>
            <returns>The keys of the delete temporary files.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ITrackedReferencesRepository.GetPagedRelationsForItem(System.Guid,System.Int64,System.Int64,System.Boolean,System.Int64@)">
            <summary>
                Gets a page of items which are in relation with the current item.
                Basically, shows the items which depend on the current item.
            </summary>
            <param name="key">The identifier of the entity to retrieve relations for.</param>
            <param name="skip">The amount of items to skip.</param>
            <param name="take">The amount of items to take.</param>
            <param name="filterMustBeIsDependency">
                A boolean indicating whether to filter only the RelationTypes which are
                dependencies (isDependency field is set to true).
            </param>
            <param name="totalRecords">The total count of the items with reference to the current item.</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.RelationItem" /> objects.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ITrackedReferencesRepository.GetPagedRelationsForRecycleBin(System.Guid,System.Int64,System.Int64,System.Boolean,System.Int64@)">
            <summary>
                Gets a paged result of items which are in relation with an item in the recycle bin.
            </summary>
            <param name="objectTypeKey">The Umbraco object type that has recycle bin support (currently Document or Media).</param>
            <param name="skip">The amount of items to skip.</param>
            <param name="take">The amount of items to take.</param>
            <param name="filterMustBeIsDependency">
                A boolean indicating whether to filter only the RelationTypes which are
                dependencies (isDependency field is set to true).
            </param>
            <param name="totalRecords">The total count of the items with reference to the current item.</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.RelationItem" /> objects.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ITrackedReferencesRepository.GetPagedItemsWithRelations(System.Collections.Generic.ISet{System.Guid},System.Int64,System.Int64,System.Boolean,System.Int64@)">
            <summary>
                Gets a page of items used in any kind of relation from selected integer ids.
            </summary>
            <param name="keys">The identifiers of the entities to check for relations.</param>
            <param name="skip">The amount of items to skip.</param>
            <param name="take">The amount of items to take.</param>
            <param name="filterMustBeIsDependency">
                A boolean indicating whether to filter only the RelationTypes which are
                dependencies (isDependency field is set to true).
            </param>
            <param name="totalRecords">The total count of the items in any kind of relation.</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.RelationItem" /> objects.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ITrackedReferencesRepository.GetPagedDescendantsInReferences(System.Guid,System.Int64,System.Int64,System.Boolean,System.Int64@)">
            <summary>
                Gets a page of the descending items that have any references, given a parent id.
            </summary>
            <param name="parentKey">The unique identifier of the parent to retrieve descendants for.</param>
            <param name="skip">The amount of items to skip.</param>
            <param name="take">The amount of items to take.</param>
            <param name="filterMustBeIsDependency">
                A boolean indicating whether to filter only the RelationTypes which are
                dependencies (isDependency field is set to true).
            </param>
            <param name="totalRecords">The total count of descending items.</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.RelationItem" /> objects.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.ITrackedReferencesRepository.GetPagedNodeKeysWithDependantReferencesAsync(System.Collections.Generic.ISet{System.Guid},System.Guid,System.Int64,System.Int64)">
            <summary>
            Gets a paged collection of node keys that have dependant references.
            </summary>
            <param name="keys">The keys to check for relations.</param>
            <param name="nodeObjectTypeId">The node object Id.</param>
            <param name="skip">The amount of items to skip.</param>
            <param name="take">The amount of items to take.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IUserGroupRepository.Get(System.String)">
            <summary>
                Gets a group by it's alias
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IUserGroupRepository.GetGroupsAssignedToSection(System.String)">
            <summary>
                This is useful when an entire section is removed from config
            </summary>
            <param name="sectionAlias"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IUserGroupRepository.AddOrUpdateGroupWithUsers(Umbraco.Cms.Core.Models.Membership.IUserGroup,System.Int32[])">
            <summary>
                Used to add or update a user group and assign users to it
            </summary>
            <param name="userGroup"></param>
            <param name="userIds"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IUserGroupRepository.GetPermissions(System.Int32[],System.Int32[])">
            <summary>
                Gets explicitly defined permissions for the group for specified entities
            </summary>
            <param name="groupIds"></param>
            <param name="entityIds">Array of entity Ids, if empty will return permissions for the group for all entities</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IUserGroupRepository.GetPermissions(Umbraco.Cms.Core.Models.Membership.IReadOnlyUserGroup[],System.Boolean,System.Int32[])">
            <summary>
                Gets explicit and default permissions (if requested) permissions for the group for specified entities
            </summary>
            <param name="groups"></param>
            <param name="fallbackToDefaultPermissions">
                If true will include the group's default permissions if no permissions are
                explicitly assigned
            </param>
            <param name="nodeIds">Array of entity Ids, if empty will return permissions for the group for all entities</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IUserGroupRepository.ReplaceGroupPermissions(System.Int32,System.Collections.Generic.ISet{System.String},System.Int32[])">
            <summary>
                Replaces the same permission set for a single group to any number of entities
            </summary>
            <param name="groupId">Id of group</param>
            <param name="permissions">Permissions as enumerable list of <see cref="T:System.Char" /></param>
            <param name="entityIds">
                Specify the nodes to replace permissions for. If nothing is specified all permissions are
                removed.
            </param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IUserGroupRepository.AssignGroupPermission(System.Int32,System.String,System.Int32[])">
            <summary>
                Assigns the same permission set for a single group to any number of entities
            </summary>
            <param name="groupId">Id of group</param>
            <param name="permission">Permissions as enumerable list of <see cref="T:System.Char" /></param>
            <param name="entityIds">Specify the nodes to replace permissions for</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IUserRepository.GetCountByQuery(Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.Membership.IUser})">
            <summary>
                Gets the count of items based on a complex query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IUserRepository.ExistsByUserName(System.String)">
            <summary>
                Checks if a user with the username exists
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IUserRepository.Get(System.Int32)">
            <summary>
                Returns a user by id
            </summary>
            <param name="id"></param>
            <returns>
                A cached <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> instance
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IUserRepository.ExistsByLogin(System.String)">
            <summary>
                Checks if a user with the login exists
            </summary>
            <param name="login"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IUserRepository.GetAllInGroup(System.Int32)">
            <summary>
                Gets a list of <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> objects associated with a given group
            </summary>
            <param name="groupId">Id of group</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IUserRepository.GetAllNotInGroup(System.Int32)">
            <summary>
                Gets a list of <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> objects not associated with a given group
            </summary>
            <param name="groupId">Id of group</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IUserRepository.GetPagedResultsByQuery(Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.Membership.IUser},System.Int64,System.Int32,System.Int64@,System.Linq.Expressions.Expression{System.Func{Umbraco.Cms.Core.Models.Membership.IUser,System.Object}},Umbraco.Cms.Core.Direction,System.String[],System.String[],Umbraco.Cms.Core.Models.Membership.UserState[],Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.Membership.IUser})">
            <summary>
                Gets paged user results
            </summary>
            <param name="query"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="orderBy"></param>
            <param name="orderDirection"></param>
            <param name="includeUserGroups">
                A filter to only include user that belong to these user groups
            </param>
            <param name="excludeUserGroups">
                A filter to only include users that do not belong to these user groups
            </param>
            <param name="userState">Optional parameter to filter by specified user state</param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IUserRepository.GetByUsername(System.String,System.Boolean)">
            <summary>
                Returns a user by username
            </summary>
            <param name="username"></param>
            <param name="includeSecurityData">
                This is only used for a shim in order to upgrade to 7.7
            </param>
            <returns>
                A non cached <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> instance
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IUserRepository.GetForUpgradeByUsername(System.String)">
            <summary>
            Gets a user by username for upgrade purposes, this will only return a result if the current runtime state is upgrade.
            </summary>
            <remarks>
            This only resolves the minimum amount of fields required to authorize for an upgrade.
            We need this to be able to add new columns to the user table.
            </remarks>
            <param name="username">The username to find the user by.</param>
            <returns>An uncached <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser"/> instance.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IUserRepository.GetForUpgradeByEmail(System.String)">
            <summary>
            Gets a user by email for upgrade purposes, this will only return a result if the current runtime state is upgrade.
            </summary>
            <remarks>
            This only resolves the minimum amount of fields required to authorize for an upgrade.
            We need this to be able to add new columns to the user table.
            </remarks>
            <param name="email">The email to find the user by.</param>
            <returns>An uncached <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser"/> instance.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IUserRepository.GetForUpgrade(System.Int32)">
            <summary>
            Gets a user for upgrade purposes, this will only return a result if the current runtime state is upgrade.
            </summary>
            <remarks>
            This only resolves the minimum amount of fields required to authorize for an upgrade.
            We need this to be able to add new columns to the user table.
            </remarks>
            <param name="id">The id to find the user by.</param>
            <returns>An uncached <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser"/> instance.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IUserRepository.Get(System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Returns a user by id
            </summary>
            <param name="id"></param>
            <param name="includeSecurityData">
                This is only used for a shim in order to upgrade to 7.7
            </param>
            <returns>
                A non cached <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> instance
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IUserRepository.InvalidateSessionsForRemovedProviders(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Invalidates sessions for users that aren't associated with the current collection of providers.
            </summary>
            <param name="currentLoginProviders">The names of the currently configured providers.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IWebhookRepository.GetAllAsync(System.Int32,System.Int32)">
            <summary>
                Gets all of the webhooks in the current database.
            </summary>
            <param name="skip">Number of entries to skip.</param>
            <param name="take">Number of entries to take.</param>
            <returns>A paged model of <see cref="T:Umbraco.Cms.Core.Models.IWebhook" /> objects.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IWebhookRepository.CreateAsync(Umbraco.Cms.Core.Models.IWebhook)">
            <summary>
                Gets all of the webhooks in the current database.
            </summary>
            <param name="webhook">The webhook you want to create.</param>
            <returns>The created <see cref="T:Umbraco.Cms.Core.Models.IWebhook" /> webhook</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IWebhookRepository.GetAsync(System.Guid)">
            <summary>
                Gets a webhook by key.
            </summary>
            <param name="key">The key of the webhook which will be retrieved.</param>
            <returns>The <see cref="T:Umbraco.Cms.Core.Models.IWebhook" /> webhook with the given key.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IWebhookRepository.GetByIdsAsync(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
                Gets webhooks by keys.
            </summary>
            <param name="keys">The alias of an event, which is referenced by a webhook.</param>
            <returns>
                A paged model of <see cref="T:Umbraco.Cms.Core.Models.IWebhook" />.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IWebhookRepository.GetByAliasAsync(System.String)">
            <summary>
                Gets a webhook by key.
            </summary>
            <param name="alias">The alias of an event, which is referenced by a webhook.</param>
            <returns>
                A paged model of <see cref="T:Umbraco.Cms.Core.Models.IWebhook" />.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IWebhookRepository.DeleteAsync(Umbraco.Cms.Core.Models.IWebhook)">
            <summary>
                Gets a webhook by key.
            </summary>
            <param name="webhook">The webhook to be deleted.</param>
            <returns><placeholder>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</placeholder></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IWebhookRepository.UpdateAsync(Umbraco.Cms.Core.Models.IWebhook)">
            <summary>
                Updates a given webhook.
            </summary>
            <param name="webhook">The webhook to be updated.</param>
            <returns>The updated <see cref="T:Umbraco.Cms.Core.Models.IWebhook" /> webhook.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IWebhookRequestRepository.CreateAsync(Umbraco.Cms.Core.Models.WebhookRequest)">
            <summary>
                Creates a webhook request in the current repository.
            </summary>
            <param name="webhookRequest">The webhook you want to create.</param>
            <returns>The created <see cref="T:Umbraco.Cms.Core.Models.Webhook" /> webhook</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IWebhookRequestRepository.DeleteAsync(Umbraco.Cms.Core.Models.WebhookRequest)">
            <summary>
                Deletes a webhook request in the current repository
            </summary>
            <param name="webhookRequest">The webhook request to be deleted.</param>
            <returns><placeholder>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</placeholder></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IWebhookRequestRepository.GetAllAsync">
            <summary>
                Gets all of the webhook requests in the current repository.
            </summary>
            <returns>A paged model of <see cref="T:Umbraco.Cms.Core.Models.Webhook" /> objects.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.IWebhookRequestRepository.UpdateAsync(Umbraco.Cms.Core.Models.WebhookRequest)">
            <summary>
                Update a webhook request in the current repository.
            </summary>
            <param name="webhookRequest">The webhook request you want to update.</param>
            <returns>The updated <see cref="T:Umbraco.Cms.Core.Models.WebhookRequest" /> webhook</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Persistence.Repositories.RepositoryCacheKeys">
            <summary>
                Provides cache keys for repositories.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Persistence.Repositories.RepositoryCacheKeys.Keys">
            <summary>
            A cache for the keys we don't keep allocating strings.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.RepositoryCacheKeys.GetKey``1">
            <summary>
            Gets the repository cache key for the provided type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.Repositories.RepositoryCacheKeys.GetKey``2(``1)">
            <summary>
            Gets the repository cache key for the provided type and Id.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Persistence.SqlExpressionExtensions">
            <summary>
                String extension methods used specifically to translate into SQL
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.SqlExpressionExtensions.SqlNullableEquals``1(System.Nullable{``0},System.Nullable{``0},``0)">
            <summary>
                Indicates whether two nullable values are equal, substituting a fallback value for nulls.
            </summary>
            <typeparam name="T">The nullable type.</typeparam>
            <param name="value">The value to compare.</param>
            <param name="other">The value to compare to.</param>
            <param name="fallbackValue">The value to use when any value is null.</param>
            <remarks>Do not use outside of Sql expressions.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Persistence.SqlExtensionsStatics">
            <summary>
                Provides a mean to express aliases in SELECT Sql statements.
            </summary>
            <remarks>
                <para>
                    First register with <c>using static Umbraco.Core.Persistence.NPocoSqlExtensions.Aliaser</c>,
                    then use eg <c>Sql{Foo}(x => Alias(x.Id, "id"))</c>.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.SqlExtensionsStatics.Alias(System.Object,System.String)">
            <summary>
                Aliases a field.
            </summary>
            <param name="field">The field to alias.</param>
            <param name="alias">The alias.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.SqlExtensionsStatics.SqlText``1(System.String,System.Func{System.String,System.String})">
            <summary>
                Produces Sql text.
            </summary>
            <param name="field">The name of the field.</param>
            <param name="expr">A function producing Sql text.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.SqlExtensionsStatics.SqlText``1(System.String,System.String,System.Func{System.String,System.String,System.String})">
            <summary>
                Produces Sql text.
            </summary>
            <param name="field1">The name of the first field.</param>
            <param name="field2">The name of the second field.</param>
            <param name="expr">A function producing Sql text.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Persistence.SqlExtensionsStatics.SqlText``1(System.String,System.String,System.String,System.Func{System.String,System.String,System.String,System.String})">
            <summary>
                Produces Sql text.
            </summary>
            <param name="field1">The name of the first field.</param>
            <param name="field2">The name of the second field.</param>
            <param name="field3">The name of the third field.</param>
            <param name="expr">A function producing Sql text.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.BlockGridConfiguration">
            <summary>
            The configuration object for the Block Grid editor
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.BlockListConfiguration">
            <summary>
                The configuration object for the Block List editor
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ColorPickerConfiguration">
            <summary>
                Represents the configuration for the color picker value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ConfigurationEditor">
            <summary>
                Represents a data type configuration editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ConfigurationEditor.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.ConfigurationEditor" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ConfigurationEditor.#ctor(System.Collections.Generic.List{Umbraco.Cms.Core.PropertyEditors.ConfigurationField})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.ConfigurationEditor" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.ConfigurationEditor.Fields">
            <summary>
                Gets the fields.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.ConfigurationEditor.DefaultConfiguration">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ConfigurationEditor.ToConfigurationEditor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ConfigurationEditor.FromConfigurationEditor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ConfigurationEditor.ToValueEditor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ConfigurationEditor.ToConfigurationObject(System.Collections.Generic.IDictionary{System.String,System.Object},Umbraco.Cms.Core.Serialization.IConfigurationEditorJsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ConfigurationEditor.FromConfigurationObject(System.Object,Umbraco.Cms.Core.Serialization.IConfigurationEditorJsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ConfigurationEditor.ToDatabase(System.Collections.Generic.IDictionary{System.String,System.Object},Umbraco.Cms.Core.Serialization.IConfigurationEditorJsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ConfigurationEditor.FromDatabase(System.String,Umbraco.Cms.Core.Serialization.IConfigurationEditorJsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ConfigurationEditor.Validate(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ConfigurationEditor.Field(System.String)">
            <summary>
                Gets a field by its property name.
            </summary>
            <remarks>
                Can be used in constructors to add infos to a field that has been defined
                by a property marked with the <see cref="T:Umbraco.Cms.Core.PropertyEditors.ConfigurationFieldAttribute" />.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ConfigurationEditor.ConfigurationAs``1(System.Object)">
            <summary>
                Gets the configuration as a typed object.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ConfigurationEditor`1">
            <summary>
                Represents a data type configuration editor with a typed configuration.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ConfigurationEditor`1.#ctor(Umbraco.Cms.Core.IO.IIOHelper)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.ConfigurationEditor`1" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ConfigurationEditor`1.ToConfigurationObject(System.Collections.Generic.IDictionary{System.String,System.Object},Umbraco.Cms.Core.Serialization.IConfigurationEditorJsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ConfigurationEditor`1.DiscoverFields(Umbraco.Cms.Core.IO.IIOHelper)">
            <summary>
                Discovers fields from configuration properties marked with the field attribute.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ConfigurationField">
            <summary>
                Represents a datatype configuration field for editing.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ConfigurationField.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.ConfigurationField" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ConfigurationField.#ctor(Umbraco.Cms.Core.PropertyEditors.IValueValidator[])">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.ConfigurationField" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ConfigurationField.#ctor(System.Collections.Generic.List{Umbraco.Cms.Core.PropertyEditors.IValueValidator})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.ConfigurationField" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.ConfigurationField.Key">
            <summary>
                Gets or sets the key of the field.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.ConfigurationField.PropertyName">
            <summary>
                Gets or sets the property name of the field.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.ConfigurationField.PropertyType">
            <summary>
                Gets or sets the property CLR type of the field.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.ConfigurationField.Validators">
            <summary>
                Gets the validators of the field.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.ConfigurationField.Config">
            <summary>
                Gets or sets extra configuration properties for the editor.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ConfigurationFieldAttribute">
            <summary>
                Marks a ConfigurationEditor property as a configuration field, and a class as a configuration field type.
            </summary>
            <remarks>Properties marked with this attribute are discovered as fields.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ConfigurationFieldAttribute.#ctor(System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.ConfigurationField" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ConfigurationFieldAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.ConfigurationField" /> class.
            </summary>
            <param name="key">The unique identifier of the field.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.ConfigurationFieldAttribute.Key">
            <summary>
                Gets the key of the field.
            </summary>
            <remarks>
                When null or empty, the <see cref="T:Umbraco.Cms.Core.PropertyEditors.ConfigurationEditor" /> should derive a key
                from the name of the property marked with this attribute.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.ConfigurationFieldAttribute.Type">
            <summary>
                Gets or sets the type of the field.
            </summary>
            <remarks>
                <para>
                    By default, fields are created as <see cref="T:Umbraco.Cms.Core.PropertyEditors.ConfigurationField" /> instances,
                    unless specified otherwise through this property.
                </para>
                <para>The specified type must inherit from <see cref="T:Umbraco.Cms.Core.PropertyEditors.ConfigurationField" />.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ContentPickerPropertyEditor">
            <summary>
                Content property editor that stores UDI
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.DataEditor">
            <summary>
                Represents a data editor.
            </summary>
            <remarks>
                <para>
                    Editors can be deserialized from e.g. manifests, which is. why the class is not abstract,
                    the json serialization attributes are required, and the properties have an internal setter.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DataEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.DataEditor" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.DataEditor.ExplicitValueEditor">
            <summary>
                Gets or sets an explicit value editor.
            </summary>
            <remarks>Used for manifest data editors.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.DataEditor.Attribute">
            <summary>
                Gets the editor attribute.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.DataEditor.ExplicitConfigurationEditor">
            <summary>
                Gets or sets an explicit configuration editor.
            </summary>
            <remarks>Used for manifest data editors.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.DataEditor.Alias">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.DataEditor.SupportsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.DataEditor.IsDeprecated">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.DataEditor.DefaultConfiguration">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DataEditor.GetValueEditor">
            <inheritdoc />
            <remarks>
                <para>
                    If an explicit value editor has been assigned, then this explicit
                    instance is returned. Otherwise, a new instance is created by CreateValueEditor.
                </para>
                <para>
                    The instance created by CreateValueEditor is cached if allowed by the DataEditor
                    attribute (<see cref="P:Umbraco.Cms.Core.PropertyEditors.DataEditorAttribute.ValueEditorIsReusable"/> == true).
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DataEditor.GetValueEditor(System.Object)">
            <inheritdoc />
            <remarks>
                <para>
                    If an explicit value editor has been assigned, then this explicit
                    instance is returned. Otherwise, a new instance is created by CreateValueEditor,
                    and configured with the configuration.
                </para>
                <para>
                    The instance created by CreateValueEditor is not cached, i.e.
                    a new instance is created each time the property value is retrieved. The
                    property editor is a singleton, and the value editor cannot be a singleton
                    since it depends on the datatype configuration.
                </para>
                <para>
                    Technically, it could be cached by datatype but let's keep things
                    simple enough for now.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DataEditor.GetConfigurationEditor">
            <inheritdoc />
            <remarks>
                <para>
                    If an explicit configuration editor has been assigned, then this explicit
                    instance is returned. Otherwise, a new instance is created by CreateConfigurationEditor.
                </para>
                <para>
                    The instance created by CreateConfigurationEditor is not cached, i.e.
                    a new instance is created each time. The property editor is a singleton, and although the
                    configuration editor could technically be a singleton too, we'd rather not keep configuration editor
                    cached.
                </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.DataEditor.PropertyIndexValueFactory">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DataEditor.CreateValueEditor">
            <summary>
                Creates a value editor instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DataEditor.CreateConfigurationEditor">
            <summary>
                Creates a configuration editor instance.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DataEditor.DebuggerDisplay">
            <summary>
                Provides a summary of the PropertyEditor for use with the <see cref="T:System.Diagnostics.DebuggerDisplayAttribute" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DataEditor.CanMergePartialPropertyValues(Umbraco.Cms.Core.Models.IPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DataEditor.MergePartialPropertyValueForCulture(System.Object,System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.DataEditorAttribute">
            <summary>
                Marks a class that represents a data editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DataEditorAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.DataEditorAttribute" /> class for a property editor.
            </summary>
            <param name="alias">The unique identifier of the editor.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.DataEditorAttribute.Alias">
            <summary>
                Gets the unique alias of the editor.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.DataEditorAttribute.ValueType">
            <summary>
                Gets or sets the type of the edited value.
            </summary>
            <remarks>Must be a valid <see cref="T:Umbraco.Cms.Core.PropertyEditors.ValueTypes" /> value.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.DataEditorAttribute.IsDeprecated">
            <summary>
                Gets or sets a value indicating whether the value editor is deprecated.
            </summary>
            <remarks>A deprecated editor is still supported but not proposed in the UI.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.DataEditorAttribute.ValueEditorIsReusable">
            <summary>
                Gets or sets a value indicating whether the value editor can be reused (cached).
            </summary>
            <remarks>While most value editors can be reused, complex editors (e.g. block based editors) might not be applicable for reuse.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.DataValueEditor">
            <summary>
                Represents a value editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DataValueEditor.#ctor(Umbraco.Cms.Core.Strings.IShortStringHelper,Umbraco.Cms.Core.Serialization.IJsonSerializer)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.DataValueEditor" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DataValueEditor.#ctor(Umbraco.Cms.Core.Strings.IShortStringHelper,Umbraco.Cms.Core.Serialization.IJsonSerializer,Umbraco.Cms.Core.IO.IIOHelper,Umbraco.Cms.Core.PropertyEditors.DataEditorAttribute)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.DataValueEditor" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.DataValueEditor.ConfigurationObject">
            <summary>
                Gets or sets the value editor configuration.
            </summary>
            <seealso cref="P:Umbraco.Cms.Core.Models.IDataType.ConfigurationObject"/>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.DataValueEditor.RequiredValidator">
            <summary>
                Gets the validator used to validate the special property type -level "required".
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.DataValueEditor.FormatValidator">
            <summary>
                Gets the validator used to validate the special property type -level "format".
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.DataValueEditor.ValueType">
            <summary>
                The value type which reflects how it is validated and stored in the database
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.DataValueEditor.Validators">
            <summary>
                A collection of validators for the pre value editor
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DataValueEditor.Validate(System.Object,System.Boolean,System.String,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.DataValueEditor.IsReadOnly">
            <summary>
                Set this to true if the property editor is for display purposes only
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DataValueEditor.FromEditor(Umbraco.Cms.Core.Models.Editors.ContentPropertyData,System.Object)">
            <summary>
                A method to deserialize the string value that has been saved in the content editor to an object to be stored in the
                database.
            </summary>
            <param name="editorValue">The value returned by the editor.</param>
            <param name="currentValue">
                The current value that has been persisted to the database for this editor. This value may be
                useful for how the value then get's deserialized again to be re-persisted. In most cases it will probably not be
                used.
            </param>
            <returns>The value that gets persisted to the database.</returns>
            <remarks>
                By default this will attempt to automatically convert the string value to the value type supplied by ValueType.
                If overridden then the object returned must match the type supplied in the ValueType, otherwise persisting the
                value to the DB will fail when it tries to validate the value type.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DataValueEditor.ToEditor(Umbraco.Cms.Core.Models.IProperty,System.String,System.String)">
            <summary>
                A method used to format the database value to a value that can be used by the editor.
            </summary>
            <param name="property">The property.</param>
            <param name="culture">The culture.</param>
            <param name="segment">The segment.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">ValueType was out of range.</exception>
            <remarks>
                The object returned will automatically be serialized into JSON notation. For most property editors
                the value returned is probably just a string, but in some cases a JSON structure will be returned.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DataValueEditor.ConvertDbToXml(Umbraco.Cms.Core.Models.IProperty,System.Boolean)">
            <summary>
                Converts a property to Xml fragments.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DataValueEditor.ConvertDbToXml(Umbraco.Cms.Core.Models.IPropertyType,System.Object)">
            <summary>
                Converts a property value to an Xml fragment.
            </summary>
            <remarks>
                <para>
                    By default, this returns the value of ConvertDbToString but ensures that if the db value type is
                    NVarchar or NText, the value is returned as a CDATA fragment - else it's a Text fragment.
                </para>
                <para>Returns an XText or XCData instance which must be wrapped in a element.</para>
                <para>If the value is empty we will not return as CDATA since that will just take up more space in the file.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DataValueEditor.ConvertDbToString(Umbraco.Cms.Core.Models.IPropertyType,System.Object)">
            <summary>
                Converts a property value to a string.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DataValueEditor.TryConvertValueToCrlType(System.Object)">
            <summary>
                Used to try to convert the string value to the correct CLR type based on the <see cref="P:Umbraco.Cms.Core.PropertyEditors.DataValueEditor.ValueType" /> specified for
                this value editor.
            </summary>
            <param name="value">The value.</param>
            <returns>
                The result of the conversion attempt.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">ValueType was out of range.</exception>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.DataValueReferenceFactoryCollection">
            <summary>
            Provides a builder collection for <see cref="T:Umbraco.Cms.Core.PropertyEditors.IDataValueReferenceFactory" /> items.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DataValueReferenceFactoryCollection.#ctor(System.Func{System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.PropertyEditors.IDataValueReferenceFactory}})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.DataValueReferenceFactoryCollection" /> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DataValueReferenceFactoryCollection.#ctor(System.Func{System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.PropertyEditors.IDataValueReferenceFactory}},Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.PropertyEditors.DataValueReferenceFactoryCollection})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.DataValueReferenceFactoryCollection" /> class.
            </summary>
            <param name="items">The items.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DataValueReferenceFactoryCollection.GetAllReferences(Umbraco.Cms.Core.Models.IPropertyCollection,Umbraco.Cms.Core.PropertyEditors.PropertyEditorCollection)">
            <summary>
            Gets all unique references from the specified properties.
            </summary>
            <param name="properties">The properties.</param>
            <param name="propertyEditors">The property editors.</param>
            <returns>
            The unique references from the specified properties.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DataValueReferenceFactoryCollection.GetReferences(Umbraco.Cms.Core.PropertyEditors.IDataEditor,System.Object[])">
            <summary>
            Gets the references.
            </summary>
            <param name="dataEditor">The data editor.</param>
            <param name="values">The values.</param>
            <returns>
            The references.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DataValueReferenceFactoryCollection.GetReferences(Umbraco.Cms.Core.PropertyEditors.IDataEditor,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Gets the references.
            </summary>
            <param name="dataEditor">The data editor.</param>
            <param name="values">The values.</param>
            <returns>
            The references.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DataValueReferenceFactoryCollection.GetAutomaticRelationTypesAliases(Umbraco.Cms.Core.PropertyEditors.PropertyEditorCollection)">
            <summary>
            Gets all relation type aliases that are automatically tracked.
            </summary>
            <param name="propertyEditors">The property editors.</param>
            <returns>
            All relation type aliases that are automatically tracked.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DataValueReferenceFactoryCollection.GetAutomaticRelationTypesAliases(Umbraco.Cms.Core.PropertyEditors.IDataEditor)">
            <summary>
            Gets the automatic relation types aliases.
            </summary>
            <param name="dataEditor">The data editor.</param>
            <returns>
            The automatic relation types aliases.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.DateValueEditor">
            <summary>
                CUstom value editor so we can serialize with the correct date format (excluding time)
                and includes the date validator
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.DecimalConfigurationEditor">
            <summary>
                A custom pre-value editor class to deal with the legacy way that the pre-value data is stored.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.DecimalPropertyEditor">
            <summary>
             Represents a decimal property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DecimalPropertyEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.DecimalPropertyEditor" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DecimalPropertyEditor.CreateValueEditor">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DecimalPropertyEditor.CreateConfigurationEditor">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.DecimalPropertyEditor.DecimalPropertyValueEditor">
            <summary>
            Defines the value editor for the decimal property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DecimalPropertyEditor.DecimalPropertyValueEditor.#ctor(Umbraco.Cms.Core.Strings.IShortStringHelper,Umbraco.Cms.Core.Serialization.IJsonSerializer,Umbraco.Cms.Core.IO.IIOHelper,Umbraco.Cms.Core.PropertyEditors.DataEditorAttribute,Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.DecimalPropertyEditor.DecimalPropertyValueEditor"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DecimalPropertyEditor.DecimalPropertyValueEditor.ToEditor(Umbraco.Cms.Core.Models.IProperty,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DecimalPropertyEditor.DecimalPropertyValueEditor.FromEditor(Umbraco.Cms.Core.Models.Editors.ContentPropertyData,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.DecimalPropertyEditor.DecimalPropertyValueEditor.DecimalPropertyConfigurationValidatorBase">
            <summary>
            Base validator for the decimal property editor validation against data type configured values.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.DecimalPropertyEditor.DecimalPropertyValueEditor.DecimalPropertyConfigurationValidatorBase.ConfigurationKeyMinValue">
            <summary>
            The configuration key for the minimum value.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.DecimalPropertyEditor.DecimalPropertyValueEditor.DecimalPropertyConfigurationValidatorBase.ConfigurationKeyMaxValue">
            <summary>
            The configuration key for the maximum value.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.DecimalPropertyEditor.DecimalPropertyValueEditor.DecimalPropertyConfigurationValidatorBase.ConfigurationKeyStepValue">
            <summary>
            The configuration key for the step value.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DecimalPropertyEditor.DecimalPropertyValueEditor.DecimalPropertyConfigurationValidatorBase.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.DecimalPropertyEditor.DecimalPropertyValueEditor.DecimalPropertyConfigurationValidatorBase"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.DecimalPropertyEditor.DecimalPropertyValueEditor.DecimalPropertyConfigurationValidatorBase.LocalizedTextService">
            <summary>
            Gets the <see cref="T:Umbraco.Cms.Core.Services.ILocalizedTextService"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DecimalPropertyEditor.DecimalPropertyValueEditor.DecimalPropertyConfigurationValidatorBase.TryParsePropertyValue(System.Object,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.DecimalPropertyEditor.DecimalPropertyValueEditor.MinMaxValidator">
            <summary>
            Validates the min/max configuration for the decimal property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DecimalPropertyEditor.DecimalPropertyValueEditor.MinMaxValidator.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.DecimalPropertyEditor.DecimalPropertyValueEditor.MinMaxValidator"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DecimalPropertyEditor.DecimalPropertyValueEditor.MinMaxValidator.Validate(System.Object,System.String,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.DecimalPropertyEditor.DecimalPropertyValueEditor.StepValidator">
            <summary>
            Validates the step configuration for the decimal property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DecimalPropertyEditor.DecimalPropertyValueEditor.StepValidator.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.DecimalPropertyEditor.DecimalPropertyValueEditor.StepValidator"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DecimalPropertyEditor.DecimalPropertyValueEditor.StepValidator.Validate(System.Object,System.String,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.DefaultPropertyIndexValueFactory">
            <summary>
                Provides a default implementation for
                <see ref="IPropertyIndexValueFactory" />, returning a single field to index containing the property value.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.DefaultPropertyValueConverterAttribute">
            <summary>
                Indicates that this is a default property value converter (shipped with Umbraco)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.DefaultPropertyValueConverterAttribute.DefaultConvertersToShadow">
            <summary>
                A DefaultPropertyValueConverter can 'shadow' other default property value converters so that
                a DefaultPropertyValueConverter can be more specific than another one.
            </summary>
            <remarks>
                An example where this is useful is that both the MultiUrlPickerValueConverter and the JsonValueConverter
                will be returned as value converters for the Related Links Property editor, however the JsonValueConverter
                is a very generic converter and the MultiUrlPickerValueConverter is more specific than it, so the
                MultiUrlPickerValueConverter can specify that it 'shadows' the JsonValueConverter.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.DefaultValueTypePropertyValueConverterAttribute">
            <summary>
                Indicates that this is a default value type property value converter (shipped with Umbraco).
                This attribute is for internal use only. It should never be applied to custom value converters.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DeliveryApi.IDeliveryApiPropertyValueConverter.GetDeliveryApiPropertyCacheLevel(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <summary>
                Gets the property cache level for Delivery API representation.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>The property cache level.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DeliveryApi.IDeliveryApiPropertyValueConverter.GetDeliveryApiPropertyCacheLevelForExpansion(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <summary>
                Gets the property cache level for Delivery API representation when expanding the property.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>The property cache level.</returns>
            <remarks>Defaults to the value of <see cref="M:Umbraco.Cms.Core.PropertyEditors.DeliveryApi.IDeliveryApiPropertyValueConverter.GetDeliveryApiPropertyCacheLevel(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)"/>.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DeliveryApi.IDeliveryApiPropertyValueConverter.GetDeliveryApiPropertyValueType(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <summary>
                Gets the type of values returned by the converter for Delivery API representation.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>The CLR type of values returned by the converter.</returns>
            <remarks>
                Some of the CLR types may be generated, therefore this method cannot directly return
                a Type object (which may not exist yet). In which case it needs to return a ModelType instance.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.DeliveryApi.IDeliveryApiPropertyValueConverter.ConvertIntermediateToDeliveryApiObject(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType,Umbraco.Cms.Core.PropertyEditors.PropertyCacheLevel,System.Object,System.Boolean,System.Boolean)">
            <summary>
                Converts a property intermediate value to an Object value for Delivery API representation.
            </summary>
            <param name="owner">The property set owning the property.</param>
            <param name="propertyType">The property type.</param>
            <param name="referenceCacheLevel">The reference cache level.</param>
            <param name="inter">The intermediate value.</param>
            <param name="preview">A value indicating whether conversion should take place in preview mode.</param>
            <param name="expanding">A value indicating whether the property value should be expanded (if applicable).</param>
            <returns>The result of the conversion.</returns>
            <remarks>
                <para>
                    The converter should know how to convert a <c>null</c> intermediate value, or any intermediate value
                    indicating that no value has been assigned to the property. It is up to the converter to determine
                    what to return in that case: either <c>null</c>, or the default value...
                </para>
                <para>
                    The <paramref name="referenceCacheLevel" /> is passed to the converter so that it can be, in turn,
                    passed to eg a PublishedFragment constructor. It is used by the fragment and the properties to manage
                    the cache levels of property values. It is not meant to be used by the converter.
                </para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.FileUploadConfiguration">
            <summary>
                Represents the configuration for the file upload address value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.FileUploadConfigurationEditor">
            <summary>
                Represents the configuration editor for the file upload value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.IConfigurationEditor">
            <summary>
                Represents an editor for editing the configuration of editors.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.IConfigurationEditor.Fields">
            <summary>
                Gets the fields.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.IConfigurationEditor.DefaultConfiguration">
            <summary>
                Gets the default configuration.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IConfigurationEditor.ToConfigurationEditor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                Converts the configuration data to values for the configuration editor.
            </summary>
            <param name="configuration">The configuration data.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IConfigurationEditor.FromConfigurationEditor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                Converts values from the configuration editor to configuration data.
            </summary>
            <remarks>
            Consider this the reverse of <see cref="M:Umbraco.Cms.Core.PropertyEditors.IConfigurationEditor.ToConfigurationEditor(System.Collections.Generic.IDictionary{System.String,System.Object})"/>.
            </remarks>
            <param name="configuration">Values from the configuration editor.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IConfigurationEditor.ToValueEditor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                Converts the configuration data to values for the value editor.
            </summary>
            <param name="configuration">The configuration data.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IConfigurationEditor.ToConfigurationObject(System.Collections.Generic.IDictionary{System.String,System.Object},Umbraco.Cms.Core.Serialization.IConfigurationEditorJsonSerializer)">
            <summary>
                Creates a configuration object from the configuration data.
            </summary>
            <param name="configuration">The configuration data.</param>
            <param name="configurationEditorJsonSerializer">The configuration serializer.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IConfigurationEditor.FromConfigurationObject(System.Object,Umbraco.Cms.Core.Serialization.IConfigurationEditorJsonSerializer)">
            <summary>
                Creates configuration data from a configuration object.
            </summary>
            <param name="configuration">The configuration object.</param>
            <param name="configurationEditorJsonSerializer">The configuration serializer.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IConfigurationEditor.ToDatabase(System.Collections.Generic.IDictionary{System.String,System.Object},Umbraco.Cms.Core.Serialization.IConfigurationEditorJsonSerializer)">
            <summary>
                Converts configuration data into a serialized database value.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IConfigurationEditor.FromDatabase(System.String,Umbraco.Cms.Core.Serialization.IConfigurationEditorJsonSerializer)">
            <summary>
                Converts a serialized database value into configuration data.
            </summary>
            <param name="configuration">The serialized database value (JSON format).</param>
            <param name="configurationEditorJsonSerializer">The configuration serializer.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IConfigurationEditor.Validate(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                Performs validation of configuration data.
            </summary>
            <param name="configuration">The configuration data to validate.</param>
            <returns>One or more <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> if the configuration data is invalid, an empty collection otherwise.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.IConfigureValueType">
            <summary>
                Represents a configuration that configures the value type.
            </summary>
            <remarks>
                <para>This is used in <see cref="T:Umbraco.Cms.Core.Models.DataType" /> to get the value type from the configuration.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.IConfigureValueType.ValueType">
            <summary>
                Gets the value type.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.IDataEditor">
            <summary>
                Represents a data editor.
            </summary>
            <remarks>This is the base interface for parameter and property editors.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.IDataEditor.Alias">
            <summary>
                Gets the alias of the editor.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.IDataEditor.IsDeprecated">
            <summary>
                Gets a value indicating whether the editor is deprecated.
            </summary>
            <remarks>Deprecated editors are supported but not proposed in the UI.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.IDataEditor.DefaultConfiguration">
            <summary>
                Gets the configuration for the value editor.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.IDataEditor.PropertyIndexValueFactory">
            <summary>
                Gets the index value factory for the editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IDataEditor.GetValueEditor">
            <summary>
                Gets a value editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IDataEditor.GetValueEditor(System.Object)">
            <summary>
                Gets a configured value editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IDataEditor.GetConfigurationEditor">
            <summary>
                Gets an editor to edit the value editor configuration.
            </summary>
            <remarks>
                <para>Is expected to throw if the editor does not support being configured, e.g. for most parameter editors.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IDataEditor.CanMergePartialPropertyValues(Umbraco.Cms.Core.Models.IPropertyType)">
            <summary>
                Determines if the value editor needs to perform <see cref="M:Umbraco.Cms.Core.PropertyEditors.IDataEditor.MergePartialPropertyValueForCulture(System.Object,System.Object,System.String)"/> for a given property type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IDataEditor.MergePartialPropertyValueForCulture(System.Object,System.Object,System.String)">
            <summary>
                Partially merges a source property value into a target property value for a given culture.
            </summary>
            <param name="sourceValue">The source property value.</param>
            <param name="targetValue">The target property value.</param>
            <param name="culture">The culture (or null for invariant).</param>
            <returns>The result of the merge operation.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.IDataValueReference">
            <summary>
                Resolve references from <see cref="T:Umbraco.Cms.Core.Models.IDataValueEditor" /> values
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IDataValueReference.GetReferences(System.Object)">
            <summary>
                Returns any references contained in the value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IDataValueReference.GetAutomaticRelationTypesAliases">
            <summary>
                Returns all reference types that are automatically tracked.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IDataValueReferenceFactory.IsForEditor(Umbraco.Cms.Core.PropertyEditors.IDataEditor)">
            <summary>
                Gets a value indicating whether the DataValueReference lookup supports a datatype (data editor).
            </summary>
            <param name="dataEditor"></param>
            <returns>A value indicating whether the converter supports a datatype.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IDataValueReferenceFactory.GetDataValueReference">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.IDataValueTags">
            <summary>
                Resolve tags from <see cref="T:Umbraco.Cms.Core.Models.IDataValueEditor" /> values
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IDataValueTags.GetTags(System.Object,System.Object,System.Nullable{System.Int32})">
            <summary>
                Returns any tags contained in the value
            </summary>
            <param name="value"></param>
            <param name="dataTypeConfiguration"></param>
            <param name="languageId"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.IIgnoreUserStartNodesConfig">
            <summary>
                Marker interface for any editor configuration that supports Ignoring user start nodes
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.IntegerConfigurationEditor">
            <summary>
                A custom pre-value editor class to deal with the legacy way that the pre-value data is stored.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.IntegerPropertyEditor">
            <summary>
             Represents a decimal property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IntegerPropertyEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.IntegerPropertyEditor"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IntegerPropertyEditor.CreateValueEditor">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IntegerPropertyEditor.CreateConfigurationEditor">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.IntegerPropertyEditor.IntegerPropertyValueEditor">
            <summary>
            Defines the value editor for the integer property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IntegerPropertyEditor.IntegerPropertyValueEditor.#ctor(Umbraco.Cms.Core.Strings.IShortStringHelper,Umbraco.Cms.Core.Serialization.IJsonSerializer,Umbraco.Cms.Core.IO.IIOHelper,Umbraco.Cms.Core.PropertyEditors.DataEditorAttribute,Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.IntegerPropertyEditor.IntegerPropertyValueEditor"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IntegerPropertyEditor.IntegerPropertyValueEditor.ToEditor(Umbraco.Cms.Core.Models.IProperty,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IntegerPropertyEditor.IntegerPropertyValueEditor.FromEditor(Umbraco.Cms.Core.Models.Editors.ContentPropertyData,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.IntegerPropertyEditor.IntegerPropertyValueEditor.IntegerPropertyConfigurationValidatorBase">
            <summary>
            /// Base validator for the integer property editor validation against data type configured values.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.IntegerPropertyEditor.IntegerPropertyValueEditor.IntegerPropertyConfigurationValidatorBase.ConfigurationKeyMinValue">
            <summary>
            The configuration key for the minimum value.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.IntegerPropertyEditor.IntegerPropertyValueEditor.IntegerPropertyConfigurationValidatorBase.ConfigurationKeyMaxValue">
            <summary>
            The configuration key for the maximum value.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.IntegerPropertyEditor.IntegerPropertyValueEditor.IntegerPropertyConfigurationValidatorBase.ConfigurationKeyStepValue">
            <summary>
            The configuration key for the step value.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IntegerPropertyEditor.IntegerPropertyValueEditor.IntegerPropertyConfigurationValidatorBase.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.IntegerPropertyEditor.IntegerPropertyValueEditor.IntegerPropertyConfigurationValidatorBase"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.IntegerPropertyEditor.IntegerPropertyValueEditor.IntegerPropertyConfigurationValidatorBase.LocalizedTextService">
            <summary>
            Gets the <see cref="T:Umbraco.Cms.Core.Services.ILocalizedTextService"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IntegerPropertyEditor.IntegerPropertyValueEditor.IntegerPropertyConfigurationValidatorBase.TryParsePropertyValue(System.Object,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.IntegerPropertyEditor.IntegerPropertyValueEditor.MinMaxValidator">
            <summary>
            Validates the min/max configuration for the integer property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IntegerPropertyEditor.IntegerPropertyValueEditor.MinMaxValidator.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.IntegerPropertyEditor.IntegerPropertyValueEditor.MinMaxValidator"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IntegerPropertyEditor.IntegerPropertyValueEditor.MinMaxValidator.Validate(System.Object,System.String,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.IntegerPropertyEditor.IntegerPropertyValueEditor.StepValidator">
            <summary>
            Validates the step configuration for the integer property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IntegerPropertyEditor.IntegerPropertyValueEditor.StepValidator.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.IntegerPropertyEditor.IntegerPropertyValueEditor.StepValidator"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IntegerPropertyEditor.IntegerPropertyValueEditor.StepValidator.Validate(System.Object,System.String,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.IPropertyCacheCompression">
            <summary>
                Determines if a property type's value should be compressed in memory
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IPropertyCacheCompression.IsCompressed(Umbraco.Cms.Core.Models.IReadOnlyContentBase,System.String,System.Boolean)">
            <summary>
                Whether a property on the content is/should be compressed
            </summary>
            <param name="content">The content</param>
            <param name="propertyTypeAlias">The property to compress or not</param>
            <param name="published">Whether this content is the published version</param>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IPropertyCacheCompressionOptions.IsCompressed(Umbraco.Cms.Core.Models.IReadOnlyContentBase,Umbraco.Cms.Core.Models.IPropertyType,Umbraco.Cms.Core.PropertyEditors.IDataEditor,System.Boolean)">
            <summary>
                Whether a property on the content is/should be compressed
            </summary>
            <param name="content">The content</param>
            <param name="propertyType">The property to compress or not</param>
            <param name="dataEditor">The datatype of the property to compress or not</param>
            <param name="published">Whether this content is the published version</param>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.IPropertyIndexValueFactory">
            <summary>
                Represents a property index value factory.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IPropertyIndexValueFactory.GetIndexValues(Umbraco.Cms.Core.Models.IProperty,System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.Guid,Umbraco.Cms.Core.Models.IContentType})">
            <summary>
                Gets the index values for a property.
            </summary>
            <remarks>
                <para>
                    Returns index values for a given property. By default, a property uses its alias as index field name,
                    and there would be only one index value, but some implementations (see for instance the grid one) may return more than
                    one value, with different indexed field names.
                </para>
                <para>
                    And then, values are an enumerable of objects, because each indexed field can in turn have multiple
                    values. By default, there would be only one object: the property value. But some implementations may return
                    more than one value for a given field.
                </para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.IPropertyValueConverter">
            <summary>
                Provides published content properties conversion service.
            </summary>
            <remarks>This is not a simple "value converter" because it really works only for properties.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IPropertyValueConverter.IsConverter(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <summary>
                Gets a value indicating whether the converter supports a property type.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>A value indicating whether the converter supports a property type.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IPropertyValueConverter.IsValue(System.Object,Umbraco.Cms.Core.PropertyEditors.PropertyValueLevel)">
            <summary>
                Determines whether a value is an actual value, or not a value.
            </summary>
            <remarks>
                <para>Called for Source, Inter and Object levels, until one does not return null.</para>
                <para>
                    Can return true (is a value), false (is not a value), or null to indicate that it
                    cannot be determined at the specified level. For instance, if source is a string that
                    could contain JSON, the decision could be made on the intermediate value. Or, if it is
                    a picker, it could be made on the object value (the actual picked object).
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IPropertyValueConverter.GetPropertyValueType(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <summary>
                Gets the type of values returned by the converter.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>The CLR type of values returned by the converter.</returns>
            <remarks>
                Some of the CLR types may be generated, therefore this method cannot directly return
                a Type object (which may not exist yet). In which case it needs to return a ModelType instance.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IPropertyValueConverter.GetPropertyCacheLevel(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <summary>
                Gets the property cache level.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>The property cache level.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IPropertyValueConverter.ConvertSourceToIntermediate(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType,System.Object,System.Boolean)">
            <summary>
                Converts a property source value to an intermediate value.
            </summary>
            <param name="owner">The property set owning the property.</param>
            <param name="propertyType">The property type.</param>
            <param name="source">The source value.</param>
            <param name="preview">A value indicating whether conversion should take place in preview mode.</param>
            <returns>The result of the conversion.</returns>
            <remarks>
                <para>
                    The converter should know how to convert a <c>null</c> source value, meaning that no
                    value has been assigned to the property. The intermediate value can be <c>null</c>.
                </para>
                <para>With the XML cache, source values come from the XML cache and therefore are strings.</para>
                <para>
                    With objects caches, source values would come from the database and therefore be either
                    ints, DateTimes, decimals, or strings.
                </para>
                <para>The converter should be prepared to handle both situations.</para>
                <para>
                    When source values are strings, the converter must handle empty strings, whitespace
                    strings, and xml-whitespace strings appropriately, ie it should know whether to preserve
                    white spaces.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IPropertyValueConverter.ConvertIntermediateToObject(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType,Umbraco.Cms.Core.PropertyEditors.PropertyCacheLevel,System.Object,System.Boolean)">
            <summary>
                Converts a property intermediate value to an Object value.
            </summary>
            <param name="owner">The property set owning the property.</param>
            <param name="propertyType">The property type.</param>
            <param name="referenceCacheLevel">The reference cache level.</param>
            <param name="inter">The intermediate value.</param>
            <param name="preview">A value indicating whether conversion should take place in preview mode.</param>
            <returns>The result of the conversion.</returns>
            <remarks>
                <para>
                    The converter should know how to convert a <c>null</c> intermediate value, or any intermediate value
                    indicating that no value has been assigned to the property. It is up to the converter to determine
                    what to return in that case: either <c>null</c>, or the default value...
                </para>
                <para>
                    The <paramref name="referenceCacheLevel" /> is passed to the converter so that it can be, in turn,
                    passed to eg a PublishedFragment constructor. It is used by the fragment and the properties to manage
                    the cache levels of property values. It is not meant to be used by the converter.
                </para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.IRichTextEditorIntermediateValue">
            <summary>
            Models Intermediate Value for Rich Text Editors Property Value Converter.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.IValueFormatValidator">
            <summary>
                Defines a value format validator.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IValueFormatValidator.ValidateFormat(System.Object,System.String,System.String)">
            <summary>
                Validates a value.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="valueType">The value type.</param>
            <param name="format">A format definition.</param>
            <returns>Validation results.</returns>
            <remarks>
                <para>The <paramref name="format" /> is expected to be a valid regular expression.</para>
                <para>This is used to validate values against the property type validation regular expression.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.IValueRequiredValidator">
            <summary>
                Defines a required value validator.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IValueRequiredValidator.ValidateRequired(System.Object,System.String)">
            <summary>
                Validates a value.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="valueType">The value type.</param>
            <returns>Validation results.</returns>
            <remarks>
                <para>This is used to validate values when the property type specifies that a value is required.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.IValueValidator">
            <summary>
                Defines a value validator.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.IValueValidator.Validate(System.Object,System.String,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <summary>
                Validates a value.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="valueType">The value type.</param>
            <param name="dataTypeConfiguration">A datatype configuration.</param>
            <param name="validationContext">The context in which the value is being validated.</param>
            <returns>Validation results.</returns>
            <remarks>
                <para>
                    The value can be a string, a Json structure (JObject, JArray...)... corresponding to what was posted by an
                    editor.
                </para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.JsonPropertyIndexValueFactoryBase`1">
            <summary>
             Abstract base for property index value factories where the value is json.
            </summary>
            <typeparam name="TSerialized">The type to deserialize the json to.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.JsonPropertyIndexValueFactoryBase`1.#ctor(Umbraco.Cms.Core.Serialization.IJsonSerializer,Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.IndexingSettings})">
            <summary>
             Constructor for the JsonPropertyIndexValueFactoryBase.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.JsonPropertyIndexValueFactoryBase`1.HandleResume(System.Collections.Generic.List{Umbraco.Cms.Core.PropertyEditors.IndexValue},Umbraco.Cms.Core.Models.IProperty,System.String,System.String,System.Boolean)">
            <summary>
             Method to return a list of summary of the content. By default this returns an empty list
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.JsonPropertyIndexValueFactoryBase`1.Handle(`0,Umbraco.Cms.Core.Models.IProperty,System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.Guid,Umbraco.Cms.Core.Models.IContentType})">
            <summary>
             Method that handle the deserialized object.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.LabelConfiguration">
            <summary>
                Represents the configuration for the label value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.LabelConfigurationEditor">
            <summary>
                Represents the configuration for the label value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.LabelPropertyEditor">
            <summary>
                Represents a property editor for label properties.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.LabelPropertyEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory,Umbraco.Cms.Core.IO.IIOHelper)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.LabelPropertyEditor" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.LabelPropertyEditor.CreateValueEditor">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.LabelPropertyEditor.CreateConfigurationEditor">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.LabelPropertyEditor.LabelPropertyValueEditor.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ListViewConfiguration">
            <summary>
                Represents the configuration for the listview value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ListViewConfigurationEditor">
            <summary>
                Represents the configuration editor for the listview value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.MarkdownPropertyEditor">
            <summary>
                Represents a markdown editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MarkdownPropertyEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.MarkdownPropertyEditor" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MarkdownPropertyEditor.CreateValueEditor">
            <summary>
                Create a custom value editor
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.MediaPicker3Configuration">
            <summary>
                Represents the configuration for the media picker value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.MediaPicker3ConfigurationEditor">
            <summary>
                Represents the configuration editor for the media picker value editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.MediaPicker3ConfigurationEditor.#ctor(Umbraco.Cms.Core.IO.IIOHelper)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.MediaPicker3ConfigurationEditor" /> class.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.MissingPropertyEditor">
            <summary>
                Represents a temporary representation of an editor for cases where a data type is created but not editor is
                available.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.MultiNodePickerConfiguration">
            <summary>
                Represents the configuration for the multinode picker value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.MultiNodePickerConfigurationEditor">
            <summary>
                Represents the configuration for the multinode picker value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.MultiNodePickerConfigurationTreeSource">
            <summary>
                Represents the 'startNode' value for the <see cref="T:Umbraco.Cms.Core.PropertyEditors.MultiNodePickerConfiguration" />
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.MultipleTextStringConfiguration">
            <summary>
                Represents the configuration for a multiple textstring value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.NoopPropertyCacheCompressionOptions">
            <summary>
                Default implementation for <see cref="T:Umbraco.Cms.Core.PropertyEditors.IPropertyCacheCompressionOptions" /> which does not compress any property
                data
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.NoopPropertyIndexValueFactory">
            <summary>
            Property Index Valye Factory that do not index anything.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.NoopPropertyIndexValueFactory.GetIndexValues(Umbraco.Cms.Core.Models.IProperty,System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.Guid,Umbraco.Cms.Core.Models.IContentType})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.PlainDateTimePropertyEditor">
            <summary>
                Represents a property editor for configuration-less date/time properties.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.PlainDateTimePropertyEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.PlainIntegerPropertyEditor" /> class.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.PlainDecimalPropertyEditor">
            <summary>
                Represents a property editor for configuration-less decimal properties.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.PlainDecimalPropertyEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.PlainDecimalPropertyEditor" /> class.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.PlainIntegerPropertyEditor">
            <summary>
                Represents a property editor for configuration-less decimal properties.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.PlainIntegerPropertyEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.PlainIntegerPropertyEditor" /> class.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.PlainJsonPropertyEditor">
            <summary>
                Represents a property editor for configuration-less JSON properties.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.PlainJsonPropertyEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.PlainJsonPropertyEditor" /> class.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.PlainStringPropertyEditor">
            <summary>
                Represents a property editor for configuration-less string properties.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.PlainStringPropertyEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.PlainStringPropertyEditor" /> class.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.PlainTimePropertyEditor">
            <summary>
                Represents a property editor for configuration-less time properties.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.PropertyCacheCompression">
            <summary>
                Compresses property data based on config
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.PropertyCacheLevel">
            <summary>
                Specifies the level of cache for a property value.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.PropertyCacheLevel.Unknown">
            <summary>
                Default value.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.PropertyCacheLevel.Element">
            <summary>
                Indicates that the property value can be cached at the element level, i.e. it can be
                cached until the element itself is modified.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.PropertyCacheLevel.Elements">
            <summary>
                Indicates that the property value can be cached at the elements level, i.e. it can
                be cached until any element is modified.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.PropertyCacheLevel.Snapshot">
            <summary>
                Indicates that the property value can be cached at the snapshot level, i.e. it can be
                cached for the duration of the current snapshot.
            </summary>
            <remarks>
                In most cases, a snapshot is created per request, and therefore this is
                equivalent to cache the value for the duration of the request.
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.PropertyCacheLevel.None">
            <summary>
                Indicates that the property value cannot be cached and has to be converted each time
                it is requested.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.PropertyValueConverterBase">
            <summary>
                Provides a default implementation for <see cref="T:Umbraco.Cms.Core.PropertyEditors.IPropertyValueConverter" />.
            </summary>
            <seealso cref="T:Umbraco.Cms.Core.PropertyEditors.IPropertyValueConverter" />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.PropertyValueConverterBase.IsConverter(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.PropertyValueConverterBase.IsValue(System.Object,Umbraco.Cms.Core.PropertyEditors.PropertyValueLevel)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.PropertyValueConverterBase.GetPropertyValueType(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.PropertyValueConverterBase.GetPropertyCacheLevel(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.PropertyValueConverterBase.ConvertSourceToIntermediate(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.PropertyValueConverterBase.ConvertIntermediateToObject(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType,Umbraco.Cms.Core.PropertyEditors.PropertyCacheLevel,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.PropertyValueLevel">
            <summary>
                Indicates the level of a value.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.PropertyValueLevel.Source">
            <summary>
                The source value, i.e. what is in the database.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.PropertyValueLevel.Inter">
            <summary>
                The conversion intermediate value.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.PropertyValueLevel.Object">
            <summary>
                The converted value.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.RichTextConfiguration">
            <summary>
                Represents the configuration for the rich text value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.RichTextConfigurationEditor">
            <summary>
                Represents the configuration editor for the rich text value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.SliderConfiguration">
            <summary>
                Represents the configuration for the slider value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.SliderConfigurationEditor">
            <summary>
                Represents the configuration editor for the slider value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.TagConfiguration">
            <summary>
                Represents the configuration for the tag value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.TagConfigurationEditor">
            <summary>
                Represents the configuration editor for the tag value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.TagsPropertyEditorAttribute">
            <summary>
                Marks property editors that support tags.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.TagsPropertyEditorAttribute.#ctor(System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.TagsPropertyEditorAttribute" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.TagsPropertyEditorAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.TagsPropertyEditorAttribute" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.TagsPropertyEditorAttribute.StorageType">
            <summary>
                Gets or sets a value indicating how tags are stored.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.TagsPropertyEditorAttribute.Delimiter">
            <summary>
                Gets or sets the delimited for delimited strings.
            </summary>
            <remarks>Default is a comma. Has no meaning when tags are stored as Json.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.TagsPropertyEditorAttribute.ReplaceTags">
            <summary>
                Gets or sets a value indicating whether to replace the tags entirely.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.TagsPropertyEditorAttribute.TagGroup">
            <summary>
                Gets or sets the tags group.
            </summary>
            <remarks>Default is "default".</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.PropertyEditors.TagsPropertyEditorAttribute.TagsConfigurationProviderType">
            <summary>
                Gets the type of the dynamic configuration provider.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.TextAreaConfiguration">
            <summary>
                Represents the configuration for the textarea value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.TextAreaConfigurationEditor">
            <summary>
                Represents the configuration editor for the textarea value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.TextboxConfiguration">
            <summary>
                Represents the configuration for the textbox value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.TextboxConfigurationEditor">
            <summary>
                Represents the configuration editor for the textbox value editor.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.TextOnlyValueEditor">
            <summary>
                Custom value editor which ensures that the value stored is just plain text and that
                no magic json formatting occurs when translating it to and from the database values
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.TextOnlyValueEditor.ToEditor(Umbraco.Cms.Core.Models.IProperty,System.String,System.String)">
            <summary>
                A method used to format the database value to a value that can be used by the editor
            </summary>
            <param name="property"></param>
            <param name="culture"></param>
            <param name="segment"></param>
            <returns></returns>
            <remarks>
                The object returned will always be a string and if the database type is not a valid string type an exception is
                thrown
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.TextOnlyValueEditor.LengthValidator">
            <summary>
            A common length validator for both textbox and text area.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.UnPublishedContentPropertyCacheCompressionOptions">
            <summary>
                Compress large, non published text properties
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.Validation.ITypedJsonValidator`2">
            <summary>
            A specific validator used for JSON based value editors, to avoid doing multiple deserialization.
            <remarks>Is used together with <see cref="T:Umbraco.Cms.Core.PropertyEditors.Validation.TypedJsonValidatorRunner`2"/></remarks>
            </summary>
            <typeparam name="TValue">The type of the value consumed by the validator.</typeparam>
            <typeparam name="TConfiguration">The type of the configuration consumed by validator.</typeparam>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.Validation.TypedJsonValidatorRunner`2">
            <summary>
            <para>
            An aggregate validator for JSON based value editors, to avoid doing multiple deserialization.
            </para>
            <para>
            Will deserialize once, and cast the configuration once, and pass those values to each <see cref="T:Umbraco.Cms.Core.PropertyEditors.Validation.ITypedJsonValidator`2"/>, aggregating the results.
            </para>
            </summary>
            <typeparam name="TValue">The type of the expected value.</typeparam>
            <typeparam name="TConfiguration">The type of the expected configuration</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.Validation.TypedJsonValidatorRunner`2.#ctor(Umbraco.Cms.Core.Serialization.IJsonSerializer,Umbraco.Cms.Core.PropertyEditors.Validation.ITypedJsonValidator{`0,`1}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.Validation.TypedJsonValidatorRunner`2"/> class.
            </summary>
            <param name="jsonSerializer">The JSON serializer.</param>
            <param name="validators">The collection of validators to run.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.Validation.TypedJsonValidatorRunner`2.Validate(System.Object,System.String,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.Validation.ValidationHelper">
            <summary>
            Provides helper methods for validation of property editor values based on data type configuration.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.Validation.ValidationHelper.IsValueValidForStep(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Checks if a provided value is valid based on the configured step and minimum values.
            </summary>
            <param name="value">The provided value.</param>
            <param name="min">The configured minimum value.</param>
            <param name="step">The configured step value.</param>
            <returns>True if the value is valid otherwise false.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.Validation.ValidationHelper.HasValidStartNode(System.Collections.Generic.IEnumerable{System.Guid},System.Guid,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService)">
            <summary>
            Checks if all provided entities has the start node as an ancestor.
            </summary>
            <param name="entityKeys">Keys to check.</param>
            <param name="startNode">The configured start node.</param>
            <param name="navigationQueryService">The navigation query service to use for the checks.</param>
            <returns>True if the startnode key is in the ancestry tree.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.Validators.DateTimeValidator">
            <summary>
                Used to validate if the value is a valid date/time
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.Validators.DateTimeValidator.Validate(System.Object,System.String,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <summary>
               Validates if the value is a valid date/time
            </summary>
            <param name="value"></param>
            <param name="valueType"></param>
            <param name="dataTypeConfiguration"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.Validators.DecimalValidator">
            <summary>
                A validator that validates that the value is a valid decimal
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.Validators.DecimalValidator.Validate(System.Object,System.String,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.Validators.DictionaryConfigurationValidatorBase">
            <summary>
            Provides common functionality to validators that rely on data type configuration.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.Validators.DictionaryConfigurationValidatorBase.TryGetConfiguredValue``1(System.Object,System.String,``0@)">
            <summary>
            Retrieves a typed value from data type dictionary configuration for the provided key.
            </summary>
            <param name="dataTypeConfiguration">The data type configuration.</param>
            <param name="key">The configuration key.</param>
            <param name="value">The configuration value (if found), otherwise zero.</param>
            <returns>True if the configured value was found.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.Validators.EmailValidator">
            <summary>
            A validator that validates an email address.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.Validators.EmailValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.Validators.EmailValidator"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.Validators.EmailValidator.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.Validators.EmailValidator"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.Validators.EmailValidator.Validate(System.Object,System.String,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.Validators.IntegerValidator">
            <summary>
                A validator that validates that the value is a valid integer
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.Validators.IntegerValidator.Validate(System.Object,System.String,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.Validators.MultipleValueValidator">
            <summary>
            A value validator for property editors that handle multiple values from a configured list of options.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.Validators.MultipleValueValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.Validators.MultipleValueValidator"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.Validators.MultipleValueValidator.#ctor(Umbraco.Cms.Core.Services.ILocalizedTextService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.Validators.MultipleValueValidator"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.Validators.MultipleValueValidator.Validate(System.Object,System.String,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.Validators.RegexValidator">
            <summary>
                A validator that validates that the value against a regular expression.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.Validators.RegexValidator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.Validators.RegexValidator" /> class.
            </summary>
            <remarks>
                Use this constructor when the validator is used as an <see cref="T:Umbraco.Cms.Core.PropertyEditors.IValueFormatValidator" />,
                and the regular expression is supplied at validation time.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.Validators.RegexValidator.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.Validators.RegexValidator" /> class.
            </summary>
            <remarks>
                Use this constructor when the validator is used as an <see cref="T:Umbraco.Cms.Core.PropertyEditors.IValueValidator" />,
                and the regular expression must be supplied when the validator is created.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.Validators.RegexValidator.Validate(System.Object,System.String,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc cref="M:Umbraco.Cms.Core.PropertyEditors.IValueValidator.Validate(System.Object,System.String,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)" />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.Validators.RegexValidator.ValidateFormat(System.Object,System.String,System.String)">
            <inheritdoc cref="M:Umbraco.Cms.Core.PropertyEditors.IValueFormatValidator.ValidateFormat(System.Object,System.String,System.String)" />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.Validators.RequiredValidator">
            <summary>
                A validator that validates that the value is not null or empty (if it is a string)
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.Validators.RequiredValidator.Validate(System.Object,System.String,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc cref="M:Umbraco.Cms.Core.PropertyEditors.IValueValidator.Validate(System.Object,System.String,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)" />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.Validators.RequiredValidator.ValidateRequired(System.Object,System.String)">
            <inheritdoc cref="M:Umbraco.Cms.Core.PropertyEditors.IValueRequiredValidator.ValidateRequired(System.Object,System.String)" />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.Validators.SimplePropertyConfigurationValidatorBase`1">
            <summary>
            Provides common functionality to validators that rely on data type configuration.
            </summary>
            <typeparam name="TValue">The type to parse to.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.Validators.SimplePropertyConfigurationValidatorBase`1.TryParsePropertyValue(System.Object,`0@)">
            <summary>
            Parses the raw property value into it's typed equivalent.
            </summary>
            <param name="value">The property value as a nullable object.</param>
            <param name="parsedValue">The parsed value.</param>
            <returns>True if the parse succeeded, otherwise false.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ValueConverters.LabelValueConverter">
            <summary>
                We need this property converter so that we always force the value of a label to be a string
            </summary>
            <remarks>
                Without a property converter defined for the label type, the value will be converted with
                the `ConvertUsingDarkMagic` method which will try to parse the value into it's correct type, but this
                can cause issues if the string is detected as a number and then strips leading zeros.
                Example: http://issues.umbraco.org/issue/U4-7929
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ValueConverters.MultiNodeTreePickerValueConverter">
            <summary>
                The multi node tree picker property editor value converter.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.MultiNodeTreePickerValueConverter.GetPublishedContent``1(``0,Umbraco.Cms.Core.Models.UmbracoObjectTypes@,Umbraco.Cms.Core.Models.UmbracoObjectTypes,System.Func{``0,Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent})">
            <summary>
                Attempt to get an IPublishedContent instance based on ID and content type
            </summary>
            <param name="nodeId">The content node ID</param>
            <param name="actualType">The type of content being requested</param>
            <param name="expectedType">The type of content expected/supported by <paramref name="contentFetcher" /></param>
            <param name="contentFetcher">A function to fetch content of type <paramref name="expectedType" /></param>
            <returns>
                The requested content, or null if either it does not exist or <paramref name="actualType" /> does not match
                <paramref name="expectedType" />
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ValueConverters.MustBeStringValueConverter">
            <summary>
                Ensures that no matter what is selected in (editor), the value results in a string.
            </summary>
            <remarks>
                <para>
                    For more details see issues http://issues.umbraco.org/issue/U4-3776 (MNTP)
                    and http://issues.umbraco.org/issue/U4-4160 (media picker).
                </para>
                <para>
                    The cache level is set to .Content because the string is supposed to depend
                    on the source value only, and not on any other content. It is NOT appropriate
                    to use that converter for values whose .ToString() would depend on other content.
                </para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ValueConverters.SimpleRichTextValueConverter">
            <summary>
                Value converter for the RTE so that it always returns IHtmlString so that Html.Raw doesn't have to be used.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ValueConverters.SliderValueConverter">
            <summary>
            The slider property value converter.
            </summary>
            <seealso cref="T:Umbraco.Cms.Core.PropertyEditors.PropertyValueConverterBase" />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.SliderValueConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.ValueConverters.SliderValueConverter" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.SliderValueConverter.IsConverter(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.SliderValueConverter.GetPropertyValueType(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.SliderValueConverter.GetPropertyCacheLevel(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.SliderValueConverter.ConvertIntermediateToObject(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType,Umbraco.Cms.Core.PropertyEditors.PropertyCacheLevel,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.SliderValueConverter.TryParseDecimal(System.String,System.Decimal@)">
            <summary>
            Helper method for parsing a double consistently
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ValueConverters.TagsValueConverter">
            <summary>
            The tags property value converter.
            </summary>
            <seealso cref="T:Umbraco.Cms.Core.PropertyEditors.PropertyValueConverterBase" />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.TagsValueConverter.#ctor(Umbraco.Cms.Core.Serialization.IJsonSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.ValueConverters.TagsValueConverter" /> class.
            </summary>
            <param name="jsonSerializer">The JSON serializer.</param>
            <exception cref="T:System.ArgumentNullException">jsonSerializer</exception>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.TagsValueConverter.IsConverter(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.TagsValueConverter.GetPropertyValueType(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.TagsValueConverter.GetPropertyCacheLevel(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueConverters.TagsValueConverter.ConvertSourceToIntermediate(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType,System.Object,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ValueConverters.UploadPropertyConverter">
            <summary>
                The upload property value converter.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ValueListConfiguration">
            <summary>
                Represents the ValueList editor configuration.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.ValueTypes">
            <summary>
                Represents the types of the edited values.
            </summary>
            <remarks>
                <para>
                    These types are used to determine the storage type, but also for
                    validation. Therefore, they are more detailed than the storage types.
                </para>
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.ValueTypes.Date">
            <summary>
                Date value.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.ValueTypes.DateTime">
            <summary>
                DateTime value.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.ValueTypes.Decimal">
            <summary>
                Decimal value.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.ValueTypes.Integer">
            <summary>
                Integer value.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.ValueTypes.Bigint">
            <summary>
                Integer value.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.ValueTypes.Json">
            <summary>
                Json value.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.ValueTypes.Text">
            <summary>
                Text value (maps to text database type).
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.ValueTypes.Time">
            <summary>
                Time value.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.ValueTypes.String">
            <summary>
                Text value (maps to varchar database type).
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.PropertyEditors.ValueTypes.Xml">
            <summary>
                Xml value.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueTypes.IsValue(System.String)">
            <summary>
                Determines whether a string value is a valid ValueTypes value.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.ValueTypes.ToStorageType(System.String)">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Models.ValueStorageType" /> value corresponding to a ValueTypes value.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.PropertyEditors.VoidEditor">
            <summary>
                Represents a void editor.
            </summary>
            <remarks>
                Can be used in some places where an editor is needed but no actual
                editor is available. Not to be used otherwise. Not discovered, and therefore
                not part of the editors collection.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.VoidEditor.#ctor(System.String,Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.VoidEditor" /> class.
            </summary>
            <param name="aliasSuffix">An optional alias suffix.</param>
            <param name="dataValueEditorFactory">A data value editor factory.</param>
            <remarks>
                The default alias of the editor is "Umbraco.Void". When a suffix is provided,
                it is appended to the alias. Eg if the suffix is "Foo" the alias is "Umbraco.Void.Foo".
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.PropertyEditors.VoidEditor.#ctor(Umbraco.Cms.Core.PropertyEditors.IDataValueEditorFactory)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.PropertyEditors.VoidEditor" /> class.
            </summary>
            <param name="dataValueEditorFactory">A data value editor factory.</param>
            <remarks>The alias of the editor is "Umbraco.Void".</remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.ReflectionUtilities">
            <summary>
                Provides utilities to simplify reflection.
            </summary>
            <remarks>
                <para>
                    Readings:
                    * CIL instructions: https://en.wikipedia.org/wiki/List_of_CIL_instructions
                    * ECMA 335: https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf
                    * MSIL programming: http://www.blackbeltcoder.com/Articles/net/msil-programming-part-1
                </para>
                <para>
                    Supports emitting constructors, instance and static methods, instance property getters and
                    setters. Does not support static properties yet.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.ReflectionUtilities.EmitFieldGetter``2(System.String)">
            <summary>
                Emits a field getter.
            </summary>
            <typeparam name="TDeclaring">The declaring type.</typeparam>
            <typeparam name="TValue">The field type.</typeparam>
            <param name="fieldName">The name of the field.</param>
            <returns>
                A field getter function.
            </returns>
            <exception cref="T:System.ArgumentNullException">fieldName</exception>
            <exception cref="T:System.ArgumentException">
                Value can't be empty or consist only of white-space characters. - <paramref name="fieldName" />
                or
                Value type <typeparamref name="TValue" /> does not match field <typeparamref name="TDeclaring" />.
                <paramref name="fieldName" /> type.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Could not find field <typeparamref name="TDeclaring" />.
                <paramref name="fieldName" />.
            </exception>
        </member>
        <member name="M:Umbraco.Cms.Core.ReflectionUtilities.EmitFieldSetter``2(System.String)">
            <summary>
                Emits a field setter.
            </summary>
            <typeparam name="TDeclaring">The declaring type.</typeparam>
            <typeparam name="TValue">The field type.</typeparam>
            <param name="fieldName">The name of the field.</param>
            <returns>
                A field setter action.
            </returns>
            <exception cref="T:System.ArgumentNullException">fieldName</exception>
            <exception cref="T:System.ArgumentException">
                Value can't be empty or consist only of white-space characters. - <paramref name="fieldName" />
                or
                Value type <typeparamref name="TValue" /> does not match field <typeparamref name="TDeclaring" />.
                <paramref name="fieldName" /> type.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Could not find field <typeparamref name="TDeclaring" />.
                <paramref name="fieldName" />.
            </exception>
        </member>
        <member name="M:Umbraco.Cms.Core.ReflectionUtilities.EmitFieldGetterAndSetter``2(System.String)">
            <summary>
                Emits a field getter and setter.
            </summary>
            <typeparam name="TDeclaring">The declaring type.</typeparam>
            <typeparam name="TValue">The field type.</typeparam>
            <param name="fieldName">The name of the field.</param>
            <returns>
                A field getter and setter functions.
            </returns>
            <exception cref="T:System.ArgumentNullException">fieldName</exception>
            <exception cref="T:System.ArgumentException">
                Value can't be empty or consist only of white-space characters. - <paramref name="fieldName" />
                or
                Value type <typeparamref name="TValue" /> does not match field <typeparamref name="TDeclaring" />.
                <paramref name="fieldName" /> type.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Could not find field <typeparamref name="TDeclaring" />.
                <paramref name="fieldName" />.
            </exception>
        </member>
        <member name="M:Umbraco.Cms.Core.ReflectionUtilities.GetField``2(System.String)">
            <summary>
                Gets the field.
            </summary>
            <typeparam name="TDeclaring">The type of the declaring.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="fieldName">Name of the field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">fieldName</exception>
            <exception cref="T:System.ArgumentException">
                Value can't be empty or consist only of white-space characters. - <paramref name="fieldName" />
                or
                Value type <typeparamref name="TValue" /> does not match field <typeparamref name="TDeclaring" />.
                <paramref name="fieldName" /> type.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Could not find field <typeparamref name="TDeclaring" />.
                <paramref name="fieldName" />.
            </exception>
        </member>
        <member name="M:Umbraco.Cms.Core.ReflectionUtilities.EmitPropertyGetter``2(System.String,System.Boolean)">
            <summary>
                Emits a property getter.
            </summary>
            <typeparam name="TDeclaring">The declaring type.</typeparam>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="mustExist">A value indicating whether the property and its getter must exist.</param>
            <returns>
                A property getter function. If <paramref name="mustExist" /> is <c>false</c>, returns null when the property or its
                getter does not exist.
            </returns>
            <exception cref="T:System.ArgumentNullException">propertyName</exception>
            <exception cref="T:System.ArgumentException">
                Value can't be empty or consist only of white-space characters. - <paramref name="propertyName" />
                or
                Value type <typeparamref name="TValue" /> does not match property <typeparamref name="TDeclaring" />.
                <paramref name="propertyName" /> type.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Could not find property getter for <typeparamref name="TDeclaring" />.
                <paramref name="propertyName" />.
            </exception>
        </member>
        <member name="M:Umbraco.Cms.Core.ReflectionUtilities.EmitPropertySetter``2(System.String,System.Boolean)">
            <summary>
                Emits a property setter.
            </summary>
            <typeparam name="TDeclaring">The declaring type.</typeparam>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="mustExist">A value indicating whether the property and its setter must exist.</param>
            <returns>
                A property setter function. If <paramref name="mustExist" /> is <c>false</c>, returns null when the property or its
                setter does not exist.
            </returns>
            <exception cref="T:System.ArgumentNullException">propertyName</exception>
            <exception cref="T:System.ArgumentException">
                Value can't be empty or consist only of white-space characters. - <paramref name="propertyName" />
                or
                Value type <typeparamref name="TValue" /> does not match property <typeparamref name="TDeclaring" />.
                <paramref name="propertyName" /> type.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Could not find property setter for <typeparamref name="TDeclaring" />.
                <paramref name="propertyName" />.
            </exception>
        </member>
        <member name="M:Umbraco.Cms.Core.ReflectionUtilities.EmitPropertyGetterAndSetter``2(System.String,System.Boolean)">
            <summary>
                Emits a property getter and setter.
            </summary>
            <typeparam name="TDeclaring">The declaring type.</typeparam>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="mustExist">A value indicating whether the property and its getter and setter must exist.</param>
            <returns>
                A property getter and setter functions. If <paramref name="mustExist" /> is <c>false</c>, returns null when the
                property or its getter or setter does not exist.
            </returns>
            <exception cref="T:System.ArgumentNullException">propertyName</exception>
            <exception cref="T:System.ArgumentException">
                Value can't be empty or consist only of white-space characters. - <paramref name="propertyName" />
                or
                Value type <typeparamref name="TValue" /> does not match property <typeparamref name="TDeclaring" />.
                <paramref name="propertyName" /> type.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Could not find property getter and setter for
                <typeparamref name="TDeclaring" />.<paramref name="propertyName" />.
            </exception>
        </member>
        <member name="M:Umbraco.Cms.Core.ReflectionUtilities.EmitPropertyGetter``2(System.Reflection.PropertyInfo)">
            <summary>
                Emits a property getter.
            </summary>
            <typeparam name="TDeclaring">The declaring type.</typeparam>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="propertyInfo">The property info.</param>
            <returns>A property getter function.</returns>
            <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="propertyInfo" /> is null.</exception>
            <exception cref="T:System.ArgumentException">Occurs when the property has no getter.</exception>
            <exception cref="T:System.ArgumentException">Occurs when <typeparamref name="TValue" /> does not match the type of the property.</exception>
        </member>
        <member name="M:Umbraco.Cms.Core.ReflectionUtilities.EmitPropertySetter``2(System.Reflection.PropertyInfo)">
            <summary>
                Emits a property setter.
            </summary>
            <typeparam name="TDeclaring">The declaring type.</typeparam>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="propertyInfo">The property info.</param>
            <returns>A property setter function.</returns>
            <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="propertyInfo" /> is null.</exception>
            <exception cref="T:System.ArgumentException">Occurs when the property has no setter.</exception>
            <exception cref="T:System.ArgumentException">Occurs when <typeparamref name="TValue" /> does not match the type of the property.</exception>
        </member>
        <member name="M:Umbraco.Cms.Core.ReflectionUtilities.EmitPropertyGetterAndSetter``2(System.Reflection.PropertyInfo)">
            <summary>
                Emits a property getter and setter.
            </summary>
            <typeparam name="TDeclaring">The declaring type.</typeparam>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="propertyInfo">The property info.</param>
            <returns>A property getter and setter functions.</returns>
            <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="propertyInfo" /> is null.</exception>
            <exception cref="T:System.ArgumentException">Occurs when the property has no getter or no setter.</exception>
            <exception cref="T:System.ArgumentException">Occurs when <typeparamref name="TValue" /> does not match the type of the property.</exception>
        </member>
        <member name="M:Umbraco.Cms.Core.ReflectionUtilities.EmitPropertySetterUnsafe``2(System.Reflection.PropertyInfo)">
            <summary>
                Emits a property setter.
            </summary>
            <typeparam name="TDeclaring">The declaring type.</typeparam>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="propertyInfo">The property info.</param>
            <returns>A property setter function.</returns>
            <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="propertyInfo" /> is null.</exception>
            <exception cref="T:System.ArgumentException">Occurs when the property has no setter.</exception>
            <exception cref="T:System.ArgumentException">Occurs when <typeparamref name="TValue" /> does not match the type of the property.</exception>
        </member>
        <member name="M:Umbraco.Cms.Core.ReflectionUtilities.EmitConstructor``1(System.Boolean,System.Type)">
            <summary>
                Emits a constructor.
            </summary>
            <typeparam name="TLambda">A lambda representing the constructor.</typeparam>
            <param name="mustExist">A value indicating whether the constructor must exist.</param>
            <param name="declaring">The optional type of the class to construct.</param>
            <returns>
                A constructor function. If <paramref name="mustExist" /> is <c>false</c>, returns null when the constructor
                does not exist.
            </returns>
            <remarks>
                <para>
                    When <paramref name="declaring" /> is not specified, it is the type returned by
                    <typeparamref name="TLambda" />.
                </para>
                <para>The constructor arguments are determined by <typeparamref name="TLambda" /> generic arguments.</para>
                <para>
                    The type returned by <typeparamref name="TLambda" /> does not need to be exactly <paramref name="declaring" />,
                    when e.g. that type is not known at compile time, but it has to be a parent type (eg an interface, or
                    <c>object</c>).
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Occurs when the constructor does not exist and
                <paramref name="mustExist" /> is <c>true</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
                Occurs when <typeparamref name="TLambda" /> is not a Func or when <paramref name="declaring" />
                is specified and does not match the function's returned type.
            </exception>
        </member>
        <member name="M:Umbraco.Cms.Core.ReflectionUtilities.EmitConstructor``1(System.Reflection.ConstructorInfo)">
            <summary>
                Emits a constructor.
            </summary>
            <typeparam name="TLambda">A lambda representing the constructor.</typeparam>
            <param name="ctor">The constructor info.</param>
            <returns>A constructor function.</returns>
            <exception cref="T:System.ArgumentException">
                Occurs when <typeparamref name="TLambda" /> is not a Func or when its generic
                arguments do not match those of <paramref name="ctor" />.
            </exception>
            <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="ctor" /> is null.</exception>
        </member>
        <member name="M:Umbraco.Cms.Core.ReflectionUtilities.EmitConstructorUnsafe``1(System.Reflection.ConstructorInfo)">
            <summary>
                Emits a constructor.
            </summary>
            <typeparam name="TLambda">A lambda representing the constructor.</typeparam>
            <param name="ctor">The constructor info.</param>
            <returns>A constructor function.</returns>
            <remarks>
                <para>
                    The constructor is emitted in an unsafe way, using the lambda arguments without verifying
                    them at all. This assumes that the calling code is taking care of all verifications, in order
                    to avoid cast errors.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
                Occurs when <typeparamref name="TLambda" /> is not a Func or when its generic
                arguments do not match those of <paramref name="ctor" />.
            </exception>
            <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="ctor" /> is null.</exception>
        </member>
        <member name="M:Umbraco.Cms.Core.ReflectionUtilities.EmitMethod``2(System.String,System.Boolean)">
            <summary>
                Emits a static method.
            </summary>
            <typeparam name="TDeclaring">The declaring type.</typeparam>
            <typeparam name="TLambda">A lambda representing the method.</typeparam>
            <param name="methodName">The name of the method.</param>
            <param name="mustExist">A value indicating whether the constructor must exist.</param>
            <returns>
                The method. If <paramref name="mustExist" /> is <c>false</c>, returns null when the method does not exist.
            </returns>
            <exception cref="T:System.ArgumentNullException">methodName</exception>
            <exception cref="T:System.ArgumentException">
                Value can't be empty or consist only of white-space characters. - <paramref name="methodName" />
                or
                Occurs when <typeparamref name="TLambda" /> does not match the method signature..
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Occurs when no proper method with name <paramref name="methodName" /> could
                be found.
            </exception>
            <remarks>
                The method arguments are determined by <typeparamref name="TLambda" /> generic arguments.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.ReflectionUtilities.EmitMethod``1(System.Type,System.String,System.Boolean)">
            <summary>
                Emits a static method.
            </summary>
            <typeparam name="TLambda">A lambda representing the method.</typeparam>
            <param name="declaring">The declaring type.</param>
            <param name="methodName">The name of the method.</param>
            <param name="mustExist">A value indicating whether the constructor must exist.</param>
            <returns>
                The method. If <paramref name="mustExist" /> is <c>false</c>, returns null when the method does not exist.
            </returns>
            <exception cref="T:System.ArgumentNullException">methodName</exception>
            <exception cref="T:System.ArgumentException">
                Value can't be empty or consist only of white-space characters. - <paramref name="methodName" />
                or
                Occurs when <typeparamref name="TLambda" /> does not match the method signature..
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Occurs when no proper method with name <paramref name="methodName" /> could
                be found.
            </exception>
            <remarks>
                The method arguments are determined by <typeparamref name="TLambda" /> generic arguments.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.ReflectionUtilities.EmitMethod``1(System.Reflection.MethodInfo)">
            <summary>
                Emits a method.
            </summary>
            <typeparam name="TLambda">A lambda representing the method.</typeparam>
            <param name="method">The method info.</param>
            <returns>The method.</returns>
            <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="method" /> is null.</exception>
            <exception cref="T:System.ArgumentException">
                Occurs when Occurs when <typeparamref name="TLambda" /> does not match the method
                signature.
            </exception>
        </member>
        <member name="M:Umbraco.Cms.Core.ReflectionUtilities.EmitMethodUnsafe``1(System.Reflection.MethodInfo)">
            <summary>
                Emits a method.
            </summary>
            <typeparam name="TLambda">A lambda representing the method.</typeparam>
            <param name="method">The method info.</param>
            <returns>The method.</returns>
            <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="method" /> is null.</exception>
            <exception cref="T:System.ArgumentException">
                Occurs when Occurs when <typeparamref name="TLambda" /> does not match the method
                signature.
            </exception>
        </member>
        <member name="M:Umbraco.Cms.Core.ReflectionUtilities.EmitMethod``1(System.String,System.Boolean)">
            <summary>
                Emits an instance method.
            </summary>
            <typeparam name="TLambda">A lambda representing the method.</typeparam>
            <param name="methodName">The name of the method.</param>
            <param name="mustExist">A value indicating whether the constructor must exist.</param>
            <returns>
                The method. If <paramref name="mustExist" /> is <c>false</c>, returns null when the method does not exist.
            </returns>
            <exception cref="T:System.ArgumentNullException">methodName</exception>
            <exception cref="T:System.ArgumentException">
                Value can't be empty or consist only of white-space characters. - <paramref name="methodName" />
                or
                Occurs when <typeparamref name="TLambda" /> does not match the method signature..
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Occurs when no proper method with name <paramref name="methodName" /> could
                be found.
            </exception>
            <remarks>
                The method arguments are determined by <typeparamref name="TLambda" /> generic arguments.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.AliasUrlProvider">
            <summary>
                Provides URLs using the <c>umbracoUrlAlias</c> property.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.AliasUrlProvider.GetUrl(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Models.PublishedContent.UrlMode,System.String,System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.AliasUrlProvider.GetOtherUrls(System.Int32,System.Uri)">
            <summary>
                Gets the other URLs of a published content.
            </summary>
            <param name="id">The published content id.</param>
            <param name="current">The current absolute URL.</param>
            <returns>The other URLs for the published content.</returns>
            <remarks>
                <para>
                    Other URLs are those that <c>GetUrl</c> would not return in the current context, but would be valid
                    URLs for the node in other contexts (different domain for current request, umbracoUrlAlias...).
                </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.ContentFinderByIdentifierPathBase.FailureLogMessageTemplate">
            <remark>
                Used as the log message inside <see cref="M:Umbraco.Cms.Core.Routing.ContentFinderByIdentifierPathBase.LogAndReturnFailure"/>>.
            </remark>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.ContentFinderByKeyPath">
            <summary>
                Provides an implementation of <see cref="T:Umbraco.Cms.Core.Routing.IContentFinder" /> that handles page key identifiers.
            </summary>
            <remarks>
                <para>Handles <c>/e7b65017-c6b3-4c11-b7c7-7ea1d0404c9a</c> where <c>e7b65017-c6b3-4c11-b7c7-7ea1d0404c9a</c> is the key of a document.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.ContentFinderByKeyPath.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.WebRoutingSettings},Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Routing.ContentFinderByKeyPath},Umbraco.Cms.Core.Web.IRequestAccessor,Umbraco.Cms.Core.Web.IUmbracoContextAccessor)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Routing.ContentFinderByKeyPath" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.ContentFinderByKeyPath.TryFindContent(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder)">
            <summary>
                Tries to find and assign an Umbraco document to a <c>PublishedRequest</c>.
            </summary>
            <param name="frequest">The <c>PublishedRequest</c>.</param>
            <returns>A value indicating whether an Umbraco document was found and assigned.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.ContentFinderByPageIdQuery">
            <summary>
                This looks up a document by checking for the umbPageId of a request/query string
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.ContentFinderByPageIdQuery.#ctor(Umbraco.Cms.Core.Web.IRequestAccessor,Umbraco.Cms.Core.Web.IUmbracoContextAccessor)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Routing.ContentFinderByPageIdQuery" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.ContentFinderByPageIdQuery.TryFindContent(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.ContentFinderByRedirectUrl">
            <summary>
                Provides an implementation of <see cref="T:Umbraco.Cms.Core.Routing.IContentFinder" /> that handles page URL rewrites
                that are stored when moving, saving, or deleting a node.
            </summary>
            <remarks>
                <para>Assigns a permanent redirect notification to the request.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.ContentFinderByRedirectUrl.#ctor(Umbraco.Cms.Core.Services.IRedirectUrlService,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Routing.ContentFinderByRedirectUrl},Umbraco.Cms.Core.Routing.IPublishedUrlProvider,Umbraco.Cms.Core.Web.IUmbracoContextAccessor)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Routing.ContentFinderByRedirectUrl" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.ContentFinderByRedirectUrl.TryFindContent(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder)">
            <summary>
                Tries to find and assign an Umbraco document to a <c>PublishedRequest</c>.
            </summary>
            <param name="frequest">The <c>PublishedRequest</c>.</param>
            <returns>A value indicating whether an Umbraco document was found and assigned.</returns>
            <remarks>
                Optionally, can also assign the template or anything else on the document request, although that is not
                required.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.ContentFinderByUrl">
            <summary>
                Provides an implementation of <see cref="T:Umbraco.Cms.Core.Routing.IContentFinder" /> that handles page nice URLs.
            </summary>
            <remarks>
                <para>Handles <c>/foo/bar</c> where <c>/foo/bar</c> is the nice URL of a document.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.ContentFinderByUrl.#ctor(Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Routing.ContentFinderByUrl},Umbraco.Cms.Core.Web.IUmbracoContextAccessor)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Routing.ContentFinderByUrl" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.ContentFinderByUrl.UmbracoContextAccessor">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Web.IUmbracoContextAccessor" />
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.ContentFinderByUrl.TryFindContent(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder)">
            <summary>
                Tries to find and assign an Umbraco document to a <c>PublishedRequest</c>.
            </summary>
            <param name="frequest">The <c>PublishedRequest</c>.</param>
            <returns>A value indicating whether an Umbraco document was found and assigned.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.ContentFinderByUrl.FindContent(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder,System.String)">
            <summary>
                Tries to find an Umbraco document for a <c>PublishedRequest</c> and a route.
            </summary>
            <returns>The document node, or null.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.ContentFinderByUrlAlias">
            <summary>
                Provides an implementation of <see cref="T:Umbraco.Cms.Core.Routing.IContentFinder" /> that handles page aliases.
            </summary>
            <remarks>
                <para>
                    Handles <c>/just/about/anything</c> where <c>/just/about/anything</c> is contained in the
                    <c>umbracoUrlAlias</c> property of a document.
                </para>
                <para>The alias is the full path to the document. There can be more than one alias, separated by commas.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.ContentFinderByUrlAlias.#ctor(Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Routing.ContentFinderByUrlAlias},Umbraco.Cms.Core.Models.PublishedContent.IPublishedValueFallback,Umbraco.Cms.Core.Web.IUmbracoContextAccessor,Umbraco.Cms.Core.Services.Navigation.IDocumentNavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedContentStatusFilteringService)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Routing.ContentFinderByUrlAlias" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.ContentFinderByUrlAlias.TryFindContent(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder)">
            <summary>
                Tries to find and assign an Umbraco document to a <c>PublishedRequest</c>.
            </summary>
            <param name="frequest">The <c>PublishedRequest</c>.</param>
            <returns>A value indicating whether an Umbraco document was found and assigned.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.ContentFinderByUrlAndTemplate">
            <summary>
                Provides an implementation of <see cref="T:Umbraco.Cms.Core.Routing.IContentFinder" /> that handles page nice URLs and a template.
            </summary>
            <remarks>
                <para>
                    This finder allows for an odd routing pattern similar to altTemplate, probably only use case is if there is
                    an alternative mime type template and it should be routable by something like "/hello/world/json" where the
                    JSON template is to be used for the "world" page
                </para>
                <para>
                    Handles <c>/foo/bar/template</c> where <c>/foo/bar</c> is the nice URL of a document, and <c>template</c> a
                    template alias.
                </para>
                <para>If successful, then the template of the document request is also assigned.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.ContentFinderByUrlAndTemplate.#ctor(Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Routing.ContentFinderByUrlAndTemplate},Umbraco.Cms.Core.Services.IFileService,Umbraco.Cms.Core.Services.IContentTypeService,Umbraco.Cms.Core.Web.IUmbracoContextAccessor,Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.WebRoutingSettings})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Routing.ContentFinderByUrlAndTemplate" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.ContentFinderByUrlAndTemplate.TryFindContent(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder)">
            <summary>
                Tries to find and assign an Umbraco document to a <c>PublishedRequest</c>.
            </summary>
            <param name="frequest">The <c>PublishedRequest</c>.</param>
            <returns>A value indicating whether an Umbraco document was found and assigned.</returns>
            <remarks>If successful, also assigns the template.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.ContentFinderByUrlNew">
            <summary>
                Provides an implementation of <see cref="T:Umbraco.Cms.Core.Routing.IContentFinder" /> that handles page nice URLs.
            </summary>
            <remarks>
                <para>Handles <c>/foo/bar</c> where <c>/foo/bar</c> is the nice URL of a document.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.ContentFinderByUrlNew.#ctor(Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Routing.ContentFinderByUrlNew},Umbraco.Cms.Core.Web.IUmbracoContextAccessor,Umbraco.Cms.Core.Services.IDocumentUrlService,Umbraco.Cms.Core.PublishedCache.IPublishedContentCache)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Routing.ContentFinderByUrl" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.ContentFinderByUrlNew.UmbracoContextAccessor">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Web.IUmbracoContextAccessor" />
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.ContentFinderByUrlNew.TryFindContent(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder)">
            <summary>
                Tries to find and assign an Umbraco document to a <c>PublishedRequest</c>.
            </summary>
            <param name="frequest">The <c>PublishedRequest</c>.</param>
            <returns>A value indicating whether an Umbraco document was found and assigned.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.ContentFinderByUrlNew.FindContent(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder,System.String)">
            <summary>
                Tries to find an Umbraco document for a <c>PublishedRequest</c> and a route.
            </summary>
            <returns>The document node, or null.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.DefaultMediaUrlProvider">
            <summary>
                Default media URL provider.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.DefaultMediaUrlProvider.GetMediaUrl(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String,Umbraco.Cms.Core.Models.PublishedContent.UrlMode,System.String,System.Uri)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.DefaultUrlProvider">
            <summary>
                Provides urls.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.DefaultUrlProvider.GetOtherUrls(System.Int32,System.Uri)">
            <summary>
                Gets the other URLs of a published content.
            </summary>
            <param name="id">The published content id.</param>
            <param name="current">The current absolute URL.</param>
            <returns>The other URLs for the published content.</returns>
            <remarks>
                <para>
                    Other URLs are those that <c>GetUrl</c> would not return in the current context, but would be valid
                    URLs for the node in other contexts (different domain for current request, umbracoUrlAlias...).
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.DefaultUrlProvider.GetUrl(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Models.PublishedContent.UrlMode,System.String,System.Uri)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.Domain">
            <summary>
            Represents a published snapshot domain.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.Domain.#ctor(System.Int32,System.String,System.Int32,System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Routing.Domain" /> class.
            </summary>
            <param name="id">The unique identifier of the domain.</param>
            <param name="name">The name of the domain.</param>
            <param name="contentId">The identifier of the content which supports the domain.</param>
            <param name="culture">The culture of the domain.</param>
            <param name="isWildcard">A value indicating whether the domain is a wildcard domain.</param>
            <param name="sortOrder">The sort order.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.Domain.#ctor(Umbraco.Cms.Core.Routing.Domain)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Routing.Domain" /> class.
            </summary>
            <param name="domain">An origin domain.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.Domain.Id">
            <summary>
            Gets the unique identifier of the domain.
            </summary>
            <value>
            The unique identifier of the domain.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.Domain.Name">
            <summary>
            Gets the name of the domain.
            </summary>
            <value>
            The name of the domain.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.Domain.ContentId">
            <summary>
            Gets the identifier of the content which supports the domain.
            </summary>
            <value>
            The identifier of the content which supports the domain.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.Domain.Culture">
            <summary>
            Gets the culture of the domain.
            </summary>
            <value>
            The culture of the domain.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.Domain.IsWildcard">
            <summary>
            Gets a value indicating whether the domain is a wildcard domain.
            </summary>
            <value>
              <c>true</c> if this is a wildcard domain; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.Domain.SortOrder">
            <summary>
            Gets the sort order.
            </summary>
            <value>
            The sort order.
            </value>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.DomainAndUri">
            <summary>
                Represents a published snapshot domain with its normalized uri.
            </summary>
            <remarks>
                <para>
                    In Umbraco it is valid to create domains with name such as <c>example.com</c>, <c>https://www.example.com</c>
                    , <c>example.com/foo/</c>.
                </para>
                <para>
                    The normalized uri of a domain begins with a scheme and ends with no slash, eg <c>http://example.com/</c>,
                    <c>https://www.example.com/</c>, <c>http://example.com/foo/</c>.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.DomainAndUri.#ctor(Umbraco.Cms.Core.Routing.Domain,System.Uri)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Routing.DomainAndUri" /> class.
            </summary>
            <param name="domain">The original domain.</param>
            <param name="currentUri">The context current Uri.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.DomainAndUri.Uri">
            <summary>
                Gets the normalized uri of the domain, within the current context.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.DomainUtilities">
            <summary>
            Provides utilities to handle domains.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.DomainUtilities.GetCultureFromDomains(System.Int32,System.String,System.Uri,Umbraco.Cms.Core.Web.IUmbracoContext,Umbraco.Cms.Core.Routing.ISiteDomainMapper,Umbraco.Cms.Core.PublishedCache.IDomainCache,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService)">
            <summary>
            Gets the culture assigned to a document by domains, in the context of a current Uri.
            </summary>
            <param name="contentId">The document identifier.</param>
            <param name="contentPath">The document path.</param>
            <param name="current">An optional current Uri.</param>
            <param name="umbracoContext">An Umbraco context.</param>
            <param name="siteDomainMapper">The site domain helper.</param>
            <param name="domainCache">The domain cache.</param>
            <param name="navigationQueryService">The navigation query service.</param>
            <param name="publishedStatusFilteringService"></param>
            <returns>The culture assigned to the document by domains.</returns>
            <remarks>
            <para>In 1:1 multilingual setup, a document contains several cultures (there is not
            one document per culture), and domains, withing the context of a current Uri, assign
            a culture to that document.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.DomainUtilities.DomainForNode(Umbraco.Cms.Core.PublishedCache.IDomainCache,Umbraco.Cms.Core.Routing.ISiteDomainMapper,System.Int32,System.Uri,System.String)">
            <summary>
            Finds the domain for the specified node, if any, that best matches a specified uri.
            </summary>
            <param name="domainCache">A domain cache.</param>
            <param name="siteDomainMapper">The site domain helper.</param>
            <param name="nodeId">The node identifier.</param>
            <param name="current">The uri, or null.</param>
            <param name="culture">The culture, or null.</param>
            <returns>The domain and its uri, if any, that best matches the specified uri and culture, else null.</returns>
            <remarks>
            <para>If at least a domain is set on the node then the method returns the domain that
            best matches the specified uri and culture, else it returns null.</para>
            <para>If culture is null, uses the default culture for the installation instead. Otherwise,
            will try with the specified culture, else return null.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.DomainUtilities.DomainsForNode(Umbraco.Cms.Core.PublishedCache.IDomainCache,Umbraco.Cms.Core.Routing.ISiteDomainMapper,System.Int32,System.Uri,System.Boolean)">
            <summary>
            Find the domains for the specified node, if any, that match a specified uri.
            </summary>
            <param name="domainCache">A domain cache.</param>
            <param name="siteDomainMapper">The site domain helper.</param>
            <param name="nodeId">The node identifier.</param>
            <param name="current">The uri, or null.</param>
            <param name="excludeDefault">A value indicating whether to exclude the current/default domain. True by default.</param>
            <returns>The domains and their uris, that match the specified uri, else null.</returns>
            <remarks>If at least a domain is set on the node then the method returns the domains that
            best match the specified uri, else it returns null.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.DomainUtilities.SelectDomain(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Routing.Domain},System.Uri,System.String,System.String,System.Func{System.Collections.Generic.IReadOnlyCollection{Umbraco.Cms.Core.Routing.DomainAndUri},System.Uri,System.String,System.String,Umbraco.Cms.Core.Routing.DomainAndUri})">
            <summary>
            Selects the domain that best matches a specified uri and cultures, from a set of domains.
            </summary>
            <param name="domains">The group of domains.</param>
            <param name="uri">An optional uri.</param>
            <param name="culture">An optional culture.</param>
            <param name="defaultCulture">An optional default culture.</param>
            <param name="filter">An optional function to filter the list of domains, if more than one applies.</param>
            <returns>The domain and its normalized uri, that best matches the specified uri and cultures.</returns>
            <remarks>
            TODO: must document and explain this all
            <para>If <paramref name="uri"/> is null, pick the first domain that matches <paramref name="culture"/>,
            else the first that matches <paramref name="defaultCulture"/>, else the first one (ordered by id), else null.</para>
            <para>If <paramref name="uri"/> is not null, look for domains that would be a base uri of the current uri,</para>
            <para>If more than one domain matches, then the <paramref name="filter"/> function is used to pick
            the right one, unless it is <c>null</c>, in which case the method returns <c>null</c>.</para>
            <para>The filter, if any, will be called only with a non-empty argument, and _must_ return something.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.DomainUtilities.SelectDomains(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Routing.Domain},System.Uri)">
            <summary>
            Selects the domains that match a specified uri, from a set of domains.
            </summary>
            <param name="domains">The domains.</param>
            <param name="uri">The uri, or null.</param>
            <returns>The domains and their normalized uris, that match the specified uri.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.DomainUtilities.ParseUriFromDomainName(System.String,System.Uri)">
            <summary>
            Parses a domain name into a URI.
            </summary>
            <param name="domainName">The domain name to parse</param>
            <param name="currentUri">The currently requested URI. If the domain name is relative, the authority of URI will be used.</param>
            <returns>The domain name as a URI</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.DomainUtilities.ExistsDomainInPath(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Routing.Domain},System.String,System.Nullable{System.Int32})">
            <summary>
            Gets a value indicating whether there is another domain defined down in the path to a node under the current domain's root node.
            </summary>
            <param name="domains">The domains.</param>
            <param name="path">The path to a node under the current domain's root node eg '-1,1234,5678'.</param>
            <param name="rootNodeId">The current domain root node identifier, or null.</param>
            <returns>A value indicating if there is another domain defined down in the path.</returns>
            <remarks>Looks _under_ rootNodeId but not _at_ rootNodeId.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.DomainUtilities.FindDomainInPath(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Routing.Domain},System.String,System.Nullable{System.Int32})">
            <summary>
            Gets the deepest non-wildcard Domain, if any, from a group of Domains, in a node path.
            </summary>
            <param name="domains">The domains.</param>
            <param name="path">The node path eg '-1,1234,5678'.</param>
            <param name="rootNodeId">The current domain root node identifier, or null.</param>
            <returns>The deepest non-wildcard Domain in the path, or null.</returns>
            <remarks>Looks _under_ rootNodeId but not _at_ rootNodeId.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.DomainUtilities.FindWildcardDomainInPath(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Routing.Domain},System.String,System.Nullable{System.Int32})">
            <summary>
            Gets the deepest wildcard Domain, if any, from a group of Domains, in a node path.
            </summary>
            <param name="domains">The domains.</param>
            <param name="path">The node path eg '-1,1234,5678'.</param>
            <param name="rootNodeId">The current domain root node identifier, or null.</param>
            <returns>The deepest wildcard Domain in the path, or null.</returns>
            <remarks>Looks _under_ rootNodeId but not _at_ rootNodeId.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.DomainUtilities.PathRelativeToDomain(System.Uri,System.String)">
            <summary>
            Returns the part of a path relative to the uri of a domain.
            </summary>
            <param name="domainUri">The normalized uri of the domain.</param>
            <param name="path">The full path of the uri.</param>
            <returns>The path part relative to the uri of the domain.</returns>
            <remarks>Eg the relative part of <c>/foo/bar/nil</c> to domain <c>example.com/foo</c> is <c>/bar/nil</c>.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.IContentFinder">
            <summary>
                Provides a method to try to find and assign an Umbraco document to a <c>PublishedRequest</c>.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IContentFinder.TryFindContent(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder)">
            <summary>
                Tries to find and assign an Umbraco document to a <c>PublishedRequest</c>.
            </summary>
            <param name="request">The <c>PublishedRequest</c>.</param>
            <returns>A value indicating whether an Umbraco document was found and assigned.</returns>
            <remarks>
                Optionally, can also assign the template or anything else on the document request, although that is not
                required.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.IContentLastChanceFinder">
            <summary>
                Provides a method to try to find and assign an Umbraco document to a <c>PublishedRequest</c>
                when everything else has failed.
            </summary>
            <remarks>Identical to <see cref="T:Umbraco.Cms.Core.Routing.IContentFinder" /> but required in order to differentiate them in ioc.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.IMediaUrlProvider">
            <summary>
                Provides media URL.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IMediaUrlProvider.GetMediaUrl(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String,Umbraco.Cms.Core.Models.PublishedContent.UrlMode,System.String,System.Uri)">
            <summary>
                Gets the URL of a media item.
            </summary>
            <param name="content">The published content.</param>
            <param name="propertyAlias">The property alias to resolve the URL from.</param>
            <param name="mode">The URL mode.</param>
            <param name="culture">The variation language.</param>
            <param name="current">The current absolute URL.</param>
            <returns>The URL for the media.</returns>
            <remarks>
                <para>The URL is absolute or relative depending on <c>mode</c> and on <c>current</c>.</para>
                <para>
                    If the media is multi-lingual, gets the URL for the specified culture or,
                    when no culture is specified, the current culture.
                </para>
                <para>
                    The URL provider can ignore the mode and always return an absolute URL,
                    e.g. a cdn URL provider will most likely always return an absolute URL.
                </para>
                <para>If the provider is unable to provide a URL, it returns <c>null</c>.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.IPublishedRequest">
            <summary>
                The result of Umbraco routing built with the <see cref="T:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.IPublishedRequest.Uri">
            <summary>
                Gets the cleaned up inbound Uri used for routing.
            </summary>
            <remarks>The cleaned up Uri has no virtual directory, no trailing slash, no .aspx extension, etc.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.IPublishedRequest.AbsolutePathDecoded">
            <summary>
                Gets the URI decoded absolute path of the <see cref="P:Umbraco.Cms.Core.Routing.IPublishedRequest.Uri" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.IPublishedRequest.PublishedContent">
            <summary>
                Gets a value indicating the requested content.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.IPublishedRequest.IsInternalRedirect">
            <summary>
                Gets a value indicating whether the current published content has been obtained
                from the initial published content following internal redirections exclusively.
            </summary>
            <remarks>
                Used by PublishedContentRequestEngine.FindTemplate() to figure out whether to
                apply the internal redirect or not, when content is not the initial content.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.IPublishedRequest.Template">
            <summary>
                Gets the template assigned to the request (if any)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.IPublishedRequest.Domain">
            <summary>
                Gets the content request's domain.
            </summary>
            <remarks>
                Is a DomainAndUri object ie a standard Domain plus the fully qualified uri. For example,
                the <c>Domain</c> may contain "example.com" whereas the <c>Uri</c> will be fully qualified eg
                "http://example.com/".
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.IPublishedRequest.Culture">
            <summary>
                Gets the content request's culture.
            </summary>
            <remarks>
                This will get mapped to a CultureInfo eventually but CultureInfo are expensive to create so we want to leave that
                up to the
                localization middleware to do. See
                https://github.com/dotnet/aspnetcore/blob/b795ac3546eb3e2f47a01a64feb3020794ca33bb/src/Middleware/Localization/src/RequestLocalizationMiddleware.cs#L165.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.IPublishedRequest.Segment">
            <summary>
                Gets the content request's segment (if any).
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.IPublishedRequest.RedirectUrl">
            <summary>
                Gets the url to redirect to, when the content request triggers a redirect.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.IPublishedRequest.ResponseStatusCode">
            <summary>
                Gets the content request http response status code.
            </summary>
            <remarks>
                Does not actually set the http response status code, only registers that the response
                should use the specified code. The code will or will not be used, in due time.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.IPublishedRequest.CacheExtensions">
            <summary>
                Gets a list of Extensions to append to the Response.Cache object.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.IPublishedRequest.Headers">
            <summary>
                Gets a dictionary of Headers to append to the Response object.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.IPublishedRequest.SetNoCacheHeader">
            <summary>
                Gets a value indicating whether the no-cache value should be added to the Cache-Control header
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.IPublishedRequest.IgnorePublishedContentCollisions">
            <summary>
                Gets a value indicating whether the Umbraco Backoffice should ignore a collision for this request.
            </summary>
            <remarks>
                <para>
                    This is an uncommon API used for edge cases with complex routing and would be used
                    by developers to configure the request to disable collision checks in <see cref="T:Umbraco.Extensions.UrlProviderExtensions" />.
                </para>
                <para>
                    This flag is based on previous Umbraco versions but it is not clear how this flag can be set by developers
                    since
                    collission checking only occurs in the back office which is launched by
                    <see cref="M:Umbraco.Cms.Core.Routing.PublishedRouter.TryRouteRequest(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder)" />
                    for which events do not execute.
                </para>
                <para>
                    More can be read about this setting here: https://github.com/umbraco/Umbraco-CMS/pull/2148,
                    https://issues.umbraco.org/issue/U4-10345
                    but it's still unclear how this was used.
                </para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder">
            <summary>
                Used by <see cref="T:Umbraco.Cms.Core.Routing.IContentFinder" /> to route inbound requests to Umbraco content
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder.Uri">
            <summary>
                Gets the cleaned up inbound Uri used for routing.
            </summary>
            <remarks>The cleaned up Uri has no virtual directory, no trailing slash, no .aspx extension, etc.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder.AbsolutePathDecoded">
            <summary>
                Gets the URI decoded absolute path of the <see cref="P:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder.Uri" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder.Domain">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Routing.DomainAndUri" /> assigned (if any)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder.Culture">
            <summary>
                Gets the <see cref="T:System.Globalization.CultureInfo" /> assigned (if any)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder.Segment">
            <summary>
                Gets the segment assigned (if any)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder.IsInternalRedirect">
            <summary>
                Gets a value indicating whether the current published content has been obtained
                from the initial published content following internal redirections exclusively.
            </summary>
            <remarks>
                Used by PublishedContentRequestEngine.FindTemplate() to figure out whether to
                apply the internal redirect or not, when content is not the initial content.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder.ResponseStatusCode">
            <summary>
                Gets the content request http response status code.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder.PublishedContent">
            <summary>
                Gets the current <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent" /> assigned (if any)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder.Template">
            <summary>
                Gets the template assigned to the request (if any)
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder.Build">
            <summary>
                Builds the <see cref="T:Umbraco.Cms.Core.Routing.IPublishedRequest" />
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder.SetDomain(Umbraco.Cms.Core.Routing.DomainAndUri)">
            <summary>
                Sets the domain for the request which also sets the culture
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder.SetCulture(System.String)">
            <summary>
                Sets the culture for the request
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder.SetSegment(System.String)">
            <summary>
                Sets the segment for the request
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder.SetPublishedContent(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
                Sets the found <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent" /> for the request
            </summary>
            <remarks>Setting the content clears the template and redirect</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder.SetInternalRedirect(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
                Sets the requested content, following an internal redirect.
            </summary>
            <param name="content">The requested content.</param>
            <remarks>Since this sets the content, it will clear the template</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder.TrySetTemplate(System.String)">
            <summary>
                Tries to set the template to use to display the requested content.
            </summary>
            <param name="alias">The alias of the template.</param>
            <returns>A value indicating whether a valid template with the specified alias was found.</returns>
            <remarks>
                <para>Successfully setting the template does refresh <c>RenderingEngine</c>.</para>
                <para>If setting the template fails, then the previous template (if any) remains in place.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder.SetTemplate(Umbraco.Cms.Core.Models.ITemplate)">
            <summary>
                Sets the template to use to display the requested content.
            </summary>
            <param name="template">The template.</param>
            <remarks>Setting the template does refresh <c>RenderingEngine</c>.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder.SetRedirectPermanent(System.String)">
            <summary>
                Indicates that the content request should trigger a permanent redirect (301).
            </summary>
            <param name="url">The url to redirect to.</param>
            <remarks>
                Does not actually perform a redirect, only registers that the response should
                redirect. Redirect will or will not take place in due time.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder.SetRedirect(System.String,System.Int32)">
            <summary>
                Indicates that the content request should trigger a redirect, with a specified status code.
            </summary>
            <param name="url">The url to redirect to.</param>
            <param name="status">The status code (300-308).</param>
            <remarks>
                Does not actually perform a redirect, only registers that the response should
                redirect. Redirect will or will not take place in due time.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder.SetResponseStatus(System.Int32)">
            <summary>
                Sets the http response status code, along with an optional associated description.
            </summary>
            <param name="code">The http status code.</param>
            <remarks>
                Does not actually set the http response status code and description, only registers that
                the response should use the specified code and description. The code and description will or will
                not be used, in due time.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder.SetNoCacheHeader(System.Boolean)">
            <summary>
                Sets the no-cache value to the Cache-Control header
            </summary>
            <param name="setHeader">True to set the header, false to not set it</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder.SetCacheExtensions(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Sets a list of Extensions to append to the Response.Cache object.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder.SetHeaders(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
                Sets a dictionary of Headers to append to the Response object.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder.IgnorePublishedContentCollisions">
            <summary>
                Can be called to configure the <see cref="T:Umbraco.Cms.Core.Routing.IPublishedRequest" /> result to ignore URL collisions
            </summary>
            <remarks>
                <para>
                    This is an uncommon API used for edge cases with complex routing and would be used
                    by developers to configure the request to disable collision checks in <see cref="T:Umbraco.Extensions.UrlProviderExtensions" />.
                </para>
                <para>
                    This flag is based on previous Umbraco versions but it is not clear how this flag can be set by developers
                    since
                    collission checking only occurs in the back office which is launched by
                    <see cref="M:Umbraco.Cms.Core.Routing.PublishedRouter.TryRouteRequest(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder)" />
                    for which events do not execute.
                </para>
                <para>
                    More can be read about this setting here: https://github.com/umbraco/Umbraco-CMS/pull/2148,
                    https://issues.umbraco.org/issue/U4-10345
                    but it's still unclear how this was used.
                </para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.IPublishedRouter">
            <summary>
                Routes requests.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedRouter.CreateRequestAsync(System.Uri)">
            <summary>
                Creates a published request.
            </summary>
            <param name="uri">The current request Uri.</param>
            <returns>A published request builder.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedRouter.RouteRequestAsync(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder,Umbraco.Cms.Core.Routing.RouteRequestOptions)">
            <summary>
                Sends a <see cref="T:Umbraco.Cms.Core.Routing.IPublishedRequestBuilder" /> through the routing pipeline and builds a result.
            </summary>
            <param name="request">The request.</param>
            <param name="options">The options.</param>
            <returns>The built <see cref="T:Umbraco.Cms.Core.Routing.IPublishedRequest" /> instance.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedRouter.UpdateRequestAsync(Umbraco.Cms.Core.Routing.IPublishedRequest,Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
                Updates the request to use the specified <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent" /> item, or NULL
            </summary>
            <param name="request">The request.</param>
            <param name="publishedContent">The published content.</param>
            <remarks>
                <returns>
                    A new <see cref="T:Umbraco.Cms.Core.Routing.IPublishedRequest" /> based on values from the original <see cref="T:Umbraco.Cms.Core.Routing.IPublishedRequest" />
                    and with the re-routed values based on the passed in <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent" />
                </returns>
                <para>
                    This method is used for 2 cases:
                    - When the rendering content needs to change due to Public Access rules.
                    - When there is nothing to render due to circumstances such as no template files. In this case, NULL is used as the parameter.
                </para>
                <para>
                    This method is invoked when the pipeline decides it cannot render
                    the request, for whatever reason, and wants to force it to be re-routed
                    and rendered as if no document were found (404).
                    This occurs if there is no template found and route hijacking was not matched.
                    In that case it's the same as if there was no content which means even if there was
                    content matched we want to run the request through the last chance finders.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedRouter.RouteDomain(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder)">
            <summary>
            Finds the site root (if any) matching the http request, and updates the PublishedRequest and VariationContext accordingly.
            <remarks>
            <para>
            This method is used for VirtualPage routing.
            </para>
            <para>
            In this case we do not want to run the entire routing pipeline since ContentFinders are not needed here.
            However, we do want to set the culture on VariationContext and PublishedRequest to the values specified by the domains.
            </para>
            </remarks>
            </summary>
            <param name="request">The request to update the culture on domain on</param>
            <returns>True if a domain was found otherwise false.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedRouter.UpdateVariationContext(System.Uri)">
            <summary>
            Finds the site root (if any) matching the http request, and updates the VariationContext accordingly.
            </summary>
            <remarks>
            <para>
            This is used for VirtualPage routing.
            </para>
            <para>
            This is required to set the culture on VariationContext to the values specified by the domains, before the FindContent method is called.
            In order to allow the FindContent implementer to correctly find content based off the culture. Before the PublishedRequest is built.
            </para>
            </remarks>
            <param name="uri">The URI to resolve the domain from.</param>
            <returns>True if a domain was found, otherwise false.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedUrlInfoProvider.GetAllAsync(Umbraco.Cms.Core.Models.IContent)">
            <summary>
            Gets all published urls for a content item.
            </summary>
            <param name="content">The content to get urls for.</param>
            <returns>Set of all published url infos.</returns>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.IPublishedUrlProvider.Mode">
            <summary>
                Gets or sets the provider url mode.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedUrlProvider.GetUrl(System.Guid,Umbraco.Cms.Core.Models.PublishedContent.UrlMode,System.String,System.Uri)">
            <summary>
                Gets the url of a published content.
            </summary>
            <param name="id">The published content identifier.</param>
            <param name="mode">The url mode.</param>
            <param name="culture">A culture.</param>
            <param name="current">The current absolute url.</param>
            <returns>The url for the published content.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedUrlProvider.GetUrl(System.Int32,Umbraco.Cms.Core.Models.PublishedContent.UrlMode,System.String,System.Uri)">
            <summary>
                Gets the url of a published content.
            </summary>
            <param name="id">The published content identifier.</param>
            <param name="mode">The url mode.</param>
            <param name="culture">A culture.</param>
            <param name="current">The current absolute url.</param>
            <returns>The url for the published content.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedUrlProvider.GetUrl(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Models.PublishedContent.UrlMode,System.String,System.Uri)">
            <summary>
                Gets the url of a published content.
            </summary>
            <param name="content">The published content.</param>
            <param name="mode">The url mode.</param>
            <param name="culture">A culture.</param>
            <param name="current">The current absolute url.</param>
            <returns>The url for the published content.</returns>
            <remarks>
                <para>The url is absolute or relative depending on <c>mode</c> and on <c>current</c>.</para>
                <para>
                    If the published content is multi-lingual, gets the url for the specified culture or,
                    when no culture is specified, the current culture.
                </para>
                <para>If the provider is unable to provide a url, it returns "#".</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedUrlProvider.GetOtherUrls(System.Int32)">
            <summary>
                Gets the other urls of a published content.
            </summary>
            <param name="id">The published content id.</param>
            <returns>The other urls for the published content.</returns>
            <remarks>
                <para>
                    Other urls are those that <c>GetUrl</c> would not return in the current context, but would be valid
                    urls for the node in other contexts (different domain for current request, umbracoUrlAlias...).
                </para>
                <para>The results depend on the current url.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedUrlProvider.GetOtherUrls(System.Int32,System.Uri)">
            <summary>
                Gets the other urls of a published content.
            </summary>
            <param name="id">The published content id.</param>
            <param name="current">The current absolute url.</param>
            <returns>The other urls for the published content.</returns>
            <remarks>
                <para>
                    Other urls are those that <c>GetUrl</c> would not return in the current context, but would be valid
                    urls for the node in other contexts (different domain for current request, umbracoUrlAlias...).
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedUrlProvider.GetMediaUrl(System.Guid,Umbraco.Cms.Core.Models.PublishedContent.UrlMode,System.String,System.String,System.Uri)">
            <summary>
                Gets the url of a media item.
            </summary>
            <param name="id"></param>
            <param name="mode"></param>
            <param name="culture"></param>
            <param name="propertyAlias"></param>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IPublishedUrlProvider.GetMediaUrl(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Models.PublishedContent.UrlMode,System.String,System.String,System.Uri)">
            <summary>
                Gets the url of a media item.
            </summary>
            <param name="content">The published content.</param>
            <param name="propertyAlias">The property alias to resolve the url from.</param>
            <param name="mode">The url mode.</param>
            <param name="culture">The variation language.</param>
            <param name="current">The current absolute url.</param>
            <returns>The url for the media.</returns>
            <remarks>
                <para>The url is absolute or relative depending on <c>mode</c> and on <c>current</c>.</para>
                <para>
                    If the media is multi-lingual, gets the url for the specified culture or,
                    when no culture is specified, the current culture.
                </para>
                <para>If the provider is unable to provide a url, it returns <see cref="F:System.String.Empty" />.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.IRedirectTracker">
            <summary>
            Determines and records redirects for a content item following an update that may change it's public URL.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IRedirectTracker.StoreOldRoute(Umbraco.Cms.Core.Models.IContent,System.Collections.Generic.Dictionary{System.ValueTuple{System.Int32,System.String},System.ValueTuple{System.Guid,System.String}})">
            <summary>
            Stores the existing routes for a content item before update.
            </summary>
            <param name="entity">The content entity updated.</param>
            <param name="oldRoutes">The dictionary of routes for population.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IRedirectTracker.CreateRedirects(System.Collections.Generic.IDictionary{System.ValueTuple{System.Int32,System.String},System.ValueTuple{System.Guid,System.String}})">
            <summary>
            Creates appropriate redirects for the content item following an update.
            </summary>
            <param name="oldRoutes">The populated dictionary of old routes;</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.ISiteDomainMapper">
            <summary>
                Provides utilities to handle site domains.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.ISiteDomainMapper.MapDomain(System.Collections.Generic.IReadOnlyCollection{Umbraco.Cms.Core.Routing.DomainAndUri},System.Uri,System.String,System.String)">
            <summary>
                Filters a list of <c>DomainAndUri</c> to pick one that best matches the current request.
            </summary>
            <param name="domainAndUris">The list of <c>DomainAndUri</c> to filter.</param>
            <param name="current">The Uri of the current request.</param>
            <param name="culture">A culture.</param>
            <param name="defaultCulture">The default culture.</param>
            <returns>The selected <c>DomainAndUri</c>.</returns>
            <remarks>
                <para>
                    If the filter is invoked then <paramref name="domainAndUris" /> is _not_ empty and
                    <paramref name="current" /> is _not_ null, and <paramref name="current" /> could not be
                    matched with anything in <paramref name="domainAndUris" />.
                </para>
                <para>
                    The <paramref name="culture" /> may be null, but when non-null, it can be used
                    to help pick the best matches.
                </para>
                <para>The filter _must_ return something else an exception will be thrown.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.ISiteDomainMapper.MapDomains(System.Collections.Generic.IReadOnlyCollection{Umbraco.Cms.Core.Routing.DomainAndUri},System.Uri,System.Boolean,System.String,System.String)">
            <summary>
                Filters a list of <c>DomainAndUri</c> to pick those that best matches the current request.
            </summary>
            <param name="domainAndUris">The list of <c>DomainAndUri</c> to filter.</param>
            <param name="current">The Uri of the current request.</param>
            <param name="excludeDefault">A value indicating whether to exclude the current/default domain.</param>
            <param name="culture">A culture.</param>
            <param name="defaultCulture">The default culture.</param>
            <returns>The selected <c>DomainAndUri</c> items.</returns>
            <remarks>
                <para>The filter must return something, even empty, else an exception will be thrown.</para>
                <para>
                    The <paramref name="culture" /> may be null, but when non-null, it can be used
                    to help pick the best matches.
                </para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.IUrlProvider">
            <summary>
                Provides URLs.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IUrlProvider.GetUrl(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Models.PublishedContent.UrlMode,System.String,System.Uri)">
            <summary>
                Gets the URL of a published content.
            </summary>
            <param name="content">The published content.</param>
            <param name="mode">The URL mode.</param>
            <param name="culture">A culture.</param>
            <param name="current">The current absolute URL.</param>
            <returns>The URL for the published content.</returns>
            <remarks>
                <para>The URL is absolute or relative depending on <c>mode</c> and on <c>current</c>.</para>
                <para>
                    If the published content is multi-lingual, gets the URL for the specified culture or,
                    when no culture is specified, the current culture.
                </para>
                <para>If the provider is unable to provide a URL, it should return <c>null</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.IUrlProvider.GetOtherUrls(System.Int32,System.Uri)">
            <summary>
                Gets the other URLs of a published content.
            </summary>
            <param name="id">The published content id.</param>
            <param name="current">The current absolute URL.</param>
            <returns>The other URLs for the published content.</returns>
            <remarks>
                <para>
                    Other URLs are those that <c>GetUrl</c> would not return in the current context, but would be valid
                    URLs for the node in other contexts (different domain for current request, umbracoUrlAlias...).
                </para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.NewDefaultUrlProvider">
            <summary>
                Provides URLs.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.NewDefaultUrlProvider.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.RequestHandlerSettings},Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Routing.DefaultUrlProvider},Umbraco.Cms.Core.Routing.ISiteDomainMapper,Umbraco.Cms.Core.Web.IUmbracoContextAccessor,Umbraco.Cms.Core.Routing.UriUtility,Umbraco.Cms.Core.Services.ILocalizationService,Umbraco.Cms.Core.PublishedCache.IPublishedContentCache,Umbraco.Cms.Core.PublishedCache.IDomainCache,Umbraco.Cms.Core.Services.IIdKeyMap,Umbraco.Cms.Core.Services.IDocumentUrlService,Umbraco.Cms.Core.Services.Navigation.IDocumentNavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedContentStatusFilteringService,Umbraco.Cms.Core.Services.ILanguageService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Routing.NewDefaultUrlProvider"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.NewDefaultUrlProvider.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.RequestHandlerSettings},Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Routing.DefaultUrlProvider},Umbraco.Cms.Core.Routing.ISiteDomainMapper,Umbraco.Cms.Core.Web.IUmbracoContextAccessor,Umbraco.Cms.Core.Routing.UriUtility,Umbraco.Cms.Core.Services.ILocalizationService,Umbraco.Cms.Core.PublishedCache.IPublishedContentCache,Umbraco.Cms.Core.PublishedCache.IDomainCache,Umbraco.Cms.Core.Services.IIdKeyMap,Umbraco.Cms.Core.Services.IDocumentUrlService,Umbraco.Cms.Core.Services.Navigation.IDocumentNavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedContentStatusFilteringService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Routing.NewDefaultUrlProvider"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.NewDefaultUrlProvider.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.RequestHandlerSettings},Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Routing.DefaultUrlProvider},Umbraco.Cms.Core.Routing.ISiteDomainMapper,Umbraco.Cms.Core.Web.IUmbracoContextAccessor,Umbraco.Cms.Core.Routing.UriUtility,Umbraco.Cms.Core.Services.ILocalizationService,Umbraco.Cms.Core.PublishedCache.IPublishedContentCache,Umbraco.Cms.Core.PublishedCache.IDomainCache,Umbraco.Cms.Core.Services.IIdKeyMap,Umbraco.Cms.Core.Services.IDocumentUrlService,Umbraco.Cms.Core.Services.Navigation.IDocumentNavigationQueryService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Routing.NewDefaultUrlProvider"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.NewDefaultUrlProvider.GetOtherUrls(System.Int32,System.Uri)">
            <summary>
                Gets the other URLs of a published content.
            </summary>
            <param name="id">The published content id.</param>
            <param name="current">The current absolute URL.</param>
            <returns>The other URLs for the published content.</returns>
            <remarks>
                <para>
                    Other URLs are those that <c>GetUrl</c> would not return in the current context, but would be valid
                    URLs for the node in other contexts (different domain for current request, umbracoUrlAlias...).
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.NewDefaultUrlProvider.GetLegacyRouteFormatById(System.Guid,System.String)">
            <summary>
            Gets the legacy route format by id
            </summary>
            <param name="key"></param>
            <param name="culture"></param>
            <returns></returns>
            <remarks>
            When no domain is set the route can be something like /child/grandchild
            When a domain is set, the route can be something like 1234/grandchild
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.NewDefaultUrlProvider.GetUrl(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Models.PublishedContent.UrlMode,System.String,System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.NewDefaultUrlProvider.GetUrlFromRoute(System.String,System.Int32,System.Uri,Umbraco.Cms.Core.Models.PublishedContent.UrlMode,System.String)">
            <summary>
            Gets the URL from the provided route.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequest.#ctor(System.Uri,System.String,Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.Boolean,Umbraco.Cms.Core.Models.ITemplate,Umbraco.Cms.Core.Routing.DomainAndUri,System.String,System.String,System.String,System.Nullable{System.Int32},System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Routing.PublishedRequest" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequest.Uri">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequest.AbsolutePathDecoded">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequest.IgnorePublishedContentCollisions">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequest.PublishedContent">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequest.IsInternalRedirect">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequest.Template">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequest.Domain">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequest.Culture">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequest.Segment">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequest.RedirectUrl">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequest.ResponseStatusCode">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequest.CacheExtensions">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequest.Headers">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequest.SetNoCacheHeader">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestBuilder.#ctor(System.Uri,Umbraco.Cms.Core.Services.IFileService)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Routing.PublishedRequestBuilder" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestBuilder.Uri">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestBuilder.AbsolutePathDecoded">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestBuilder.Domain">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestBuilder.Culture">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestBuilder.Segment">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestBuilder.Template">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestBuilder.IsInternalRedirect">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestBuilder.ResponseStatusCode">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestBuilder.PublishedContent">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestBuilder.Build">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestBuilder.SetNoCacheHeader(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestBuilder.SetCacheExtensions(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestBuilder.SetCulture(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestBuilder.SetSegment(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestBuilder.SetDomain(Umbraco.Cms.Core.Routing.DomainAndUri)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestBuilder.SetHeaders(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestBuilder.SetInternalRedirect(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestBuilder.SetPublishedContent(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestBuilder.SetRedirect(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestBuilder.SetRedirectPermanent(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestBuilder.SetResponseStatus(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestBuilder.SetTemplate(Umbraco.Cms.Core.Models.ITemplate)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestBuilder.TrySetTemplate(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestBuilder.IgnorePublishedContentCollisions">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestExtensions.GetRouteResult(Umbraco.Cms.Core.Routing.IPublishedRequest)">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Routing.UmbracoRouteResult" />
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestExtensions.Success(Umbraco.Cms.Core.Routing.IPublishedRequest)">
            <summary>
                Gets a value indicating whether the request was successfully routed
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestExtensions.SetIs404(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder)">
            <summary>
                Sets the response status to be 404 not found
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestExtensions.HasPublishedContent(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder)">
            <summary>
                Gets a value indicating whether the content request has a content.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestExtensions.HasPublishedContent(Umbraco.Cms.Core.Routing.IPublishedRequest)">
            <summary>
                Gets a value indicating whether the content request has a content.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestExtensions.HasTemplate(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder)">
            <summary>
                Gets a value indicating whether the content request has a template.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestExtensions.HasTemplate(Umbraco.Cms.Core.Routing.IPublishedRequest)">
            <summary>
                Gets a value indicating whether the content request has a template.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestExtensions.GetTemplateAlias(Umbraco.Cms.Core.Routing.IPublishedRequest)">
            <summary>
                Gets the alias of the template to use to display the requested content.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestExtensions.Is404(Umbraco.Cms.Core.Routing.IPublishedRequest)">
            <summary>
                Gets a value indicating whether the requested content could not be found.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestExtensions.IsRedirect(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder)">
            <summary>
                Gets a value indicating whether the content request triggers a redirect (permanent or not).
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestExtensions.IsRedirect(Umbraco.Cms.Core.Routing.IPublishedRequest)">
            <summary>
                Gets indicating whether the content request triggers a redirect (permanent or not).
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestExtensions.IsRedirectPermanent(Umbraco.Cms.Core.Routing.IPublishedRequest)">
            <summary>
                Gets a value indicating whether the redirect is permanent.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestExtensions.HasDomain(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder)">
            <summary>
                Gets a value indicating whether the content request has a domain.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestExtensions.HasDomain(Umbraco.Cms.Core.Routing.IPublishedRequest)">
            <summary>
                Gets a value indicating whether the content request has a domain.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestOld.#ctor(Umbraco.Cms.Core.Routing.IPublishedRouter,Umbraco.Cms.Core.Web.IUmbracoContext,Microsoft.Extensions.Options.IOptions{Umbraco.Cms.Core.Configuration.Models.WebRoutingSettings},System.Uri)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Routing.PublishedRequest" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestOld.UmbracoContext">
            <summary>
                Gets the UmbracoContext.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestOld.Uri">
            <summary>
                Gets or sets the cleaned up Uri used for routing.
            </summary>
            <remarks>The cleaned up Uri has no virtual directory, no trailing slash, no .aspx extension, etc.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestOld.IgnorePublishedContentCollisions">
            <summary>
                Gets or sets a value indicating whether the Umbraco Backoffice should ignore a collision for this request.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestOld.Template">
            <summary>
                Gets or sets the template model to use to display the requested content.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestOld.TemplateAlias">
            <summary>
                Gets the alias of the template to use to display the requested content.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestOld.Domain">
            <summary>
                Gets or sets the content request's domain.
            </summary>
            <remarks>
                Is a DomainAndUri object ie a standard Domain plus the fully qualified uri. For example,
                the <c>Domain</c> may contain "example.com" whereas the <c>Uri</c> will be fully qualified eg
                "http://example.com/".
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestOld.HasDomain">
            <summary>
                Gets a value indicating whether the content request has a domain.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestOld.Culture">
            <summary>
                Gets or sets the content request's culture.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestOld.SetInternalRedirectPublishedContent(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
                Sets the requested content, following an internal redirect.
            </summary>
            <param name="content">The requested content.</param>
            <remarks>
                Depending on <c>UmbracoSettings.InternalRedirectPreservesTemplate</c>, will
                preserve or reset the template, if any.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestOld.InitialPublishedContent">
            <summary>
                Gets the initial requested content.
            </summary>
            <remarks>
                The initial requested content is the content that was found by the finders,
                before anything such as 404, redirect... took place.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestOld.IsInitialPublishedContent">
            <summary>
                Gets value indicating whether the current published content is the initial one.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestOld.SetIsInitialPublishedContent">
            <summary>
                Indicates that the current PublishedContent is the initial one.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestOld.IsInternalRedirectPublishedContent">
            <summary>
                Gets or sets a value indicating whether the current published content has been obtained
                from the initial published content following internal redirections exclusively.
            </summary>
            <remarks>
                Used by PublishedContentRequestEngine.FindTemplate() to figure out whether to
                apply the internal redirect or not, when content is not the initial content.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestOld.Is404">
            <summary>
                Gets or sets a value indicating whether the requested content could not be found.
            </summary>
            <remarks>
                This is set in the <c>PublishedContentRequestBuilder</c> and can also be used in
                custom content finders or <c>Prepared</c> event handlers, where we want to allow developers
                to indicate a request is 404 but not to cancel it.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestOld.IsRedirect">
            <summary>
                Gets a value indicating whether the content request triggers a redirect (permanent or not).
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestOld.IsRedirectPermanent">
            <summary>
                Gets or sets a value indicating whether the redirect is permanent.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestOld.RedirectUrl">
            <summary>
                Gets or sets the URL to redirect to, when the content request triggers a redirect.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestOld.SetRedirect(System.String)">
            <summary>
                Indicates that the content request should trigger a redirect (302).
            </summary>
            <param name="url">The URL to redirect to.</param>
            <remarks>
                Does not actually perform a redirect, only registers that the response should
                redirect. Redirect will or will not take place in due time.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestOld.SetRedirectPermanent(System.String)">
            <summary>
                Indicates that the content request should trigger a permanent redirect (301).
            </summary>
            <param name="url">The URL to redirect to.</param>
            <remarks>
                Does not actually perform a redirect, only registers that the response should
                redirect. Redirect will or will not take place in due time.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestOld.SetRedirect(System.String,System.Int32)">
            <summary>
                Indicates that the content request should trigger a redirect, with a specified status code.
            </summary>
            <param name="url">The URL to redirect to.</param>
            <param name="status">The status code (300-308).</param>
            <remarks>
                Does not actually perform a redirect, only registers that the response should
                redirect. Redirect will or will not take place in due time.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestOld.ResponseStatusCode">
            <summary>
                Gets or sets the content request http response status code.
            </summary>
            <remarks>
                Does not actually set the http response status code, only registers that the response
                should use the specified code. The code will or will not be used, in due time.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestOld.ResponseStatusDescription">
            <summary>
                Gets or sets the content request http response status description.
            </summary>
            <remarks>
                Does not actually set the http response status description, only registers that the response
                should use the specified description. The description will or will not be used, in due time.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRequestOld.SetResponseStatus(System.Int32,System.String)">
            <summary>
                Sets the http response status code, along with an optional associated description.
            </summary>
            <param name="code">The http status code.</param>
            <param name="description">The description.</param>
            <remarks>
                Does not actually set the http response status code and description, only registers that
                the response should use the specified code and description. The code and description will or will
                not be used, in due time.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestOld.CacheExtensions">
            <summary>
                Gets or sets a list of Extensions to append to the Response.Cache object.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.PublishedRequestOld.Headers">
            <summary>
                Gets or sets a dictionary of Headers to append to the Response object.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.PublishedRouter">
            <summary>
                Provides the default <see cref="T:Umbraco.Cms.Core.Routing.IPublishedRouter" /> implementation.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRouter.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Umbraco.Cms.Core.Configuration.Models.WebRoutingSettings},Umbraco.Cms.Core.Routing.ContentFinderCollection,Umbraco.Cms.Core.Routing.IContentLastChanceFinder,Umbraco.Cms.Core.Models.PublishedContent.IVariationContextAccessor,Umbraco.Cms.Core.Logging.IProfilingLogger,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Routing.PublishedRouter},Umbraco.Cms.Core.Routing.IPublishedUrlProvider,Umbraco.Cms.Core.Web.IRequestAccessor,Umbraco.Cms.Core.Models.PublishedContent.IPublishedValueFallback,Umbraco.Cms.Core.Services.IFileService,Umbraco.Cms.Core.Services.IContentTypeService,Umbraco.Cms.Core.Web.IUmbracoContextAccessor,Umbraco.Cms.Core.Events.IEventAggregator,Umbraco.Cms.Core.PublishedCache.IDomainCache)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Routing.PublishedRouter" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRouter.CreateRequestAsync(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRouter.RouteRequestAsync(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder,Umbraco.Cms.Core.Routing.RouteRequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRouter.UpdateRequestAsync(Umbraco.Cms.Core.Routing.IPublishedRequest,Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRouter.BuildRequest(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder)">
            <summary>
                This method finalizes/builds the PCR with the values assigned.
            </summary>
            <returns>
                Returns false if the request was not successfully configured
            </returns>
            <remarks>
                This method logic has been put into it's own method in case developers have created a custom PCR or are assigning
                their own values
                but need to finalize it themselves.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRouter.RouteDomain(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRouter.UpdateVariationContext(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRouter.FindAndSetDomain(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder)">
            <summary>
                Finds the site root (if any) matching the http request, and updates the PublishedRequest accordingly.
            </summary>
            <returns>A value indicating whether a domain was found.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRouter.HandleWildcardDomains(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder)">
            <summary>
                Looks for wildcard domains in the path and updates <c>Culture</c> accordingly.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRouter.FindPublishedContent(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder)">
            <summary>
                Tries to find the document matching the request, by running the IPublishedContentFinder instances.
            </summary>
            <exception cref="T:System.InvalidOperationException">There is no finder collection.</exception>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRouter.HandlePublishedContent(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder)">
            <summary>
                Handles the published content (if any).
            </summary>
            <param name="request">The request builder.</param>
            <remarks>
                Handles "not found", internal redirects ...
                things that must be handled in one place because they can create loops
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRouter.FollowInternalRedirects(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder)">
            <summary>
                Follows internal redirections through the <c>umbracoInternalRedirectId</c> document property.
            </summary>
            <param name="request">The request builder.</param>
            <returns>A value indicating whether redirection took place and led to a new published document.</returns>
            <remarks>
                <para>Redirecting to a different site root and/or culture will not pick the new site root nor the new culture.</para>
                <para>As per legacy, if the redirect does not work, we just ignore it.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRouter.FindTemplate(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder,System.Boolean)">
            <summary>
                Finds a template for the current node, if any.
            </summary>
            <param name="request">The request builder.</param>
            <param name="contentFoundByFinders">
                If the content was found by the finders, before anything such as 404, redirect...
                took place.
            </param>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedRouter.FollowExternalRedirect(Umbraco.Cms.Core.Routing.IPublishedRequestBuilder)">
            <summary>
                Follows external redirection through <c>umbracoRedirect</c> document property.
            </summary>
            <remarks>As per legacy, if the redirect does not work, we just ignore it.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.PublishedUrlInfoProvider.GetAllAsync(Umbraco.Cms.Core.Models.IContent)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.RouteDirection">
            <summary>
                The direction of a route
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Routing.RouteDirection.Inbound">
            <summary>
                An inbound route used to map a URL to a content item
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Routing.RouteDirection.Outbound">
            <summary>
                An outbound route used to generate a URL for a content item
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.RouteRequestOptions">
            <summary>
                Options for routing an Umbraco request
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.RouteRequestOptions.#ctor(Umbraco.Cms.Core.Routing.RouteDirection)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Routing.RouteRequestOptions" /> struct.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.RouteRequestOptions.RouteDirection">
            <summary>
                Gets the <see cref="P:Umbraco.Cms.Core.Routing.RouteRequestOptions.RouteDirection" />
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.RouteRequestOptions.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.RouteRequestOptions.Equals(Umbraco.Cms.Core.Routing.RouteRequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.RouteRequestOptions.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.SiteDomainMapper">
            <summary>
                Provides utilities to handle site domains.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.SiteDomainMapper.Clear">
            <summary>
                Clears the entire configuration.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.SiteDomainMapper.AddSite(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Adds a site.
            </summary>
            <param name="key">A key uniquely identifying the site.</param>
            <param name="domains">The site domains.</param>
            <remarks>At the moment there is no public way to remove a site. Clear and reconfigure.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.SiteDomainMapper.AddSite(System.String,System.String[])">
            <summary>
                Adds a site.
            </summary>
            <param name="key">A key uniquely identifying the site.</param>
            <param name="domains">The site domains.</param>
            <remarks>At the moment there is no public way to remove a site. Clear and reconfigure.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.SiteDomainMapper.RemoveSite(System.String)">
            <summary>
                Removes a site.
            </summary>
            <param name="key">A key uniquely identifying the site.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.SiteDomainMapper.BindSites(System.String[])">
            <summary>
                Binds some sites.
            </summary>
            <param name="keys">The keys uniquely identifying the sites to bind.</param>
            <remarks>
                <para>At the moment there is no public way to unbind sites. Clear and reconfigure.</para>
                <para>If site1 is bound to site2 and site2 is bound to site3 then site1 is bound to site3.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.SiteDomainMapper.MapDomain(System.Collections.Generic.IReadOnlyCollection{Umbraco.Cms.Core.Routing.DomainAndUri},System.Uri,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.SiteDomainMapper.MapDomains(System.Collections.Generic.IReadOnlyCollection{Umbraco.Cms.Core.Routing.DomainAndUri},System.Uri,System.Boolean,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.UmbracoRequestPaths">
            <summary>
                Utility for checking paths
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.UmbracoRequestPaths.#ctor(Umbraco.Cms.Core.Hosting.IHostingEnvironment,Microsoft.Extensions.Options.IOptions{Umbraco.Cms.Core.Routing.UmbracoRequestPathsOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Routing.UmbracoRequestPaths" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.UmbracoRequestPaths.IsBackOfficeRequest(System.String)">
            <summary>
                Checks if the current uri is a back office request
            </summary>
            <remarks>
                <para>
                    There are some special routes we need to check to properly determine this:
                </para>
                <para>
                    These are def back office:
                    /Umbraco/BackOffice     = back office
                    /Umbraco/Preview        = back office
                    /Umbraco/Management/Api = back office
                </para>
                <para>
                    If it's not any of the above then we cannot determine if it's back office or front-end
                    so we can only assume that it is not back office. This will occur if people use an UmbracoApiController for the
                    backoffice
                    but do not inherit from UmbracoAuthorizedApiController and do not use [IsBackOffice] attribute.
                </para>
                <para>
                    These are def front-end:
                    /Umbraco/Surface        = front-end
                    /Umbraco/Api            = front-end
                    But if we've got this far we'll just have to assume it's front-end anyways.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.UmbracoRequestPaths.IsPluginControllerRoute(System.String)">
            <summary>
            Checks if the path is from a PluginController route.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.UmbracoRequestPaths.IsInstallerRequest(System.String)">
            <summary>
                Checks if the current uri is an install request
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.UmbracoRequestPaths.IsClientSideRequest(System.String)">
            <summary>
                Rudimentary check to see if it's not a server side request
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.UmbracoRequestPathsOptions.IsBackOfficeRequest">
            <summary>
                Gets the delegate that allows us to handle additional URLs as back-office requests.
                This returns false by default and can be overwritten in Startup.cs.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Routing.UmbracoRouteResult.Success">
            <summary>
                Routing was successful and a content item was matched
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Routing.UmbracoRouteResult.Redirect">
            <summary>
                A redirection took place
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Routing.UmbracoRouteResult.NotFound">
            <summary>
                Nothing matched
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.UriUtility.ToFullUrl(System.String,System.Uri)">
            <summary>
                Returns an full URL with the host, port, etc...
            </summary>
            <param name="absolutePath">An absolute path (i.e. starts with a '/' )</param>
            <param name="curentRequestUrl"> </param>
            <returns></returns>
            <remarks>
                Based on http://stackoverflow.com/questions/3681052/get-absolute-url-from-relative-path-refactored-method
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.UrlInfo">
            <summary>
                Represents infos for a URL.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.UrlInfo.#ctor(System.String,System.Boolean,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Routing.UrlInfo" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.UrlInfo.Culture">
            <summary>
                Gets the culture.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.UrlInfo.IsUrl">
            <summary>
                Gets a value indicating whether the URL is a true URL.
            </summary>
            <remarks>Otherwise, it is a message.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.UrlInfo.Text">
            <summary>
                Gets the text, which is either the URL, or a message.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.UrlInfo.Url(System.String,System.String)">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Routing.UrlInfo" /> instance representing a true URL.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.UrlInfo.Equals(Umbraco.Cms.Core.Routing.UrlInfo)">
            <summary>
                Checks equality
            </summary>
            <param name="other"></param>
            <returns></returns>
            <remarks>
                Compare both culture and Text as invariant strings since URLs are not case sensitive, nor are culture names within
                Umbraco
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.UrlInfo.Message(System.String,System.String)">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Routing.UrlInfo" /> instance representing a message.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Routing.UrlProvider">
            <summary>
            Provides URLs.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.UrlProvider.#ctor(Umbraco.Cms.Core.Web.IUmbracoContextAccessor,Microsoft.Extensions.Options.IOptions{Umbraco.Cms.Core.Configuration.Models.WebRoutingSettings},Umbraco.Cms.Core.Routing.UrlProviderCollection,Umbraco.Cms.Core.Routing.MediaUrlProviderCollection,Umbraco.Cms.Core.Models.PublishedContent.IVariationContextAccessor,Umbraco.Cms.Core.Services.Navigation.IDocumentNavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedContentStatusFilteringService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Routing.UrlProvider"/> class with an Umbraco context and a list of URL providers.
            </summary>
            <param name="umbracoContextAccessor">The Umbraco context accessor.</param>
            <param name="routingSettings">Routing settings.</param>
            <param name="urlProviders">The list of URL providers.</param>
            <param name="mediaUrlProviders">The list of media URL providers.</param>
            <param name="variationContextAccessor">The current variation accessor.</param>
            <param name="navigationQueryService">The query service for the in-memory navigation structure.</param>
            <param name="publishedContentStatusFilteringService"></param>
        </member>
        <member name="P:Umbraco.Cms.Core.Routing.UrlProvider.Mode">
            <summary>
            Gets or sets the provider URL mode.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.UrlProvider.GetUrl(System.Guid,Umbraco.Cms.Core.Models.PublishedContent.UrlMode,System.String,System.Uri)">
            <summary>
            Gets the URL of a published content.
            </summary>
            <param name="id">The published content identifier.</param>
            <param name="mode">The URL mode.</param>
            <param name="culture">A culture.</param>
            <param name="current">The current absolute URL.</param>
            <returns>The URL for the published content.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.UrlProvider.GetUrl(System.Int32,Umbraco.Cms.Core.Models.PublishedContent.UrlMode,System.String,System.Uri)">
            <summary>
            Gets the URL of a published content.
            </summary>
            <param name="id">The published content identifier.</param>
            <param name="mode">The URL mode.</param>
            <param name="culture">A culture.</param>
            <param name="current">The current absolute URL.</param>
            <returns>The URL for the published content.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.UrlProvider.GetUrl(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Models.PublishedContent.UrlMode,System.String,System.Uri)">
            <summary>
            Gets the URL of a published content.
            </summary>
            <param name="content">The published content.</param>
            <param name="mode">The URL mode.</param>
            <param name="culture">A culture.</param>
            <param name="current">The current absolute URL.</param>
            <returns>The URL for the published content.</returns>
            <remarks>
            <para>The URL is absolute or relative depending on <c>mode</c> and on <c>current</c>.</para>
            <para>If the published content is multi-lingual, gets the URL for the specified culture or,
            when no culture is specified, the current culture.</para>
            <para>If the provider is unable to provide a URL, it returns "#".</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.UrlProvider.GetOtherUrls(System.Int32)">
            <summary>
            Gets the other URLs of a published content.
            </summary>
            <param name="id">The published content id.</param>
            <returns>The other URLs for the published content.</returns>
            <remarks>
            <para>Other URLs are those that <c>GetUrl</c> would not return in the current context, but would be valid
            URLs for the node in other contexts (different domain for current request, umbracoUrlAlias...).</para>
            <para>The results depend on the current URL.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.UrlProvider.GetOtherUrls(System.Int32,System.Uri)">
            <summary>
            Gets the other URLs of a published content.
            </summary>
            <param name="id">The published content id.</param>
            <param name="current">The current absolute URL.</param>
            <returns>The other URLs for the published content.</returns>
            <remarks>
            <para>Other URLs are those that <c>GetUrl</c> would not return in the current context, but would be valid
            URLs for the node in other contexts (different domain for current request, umbracoUrlAlias...).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.UrlProvider.GetMediaUrl(System.Guid,Umbraco.Cms.Core.Models.PublishedContent.UrlMode,System.String,System.String,System.Uri)">
            <summary>
            Gets the URL of a media item.
            </summary>
            <param name="id"></param>
            <param name="mode"></param>
            <param name="culture"></param>
            <param name="propertyAlias"></param>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.UrlProvider.GetMediaUrl(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Models.PublishedContent.UrlMode,System.String,System.String,System.Uri)">
            <summary>
            Gets the URL of a media item.
            </summary>
            <param name="content">The published content.</param>
            <param name="propertyAlias">The property alias to resolve the URL from.</param>
            <param name="mode">The URL mode.</param>
            <param name="culture">The variation language.</param>
            <param name="current">The current absolute URL.</param>
            <returns>The URL for the media.</returns>
            <remarks>
            <para>The URL is absolute or relative depending on <c>mode</c> and on <c>current</c>.</para>
            <para>If the media is multi-lingual, gets the URL for the specified culture or,
            when no culture is specified, the current culture.</para>
            <para>If the provider is unable to provide a URL, it returns <see cref="F:System.String.Empty"/>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Routing.WebPath.IsWellFormedWebPath(System.String,System.UriKind)">
            <summary>
            Determines whether the provided web path is well-formed according to the specified UriKind.
            </summary>
            <param name="webPath">The web path to check. This can be null.</param>
            <param name="uriKind">The kind of Uri (Absolute, Relative, or RelativeOrAbsolute).</param>
            <returns>
            true if <paramref name="webPath"/> is well-formed; otherwise, false.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Runtime.IMainDom">
            <summary>
                Represents the main AppDomain running for a given application.
            </summary>
            <remarks>
                <para>There can be only one "main" AppDomain running for a given application at a time.</para>
                <para>It is possible to register against the MainDom and be notified when it is released.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Runtime.IMainDom.IsMainDom">
            <summary>
                Gets a value indicating whether the current domain is the main domain.
            </summary>
            <remarks>
                Acquire must be called first else this will always return false
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Runtime.IMainDom.Acquire(Umbraco.Cms.Core.Hosting.IApplicationShutdownRegistry)">
            <summary>
                Tries to acquire the MainDom, returns true if successful else false
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Runtime.IMainDom.Register(System.Action,System.Action,System.Int32)">
            <summary>
                Registers a resource that requires the current AppDomain to be the main domain to function.
            </summary>
            <param name="install">An action to execute when registering.</param>
            <param name="release">An action to execute before the AppDomain releases the main domain status.</param>
            <param name="weight">An optional weight (lower goes first).</param>
            <returns>A value indicating whether it was possible to register.</returns>
            <remarks>
                If registering is successful, then the <paramref name="install" /> action
                is guaranteed to execute before the AppDomain releases the main domain status.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Runtime.IMainDomKeyGenerator">
            <summary>
                Defines a class which can generate a distinct key for a MainDom boundary.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Runtime.IMainDomKeyGenerator.GenerateKey">
            <summary>
                Returns a key that signifies a MainDom boundary.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Runtime.IMainDomLock">
            <summary>
                An application-wide distributed lock
            </summary>
            <remarks>
                Disposing releases the lock
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Runtime.IMainDomLock.AcquireLockAsync(System.Int32)">
            <summary>
                Acquires an application-wide distributed lock
            </summary>
            <param name="millisecondsTimeout"></param>
            <returns>
                An awaitable boolean value which will be false if the elapsed millsecondsTimeout value is exceeded
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Runtime.IMainDomLock.ListenAsync">
            <summary>
                Wait on a background thread to receive a signal from another AppDomain
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Runtime.MainDom">
            <summary>
            Provides the full implementation of <see cref="T:Umbraco.Cms.Core.Runtime.IMainDom"/>.
            </summary>
            <remarks>
            <para>When an AppDomain starts, it tries to acquire the main domain status.</para>
            <para>When an AppDomain stops (eg the application is restarting) it should release the main domain status.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Runtime.MainDom.Acquire(Umbraco.Cms.Core.Hosting.IApplicationShutdownRegistry)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Runtime.MainDom.Register(System.Action,System.Action,System.Int32)">
            <summary>
            Registers a resource that requires the current AppDomain to be the main domain to function.
            </summary>
            <param name="install">An action to execute when registering.</param>
            <param name="release">An action to execute before the AppDomain releases the main domain status.</param>
            <param name="weight">An optional weight (lower goes first).</param>
            <returns>A value indicating whether it was possible to register.</returns>
            <remarks>If registering is successful, then the <paramref name="install"/> action
            is guaranteed to execute before the AppDomain releases the main domain status.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Runtime.MainDom.IsMainDom">
            <summary>
            Gets a value indicating whether the current domain is the main domain.
            </summary>
            <remarks>
            Acquire must be called first else this will always return false
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Runtime.MainDomSemaphoreLock">
            <summary>
                Uses a system-wide Semaphore and EventWaitHandle to synchronize the current AppDomain
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.RuntimeLevel">
            <summary>
                Describes the levels in which the runtime can run.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.RuntimeLevel.BootFailed">
            <summary>
                The runtime has failed to boot and cannot run.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.RuntimeLevel.Unknown">
            <summary>
                The level is unknown.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.RuntimeLevel.Boot">
            <summary>
                The runtime is booting.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.RuntimeLevel.Install">
            <summary>
                The runtime has detected that Umbraco is not installed at all, ie there is
                no database, and is currently installing Umbraco.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.RuntimeLevel.Upgrade">
            <summary>
                The runtime has detected an Umbraco install which needed to be upgraded, and
                is currently upgrading Umbraco.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.RuntimeLevel.Run">
            <summary>
                The runtime has detected an up-to-date Umbraco install and is running.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.RuntimeLevelReason">
            <summary>
                Describes the reason for the runtime level.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.RuntimeLevelReason.Unknown">
            <summary>
                The reason is unknown.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.RuntimeLevelReason.BootFailedCannotDowngrade">
            <summary>
                The code version is lower than the version indicated in web.config, and
                downgrading Umbraco is not supported.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.RuntimeLevelReason.BootFailedCannotConnectToDatabase">
            <summary>
                The runtime cannot connect to the configured database.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.RuntimeLevelReason.BootFailedCannotCheckUpgradeState">
            <summary>
                The runtime can connect to the configured database, but it cannot
                retrieve the migrations status.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.RuntimeLevelReason.BootFailedOnException">
            <summary>
                An exception was thrown during boot.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.RuntimeLevelReason.InstallNoVersion">
            <summary>
                Umbraco is not installed at all.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.RuntimeLevelReason.InstallNoDatabase">
            <summary>
                A version is specified in web.config but the database is not configured.
            </summary>
            <remarks>This is a weird state.</remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.RuntimeLevelReason.InstallMissingDatabase">
            <summary>
                A version is specified in web.config and a database is configured, but the
                database is missing, and installing over a missing database has been enabled.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.RuntimeLevelReason.InstallEmptyDatabase">
            <summary>
                A version is specified in web.config and a database is configured, but the
                database is empty, and installing over an empty database has been enabled.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.RuntimeLevelReason.UpgradeOldVersion">
            <summary>
                Umbraco runs an old version.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.RuntimeLevelReason.UpgradeMigrations">
            <summary>
                Umbraco runs the current version but some migrations have not run.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.RuntimeLevelReason.UpgradePackageMigrations">
            <summary>
                Umbraco runs the current version but some package migrations have not run.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.RuntimeLevelReason.Run">
            <summary>
                Umbraco is running.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.CoreScope.Complete">
            <summary>
            Completes a scope
            </summary>
            <returns>A value indicating whether the scope is completed or not.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Scoping.ICoreScope">
            <summary>
                Represents a scope.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Scoping.ICoreScope.Depth">
            <summary>
            Gets the distance from the root scope.
            </summary>
            <remarks>
            A zero represents a root scope, any value greater than zero represents a child scope.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Scoping.ICoreScope.Notifications">
            <summary>
                Gets the scope notification publisher
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Scoping.ICoreScope.RepositoryCacheMode">
            <summary>
                Gets the repositories cache mode.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Scoping.ICoreScope.IsolatedCaches">
            <summary>
                Gets the scope isolated cache.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.ICoreScope.Complete">
            <summary>
                Completes the scope.
            </summary>
            <returns>A value indicating whether the scope has been successfully completed.</returns>
            <remarks>Can return false if any child scope has not completed.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.ICoreScope.ReadLock(System.Int32[])">
            <summary>
                Read-locks some lock objects.
            </summary>
            <param name="lockIds">Array of lock object identifiers.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.ICoreScope.WriteLock(System.Int32[])">
            <summary>
                Write-locks some lock objects.
            </summary>
            <param name="lockIds">Array of object identifiers.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.ICoreScope.WriteLock(System.TimeSpan,System.Int32)">
            <summary>
                Write-locks some lock objects.
            </summary>
            <param name="timeout">The database timeout in milliseconds</param>
            <param name="lockId">The lock object identifier.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.ICoreScope.ReadLock(System.TimeSpan,System.Int32)">
            <summary>
                Read-locks some lock objects.
            </summary>
            <param name="timeout">The database timeout in milliseconds</param>
            <param name="lockId">The lock object identifier.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Scoping.ICoreScopeProvider">
            <summary>
                Provides scopes.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Scoping.ICoreScopeProvider.Context">
            <summary>
                Gets the scope context.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.ICoreScopeProvider.CreateCoreScope(System.Data.IsolationLevel,Umbraco.Cms.Core.Scoping.RepositoryCacheMode,Umbraco.Cms.Core.Events.IEventDispatcher,Umbraco.Cms.Core.Events.IScopedNotificationPublisher,System.Nullable{System.Boolean},System.Boolean,System.Boolean)">
            <summary>
                Creates an ambient scope.
            </summary>
            <param name="isolationLevel">The transaction isolation level.</param>
            <param name="repositoryCacheMode">The repositories cache mode.</param>
            <param name="eventDispatcher">An optional events dispatcher.</param>
            <param name="scopedNotificationPublisher">An optional notification publisher.</param>
            <param name="scopeFileSystems">A value indicating whether to scope the filesystems.</param>
            <param name="callContext">A value indicating whether this scope should always be registered in the call context.</param>
            <param name="autoComplete">A value indicating whether this scope is auto-completed.</param>
            <returns>The created ambient scope.</returns>
            <remarks>
                <para>The created scope becomes the ambient scope.</para>
                <para>If an ambient scope already exists, it becomes the parent of the created scope.</para>
                <para>When the created scope is disposed, the parent scope becomes the ambient scope again.</para>
                <para>Parameters must be specified on the outermost scope, or must be compatible with the parents.</para>
                <para>
                    Auto-completed scopes should be used for read-only operations ONLY. Do not use them if you do not
                    understand the associated issues, such as the scope being completed even though an exception is thrown.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.ICoreScopeProvider.CreateQuery``1">
            <summary>
                Creates an instance of <see cref="T:Umbraco.Cms.Core.Persistence.Querying.IQuery`1" />
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Scoping.IInstanceIdentifiable">
            <summary>
                Exposes an instance unique identifier.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Scoping.IInstanceIdentifiable.InstanceId">
            <summary>
                Gets the instance unique identifier.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.ILockingMechanism.ReadLock(System.Guid,System.Nullable{System.TimeSpan},System.Int32[])">
            <summary>
                Read-locks some lock objects lazily.
            </summary>
            <param name="instanceId">Instance id of the scope who is requesting the lock</param>
            <param name="timeout">Timeout for the lock</param>
            <param name="lockIds">Array of lock object identifiers.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.ILockingMechanism.WriteLock(System.Guid,System.Nullable{System.TimeSpan},System.Int32[])">
            <summary>
                Write-locks some lock objects lazily.
            </summary>
            <param name="instanceId">Instance id of the scope who is requesting the lock</param>
            <param name="timeout">Timeout for the lock</param>
            <param name="lockIds">Array of object identifiers.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.ILockingMechanism.EagerReadLock(System.Guid,System.Nullable{System.TimeSpan},System.Int32[])">
            <summary>
            Eagerly acquires a read-lock
            </summary>
            <param name="instanceId"></param>
            <param name="timeout">Timeout for the lock</param>
            <param name="lockIds"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.ILockingMechanism.EagerWriteLock(System.Guid,System.Nullable{System.TimeSpan},System.Int32[])">
            <summary>
            Eagerly acquires a write-lock
            </summary>
            <param name="instanceId"></param>
            <param name="timeout">Timeout for the lock</param>
            <param name="lockIds"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.ILockingMechanism.ClearLocks(System.Guid)">
            <summary>
            Clears all the locks held
            </summary>
            <param name="instanceId"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.ILockingMechanism.EnsureLocks(System.Guid)">
            <summary>
            Acquires all the non-eagerly requested locks.
            </summary>
            <param name="scopeInstanceId"></param>
        </member>
        <member name="T:Umbraco.Cms.Core.Scoping.IScopeContext">
            <summary>
                Represents a scope context.
            </summary>
            <remarks>
                A scope context can enlist objects that will be attached to the scope, and available
                for the duration of the scope. In addition, it can enlist actions, that will run when the
                scope is exiting, and after the database transaction has been committed.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.IScopeContext.Enlist(System.String,System.Action{System.Boolean},System.Int32)">
            <summary>
                Enlists an action.
            </summary>
            <param name="key">The action unique identifier.</param>
            <param name="action">The action.</param>
            <param name="priority">The optional action priority (default is 100, lower runs first).</param>
            <remarks>
                <para>It is ok to enlist multiple action with the same key but only the first one will run.</para>
                <para>The action boolean parameter indicates whether the scope completed or not.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.IScopeContext.Enlist``1(System.String,System.Func{``0},System.Action{System.Boolean,``0},System.Int32)">
            <summary>
                Enlists an object and action.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="key">The object unique identifier.</param>
            <param name="creator">A function providing the object.</param>
            <param name="action">The optional action.</param>
            <param name="priority">The optional action priority (default is 100, lower runs first).</param>
            <returns>The object.</returns>
            <remarks>
                <para>
                    On the first time an object is enlisted with a given key, the object is actually
                    created. Next calls just return the existing object. It is ok to enlist multiple objects
                    and action with the same key but only the first one is used, the others are ignored.
                </para>
                <para>The action boolean parameter indicates whether the scope completed or not.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.IScopeContext.GetEnlisted``1(System.String)">
            <summary>
                Gets an enlisted object.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="key">The object unique identifier.</param>
            <returns>The enlisted object, if any, else the default value.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Scoping.LockingMechanism">
            <summary>
            Mechanism for handling read and write locks.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.LockingMechanism.#ctor(Umbraco.Cms.Core.DistributedLocking.IDistributedLockingMechanismFactory,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Scoping.LockingMechanism})">
            <summary>
            Constructs an instance of LockingMechanism
            </summary>
            <param name="distributedLockingMechanismFactory"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.LockingMechanism.ReadLock(System.Guid,System.Nullable{System.TimeSpan},System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.LockingMechanism.WriteLock(System.Guid,System.Nullable{System.TimeSpan},System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.LockingMechanism.EagerReadLock(System.Guid,System.Nullable{System.TimeSpan},System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.LockingMechanism.EagerWriteLock(System.Guid,System.Nullable{System.TimeSpan},System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.LockingMechanism.EagerWriteLockInner(System.Guid,System.Nullable{System.TimeSpan},System.Int32[])">
            <summary>
                Handles acquiring a write lock with a specified timeout, will delegate it to the parent if there are any.
            </summary>
            <param name="instanceId">Instance ID of the requesting scope.</param>
            <param name="timeout">Optional database timeout in milliseconds.</param>
            <param name="lockIds">Array of lock object identifiers.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.LockingMechanism.ObtainWriteLock(System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
                Obtains a write lock with a custom timeout.
            </summary>
            <param name="lockId">Lock object identifier to lock.</param>
            <param name="timeout">TimeSpan specifying the timout period.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.LockingMechanism.EagerReadLockInner(System.Guid,System.Nullable{System.TimeSpan},System.Int32[])">
            <summary>
                Handles acquiring a read lock, will delegate it to the parent if there are any.
            </summary>
            <param name="instanceId">The id of the scope requesting the lock.</param>
            <param name="timeout">Optional database timeout in milliseconds.</param>
            <param name="lockIds">Array of lock object identifiers.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.LockingMechanism.ObtainReadLock(System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
                Obtains a read lock with a custom timeout.
            </summary>
            <param name="lockId">Lock object identifier to lock.</param>
            <param name="timeout">TimeSpan specifying the timout period.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.LockingMechanism.LockInner(System.Guid,System.Collections.Generic.Dictionary{System.Guid,System.Collections.Generic.Dictionary{System.Int32,System.Int32}}@,System.Collections.Generic.HashSet{System.Int32}@,System.Action{System.Int32,System.Nullable{System.TimeSpan}},System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
                Handles acquiring a lock, this should only be called from the outermost scope.
            </summary>
            <param name="instanceId">Instance ID of the scope requesting the lock.</param>
            <param name="locks">Reference to the applicable locks dictionary (ReadLocks or WriteLocks).</param>
            <param name="locksSet">Reference to the applicable locks hashset (_readLocks or _writeLocks).</param>
            <param name="obtainLock">Delegate used to request the lock from the locking mechanism.</param>
            <param name="timeout">Optional timeout parameter to specify a timeout.</param>
            <param name="lockId">Lock identifier.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.LockingMechanism.IncrementLock(System.Int32,System.Guid,System.Collections.Generic.Dictionary{System.Guid,System.Collections.Generic.Dictionary{System.Int32,System.Int32}}@)">
            <summary>
                Increment the counter of a locks dictionary, either ReadLocks or WriteLocks,
                for a specific scope instance and lock identifier. Must be called within a lock.
            </summary>
            <param name="lockId">Lock ID to increment.</param>
            <param name="instanceId">Instance ID of the scope requesting the lock.</param>
            <param name="locks">Reference to the dictionary to increment on</param>
            <remarks>Internal for tests.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.LockingMechanism.ClearLocks(System.Guid)">
            <summary>
                Clears all lock counters for a given scope instance, signalling that the scope has been disposed.
            </summary>
            <param name="instanceId">Instance ID of the scope to clear.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.LockingMechanism.EnsureLocks(System.Guid)">
            <summary>
                When we require a ReadLock or a WriteLock we don't immediately request these locks from the database,
                instead we only request them when necessary (lazily).
                To do this, we queue requests for read/write locks.
                This is so that if there's a request for either of these
                locks, but the service/repository returns an item from the cache, we don't end up making a DB call to make the
                read/write lock.
                This executes the queue of requested locks in order in an efficient way lazily whenever the database instance is
                resolved.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.LockingMechanism.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.LockingMechanism.GenerateUnclearedScopesLogMessage">
            <summary>
                Generates a log message with all scopes that hasn't cleared their locks, including how many, and what locks they
                have requested.
            </summary>
            <returns>Log message.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Scoping.LockingMechanism.WriteLockDictionaryToString(System.Collections.Generic.Dictionary{System.Guid,System.Collections.Generic.Dictionary{System.Int32,System.Int32}},System.Text.StringBuilder,System.String)">
            <summary>
                Writes a locks dictionary to a <see cref="T:System.Text.StringBuilder" /> for logging purposes.
            </summary>
            <param name="dict">Lock dictionary to report on.</param>
            <param name="builder">String builder to write to.</param>
            <param name="dictName">The name to report the dictionary as.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Scoping.RepositoryCacheMode">
            <summary>
                Specifies the cache mode of repositories.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Scoping.RepositoryCacheMode.Unspecified">
            <summary>
                Unspecified.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Scoping.RepositoryCacheMode.Default">
            <summary>
                Default, full L2 cache.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Scoping.RepositoryCacheMode.Scoped">
            <summary>
                Scoped cache.
            </summary>
            <remarks>
                <para>Reads from, and writes to, a scope-local cache.</para>
                <para>Upon scope completion, clears the global L2 cache.</para>
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Scoping.RepositoryCacheMode.None">
            <summary>
                No cache.
            </summary>
            <remarks>
                <para>Bypasses caches entirely.</para>
                <para>Upon scope completion, clears the global L2 cache.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.Authorization.AuthorizationHelper">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.AuthorizationHelper.#ctor(Umbraco.Cms.Core.Services.IUserService)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Security.Authorization.AuthorizationHelper" /> class.
            </summary>
            <param name="userService">Service for user related operations.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.AuthorizationHelper.GetUmbracoUser(System.Security.Principal.IPrincipal)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.AuthorizationHelper.TryGetUmbracoUser(System.Security.Principal.IPrincipal,Umbraco.Cms.Core.Models.Membership.IUser@)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionAuthorizer">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.ContentPermissionAuthorizer.IsDeniedAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.ISet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.ContentPermissionAuthorizer.IsDeniedWithDescendantsAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Guid,System.Collections.Generic.ISet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.ContentPermissionAuthorizer.IsDeniedAtRootLevelAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.ISet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.ContentPermissionAuthorizer.IsDeniedAtRecycleBinLevelAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.ISet{System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource">
            <summary>
                A resource used for the <see cref="!:ContentPermissionHandler" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource.WithKeys(System.String,System.Nullable{System.Guid})">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" /> with the specified permission and content key or root.
            </summary>
            <param name="permissionToCheck">The permission to check for.</param>
            <param name="contentKey">The key of the content or null if root.</param>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource.WithKeys(System.String,System.Nullable{System.Guid},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" /> with the specified permission and content key or root.
            </summary>
            <param name="permissionToCheck">The permission to check for.</param>
            <param name="contentKey">The key of the content or null if root.</param>
            <param name="cultures">The cultures to validate</param>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource.WithKeys(System.String,System.Collections.Generic.IEnumerable{System.Nullable{System.Guid}})">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" /> with the specified permission and content keys.
            </summary>
            <param name="permissionToCheck">The permission to check for.</param>
            <param name="contentKeys">The keys of the contents or null if root.</param>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource.WithKeys(System.String,System.Guid)">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" /> with the specified permission and content key.
            </summary>
            <param name="permissionToCheck">The permission to check for.</param>
            <param name="contentKey">The key of the content.</param>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource.WithKeys(System.String,System.Guid,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" /> with the specified permission and content key.
            </summary>
            <param name="permissionToCheck">The permission to check for.</param>
            <param name="contentKey">The key of the content.</param>
            <param name="cultures">The required culture access</param>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource.WithKeys(System.String,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" /> with the specified permission and content keys.
            </summary>
            <param name="permissionToCheck">The permission to check for.</param>
            <param name="contentKeys">The keys of the contents.</param>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource.WithKeys(System.String,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" /> with the specified permission and content keys.
            </summary>
            <param name="permissionToCheck">The permission to check for.</param>
            <param name="contentKeys">The keys of the contents.</param>
            <param name="cultures">The required culture access</param>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource.WithKeys(System.Collections.Generic.ISet{System.String},System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" /> with the specified permissions and content keys.
            </summary>
            <param name="permissionsToCheck">The permissions to check for.</param>
            <param name="contentKeys">The keys of the contents.</param>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource.Root(System.String)">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" /> with the specified permission and the root.
            </summary>
            <param name="permissionToCheck">The permission to check for.</param>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource.Root(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" /> with the specified permission and the root.
            </summary>
            <param name="permissionToCheck">The permission to check for.</param>
            <param name="cultures">The cultures to validate</param>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource.Root(System.Collections.Generic.ISet{System.String})">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" /> with the specified permissions and the root.
            </summary>
            <param name="permissionsToCheck">The permissions to check for.</param>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource.Root(System.Collections.Generic.ISet{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" /> with the specified permissions and the root.
            </summary>
            <param name="permissionsToCheck">The permissions to check for.</param>
            <param name="cultures">The cultures to validate</param>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource.RecycleBin(System.Collections.Generic.ISet{System.String})">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" /> with the specified permissions and the recycle bin.
            </summary>
            <param name="permissionsToCheck">The permissions to check for.</param>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource.RecycleBin(System.String)">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" /> with the specified permission and the recycle bin.
            </summary>
            <param name="permissionToCheck">The permission to check for.</param>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource.Branch(System.Collections.Generic.ISet{System.String},System.Guid)">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" /> with the specified permissions and the branch from the specified parent key.
            </summary>
            <param name="permissionsToCheck">The permissions to check for.</param>
            <param name="parentKeyForBranch">The parent key of the branch.</param>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource.Branch(System.String,System.Guid)">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" /> with the specified permission and the branch from the specified parent key.
            </summary>
            <param name="permissionToCheck">The permission to check for.</param>
            <param name="parentKeyForBranch">The parent key of the branch.</param>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource.Branch(System.String,System.Guid,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" /> with the specified permission and the branch from the specified parent key.
            </summary>
            <param name="permissionToCheck">The permission to check for.</param>
            <param name="parentKeyForBranch">The parent key of the branch.</param>
            <param name="culturesToCheck">The required cultures</param>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource" />.</returns>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource.ContentKeys">
            <summary>
                Gets the content keys.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource.PermissionsToCheck">
            <summary>
                Gets the collection of permissions to authorize.
            </summary>
            <remarks>
                All permissions have to be satisfied when evaluating.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource.CheckRoot">
            <summary>
                Gets a value indicating whether to check for the root.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource.CheckRecycleBin">
            <summary>
                Gets a value indicating whether to check for the recycle bin.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource.ParentKeyForBranch">
            <summary>
                Gets the parent key of a branch.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.Authorization.ContentPermissionResource.CulturesToCheck">
            <summary>
            All the cultures need to be accessible when evaluating
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.Authorization.DictionaryPermissionResource.CulturesToCheck">
            <summary>
            All the cultures need to be accessible when evaluating
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.Authorization.FeatureAuthorizer">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.FeatureAuthorizer.IsDeniedAsync(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Security.Authorization.IAuthorizationHelper">
            <summary>
                Utility class for working with policy authorizers.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.IAuthorizationHelper.GetUmbracoUser(System.Security.Principal.IPrincipal)">
            <summary>
                Converts an <see cref="T:System.Security.Principal.IPrincipal" /> into an <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" />.
            </summary>
            <param name="currentUser">The current user's principal.</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" />.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.IAuthorizationHelper.TryGetUmbracoUser(System.Security.Principal.IPrincipal,Umbraco.Cms.Core.Models.Membership.IUser@)">
            <summary>
                Attempts to convert an <see cref="T:System.Security.Principal.IPrincipal" /> into an <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" />.
            </summary>
            <param name="currentUser">The current user's principal.</param>
            <param name="user">The resulting <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" />, if the conversion is successful.</param>
            <returns>True if the conversion is successful, false otherwise</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.Authorization.IContentPermissionAuthorizer">
            <summary>
                Authorizes content access.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.IContentPermissionAuthorizer.IsDeniedAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Guid,System.String)">
            <summary>
                Authorizes whether the current user has access to the specified content item.
            </summary>
            <param name="currentUser">The current user.</param>
            <param name="contentKey">The key of the content item to check for.</param>
            <param name="permissionToCheck">The permission to authorize.</param>
            <returns>Returns <c>true</c> if authorization is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.IContentPermissionAuthorizer.IsDeniedAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.ISet{System.String})">
            <summary>
                Authorizes whether the current user has access to the specified content item(s).
            </summary>
            <param name="currentUser">The current user.</param>
            <param name="contentKeys">The keys of the content items to check for.</param>
            <param name="permissionsToCheck">The collection of permissions to authorize.</param>
            <returns>Returns <c>true</c> if authorization is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.IContentPermissionAuthorizer.IsDeniedWithDescendantsAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Guid,System.String)">
            <summary>
                Authorizes whether the current user has access to the descendants of the specified content item.
            </summary>
            <param name="currentUser">The current user.</param>
            <param name="parentKey">The key of the parent content item.</param>
            <param name="permissionToCheck">The permission to authorize.</param>
            <returns>Returns <c>true</c> if authorization is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.IContentPermissionAuthorizer.IsDeniedWithDescendantsAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Guid,System.Collections.Generic.ISet{System.String})">
            <summary>
                Authorizes whether the current user has access to the descendants of the specified content item.
            </summary>
            <param name="currentUser">The current user.</param>
            <param name="parentKey">The key of the parent content item.</param>
            <param name="permissionsToCheck">The collection of permissions to authorize.</param>
            <returns>Returns <c>true</c> if authorization is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.IContentPermissionAuthorizer.IsAuthorizedAtRootLevelAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.String)">
            <summary>
                Authorizes whether the current user has access to the root item.
            </summary>
            <param name="currentUser">The current user.</param>
            <param name="permissionToCheck">The permission to authorize.</param>
            <returns>Returns <c>true</c> if authorization is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.IContentPermissionAuthorizer.IsDeniedAtRootLevelAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.ISet{System.String})">
            <summary>
                Authorizes whether the current user has access to the root item.
            </summary>
            <param name="currentUser">The current user.</param>
            <param name="permissionsToCheck">The collection of permissions to authorize.</param>
            <returns>Returns <c>true</c> if authorization is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.IContentPermissionAuthorizer.IsDeniedAtRecycleBinLevelAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.String)">
            <summary>
                Authorizes whether the current user has access to the recycle bin item.
            </summary>
            <param name="currentUser">The current user'.</param>
            <param name="permissionToCheck">The permission to authorize.</param>
            <returns>Returns <c>true</c> if authorization is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.IContentPermissionAuthorizer.IsDeniedAtRecycleBinLevelAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.ISet{System.String})">
            <summary>
                Authorizes whether the current user has access to the recycle bin item.
            </summary>
            <param name="currentUser">The current user.</param>
            <param name="permissionsToCheck">The collection of permissions to authorize.</param>
            <returns>Returns <c>true</c> if authorization is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.Authorization.IFeatureAuthorizer">
            <summary>
                Authorizes Umbraco features.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.IFeatureAuthorizer.IsDeniedAsync(System.Type)">
            <summary>
                Authorizes the current action.
            </summary>
            <param name="type">The type to check if is disabled.</param>
            <returns>Returns <c>true</c> if authorization is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.Authorization.IMediaPermissionAuthorizer">
            <summary>
                Authorizes media access.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.IMediaPermissionAuthorizer.IsDeniedAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Guid)">
            <summary>
                Authorizes whether the current user has access to the specified media item.
            </summary>
            <param name="currentUser">The current user.</param>
            <param name="mediaKey">The key of the media item to check for.</param>
            <returns>Returns <c>true</c> if authorization is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.IMediaPermissionAuthorizer.IsDeniedAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
                Authorizes whether the current user has access to the specified media item(s).
            </summary>
            <param name="currentUser">The current user.</param>
            <param name="mediaKeys">The keys of the media items to check for.</param>
            <returns>Returns <c>true</c> if authorization is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.IMediaPermissionAuthorizer.IsDeniedAtRootLevelAsync(Umbraco.Cms.Core.Models.Membership.IUser)">
            <summary>
                Authorizes whether the current user has access to the root item.
            </summary>
            <param name="currentUser">The current user.</param>
            <returns>Returns <c>true</c> if authorization is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.IMediaPermissionAuthorizer.IsDeniedAtRecycleBinLevelAsync(Umbraco.Cms.Core.Models.Membership.IUser)">
            <summary>
                Authorizes whether the current user has access to the recycle bin item.
            </summary>
            <param name="currentUser">The current user.</param>
            <returns>Returns <c>true</c> if authorization is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.Authorization.IUserGroupPermissionAuthorizer">
            <summary>
                Authorizes user group access.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.IUserGroupPermissionAuthorizer.IsDeniedAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Guid)">
            <summary>
                Authorizes whether the current user has access to the specified user group.
            </summary>
            <param name="currentUser">The current user.</param>
            <param name="userGroupKey">The key of the user group to check against.</param>
            <returns>Returns <c>true</c> if authorization is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.IUserGroupPermissionAuthorizer.IsDeniedAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
                Authorizes whether the current user has access to the specified user group(s).
            </summary>
            <param name="currentUser">The current user.</param>
            <param name="userGroupKeys">The keys of the user groups to check against.</param>
            <returns>Returns <c>true</c> if authorization is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.Authorization.IUserPermissionAuthorizer">
            <summary>
                Authorizes user access.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.IUserPermissionAuthorizer.IsDeniedAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Guid)">
            <summary>
                Authorizes whether the current user has access to the specified user account.
            </summary>
            <param name="currentUser">The current user.</param>
            <param name="userKey">The key of the user to check for.</param>
            <returns>Returns <c>true</c> if authorization is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.IUserPermissionAuthorizer.IsDeniedAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
                Authorizes whether the current user has access to the specified user account(s).
            </summary>
            <param name="currentUser">The current user.</param>
            <param name="userKeys">The keys of the users to check for.</param>
            <returns>Returns <c>true</c> if authorization is successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.Authorization.MediaPermissionAuthorizer">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.MediaPermissionAuthorizer.IsDeniedAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.IEnumerable{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.MediaPermissionAuthorizer.IsDeniedAtRootLevelAsync(Umbraco.Cms.Core.Models.Membership.IUser)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.MediaPermissionAuthorizer.IsDeniedAtRecycleBinLevelAsync(Umbraco.Cms.Core.Models.Membership.IUser)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.Authorization.MediaPermissionResource">
            <summary>
                A resource used for the <see cref="!:MediaPermissionHandler" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.MediaPermissionResource.WithKeys(System.Nullable{System.Guid})">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.MediaPermissionResource" /> with the specified key.
            </summary>
            <param name="mediaKey">The key of the media or null if root.</param>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.MediaPermissionResource" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.MediaPermissionResource.WithKeys(System.Guid)">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.MediaPermissionResource" /> with the specified key.
            </summary>
            <param name="mediaKey">The key of the media.</param>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.MediaPermissionResource" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.MediaPermissionResource.WithKeys(System.Collections.Generic.IEnumerable{System.Nullable{System.Guid}})">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.MediaPermissionResource" /> with the specified keys.
            </summary>
            <param name="mediaKeys">The keys of the medias or null if root.</param>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.MediaPermissionResource" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.MediaPermissionResource.WithKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.MediaPermissionResource" /> with the specified keys.
            </summary>
            <param name="mediaKeys">The keys of the medias.</param>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.MediaPermissionResource" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.MediaPermissionResource.Root">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.MediaPermissionResource" /> with the root.
            </summary>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.MediaPermissionResource" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.MediaPermissionResource.RecycleBin">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.MediaPermissionResource" /> with the recycle bin.
            </summary>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.MediaPermissionResource" />.</returns>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.Authorization.MediaPermissionResource.MediaKeys">
            <summary>
                Gets the media keys.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.Authorization.MediaPermissionResource.CheckRoot">
            <summary>
                Gets a value indicating whether to check the root.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.Authorization.MediaPermissionResource.CheckRecycleBin">
            <summary>
                Gets a value indicating whether to check the recycle bin.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.Authorization.UserGroupPermissionAuthorizer">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.UserGroupPermissionAuthorizer.IsDeniedAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.IEnumerable{System.Guid})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Security.Authorization.UserGroupPermissionResource">
            <summary>
                A resource used for the <see cref="!:UserGroupPermissionHandler" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.UserGroupPermissionResource.WithKeys(System.Guid)">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.UserGroupPermissionResource" /> with the specified key.
            </summary>
            <param name="userGroupKey">The key of the user group.</param>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.UserGroupPermissionResource" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.UserGroupPermissionResource.WithKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.UserGroupPermissionResource" /> with the specified keys.
            </summary>
            <param name="userGroupKeys">The keys of the user groups.</param>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.UserGroupPermissionResource" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.UserGroupPermissionResource.#ctor(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Security.Authorization.UserGroupPermissionResource" /> class.
            </summary>
            <param name="userGroupKeys">The keys of the user groups.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.Authorization.UserGroupPermissionResource.UserGroupKeys">
            <summary>
                Gets the user group keys.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.Authorization.UserPermissionAuthorizer">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.UserPermissionAuthorizer.IsDeniedAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.IEnumerable{System.Guid})">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.Authorization.UserPermissionResource">
            <summary>
                A resource used for the <see cref="!:UserPermissionHandler" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.UserPermissionResource.WithKeys(System.Guid)">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.UserPermissionResource" /> with the specified keys.
            </summary>
            <param name="userKey">The key of the user.</param>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.UserPermissionResource" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.UserPermissionResource.WithKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
                Creates a <see cref="T:Umbraco.Cms.Core.Security.Authorization.UserPermissionResource" /> with the specified keys.
            </summary>
            <param name="userKeys">The keys of the users.</param>
            <returns>An instance of <see cref="T:Umbraco.Cms.Core.Security.Authorization.UserPermissionResource" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.Authorization.UserPermissionResource.#ctor(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Security.Authorization.UserPermissionResource" /> class.
            </summary>
            <param name="userKeys">The keys of the users.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.Authorization.UserPermissionResource.UserKeys">
            <summary>
                Gets the user keys.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.BackOfficeIdentityOptions">
            <summary>
                Identity options specifically for the back office identity implementation
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.BackOfficeUserPasswordCheckerResult">
            <summary>
                The result returned from the IBackOfficeUserPasswordChecker
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.ContentPermissions">
            <summary>
                Checks user access to content
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.ContentPermissions.CheckPermissions(System.Int32,Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Models.Entities.IUmbracoEntity@,System.Collections.Generic.IReadOnlySet{System.String})">
            <summary>
                Checks if the user has access to the specified node and permissions set
            </summary>
            <param name="nodeId"></param>
            <param name="user"></param>
            <param name="entity">The <see cref="T:Umbraco.Cms.Core.Models.Entities.IUmbracoEntity" /> item resolved if one was found for the id</param>
            <param name="permissionsToCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.ContentPermissions.CheckPermissions(System.Int32,Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Models.IContent@,System.Collections.Generic.IReadOnlySet{System.String})">
            <summary>
                Checks if the user has access to the specified node and permissions set
            </summary>
            <param name="nodeId"></param>
            <param name="user"></param>
            <param name="contentItem">The <see cref="T:Umbraco.Cms.Core.Models.IContent" /> item resolved if one was found for the id</param>
            <param name="permissionsToCheck"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.ExternalLogin">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.ExternalLogin.#ctor(System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Security.ExternalLogin" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.ExternalLogin.LoginProvider">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Security.ExternalLogin.ProviderKey">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Security.ExternalLogin.UserData">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Security.ExternalLoginToken">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.ExternalLoginToken.#ctor(System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Security.ExternalLoginToken" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.ExternalLoginToken.LoginProvider">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Security.ExternalLoginToken.Name">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Security.ExternalLoginToken.Value">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.FileStreamSecurityValidator.IsConsideredSafe(System.IO.Stream)">
            <summary>
            Analyzes whether the file content is considered safe with registered IFileStreamSecurityAnalyzers
            </summary>
            <param name="fileStream">Needs to be a Read seekable stream</param>
            <returns>Whether the file is considered safe after running the necessary analyzers</returns>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IBackOfficeSecurity.CurrentUser">
            <summary>
                Gets the current user.
            </summary>
            <returns>The current user that has been authenticated for the request.</returns>
            <remarks>If authentication hasn't taken place this will be null.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IBackOfficeSecurity.UserHasSectionAccess(System.String,Umbraco.Cms.Core.Models.Membership.IUser)">
            <summary>
                Checks if the specified user as access to the app
            </summary>
            <param name="section"></param>
            <param name="user"></param>
            <returns></returns>
            <remarks>If authentication hasn't taken place this will be unsuccessful.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IBackOfficeSecurity.IsAuthenticated">
            <summary>
                Ensures that a back office user is logged in
            </summary>
            <returns></returns>
            <remarks>This does not force authentication, that must be done before calls to this are made.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.IBackOfficeUserStore">
            <summary>
            Manages persistence of users.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IBackOfficeUserStore.SaveAsync(Umbraco.Cms.Core.Models.Membership.IUser)">
            <summary>
            Saves an <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" />
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to Save</param>
            <returns>A task resolving into an <see cref="T:Umbraco.Cms.Core.Services.OperationStatus.UserOperationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IBackOfficeUserStore.DisableAsync(Umbraco.Cms.Core.Models.Membership.IUser)">
            <summary>
                Disables an <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" />
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to disable.</param>
            <returns>A task resolving into an <see cref="T:Umbraco.Cms.Core.Services.OperationStatus.UserOperationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IBackOfficeUserStore.GetByUserNameAsync(System.String)">
            <summary>
                Get an <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> by username
            </summary>
            <param name="username">Username to use for retrieval.</param>
            <returns>
                A task resolving into an <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IBackOfficeUserStore.GetByEmailAsync(System.String)">
            <summary>
                Get an <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> by email
            </summary>
            <param name="email">Email to use for retrieval.</param>
            <returns>
                A task resolving into an <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IBackOfficeUserStore.GetAsync(System.Int32)">
            <summary>
                Gets a user by Id
            </summary>
            <param name="id">Id of the user to retrieve</param>
            <returns>
                A task resolving into an <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IBackOfficeUserStore.GetAsync(System.Guid)">
            <summary>
                Gets a user by it's key.
            </summary>
            <param name="key">Key of the user to retrieve.</param>
            <returns>Task resolving into an <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IBackOfficeUserStore.GetAllInGroupAsync(System.Int32)">
            <summary>
                Gets a list of <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> objects associated with a given group
            </summary>
            <param name="groupId">Id of group.</param>
            <returns>
                A task resolving into an  <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.ICoreBackOfficeUserManager.CreateForInvite(Umbraco.Cms.Core.Models.UserCreateModel)">
            <summary>
            Creates a user for an invite. This means that the password will not be populated with
            </summary>
            <param name="createModel"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.IdentityAuditEventArgs">
            <summary>
                This class is used by events raised from the BackofficeUserManager
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IdentityAuditEventArgs.#ctor(Umbraco.Cms.Core.Security.AuditEvent,System.String,System.String,System.String,System.String,System.String)">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IdentityAuditEventArgs.Action">
            <summary>
                The action that got triggered from the audit event
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IdentityAuditEventArgs.DateTimeUtc">
            <summary>
                Current date/time in UTC format
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IdentityAuditEventArgs.IpAddress">
            <summary>
                The source IP address of the user performing the action
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IdentityAuditEventArgs.AffectedUser">
            <summary>
                The user affected by the event raised
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IdentityAuditEventArgs.PerformingUser">
            <summary>
                If a user is performing an action on a different user, then this will be set. Otherwise it will be -1
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IdentityAuditEventArgs.Comment">
            <summary>
                An optional comment about the action being logged
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IdentityAuditEventArgs.AffectedUsername">
            <summary>
                This property is always empty except in the LoginFailed event for an unknown user trying to login
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.IdentityUserLogin">
            <summary>
                Entity type for a user's login (i.e. Facebook, Google)
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IdentityUserLogin.#ctor(System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Security.IdentityUserLogin" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IdentityUserLogin.#ctor(System.Int32,System.String,System.String,System.String,System.DateTime)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Security.IdentityUserLogin" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IdentityUserLogin.LoginProvider">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IdentityUserLogin.ProviderKey">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IdentityUserLogin.UserId">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IdentityUserLogin.UserData">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IdentityUserToken.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Security.IdentityUserToken" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IdentityUserToken.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.DateTime)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Security.IdentityUserToken" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IdentityUserToken.LoginProvider">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IdentityUserToken.Name">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IdentityUserToken.Value">
            <inheritdoc />
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IdentityUserToken.UserId">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Security.IExternalLogin">
            <summary>
                Used to persist external login data for a user
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IExternalLogin.LoginProvider">
            <summary>
                Gets the login provider
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IExternalLogin.ProviderKey">
            <summary>
                Gets the provider key
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IExternalLogin.UserData">
            <summary>
                Gets the user data
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.IExternalLoginToken">
            <summary>
                Used to persist an external login token for a user
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IExternalLoginToken.LoginProvider">
            <summary>
                Gets the login provider
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IExternalLoginToken.Name">
            <summary>
                Gets the name of the token
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IExternalLoginToken.Value">
            <summary>
                Gets the value of the token
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IFileStreamSecurityAnalyzer.ShouldHandle(System.IO.Stream)">
            <summary>
            Indicates whether the analyzer should process the file
            The implementation should be considerably faster than IsConsideredSafe
            </summary>
            <param name="fileStream"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IFileStreamSecurityAnalyzer.IsConsideredSafe(System.IO.Stream)">
            <summary>
            Analyzes whether the file content is considered safe
            </summary>
            <param name="fileStream">Needs to be a Read/Write seekable stream</param>
            <returns>Whether the file is considered safe</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IFileStreamSecurityValidator.IsConsideredSafe(System.IO.Stream)">
            <summary>
            Analyzes wether the file content is considered safe with registered IFileStreamSecurityAnalyzers
            </summary>
            <param name="fileStream">Needs to be a Read seekable stream</param>
            <returns>Whether the file is considered safe after running the necessary analyzers</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IHtmlSanitizer.Sanitize(System.String)">
            <summary>
                Sanitizes HTML
            </summary>
            <param name="html">HTML to be sanitized</param>
            <returns>Sanitized HTML</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.IIdentityUserLogin">
            <summary>
                An external login provider linked to a user
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IIdentityUserLogin.LoginProvider">
            <summary>
                Gets or sets the login provider for the login (i.e. Facebook, Google)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IIdentityUserLogin.ProviderKey">
            <summary>
                Gets or sets key representing the login for the provider
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IIdentityUserLogin.UserId">
            <summary>
                Gets or sets user or member key (Guid) for the user/member who owns this login
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IIdentityUserLogin.UserData">
            <summary>
                Gets or sets any arbitrary data for the user and external provider
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.IIdentityUserToken">
            <summary>
                An external login provider token
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IIdentityUserToken.UserId">
            <summary>
                Gets or sets user Id for the user who owns this token
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IIdentityUserToken.LoginProvider">
            <summary>
                Gets or sets the login provider for the login (i.e. Facebook, Google)
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IIdentityUserToken.Name">
            <summary>
                Gets or sets the token name
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.IIdentityUserToken.Value">
            <summary>
                Gets or set the token value
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.ILocalLoginSettingProvider">
            <summary>
            A setting provider local logins.
            <remarks>
            This cannot be an app setting since it's specified the external login providers.
            </remarks>
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.IMarkdownSanitizer">
            <summary>
            Sanitizer service for the markdown editor.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IMarkdownSanitizer.Sanitize(System.String)">
            <summary>
                Sanitizes Markdown
            </summary>
            <param name="markdown">Markdown to be sanitized</param>
            <returns>Sanitized Markdown</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IPasswordHasher.HashPassword(System.String)">
            <summary>
                Hashes a password
            </summary>
            <param name="password">The password.</param>
            <returns>The password hashed.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IPublicAccessChecker.HasMemberAccessToContentAsync(System.Int32)">
            <summary>
                Tests the current member access level to a given content item.
            </summary>
            <param name="publishedContentId">The ID of the content item.</param>
            <returns>The access level for the content item.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.IPublicAccessChecker.HasMemberAccessToContentAsync(System.Int32,System.Security.Claims.ClaimsPrincipal)">
            <summary>
                Tests member access level to a given content item.
            </summary>
            <param name="publishedContentId">The ID of the content item.</param>
            <param name="claimsPrincipal">The member claims to test against the content item.</param>
            <returns>The access level for the content item.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.ISetupTwoFactorModel">
            <summary>
            Marker interface that is used to setup different two factor methods. The interface ensures the openapi docs will show all possible implementations.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.ITwoFactorProvider">
            <summary>
            A two factor provider
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Security.ITwoFactorProvider.ProviderName">
            <summary>
            A unique name for this provider.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.ITwoFactorProvider.GetSetupDataAsync(System.Guid,System.String)">
            <summary>
            Gets the data needed to setup this provider. Using the marker interface <see cref="T:Umbraco.Cms.Core.Security.ISetupTwoFactorModel" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.ITwoFactorProvider.ValidateTwoFactorPIN(System.String,System.String)">
            <summary>
            Validates the 2FA login token for the user identified by the supplied secret.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.ITwoFactorProvider.ValidateTwoFactorSetup(System.String,System.String)">
            <summary>
            Validates the 2FA setup token for the user identified by the supplied secret.
            </summary>
            <remarks>Called to confirm the setup of two factor on the user.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.LegacyPasswordSecurity">
            <summary>
                Handles password hashing and formatting for legacy hashing algorithms.
            </summary>
            <remarks>
                Should probably be internal.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.LegacyPasswordSecurity.VerifyPassword(System.String,System.String,System.String)">
            <summary>
                Verifies if the password matches the expected hash+salt of the stored password string
            </summary>
            <param name="algorithm">The hashing algorithm for the stored password.</param>
            <param name="password">The password.</param>
            <param name="dbPassword">The value of the password stored in a data store.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.LegacyPasswordSecurity.VerifyLegacyHashedPassword(System.String,System.String)">
            <summary>
                Verify a legacy hashed password (HMACSHA1)
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.LegacyPasswordSecurity.HashNewPassword(System.String,System.String,System.String@)">
            <summary>
                Create a new password hash and a new salt
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.LegacyPasswordSecurity.ParseStoredHashPassword(System.String,System.String,System.String@)">
            <summary>
                Parses out the hashed password and the salt from the stored password string value
            </summary>
            <param name="algorithm">The hashing algorithm for the stored password.</param>
            <param name="storedString"></param>
            <param name="salt">returns the salt</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.LegacyPasswordSecurity.HashPassword(System.String,System.String,System.String)">
            <summary>
                Hashes a password with a given salt
            </summary>
            <param name="algorithmType">The hashing algorithm for the password.</param>
            <param name="pass"></param>
            <param name="salt"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.LegacyPasswordSecurity.GetHashAlgorithm(System.String)">
            <summary>
                Return the hash algorithm to use based on the provided <paramref name="algorithm"/>.
            </summary>
            <param name="algorithm">The hashing algorithm name.</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.MediaPermissions">
            <summary>
                Checks user access to media
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.MediaPermissions.CheckPermissions(Umbraco.Cms.Core.Models.Membership.IUser,System.Int32,Umbraco.Cms.Core.Models.IMedia@)">
            <summary>
                Performs a permissions check for the user to check if it has access to the node based on
                start node and/or permissions for the node
            </summary>
            <param name="user"></param>
            <param name="nodeId">The content to lookup, if the contentItem is not specified</param>
            <param name="media"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.NoopMarkdownSanitizer">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Security.NoopMarkdownSanitizer.Sanitize(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Security.NoopSetupTwoFactorModel">
            <summary>
            A No-operation implementation of the ISetupTwoFactorModel.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.PasswordGenerator">
            <summary>
                Generates a password
            </summary>
            <remarks>
                This uses logic copied from the old MembershipProvider.GeneratePassword logic
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Security.PasswordGenerator.PasswordStore">
            <summary>
                Internal class copied from ASP.NET Framework MembershipProvider
            </summary>
            <remarks>
                See https://stackoverflow.com/a/39855417/694494 +
                https://github.com/Microsoft/referencesource/blob/master/System.Web/Security/Membership.cs
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Security.PasswordGenerator.PasswordStore.GeneratePassword(System.Int32,System.Int32)">
            <summary>Generates a random password of the specified length.</summary>
            <returns>A random password of the specified length.</returns>
            <param name="length">
                The number of characters in the generated password. The length must be between 1 and 128
                characters.
            </param>
            <param name="numberOfNonAlphanumericCharacters">
                The minimum number of non-alphanumeric characters (such as @, #, !, %,
                &amp;, and so on) in the generated password.
            </param>
            <exception cref="T:System.ArgumentException">
                <paramref name="length" /> is less than 1 or greater than 128 -or-
                <paramref name="numberOfNonAlphanumericCharacters" /> is less than 0 or greater than <paramref name="length" />.
            </exception>
        </member>
        <member name="T:Umbraco.Cms.Core.Semver.SemVersion">
            <summary>
                A semantic version implementation.
                Conforms to v2.0.0 of http://semver.org/
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Semver.SemVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Semver.SemVersion" /> class.
            </summary>
            <param name="major">The major version.</param>
            <param name="minor">The minor version.</param>
            <param name="patch">The patch version.</param>
            <param name="prerelease">The prerelease version (eg. "alpha").</param>
            <param name="build">The build eg ("nightly.232").</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Semver.SemVersion.#ctor(System.Version)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Semver.SemVersion" /> class.
            </summary>
            <param name="version">
                The <see cref="T:System.Version" /> that is used to initialize
                the Major, Minor, Patch and Build properties.
            </param>
        </member>
        <member name="M:Umbraco.Cms.Core.Semver.SemVersion.Parse(System.String,System.Boolean)">
            <summary>
                Parses the specified string to a semantic version.
            </summary>
            <param name="version">The version string.</param>
            <param name="strict">If set to <c>true</c> minor and patch version are required, else they default to 0.</param>
            <returns>The SemVersion object.</returns>
            <exception cref="T:System.InvalidOperationException">When a invalid version string is passed.</exception>
        </member>
        <member name="M:Umbraco.Cms.Core.Semver.SemVersion.TryParse(System.String,Umbraco.Cms.Core.Semver.SemVersion@,System.Boolean)">
            <summary>
                Parses the specified string to a semantic version.
            </summary>
            <param name="version">The version string.</param>
            <param name="semver">
                When the method returns, contains a SemVersion instance equivalent
                to the version string passed in, if the version string was valid, or <c>null</c> if the
                version string was not valid.
            </param>
            <param name="strict">If set to <c>true</c> minor and patch version are required, else they default to 0.</param>
            <returns><c>False</c> when a invalid version string is passed, otherwise <c>true</c>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Semver.SemVersion.Equals(Umbraco.Cms.Core.Semver.SemVersion,Umbraco.Cms.Core.Semver.SemVersion)">
            <summary>
                Tests the specified versions for equality.
            </summary>
            <param name="versionA">The first version.</param>
            <param name="versionB">The second version.</param>
            <returns>If versionA is equal to versionB <c>true</c>, else <c>false</c>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Semver.SemVersion.Compare(Umbraco.Cms.Core.Semver.SemVersion,Umbraco.Cms.Core.Semver.SemVersion)">
            <summary>
                Compares the specified versions.
            </summary>
            <param name="versionA">The version to compare to.</param>
            <param name="versionB">The version to compare against.</param>
            <returns>
                If versionA &lt; versionB <c>&lt; 0</c>, if versionA &gt; versionB <c>&gt; 0</c>,
                if versionA is equal to versionB <c>0</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Semver.SemVersion.Change(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
                Make a copy of the current instance with optional altered fields.
            </summary>
            <param name="major">The major version.</param>
            <param name="minor">The minor version.</param>
            <param name="patch">The patch version.</param>
            <param name="prerelease">The prerelease text.</param>
            <param name="build">The build text.</param>
            <returns>The new version object.</returns>
        </member>
        <member name="P:Umbraco.Cms.Core.Semver.SemVersion.Major">
            <summary>
                Gets the major version.
            </summary>
            <value>
                The major version.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Semver.SemVersion.Minor">
            <summary>
                Gets the minor version.
            </summary>
            <value>
                The minor version.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Semver.SemVersion.Patch">
            <summary>
                Gets the patch version.
            </summary>
            <value>
                The patch version.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Semver.SemVersion.Prerelease">
            <summary>
                Gets the pre-release version.
            </summary>
            <value>
                The pre-release version.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Semver.SemVersion.Build">
            <summary>
                Gets the build version.
            </summary>
            <value>
                The build version.
            </value>
        </member>
        <member name="M:Umbraco.Cms.Core.Semver.SemVersion.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Semver.SemVersion.CompareTo(System.Object)">
            <summary>
                Compares the current instance with another object of the same type and returns an integer that indicates
                whether the current instance precedes, follows, or occurs in the same position in the sort order as the
                other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
                A value that indicates the relative order of the objects being compared.
                The return value has these meanings: Value Meaning Less than zero
                This instance precedes <paramref name="obj" /> in the sort order.
                Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. i
                Greater than zero This instance follows <paramref name="obj" /> in the sort order.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Semver.SemVersion.CompareTo(Umbraco.Cms.Core.Semver.SemVersion)">
            <summary>
                Compares the current instance with another object of the same type and returns an integer that indicates
                whether the current instance precedes, follows, or occurs in the same position in the sort order as the
                other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>
                A value that indicates the relative order of the objects being compared.
                The return value has these meanings: Value Meaning Less than zero
                This instance precedes <paramref name="other" /> in the sort order.
                Zero This instance occurs in the same position in the sort order as <paramref name="other" />. i
                Greater than zero This instance follows <paramref name="other" /> in the sort order.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Semver.SemVersion.PrecedenceMatches(Umbraco.Cms.Core.Semver.SemVersion)">
            <summary>
                Compares to semantic versions by precedence. This does the same as a Equals, but ignores the build information.
            </summary>
            <param name="other">The semantic version.</param>
            <returns><c>true</c> if the version precedence matches.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Semver.SemVersion.CompareByPrecedence(Umbraco.Cms.Core.Semver.SemVersion)">
            <summary>
                Compares to semantic versions by precedence. This does the same as a Equals, but ignores the build information.
            </summary>
            <param name="other">The semantic version.</param>
            <returns>
                A value that indicates the relative order of the objects being compared.
                The return value has these meanings: Value Meaning Less than zero
                This instance precedes <paramref name="other" /> in the version precedence.
                Zero This instance has the same precedence as <paramref name="other" />. i
                Greater than zero This instance has creater precedence as <paramref name="other" />.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Semver.SemVersion.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Semver.SemVersion.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Semver.SemVersion.op_Implicit(System.String)~Umbraco.Cms.Core.Semver.SemVersion">
            <summary>
                Implicit conversion from string to SemVersion.
            </summary>
            <param name="version">The semantic version.</param>
            <returns>The SemVersion object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Semver.SemVersion.op_Equality(Umbraco.Cms.Core.Semver.SemVersion,Umbraco.Cms.Core.Semver.SemVersion)">
            <summary>
                The override of the equals operator.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>If left is equal to right <c>true</c>, else <c>false</c>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Semver.SemVersion.op_Inequality(Umbraco.Cms.Core.Semver.SemVersion,Umbraco.Cms.Core.Semver.SemVersion)">
            <summary>
                The override of the un-equal operator.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>If left is not equal to right <c>true</c>, else <c>false</c>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Semver.SemVersion.op_GreaterThan(Umbraco.Cms.Core.Semver.SemVersion,Umbraco.Cms.Core.Semver.SemVersion)">
            <summary>
                The override of the greater operator.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>If left is greater than right <c>true</c>, else <c>false</c>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Semver.SemVersion.op_GreaterThanOrEqual(Umbraco.Cms.Core.Semver.SemVersion,Umbraco.Cms.Core.Semver.SemVersion)">
            <summary>
                The override of the greater than or equal operator.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>If left is greater than or equal to right <c>true</c>, else <c>false</c>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Semver.SemVersion.op_LessThan(Umbraco.Cms.Core.Semver.SemVersion,Umbraco.Cms.Core.Semver.SemVersion)">
            <summary>
                The override of the less operator.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>If left is less than right <c>true</c>, else <c>false</c>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Semver.SemVersion.op_LessThanOrEqual(Umbraco.Cms.Core.Semver.SemVersion,Umbraco.Cms.Core.Semver.SemVersion)">
            <summary>
                The override of the less than or equal operator.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>If left is less than or equal to right <c>true</c>, else <c>false</c>.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Serialization.IConfigurationEditorJsonSerializer">
            <summary>
            Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types, used for data type configuration.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Serialization.IJsonSerializer">
            <summary>
            Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Serialization.IJsonSerializer.Serialize(System.Object)">
            <summary>
            Converts the specified <paramref name="input" /> into a JSON string.
            </summary>
            <param name="input">The input.</param>
            <returns>
            A JSON string representation of the value.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Serialization.IJsonSerializer.Deserialize``1(System.String)">
            <summary>
            Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter.
            </summary>
            <typeparam name="T">The target type of the JSON value.</typeparam>
            <param name="input">The JSON input to parse.</param>
            <returns>
            A <typeparamref name="T" /> representation of the JSON value.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Serialization.IJsonSerializer.TryDeserialize``1(System.Object,``0@)">
            <summary>
            Attempts to parse an object that represents a JSON structure - i.e. a JSON object or a JSON array - to a strongly typed representation.
            </summary>
            <typeparam name="T">The target type of the JSON value.</typeparam>
            <param name="input">The object input to parse.</param>
            <param name="value">The parsed result, or null if the parsing fails.</param>
            <returns>True if the parsing results in a non-null value, false otherwise.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.ServerEvents.IEventSourceAuthorizer">
            <summary>
            Authorizes a Claims principal to access an event source.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.ServerEvents.IEventSourceAuthorizer.AuthorizableEventSources">
            <summary>
            The event sources this authorizer authorizes for.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.ServerEvents.IEventSourceAuthorizer.AuthorizeAsync(System.Security.Claims.ClaimsPrincipal,System.String)">
            <summary>
            Authorizes a Claims principal to access an event source.
            </summary>
            <param name="principal">The principal that being authorized.</param>
            <param name="eventSource">The event source to authorize the principal for.</param>
            <returns>True is authorized, false if unauthorized.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.ServerEvents.IServerEventAuthorizationService.AuthorizeAsync(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Authorizes a user to listen to server events.
            </summary>
            <param name="user">The user to authorize.</param>
            <returns>The authorization result, containing all authorized event sources, and unauthorized event sources.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.ServerEvents.IServerEventRouter">
            <summary>
            Routes server events to the correct users.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.ServerEvents.IServerEventRouter.RouteEventAsync(Umbraco.Cms.Core.Models.ServerEvents.ServerEvent)">
            <summary>
            Route a server event the users that has permissions to see it.
            </summary>
            <param name="serverEvent">The server event to route.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.ServerEvents.IServerEventRouter.NotifyUserAsync(Umbraco.Cms.Core.Models.ServerEvents.ServerEvent,System.Guid)">
            <summary>
            Notify a specific user about a server event.
            <remarks>Does not consider authorization.</remarks>
            </summary>
            <param name="serverEvent">The server event to send to the user.</param>
            <param name="userKey">Key of the user.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.ServerEvents.IServerEventRouter.BroadcastEventAsync(Umbraco.Cms.Core.Models.ServerEvents.ServerEvent)">
            <summary>
            Broadcast a server event to all users, regardless of authorization.
            </summary>
            <param name="serverEvent">The event to broadcast.</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.ServerEvents.IServerEventUserManager">
            <summary>
            Manages group access for a user.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.ServerEvents.IServerEventUserManager.AssignToGroupsAsync(System.Security.Claims.ClaimsPrincipal,System.String)">
            <summary>
            Adds the connections to the groups that the user has access to.
            </summary>
            <param name="user">The owner of the connection.</param>
            <param name="connectionId">The connection to add to groups.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.ServerEvents.IServerEventUserManager.RefreshGroupsAsync(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Reauthorize the user and removes all connections held by the user from groups they are no longer allowed to access.
            </summary>
            <param name="user">The user to reauthorize.</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.ServerEvents.IUserConnectionManager">
            <summary>
            A manager that tracks connection ids for users.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.ServerEvents.IUserConnectionManager.GetConnections(System.Guid)">
            <summary>
            Get all connections held by a user.
            </summary>
            <param name="userKey">The key of the user to get connections for.</param>
            <returns>The users connections.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.ServerEvents.IUserConnectionManager.AddConnection(System.Guid,System.String)">
            <summary>
            Add a connection to a user.
            </summary>
            <param name="userKey">The key of the user to add the connection to.</param>
            <param name="connectionId">Connection id to add.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.ServerEvents.IUserConnectionManager.RemoveConnection(System.Guid,System.String)">
            <summary>
            Removes a connection from a user.
            </summary>
            <param name="userKey">The user key to remove the connection from.</param>
            <param name="connectionId">The connection id to remove</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.AuditService.GetPagedItemsByEntity(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Direction,Umbraco.Cms.Core.Models.AuditType[],Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IAuditItem})">
            <summary>
                Returns paged items in the audit trail for a given entity
            </summary>
            <param name="entityId"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="orderDirection">
                By default this will always be ordered descending (newest first)
            </param>
            <param name="auditTypeFilter">
                Since we currently do not have enum support with our expression parser, we cannot query on AuditType in the query
                or the custom filter
                so we need to do that here
            </param>
            <param name="customFilter">
                Optional filter to be applied
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.AuditService.GetPagedItemsByUser(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Direction,Umbraco.Cms.Core.Models.AuditType[],Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IAuditItem})">
            <summary>
                Returns paged items in the audit trail for a given user
            </summary>
            <param name="userId"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="orderDirection">
                By default this will always be ordered descending (newest first)
            </param>
            <param name="auditTypeFilter">
                Since we currently do not have enum support with our expression parser, we cannot query on AuditType in the query
                or the custom filter
                so we need to do that here
            </param>
            <param name="customFilter">
                Optional filter to be applied
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.AuditService.Write(System.Int32,System.String,System.String,System.DateTime,System.Int32,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.AuditService.DetermineIsAvailable">
            <summary>
                Determines whether the repository is available.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.Implement.DataTypeService">
            <summary>
            Represents the DataType Service, which is an easy access to operations involving <see cref="T:Umbraco.Cms.Core.Models.IDataType"/>
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.DataTypeService.GetDataType(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Cms.Core.Models.IDataType"/> by its Name
            </summary>
            <param name="name">Name of the <see cref="T:Umbraco.Cms.Core.Models.IDataType"/></param>
            <returns><see cref="T:Umbraco.Cms.Core.Models.IDataType"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.DataTypeService.GetAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.DataTypeService.GetAllAsync(System.Guid[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.DataTypeService.FilterAsync(System.String,System.String,System.String,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.DataTypeService.GetDataType(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Cms.Core.Models.IDataType"/> by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.IDataType"/></param>
            <returns><see cref="T:Umbraco.Cms.Core.Models.IDataType"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.DataTypeService.GetAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.DataTypeService.GetByEditorAlias(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Cms.Core.Models.IDataType"/> by its control Id
            </summary>
            <param name="propertyEditorAlias">Alias of the property editor</param>
            <returns>Collection of <see cref="T:Umbraco.Cms.Core.Models.IDataType"/> objects with a matching control id</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.DataTypeService.GetByEditorAliasAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.DataTypeService.GetByEditorAliasAsync(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.DataTypeService.GetByEditorUiAlias(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.DataTypeService.GetAll(System.Int32[])">
            <summary>
            Gets all <see cref="T:Umbraco.Cms.Core.Models.IDataType"/> objects or those with the ids passed in
            </summary>
            <param name="ids">Optional array of Ids</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IDataType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.DataTypeService.CopyAsync(Umbraco.Cms.Core.Models.IDataType,System.Nullable{System.Guid},System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.DataTypeService.Save(Umbraco.Cms.Core.Models.IDataType,System.Int32)">
            <summary>
            Saves an <see cref="T:Umbraco.Cms.Core.Models.IDataType"/>
            </summary>
            <param name="dataType"><see cref="T:Umbraco.Cms.Core.Models.IDataType"/> to save</param>
            <param name="userId">Id of the user issuing the save</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.DataTypeService.CreateAsync(Umbraco.Cms.Core.Models.IDataType,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.DataTypeService.UpdateAsync(Umbraco.Cms.Core.Models.IDataType,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.DataTypeService.Save(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IDataType},System.Int32)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Cms.Core.Models.IDataType"/>
            </summary>
            <param name="dataTypeDefinitions"><see cref="T:Umbraco.Cms.Core.Models.IDataType"/> to save</param>
            <param name="userId">Id of the user issuing the save</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.DataTypeService.Delete(Umbraco.Cms.Core.Models.IDataType,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Cms.Core.Models.IDataType"/>
            </summary>
            <remarks>
            Please note that deleting a <see cref="T:Umbraco.Cms.Core.Models.IDataType"/> will remove
            all the <see cref="T:Umbraco.Cms.Core.Models.IPropertyType"/> data that references this <see cref="T:Umbraco.Cms.Core.Models.IDataType"/>.
            </remarks>
            <param name="dataType"><see cref="T:Umbraco.Cms.Core.Models.IDataType"/> to delete</param>
            <param name="userId">Optional Id of the user issuing the deletion</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.DataTypeService.DeleteAsync(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.DataTypeService.GetReferencesAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.DataTypeService.GetListViewReferences(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.DataTypeService.GetPagedRelationsAsync(System.Guid,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.DataTypeService.ValidateConfigurationData(Umbraco.Cms.Core.Models.IDataType)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Services.Implement.ServerRegistrationService">
            <summary>
                Manages server registrations in the database.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.ServerRegistrationService.#ctor(Umbraco.Cms.Core.Scoping.ICoreScopeProvider,Microsoft.Extensions.Logging.ILoggerFactory,Umbraco.Cms.Core.Events.IEventMessagesFactory,Umbraco.Cms.Core.Persistence.Repositories.IServerRegistrationRepository,Umbraco.Cms.Core.Hosting.IHostingEnvironment)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Services.Implement.ServerRegistrationService" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.ServerRegistrationService.TouchServer(System.String,System.TimeSpan)">
            <summary>
                Touches a server to mark it as active; deactivate stale servers.
            </summary>
            <param name="serverAddress">The server URL.</param>
            <param name="staleTimeout">The time after which a server is considered stale.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.ServerRegistrationService.DeactiveServer(System.String)">
            <summary>
                Deactivates a server.
            </summary>
            <param name="serverIdentity">The server unique identity.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.ServerRegistrationService.DeactiveStaleServers(System.TimeSpan)">
            <summary>
                Deactivates stale servers.
            </summary>
            <param name="staleTimeout">The time after which a server is considered stale.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.ServerRegistrationService.GetActiveServers(System.Boolean)">
            <summary>
                Return all active servers.
            </summary>
            <param name="refresh">A value indicating whether to force-refresh the cache.</param>
            <returns>All active servers.</returns>
            <remarks>
                By default this method will rely on the repository's cache, which is updated each
                time the current server is touched, and the period depends on the configuration. Use the
                <paramref name="refresh" /> parameter to force a cache refresh and reload active servers
                from the database.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.ServerRegistrationService.GetServers(System.Boolean)">
            <summary>
                Return all servers (active and inactive).
            </summary>
            <param name="refresh">A value indicating whether to force-refresh the cache.</param>
            <returns>All servers.</returns>
            <remarks>
                By default this method will rely on the repository's cache, which is updated each
                time the current server is touched, and the period depends on the configuration. Use the
                <paramref name="refresh" /> parameter to force a cache refresh and reload all servers
                from the database.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.ServerRegistrationService.GetCurrentServerRole">
            <summary>
                Gets the role of the current server.
            </summary>
            <returns>The role of the current server.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Implement.ServerRegistrationService.GetCurrentServerIdentity">
            <summary>
                Gets the local server identity.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.Changes.ContentTypeChangeTypes.Create">
            <summary>
                Item type has been created, no impact
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.Changes.ContentTypeChangeTypes.RefreshMain">
            <summary>
                Content type changes impact only the Content type being saved
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.Changes.ContentTypeChangeTypes.RefreshOther">
            <summary>
                Content type changes impacts the content type being saved and others used that are composed of it
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.Changes.ContentTypeChangeTypes.Remove">
            <summary>
                Content type was removed
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.ConsentService">
            <summary>
                Implements <see cref="T:Umbraco.Cms.Core.Services.IConsentService" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ConsentService.#ctor(Umbraco.Cms.Core.Scoping.ICoreScopeProvider,Microsoft.Extensions.Logging.ILoggerFactory,Umbraco.Cms.Core.Events.IEventMessagesFactory,Umbraco.Cms.Core.Persistence.Repositories.IConsentRepository)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Services.ContentService" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ConsentService.RegisterConsent(System.String,System.String,System.String,Umbraco.Cms.Core.Models.ConsentState,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ConsentService.LookupConsent(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentBlueprintEditingService.Move(Umbraco.Cms.Core.Models.IContent,System.Int32,System.Int32)">
            <summary>
                NB: Some methods from ContentEditingServiceBase are needed, so we need to inherit from it
                but there are others that are not required to be implemented in the case of blueprints, therefore they throw NotImplementedException as default.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentEditingService.EnsureOnlyAllowedFieldsAreUpdated(Umbraco.Cms.Core.Models.IContent,System.Guid)">
            <summary>
            A temporary method that ensures the data is sent in is overridden by the original data, in cases where the user do not have permissions to change the data.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.ContentEditingServiceBase`4.ContentTrashStatusRequirement">
            <summary>
            Should never be made public, serves the purpose of a nullable bool but more readable.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.ContentPermissionService">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentPermissionService.AuthorizeAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.ISet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentPermissionService.AuthorizeDescendantsAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Guid,System.Collections.Generic.ISet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentPermissionService.AuthorizeRootAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.ISet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentPermissionService.AuthorizeBinAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.ISet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentPermissionService.AuthorizeCultureAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.ISet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentPermissionService.HasPermissionAccess(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.ISet{System.String})">
            <summary>
                Check the implicit/inherited permissions of a user for given content items.
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to check for access.</param>
            <param name="contentPaths">The paths of the content items to check for access.</param>
            <param name="permissionsToCheck">The permissions to authorize.</param>
            <returns><c>true</c> if the user has the required permissions; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentPublishingService.PublishAsync(System.Guid,System.Collections.Generic.ICollection{Umbraco.Cms.Core.Models.ContentPublishing.CulturePublishScheduleModel},System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentPublishingService.PublishAsync(System.Guid,Umbraco.Cms.Core.Models.ContentPublishing.CultureAndScheduleModel,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentPublishingService.PublishBranchAsync(System.Guid,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentPublishingService.PublishBranchAsync(System.Guid,System.Collections.Generic.IEnumerable{System.String},Umbraco.Cms.Core.Models.PublishBranchFilter,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentPublishingService.PublishBranchAsync(System.Guid,System.Collections.Generic.IEnumerable{System.String},Umbraco.Cms.Core.Models.PublishBranchFilter,System.Guid,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentPublishingService.IsPublishingBranchAsync(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentPublishingService.GetPublishBranchResultAsync(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentPublishingService.UnpublishAsync(System.Guid,System.Collections.Generic.ISet{System.String},System.Guid)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.ContentService">
            <summary>
                Implements the content service.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.SetPermissions(Umbraco.Cms.Core.Models.Membership.EntityPermissionSet)">
            <summary>
                Used to bulk update the permissions set for a content item. This will replace all permissions
                assigned to an entity with a list of user id &amp; permission pairs.
            </summary>
            <param name="permissionSet"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.SetPermission(Umbraco.Cms.Core.Models.IContent,System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Assigns a single permission to the current content item for the specified group ids
            </summary>
            <param name="entity"></param>
            <param name="permission"></param>
            <param name="groupIds"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.GetPermissions(Umbraco.Cms.Core.Models.IContent)">
            <summary>
                Returns implicit/inherited permissions assigned to the content item for all user groups
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.Create(System.String,System.Guid,System.String,System.Int32)">
            <summary>
                Creates an <see cref="T:Umbraco.Cms.Core.Models.IContent" /> object using the alias of the <see cref="T:Umbraco.Cms.Core.Models.IContentType" />
                that this Content should based on.
            </summary>
            <remarks>
                Note that using this method will simply return a new IContent without any identity
                as it has not yet been persisted. It is intended as a shortcut to creating new content objects
                that does not invoke a save operation against the database.
            </remarks>
            <param name="name">Name of the Content object</param>
            <param name="parentId">Id of Parent for the new Content</param>
            <param name="contentTypeAlias">Alias of the <see cref="T:Umbraco.Cms.Core.Models.IContentType" /></param>
            <param name="userId">Optional id of the user creating the content</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IContent" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.Create(System.String,System.Int32,System.String,System.Int32)">
            <summary>
                Creates an <see cref="T:Umbraco.Cms.Core.Models.IContent" /> object of a specified content type.
            </summary>
            <remarks>
                This method simply returns a new, non-persisted, IContent without any identity. It
                is intended as a shortcut to creating new content objects that does not invoke a save
                operation against the database.
            </remarks>
            <param name="name">The name of the content object.</param>
            <param name="parentId">The identifier of the parent, or -1.</param>
            <param name="contentTypeAlias">The alias of the content type.</param>
            <param name="userId">The optional id of the user creating the content.</param>
            <returns>The content object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.Create(System.String,System.Int32,Umbraco.Cms.Core.Models.IContentType,System.Int32)">
            <summary>
                Creates an <see cref="T:Umbraco.Cms.Core.Models.IContent" /> object of a specified content type.
            </summary>
            <remarks>
                This method simply returns a new, non-persisted, IContent without any identity. It
                is intended as a shortcut to creating new content objects that does not invoke a save
                operation against the database.
            </remarks>
            <param name="name">The name of the content object.</param>
            <param name="parentId">The identifier of the parent, or -1.</param>
            <param name="contentType">The content type of the content</param>
            <param name="userId">The optional id of the user creating the content.</param>
            <returns>The content object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.Create(System.String,Umbraco.Cms.Core.Models.IContent,System.String,System.Int32)">
            <summary>
                Creates an <see cref="T:Umbraco.Cms.Core.Models.IContent" /> object of a specified content type, under a parent.
            </summary>
            <remarks>
                This method simply returns a new, non-persisted, IContent without any identity. It
                is intended as a shortcut to creating new content objects that does not invoke a save
                operation against the database.
            </remarks>
            <param name="name">The name of the content object.</param>
            <param name="parent">The parent content object.</param>
            <param name="contentTypeAlias">The alias of the content type.</param>
            <param name="userId">The optional id of the user creating the content.</param>
            <returns>The content object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.CreateAndSave(System.String,System.Int32,System.String,System.Int32)">
            <summary>
                Creates an <see cref="T:Umbraco.Cms.Core.Models.IContent" /> object of a specified content type.
            </summary>
            <remarks>This method returns a new, persisted, IContent with an identity.</remarks>
            <param name="name">The name of the content object.</param>
            <param name="parentId">The identifier of the parent, or -1.</param>
            <param name="contentTypeAlias">The alias of the content type.</param>
            <param name="userId">The optional id of the user creating the content.</param>
            <returns>The content object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.CreateAndSave(System.String,Umbraco.Cms.Core.Models.IContent,System.String,System.Int32)">
            <summary>
                Creates an <see cref="T:Umbraco.Cms.Core.Models.IContent" /> object of a specified content type, under a parent.
            </summary>
            <remarks>This method returns a new, persisted, IContent with an identity.</remarks>
            <param name="name">The name of the content object.</param>
            <param name="parent">The parent content object.</param>
            <param name="contentTypeAlias">The alias of the content type.</param>
            <param name="userId">The optional id of the user creating the content.</param>
            <returns>The content object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.GetById(System.Int32)">
            <summary>
                Gets an <see cref="T:Umbraco.Cms.Core.Models.IContent" /> object by Id
            </summary>
            <param name="id">Id of the Content to retrieve</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IContent" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.GetByIds(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Gets an <see cref="T:Umbraco.Cms.Core.Models.IContent" /> object by Id
            </summary>
            <param name="ids">Ids of the Content to retrieve</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IContent" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.GetById(System.Guid)">
            <summary>
                Gets an <see cref="T:Umbraco.Cms.Core.Models.IContent" /> object by its 'UniqueId'
            </summary>
            <param name="key">Guid key of the Content to retrieve</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IContent" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.GetContentScheduleByContentId(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.PersistContentSchedule(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Models.ContentScheduleCollection)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.Umbraco#Cms#Core#Services#IContentServiceBase{Umbraco#Cms#Core#Models#IContent}#Save(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IContent},System.Int32)">
            <summary>
            </summary>
            <param name="contents"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.GetByIds(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
                Gets <see cref="T:Umbraco.Cms.Core.Models.IContent" /> objects by Ids
            </summary>
            <param name="ids">Ids of the Content to retrieve</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IContent" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.GetPagedOfType(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IContent},Umbraco.Cms.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.GetPagedOfTypes(System.Int32[],System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IContent},Umbraco.Cms.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.GetByLevel(System.Int32)">
            <summary>
                Gets a collection of <see cref="T:Umbraco.Cms.Core.Models.IContent" /> objects by Level
            </summary>
            <param name="level">The level to retrieve Content from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IContent" /> objects</returns>
            <remarks>Contrary to most methods, this method filters out trashed content items.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.GetVersion(System.Int32)">
            <summary>
                Gets a specific version of an <see cref="T:Umbraco.Cms.Core.Models.IContent" /> item.
            </summary>
            <param name="versionId">Id of the version to retrieve</param>
            <returns>An <see cref="T:Umbraco.Cms.Core.Models.IContent" /> item</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.GetVersions(System.Int32)">
            <summary>
                Gets a collection of an <see cref="T:Umbraco.Cms.Core.Models.IContent" /> objects versions by Id
            </summary>
            <param name="id"></param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IContent" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.GetVersionsSlim(System.Int32,System.Int32,System.Int32)">
            <summary>
                Gets a collection of an <see cref="T:Umbraco.Cms.Core.Models.IContent" /> objects versions by Id
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IContent" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.GetVersionIds(System.Int32,System.Int32)">
            <summary>
                Gets a list of all version Ids for the given content item ordered so latest is first
            </summary>
            <param name="id"></param>
            <param name="maxRows">The maximum number of rows to return</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.GetAncestors(System.Int32)">
            <summary>
                Gets a collection of <see cref="T:Umbraco.Cms.Core.Models.IContent" /> objects, which are ancestors of the current content.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.IContent" /> to retrieve ancestors for</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IContent" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.GetAncestors(Umbraco.Cms.Core.Models.IContent)">
            <summary>
                Gets a collection of <see cref="T:Umbraco.Cms.Core.Models.IContent" /> objects, which are ancestors of the current content.
            </summary>
            <param name="content"><see cref="T:Umbraco.Cms.Core.Models.IContent" /> to retrieve ancestors for</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IContent" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.GetPublishedChildren(System.Int32)">
            <summary>
                Gets a collection of published <see cref="T:Umbraco.Cms.Core.Models.IContent" /> objects by Parent Id
            </summary>
            <param name="id">Id of the Parent to retrieve Children from</param>
            <returns>An Enumerable list of published <see cref="T:Umbraco.Cms.Core.Models.IContent" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.GetPagedChildren(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IContent},Umbraco.Cms.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.GetPagedDescendants(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IContent},Umbraco.Cms.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.GetParent(System.Int32)">
            <summary>
                Gets the parent of the current content as an <see cref="T:Umbraco.Cms.Core.Models.IContent" /> item.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.IContent" /> to retrieve the parent from</param>
            <returns>Parent <see cref="T:Umbraco.Cms.Core.Models.IContent" /> object</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.GetParent(Umbraco.Cms.Core.Models.IContent)">
            <summary>
                Gets the parent of the current content as an <see cref="T:Umbraco.Cms.Core.Models.IContent" /> item.
            </summary>
            <param name="content"><see cref="T:Umbraco.Cms.Core.Models.IContent" /> to retrieve the parent from</param>
            <returns>Parent <see cref="T:Umbraco.Cms.Core.Models.IContent" /> object</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.GetRootContent">
            <summary>
                Gets a collection of <see cref="T:Umbraco.Cms.Core.Models.IContent" /> objects, which reside at the first level / root
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IContent" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.GetAllPublished">
            <summary>
                Gets all published content items
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.GetContentForExpiration(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.GetContentForRelease(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.GetPagedContentInRecycleBin(System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IContent},Umbraco.Cms.Core.Services.Ordering)">
            <summary>
                Gets a collection of an <see cref="T:Umbraco.Cms.Core.Models.IContent" /> objects, which resides in the Recycle Bin
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IContent" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.HasChildren(System.Int32)">
            <summary>
                Checks whether an <see cref="T:Umbraco.Cms.Core.Models.IContent" /> item has any children
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.IContent" /></param>
            <returns>True if the content has any children otherwise False</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.IsPathPublishable(Umbraco.Cms.Core.Models.IContent)">
            <summary>
                Checks if the passed in <see cref="T:Umbraco.Cms.Core.Models.IContent" /> can be published based on the ancestors publish state.
            </summary>
            <param name="content"><see cref="T:Umbraco.Cms.Core.Models.IContent" /> to check if ancestors are published</param>
            <returns>True if the Content can be published, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.Save(Umbraco.Cms.Core.Models.IContent,System.Nullable{System.Int32},Umbraco.Cms.Core.Models.ContentScheduleCollection)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.Save(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IContent},System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.Publish(Umbraco.Cms.Core.Models.IContent,System.String[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.Unpublish(Umbraco.Cms.Core.Models.IContent,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.CommitDocumentChanges(Umbraco.Cms.Core.Models.IContent,System.Int32)">
            <summary>
                Publishes/unpublishes any pending publishing changes made to the document.
            </summary>
            <remarks>
                <para>
                    This MUST NOT be called from within this service, this used to be a public API and must only be used outside of
                    this service.
                    Internally in this service, calls must be made to CommitDocumentChangesInternal
                </para>
                <para>This is the underlying logic for both publishing and unpublishing any document</para>
                <para>
                    Pending publishing/unpublishing changes on a document are made with calls to
                    <see cref="M:Umbraco.Extensions.ContentRepositoryExtensions.PublishCulture(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Models.CultureImpact,System.DateTime,Umbraco.Cms.Core.PropertyEditors.PropertyEditorCollection)" /> and
                    <see cref="M:Umbraco.Extensions.ContentRepositoryExtensions.UnpublishCulture(Umbraco.Cms.Core.Models.IContent,System.String)" />.
                </para>
                <para>
                    When publishing or unpublishing a single culture, or all cultures, use <see cref="!:SaveAndPublish" />
                    and <see cref="M:Umbraco.Cms.Core.Services.ContentService.Unpublish(Umbraco.Cms.Core.Models.IContent,System.String,System.Int32)" />. But if the flexibility to both publish and unpublish in a single operation is
                    required
                    then this method needs to be used in combination with <see cref="M:Umbraco.Extensions.ContentRepositoryExtensions.PublishCulture(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Models.CultureImpact,System.DateTime,Umbraco.Cms.Core.PropertyEditors.PropertyEditorCollection)" />
                    and <see cref="M:Umbraco.Extensions.ContentRepositoryExtensions.UnpublishCulture(Umbraco.Cms.Core.Models.IContent,System.String)" />
                    on the content itself - this prepares the content, but does not commit anything - and then, invoke
                    <see cref="M:Umbraco.Cms.Core.Services.ContentService.CommitDocumentChanges(Umbraco.Cms.Core.Models.IContent,System.Int32)" /> to actually commit the changes to the database.
                </para>
                <para>The document is *always* saved, even when publishing fails.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.CommitDocumentChangesInternal(Umbraco.Cms.Core.Scoping.ICoreScope,Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Events.EventMessages,System.Collections.Generic.IReadOnlyCollection{Umbraco.Cms.Core.Models.ILanguage},System.Collections.Generic.IDictionary{System.String,System.Object},System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Handles a lot of business logic cases for how the document should be persisted
            </summary>
            <param name="scope"></param>
            <param name="content"></param>
            <param name="allLangs"></param>
            <param name="notificationState"></param>
            <param name="userId"></param>
            <param name="branchOne"></param>
            <param name="branchRoot"></param>
            <param name="eventMessages"></param>
            <returns></returns>
            <remarks>
                <para>
                    Business logic cases such: as unpublishing a mandatory culture, or unpublishing the last culture, checking for
                    pending scheduled publishing, etc... is dealt with in this method.
                    There is quite a lot of cases to take into account along with logic that needs to deal with scheduled
                    saving/publishing, branch saving/publishing, etc...
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.PerformScheduledPublish(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.PublishBranch(Umbraco.Cms.Core.Models.IContent,System.Boolean,System.String[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.PublishBranch(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Models.PublishBranchFilter,System.String[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.Delete(Umbraco.Cms.Core.Models.IContent,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.DeleteVersions(System.Int32,System.DateTime,System.Int32)">
            <summary>
                Permanently deletes versions from an <see cref="T:Umbraco.Cms.Core.Models.IContent" /> object prior to a specific date.
                This method will never delete the latest version of a content item.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.IContent" /> object to delete versions from</param>
            <param name="versionDate">Latest version date</param>
            <param name="userId">Optional Id of the User deleting versions of a Content object</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.DeleteVersion(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
                Permanently deletes specific version(s) from an <see cref="T:Umbraco.Cms.Core.Models.IContent" /> object.
                This method will never delete the latest version of a content item.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.IContent" /> object to delete a version from</param>
            <param name="versionId">Id of the version to delete</param>
            <param name="deletePriorVersions">Boolean indicating whether to delete versions prior to the versionId</param>
            <param name="userId">Optional Id of the User deleting versions of a Content object</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.MoveToRecycleBin(Umbraco.Cms.Core.Models.IContent,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.Move(Umbraco.Cms.Core.Models.IContent,System.Int32,System.Int32)">
            <summary>
                Moves an <see cref="T:Umbraco.Cms.Core.Models.IContent" /> object to a new location by changing its parent id.
            </summary>
            <remarks>
                If the <see cref="T:Umbraco.Cms.Core.Models.IContent" /> object is already published it will be
                published after being moved to its new location. Otherwise it'll just
                be saved with a new parent id.
            </remarks>
            <param name="content">The <see cref="T:Umbraco.Cms.Core.Models.IContent" /> to move</param>
            <param name="parentId">Id of the Content's new Parent</param>
            <param name="userId">Optional Id of the User moving the Content</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.EmptyRecycleBin(System.Int32)">
            <summary>
                Empties the Recycle Bin by deleting all <see cref="T:Umbraco.Cms.Core.Models.IContent" /> that resides in the bin
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.Copy(Umbraco.Cms.Core.Models.IContent,System.Int32,System.Boolean,System.Int32)">
            <summary>
                Copies an <see cref="T:Umbraco.Cms.Core.Models.IContent" /> object by creating a new Content object of the same type and copies all data from
                the current
                to the new copy which is returned. Recursively copies all children.
            </summary>
            <param name="content">The <see cref="T:Umbraco.Cms.Core.Models.IContent" /> to copy</param>
            <param name="parentId">Id of the Content's new Parent</param>
            <param name="relateToOriginal">Boolean indicating whether the copy should be related to the original</param>
            <param name="userId">Optional Id of the User copying the Content</param>
            <returns>The newly created <see cref="T:Umbraco.Cms.Core.Models.IContent" /> object</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.Copy(Umbraco.Cms.Core.Models.IContent,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
                Copies an <see cref="T:Umbraco.Cms.Core.Models.IContent" /> object by creating a new Content object of the same type and copies all data from
                the current
                to the new copy which is returned.
            </summary>
            <param name="content">The <see cref="T:Umbraco.Cms.Core.Models.IContent" /> to copy</param>
            <param name="parentId">Id of the Content's new Parent</param>
            <param name="relateToOriginal">Boolean indicating whether the copy should be related to the original</param>
            <param name="recursive">A value indicating whether to recursively copy children.</param>
            <param name="userId">Optional Id of the User copying the Content</param>
            <returns>The newly created <see cref="T:Umbraco.Cms.Core.Models.IContent" /> object</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.SendToPublication(Umbraco.Cms.Core.Models.IContent,System.Int32)">
            <summary>
                Sends an <see cref="T:Umbraco.Cms.Core.Models.IContent" /> to Publication, which executes handlers and events for the 'Send to Publication'
                action.
            </summary>
            <param name="content">The <see cref="T:Umbraco.Cms.Core.Models.IContent" /> to send to publication</param>
            <param name="userId">Optional Id of the User issuing the send to publication</param>
            <returns>True if sending publication was successful otherwise false</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.Sort(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IContent},System.Int32)">
            <summary>
                Sorts a collection of <see cref="T:Umbraco.Cms.Core.Models.IContent" /> objects by updating the SortOrder according
                to the ordering of items in the passed in <paramref name="items" />.
            </summary>
            <remarks>
                Using this method will ensure that the Published-state is maintained upon sorting
                so the cache is updated accordingly - as needed.
            </remarks>
            <param name="items"></param>
            <param name="userId"></param>
            <returns>Result indicating what action was taken when handling the command.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.Sort(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
                Sorts a collection of <see cref="T:Umbraco.Cms.Core.Models.IContent" /> objects by updating the SortOrder according
                to the ordering of items identified by the <paramref name="ids" />.
            </summary>
            <remarks>
                Using this method will ensure that the Published-state is maintained upon sorting
                so the cache is updated accordingly - as needed.
            </remarks>
            <param name="ids"></param>
            <param name="userId"></param>
            <returns>Result indicating what action was taken when handling the command.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.GetPublishedDescendants(Umbraco.Cms.Core.Models.IContent)">
            <summary>
                Gets a collection of <see cref="T:Umbraco.Cms.Core.Models.IContent" /> descendants by the first Parent.
            </summary>
            <param name="content"><see cref="T:Umbraco.Cms.Core.Models.IContent" /> item to retrieve Descendants from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IContent" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.StrategyCanPublish(Umbraco.Cms.Core.Scoping.ICoreScope,Umbraco.Cms.Core.Models.IContent,System.Boolean,System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyCollection{System.String},Umbraco.Cms.Core.Events.EventMessages,System.Collections.Generic.IReadOnlyCollection{Umbraco.Cms.Core.Models.ILanguage},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                Ensures that a document can be published
            </summary>
            <param name="scope"></param>
            <param name="content"></param>
            <param name="checkPath"></param>
            <param name="culturesUnpublishing"></param>
            <param name="evtMsgs"></param>
            <param name="culturesPublishing"></param>
            <param name="allLangs"></param>
            <param name="notificationState"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.StrategyPublish(Umbraco.Cms.Core.Models.IContent,System.Collections.Generic.IReadOnlyCollection{System.String},System.Collections.Generic.IReadOnlyCollection{System.String},Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
                Publishes a document
            </summary>
            <param name="content"></param>
            <param name="culturesUnpublishing"></param>
            <param name="evtMsgs"></param>
            <param name="culturesPublishing"></param>
            <returns></returns>
            <remarks>
                It is assumed that all publishing checks have passed before calling this method like
                <see cref="M:Umbraco.Cms.Core.Services.ContentService.StrategyCanPublish(Umbraco.Cms.Core.Scoping.ICoreScope,Umbraco.Cms.Core.Models.IContent,System.Boolean,System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyCollection{System.String},Umbraco.Cms.Core.Events.EventMessages,System.Collections.Generic.IReadOnlyCollection{Umbraco.Cms.Core.Models.ILanguage},System.Collections.Generic.IDictionary{System.String,System.Object})" />
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.StrategyCanUnpublish(Umbraco.Cms.Core.Scoping.ICoreScope,Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Events.EventMessages,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                Ensures that a document can be unpublished
            </summary>
            <param name="scope"></param>
            <param name="content"></param>
            <param name="evtMsgs"></param>
            <param name="notificationState"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.StrategyUnpublish(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
                Unpublishes a document
            </summary>
            <param name="content"></param>
            <param name="evtMsgs"></param>
            <returns></returns>
            <remarks>
                It is assumed that all unpublishing checks have passed before calling this method like
                <see cref="M:Umbraco.Cms.Core.Services.ContentService.StrategyCanUnpublish(Umbraco.Cms.Core.Scoping.ICoreScope,Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Events.EventMessages,System.Collections.Generic.IDictionary{System.String,System.Object})" />
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.DeleteOfTypes(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
                Deletes all content of specified type. All children of deleted content is moved to Recycle Bin.
            </summary>
            <remarks>
                <para>This needs extra care and attention as its potentially a dangerous and extensive operation.</para>
                <para>
                    Deletes content items of the specified type, and only that type. Does *not* handle content types
                    inheritance and compositions, which need to be managed outside of this method.
                </para>
            </remarks>
            <param name="contentTypeIds">Id of the <see cref="T:Umbraco.Cms.Core.Models.IContentType" /></param>
            <param name="userId">Optional Id of the user issuing the delete operation</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentService.DeleteOfType(System.Int32,System.Int32)">
            <summary>
                Deletes all content items of specified type. All children of deleted content item is moved to Recycle Bin.
            </summary>
            <remarks>This needs extra care and attention as its potentially a dangerous and extensive operation</remarks>
            <param name="contentTypeId">Id of the <see cref="T:Umbraco.Cms.Core.Models.IContentType" /></param>
            <param name="userId">Optional id of the user deleting the media</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentTypeEditing.ContentTypeEditingService.ValidateCreateParentElementStatusAsync(Umbraco.Cms.Core.Models.ContentTypeEditing.ContentTypeEditingModelBase{Umbraco.Cms.Core.Models.ContentTypeEditing.ContentTypePropertyTypeModel,Umbraco.Cms.Core.Models.ContentTypeEditing.ContentTypePropertyContainerModel})">
            <summary>
            Should be called after it has been established that the composition list is in a valid state and the (composition) parent exists
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.ContentTypeService">
            <summary>
                Represents the ContentType Service, which is an easy access to operations involving <see cref="T:Umbraco.Cms.Core.Models.IContentType" />
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentTypeService.GetAllPropertyTypeAliases">
            <summary>
                Gets all property type aliases across content, media and member types.
            </summary>
            <returns>All property type aliases.</returns>
            <remarks>Beware! Works across content, media and member types.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentTypeService.GetAllContentTypeAliases(System.Guid[])">
            <summary>
                Gets all content type aliases across content, media and member types.
            </summary>
            <param name="guids">Optional object types guid to restrict to content, and/or media, and/or member types.</param>
            <returns>All content type aliases.</returns>
            <remarks>Beware! Works across content, media and member types.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentTypeService.GetAllContentTypeIds(System.String[])">
            <summary>
                Gets all content type id for aliases across content, media and member types.
            </summary>
            <param name="aliases">Aliases to look for.</param>
            <returns>All content type ids.</returns>
            <remarks>Beware! Works across content, media and member types.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentTypeServiceBase`2.GetContentTypeRefreshedNotification(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Services.Changes.ContentTypeChange{`1}},Umbraco.Cms.Core.Events.EventMessages)">
            The purpose of this notification being published within the transaction is so that listeners can perform database
            operations from within the same transaction and guarantee data consistency so that if anything goes wrong
            the entire transaction can be rolled back. This is used by Nucache.
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentTypeServiceBase`2.GetAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentTypeServiceBase`2.HasContainerInPath(System.String)">
            <summary>
            Given the path of a content item, this will return true if the content item exists underneath a list view content item
            </summary>
            <param name="contentPath"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentTypeServiceBase`2.GetAllAllowedAsRootAsync(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentTypeServiceBase`2.GetAllowedChildrenAsync(System.Guid,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentTypeServiceBase`2.GetAllowedChildrenAsync(System.Guid,System.Nullable{System.Guid},System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ContentVersionService.PerformContentVersionCleanup(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.CultureImpactFactory.Create(System.String,System.Boolean,Umbraco.Cms.Core.Models.IContent)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.CultureImpactFactory.ImpactAll">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.CultureImpactFactory.ImpactInvariant">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.CultureImpactFactory.ImpactExplicit(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.CultureImpactFactory.GetCultureForInvariantErrors(Umbraco.Cms.Core.Models.IContent,System.String[],System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.CultureImpactFactory.TryCreate(System.String,System.Boolean,Umbraco.Cms.Core.Models.ContentVariation,System.Boolean,System.Boolean,Umbraco.Cms.Core.Models.CultureImpact@)">
            <summary>
            Tries to create an impact instance representing the impact of a culture set,
            in the context of a content item variation.
            </summary>
            <param name="culture">The culture code.</param>
            <param name="isDefault">A value indicating whether the culture is the default culture.</param>
            <param name="variation">A content variation.</param>
            <param name="throwOnFail">A value indicating whether to throw if the impact cannot be created.</param>
            <param name="editInvariantFromNonDefault">A value indicating if publishing invariant properties from non-default language.</param>
            <param name="impact">The impact if it could be created, otherwise null.</param>
            <returns>A value indicating whether the impact could be created.</returns>
            <remarks>
            <para>Validates that the culture is compatible with the variation.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DataTypeUsageService.HasSavedValuesAsync(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DictionaryItemService.GetAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DictionaryItemService.GetAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DictionaryItemService.GetManyAsync(System.Guid[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DictionaryItemService.GetManyAsync(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DictionaryItemService.GetPagedAsync(System.Nullable{System.Guid},System.Int32,System.Int32)">
            <summary>
            Gets the dictionary items in a paged manner.
            Currently implements the paging in memory on the itenkey property because the underlying repository does not support paging yet
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DictionaryItemService.GetChildrenAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DictionaryItemService.GetDescendantsAsync(System.Nullable{System.Guid},System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DictionaryItemService.GetAtRootAsync">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DictionaryItemService.ExistsAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DictionaryItemService.CreateAsync(Umbraco.Cms.Core.Models.IDictionaryItem,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DictionaryItemService.UpdateAsync(Umbraco.Cms.Core.Models.IDictionaryItem,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DictionaryItemService.DeleteAsync(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DictionaryItemService.MoveAsync(Umbraco.Cms.Core.Models.IDictionaryItem,System.Nullable{System.Guid},System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DictionaryPermissionService.AuthorizeCultureAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.ISet{System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.DocumentUrlService">
            <summary>
            Implements <see href="IDocumentUrlService" /> operations for handling document URLs.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.DocumentUrlService.PublishedDocumentUrlSegments">
            <summary>
            Model used to cache a single published document along with all it's URL segments.
            </summary>
            <remarks>Internal for the purpose of unit and benchmark testing.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.DocumentUrlService.PublishedDocumentUrlSegments.DocumentKey">
            <summary>
            Gets or sets the document key.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.DocumentUrlService.PublishedDocumentUrlSegments.LanguageId">
            <summary>
            Gets or sets the language Id.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.DocumentUrlService.PublishedDocumentUrlSegments.UrlSegments">
            <summary>
            Gets or sets the collection of <see cref="T:Umbraco.Cms.Core.Services.DocumentUrlService.PublishedDocumentUrlSegments.UrlSegment"/> for the document, language and state.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.DocumentUrlService.PublishedDocumentUrlSegments.IsDraft">
            <summary>
            Gets or sets a value indicating whether the document is a draft version or not.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.DocumentUrlService.PublishedDocumentUrlSegments.UrlSegment">
            <summary>
            Model used to represent a URL segment for a document in the cache.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DocumentUrlService.PublishedDocumentUrlSegments.UrlSegment.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Services.DocumentUrlService.PublishedDocumentUrlSegments.UrlSegment"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.DocumentUrlService.PublishedDocumentUrlSegments.UrlSegment.Segment">
            <summary>
            Gets the URL segment string.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.DocumentUrlService.PublishedDocumentUrlSegments.UrlSegment.IsPrimary">
            <summary>
            Gets a value indicating whether this URL segment is the primary one for the document, language and state.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DocumentUrlService.#ctor(Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Services.DocumentUrlService},Umbraco.Cms.Core.Persistence.Repositories.IDocumentUrlRepository,Umbraco.Cms.Core.Persistence.Repositories.IDocumentRepository,Umbraco.Cms.Core.Scoping.ICoreScopeProvider,Microsoft.Extensions.Options.IOptions{Umbraco.Cms.Core.Configuration.Models.GlobalSettings},Umbraco.Cms.Core.Strings.UrlSegmentProviderCollection,Umbraco.Cms.Core.Services.IContentService,Umbraco.Cms.Core.Strings.IShortStringHelper,Umbraco.Cms.Core.Services.ILanguageService,Umbraco.Cms.Core.Services.IKeyValueService,Umbraco.Cms.Core.Services.IIdKeyMap,Umbraco.Cms.Core.Services.Navigation.IDocumentNavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishStatusQueryService,Umbraco.Cms.Core.PublishedCache.IDomainCacheService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Services.DocumentUrlService"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DocumentUrlService.InitAsync(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DocumentUrlService.RebuildAllUrlsAsync">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DocumentUrlService.ConvertToCacheModel(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.PublishedDocumentUrlSegment})">
            <summary>
            Converts a collection of <see cref="T:Umbraco.Cms.Core.Models.PublishedDocumentUrlSegment"/> to a collection of <see cref="T:Umbraco.Cms.Core.Services.DocumentUrlService.PublishedDocumentUrlSegments"/> for caching purposes.
            </summary>
            <param name="publishedDocumentUrlSegments">The collection of <see cref="T:Umbraco.Cms.Core.Models.PublishedDocumentUrlSegment"/> retrieved from the database on startup.</param>
            <returns>The collection of cache models.</returns>
            <remarks>Internal for the purpose of unit and benchmark testing.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DocumentUrlService.GetUrlSegment(System.Guid,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DocumentUrlService.GetUrlSegments(System.Guid,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DocumentUrlService.CreateOrUpdateUrlSegmentsAsync(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DocumentUrlService.CreateOrUpdateUrlSegmentsWithDescendantsAsync(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DocumentUrlService.CreateOrUpdateUrlSegmentsAsync(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IContent})">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DocumentUrlService.DeleteUrlsFromCacheAsync(System.Collections.Generic.IEnumerable{System.Guid})">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DocumentUrlService.GetDocumentKeyByRoute(System.String,System.String,System.Nullable{System.Int32},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DocumentUrlService.GetChildKeys(System.Guid)">
            <summary>
            Gets the children based on the latest published version of the content. (No aware of things in this scope).
            </summary>
            <param name="documentKey">The key of the document to get children from.</param>
            <returns>The keys of all the children of the document.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DocumentUrlService.GetLegacyRouteFormat(System.Guid,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DocumentUrlService.HasAny">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DocumentUrlService.ListUrlsAsync(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DomainService.GetAssignedDomainsAsync(System.Guid,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DomainService.GetAllAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DomainService.UpdateDomainsAsync(System.Guid,Umbraco.Cms.Core.Models.ContentEditing.DomainsUpdateModel)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DomainService.HasInvalidIsoCode(Umbraco.Cms.Core.Models.ContentEditing.DomainsUpdateModel,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Tests if any of the ISO codes in the update model are invalid
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DomainService.GetDomainNameConflicts(System.Int32,Umbraco.Cms.Core.Models.ContentEditing.DomainsUpdateModel,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IDomain})">
            <summary>
            Returns any current domain assignments in conflict with the updateModel domain names
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DomainService.CalculateNewAssignedDomains(System.Int32,Umbraco.Cms.Core.Models.ContentEditing.DomainsUpdateModel,Umbraco.Cms.Core.Models.IDomain[],System.Collections.Generic.IDictionary{System.String,System.Int32})">
            <summary>
            Calculates the new domain assignment incl. wildcard domains
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DomainService.DeleteAll(Umbraco.Cms.Core.Models.IDomain[],Umbraco.Cms.Core.Scoping.ICoreScope,Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Handles deletion of one or more domains incl. notifications
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.DomainService.SaveAll(Umbraco.Cms.Core.Models.IDomain[],Umbraco.Cms.Core.Scoping.ICoreScope,Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
            Handles saving of one or more domains incl. notifications
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.Get(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.Get(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.Get(System.Int32,Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.Get(System.Guid,Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.Get``1(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.Get``1(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.Exists(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.Exists(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.Exists(System.Guid,Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.Exists(System.Int32,Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetAll``1">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetAll``1(System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetAll(Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetAll(Umbraco.Cms.Core.Models.UmbracoObjectTypes,System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetAll(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetAll(System.Guid,System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetAll``1(System.Guid[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetAll(Umbraco.Cms.Core.Models.UmbracoObjectTypes,System.Guid[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetAll(System.Guid,System.Guid[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetRootEntities(Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetParent(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetParent(System.Int32,Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetChildren(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetChildren(System.Int32,Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetDescendants(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetDescendants(System.Int32,Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetPagedChildren(System.Int32,Umbraco.Cms.Core.Models.UmbracoObjectTypes,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.Entities.IUmbracoEntity},Umbraco.Cms.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetPagedTrashedChildren(System.Int32,Umbraco.Cms.Core.Models.UmbracoObjectTypes,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.Entities.IUmbracoEntity},Umbraco.Cms.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetPagedDescendants(System.Int32,Umbraco.Cms.Core.Models.UmbracoObjectTypes,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.Entities.IUmbracoEntity},Umbraco.Cms.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetPagedDescendants(System.Collections.Generic.IEnumerable{System.Int32},Umbraco.Cms.Core.Models.UmbracoObjectTypes,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.Entities.IUmbracoEntity},Umbraco.Cms.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetPagedDescendants(Umbraco.Cms.Core.Models.UmbracoObjectTypes,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.Entities.IUmbracoEntity},Umbraco.Cms.Core.Services.Ordering,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetObjectType(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetObjectType(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetObjectType(Umbraco.Cms.Core.Models.Entities.IUmbracoEntity)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetEntityType(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetId(System.Guid,Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetId(Umbraco.Cms.Core.Udi)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetKey(System.Int32,Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetAllPaths(Umbraco.Cms.Core.Models.UmbracoObjectTypes,System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetAllPaths(Umbraco.Cms.Core.Models.UmbracoObjectTypes,System.Guid[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.ReserveId(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityService.GetPathKeys(Umbraco.Cms.Core.Models.Entities.ITreeEntity,System.Boolean)">
            <inheritdoc/>>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityTypeContainerService`2.GetAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityTypeContainerService`2.GetAsync(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityTypeContainerService`2.GetAllAsync">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityTypeContainerService`2.GetParentAsync(Umbraco.Cms.Core.Models.EntityContainer)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityTypeContainerService`2.GetParentAsync(`0)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityTypeContainerService`2.CreateAsync(System.Nullable{System.Guid},System.String,System.Nullable{System.Guid},System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityTypeContainerService`2.UpdateAsync(System.Guid,System.String,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityTypeContainerService`2.DeleteAsync(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Services.EntityXmlSerializer">
            <summary>
                Serializes entities to XML
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityXmlSerializer.Serialize(Umbraco.Cms.Core.Models.IContent,System.Boolean,System.Boolean)">
            <summary>
                Exports an IContent item as an XElement.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityXmlSerializer.Serialize(Umbraco.Cms.Core.Models.IMedia,System.Boolean,System.Action{Umbraco.Cms.Core.Models.IMedia,System.Xml.Linq.XElement})">
            <summary>
                Exports an IMedia item as an XElement.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityXmlSerializer.Serialize(Umbraco.Cms.Core.Models.IMember)">
            <summary>
                Exports an IMember item as an XElement.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityXmlSerializer.Serialize(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IDataType})">
            <summary>
                Exports a list of Data Types
            </summary>
            <param name="dataTypeDefinitions">List of data types to export</param>
            <returns><see cref="T:System.Xml.Linq.XElement" /> containing the xml representation of the IDataTypeDefinition objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityXmlSerializer.Serialize(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IDictionaryItem},System.Boolean)">
            <summary>
                Exports a list of <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> items to xml as an <see cref="T:System.Xml.Linq.XElement" />
            </summary>
            <param name="dictionaryItem">List of dictionary items to export</param>
            <param name="includeChildren">Optional boolean indicating whether or not to include children</param>
            <returns><see cref="T:System.Xml.Linq.XElement" /> containing the xml representation of the IDictionaryItem objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityXmlSerializer.Serialize(Umbraco.Cms.Core.Models.IDictionaryItem,System.Boolean)">
            <summary>
                Exports a single <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> item to xml as an <see cref="T:System.Xml.Linq.XElement" />
            </summary>
            <param name="dictionaryItem">Dictionary Item to export</param>
            <param name="includeChildren">Optional boolean indicating whether or not to include children</param>
            <returns><see cref="T:System.Xml.Linq.XElement" /> containing the xml representation of the IDictionaryItem object</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityXmlSerializer.Serialize(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.ILanguage})">
            <summary>
                Exports a list of <see cref="T:Umbraco.Cms.Core.Models.ILanguage" /> items to xml as an <see cref="T:System.Xml.Linq.XElement" />
            </summary>
            <param name="languages">List of Languages to export</param>
            <returns><see cref="T:System.Xml.Linq.XElement" /> containing the xml representation of the ILanguage objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.EntityXmlSerializer.Serialize(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.ITemplate})">
            <summary>
                Exports a list of <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> items to xml as an <see cref="T:System.Xml.Linq.XElement" />
            </summary>
            <param name="templates"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ExternalLoginService.GetExternalLogins(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ExternalLoginService.GetExternalLoginTokens(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ExternalLoginService.Save(System.Guid,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Security.IExternalLogin})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ExternalLoginService.Save(System.Guid,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Security.IExternalLoginToken})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ExternalLoginService.DeleteUserLogins(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ExternalLoginService.PurgeLoginsForRemovedProviders(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Services.FileService">
            <summary>
                Represents the File Service, which is an easy access to operations involving <see cref="T:Umbraco.Cms.Core.Models.IFile" /> objects like
                Scripts, Stylesheets and Templates
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.GetStylesheets(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.GetStylesheet(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.SaveStylesheet(Umbraco.Cms.Core.Models.IStylesheet,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.DeleteStylesheet(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.CreateStyleSheetFolder(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.DeleteStyleSheetFolder(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.GetStylesheetFileContentStream(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.SetStylesheetFileContent(System.String,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.GetStylesheetFileSize(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.GetScripts(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.GetScript(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.SaveScript(Umbraco.Cms.Core.Models.IScript,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.DeleteScript(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.CreateScriptFolder(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.DeleteScriptFolder(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.GetScriptFileContentStream(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.SetScriptFileContent(System.String,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.GetScriptFileSize(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.CreateTemplateForContentType(System.String,System.String,System.Int32)">
            <summary>
                Creates a template for a content type
            </summary>
            <param name="contentTypeAlias"></param>
            <param name="contentTypeName"></param>
            <param name="userId"></param>
            <returns>
                The template created
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.CreateTemplateWithIdentity(System.String,System.String,System.String,Umbraco.Cms.Core.Models.ITemplate,System.Int32)">
            <summary>
                Create a new template, setting the content if a view exists in the filesystem
            </summary>
            <param name="name"></param>
            <param name="alias"></param>
            <param name="content"></param>
            <param name="masterTemplate"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.GetTemplates(System.String[])">
            <summary>
                Gets a list of all <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.GetTemplates(System.Int32)">
            <summary>
                Gets a list of all <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.GetTemplate(System.String)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> object by its alias.
            </summary>
            <param name="alias">The alias of the template.</param>
            <returns>The <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> object matching the alias, or null.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.GetTemplate(System.Int32)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> object by its identifier.
            </summary>
            <param name="id">The identifier of the template.</param>
            <returns>The <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> object matching the identifier, or null.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.GetTemplate(System.Guid)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> object by its guid identifier.
            </summary>
            <param name="id">The guid identifier of the template.</param>
            <returns>The <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> object matching the identifier, or null.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.GetTemplateDescendants(System.Int32)">
            <summary>
                Gets the template descendants
            </summary>
            <param name="masterTemplateId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.SaveTemplate(Umbraco.Cms.Core.Models.ITemplate,System.Int32)">
            <summary>
                Saves a <see cref="T:Umbraco.Cms.Core.Models.Template" />
            </summary>
            <param name="template"><see cref="T:Umbraco.Cms.Core.Models.Template" /> to save</param>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.SaveTemplate(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.ITemplate},System.Int32)">
            <summary>
                Saves a collection of <see cref="T:Umbraco.Cms.Core.Models.Template" /> objects
            </summary>
            <param name="templates">List of <see cref="T:Umbraco.Cms.Core.Models.Template" /> to save</param>
            <param name="userId">Optional id of the user</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.DeleteTemplate(System.String,System.Int32)">
            <summary>
                Deletes a template by its alias
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> to delete</param>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.GetTemplateFileContentStream(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.SetTemplateFileContent(System.String,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.GetTemplateFileSize(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.GetPartialViewFileContentStream(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.SetPartialViewFileContent(System.String,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileService.GetPartialViewFileSize(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileServiceBase`2.IsRootPath(System.String)">
            <summary>
            Checks if a path is considered a root path.
            </summary>
            <param name="path">The path to check.</param>
            <returns>True if the path is considered a root path.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileServiceBase`2.GetAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileServiceBase`2.GetAllAsync(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileServiceBase`2.GetContentStreamAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileServiceBase`2.SetContentStreamAsync(System.String,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.FileServiceBase`2.GetFileSizeAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Services.Filters.ContentTypeFilterCollection">
            <summary>
            Defines an ordered collection of <see cref="T:Umbraco.Cms.Core.Services.Filters.IContentTypeFilter"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Filters.ContentTypeFilterCollection.#ctor(System.Func{System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Services.Filters.IContentTypeFilter}})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Services.Filters.ContentTypeFilterCollection"/> class.
            </summary>
            <param name="items">The collection items.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.Filters.ContentTypeFilterCollectionBuilder">
            <summary>
            Builds an ordered collection of <see cref="T:Umbraco.Cms.Core.Services.Filters.IContentTypeFilter"/>.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.Filters.ContentTypeFilterCollectionBuilder.This">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.Filters.IContentTypeFilter">
            <summary>
            Defines methods for filtering content types after retrieval from the database.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Filters.IContentTypeFilter.FilterAllowedAtRootAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Filters the content types retrieved for being allowed at the root.
            </summary>
            <param name="contentTypes">Retrieved collection of content types.</param>
            <returns>Filtered collection of content types.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Filters.IContentTypeFilter.FilterAllowedChildrenAsync(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.ContentTypeSort},System.Guid)">
            <summary>
            Filters the content types retrieved for being allowed as children of a parent content type.
            </summary>
            <param name="contentTypes">Retrieved collection of content types.</param>
            <param name="parentKey">The parent content key.</param>
            <returns>Filtered collection of content types.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Filters.IContentTypeFilter.FilterAllowedChildrenAsync(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.ContentTypeSort},System.Guid,System.Nullable{System.Guid})">
            <summary>
            Filters the content types retrieved for being allowed as children of a parent content type.
            </summary>
            <param name="contentTypes">Retrieved collection of content types.</param>
            <param name="parentContentTypeKey">The parent content type key.</param>
            <param name="parentContentKey">The parent content key (provided to allow for custom filtering of the returned list of children based on the content context).</param>
            <returns>Filtered collection of content types.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IAuditService">
            <summary>
                Represents a service for handling audit.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IAuditService.GetPagedItemsByEntity(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Direction,Umbraco.Cms.Core.Models.AuditType[],Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IAuditItem})">
            <summary>
                Returns paged items in the audit trail for a given entity
            </summary>
            <param name="entityId"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="orderDirection">
                By default this will always be ordered descending (newest first)
            </param>
            <param name="auditTypeFilter">
                Since we currently do not have enum support with our expression parser, we cannot query on AuditType in the query
                or the custom filter
                so we need to do that here
            </param>
            <param name="customFilter">
                Optional filter to be applied
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IAuditService.GetPagedItemsByUser(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Direction,Umbraco.Cms.Core.Models.AuditType[],Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IAuditItem})">
            <summary>
                Returns paged items in the audit trail for a given user
            </summary>
            <param name="userId"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="orderDirection">
                By default this will always be ordered descending (newest first)
            </param>
            <param name="auditTypeFilter">
                Since we currently do not have enum support with our expression parser, we cannot query on AuditType in the query
                or the custom filter
                so we need to do that here
            </param>
            <param name="customFilter">
                Optional filter to be applied
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IAuditService.GetItemsByKeyAsync(System.Guid,Umbraco.Cms.Core.Models.UmbracoObjectTypes,System.Int32,System.Int32,Umbraco.Cms.Core.Direction,System.Nullable{System.DateTimeOffset},Umbraco.Cms.Core.Models.AuditType[])">
            <summary>
                Returns paged items in the audit trail for a given entity
            </summary>
            <param name="entityKey">The key of the entity</param>
            <param name="entityType">The entity type</param>
            <param name="skip">The amount of audit trail entries to skip</param>
            <param name="take">The amount of audit trail entries to take</param>
            <param name="orderDirection">
                By default this will always be ordered descending (newest first)
            </param>
            <param name="auditTypeFilter">
                Since we currently do not have enum support with our expression parser, we cannot query on AuditType in the query
                or the custom filter
                so we need to do that here
            </param>
            <param name="sinceDate">
                If populated, will only return entries after this time.
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IAuditService.GetPagedItemsByUserAsync(System.Guid,System.Int32,System.Int32,Umbraco.Cms.Core.Direction,Umbraco.Cms.Core.Models.AuditType[],System.Nullable{System.DateTime})">
            <summary>
                Returns paged items in the audit trail for a given user
            </summary>
            <param name="userKey"></param>
            <param name="skip"></param>
            <param name="take"></param>
            <param name="orderDirection">
                By default this will always be ordered descending (newest first)
            </param>
            <param name="auditTypeFilter">
                Since we currently do not have enum support with our expression parser, we cannot query on AuditType in the query
                or the custom filter
                so we need to do that here
            </param>
            <param name="sinceDate"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IAuditService.Write(System.Int32,System.String,System.String,System.DateTime,System.Int32,System.String,System.String,System.String)">
            <summary>
                Writes an audit entry for an audited event.
            </summary>
            <param name="performingUserId">The identifier of the user triggering the audited event.</param>
            <param name="perfomingDetails">Free-form details about the user triggering the audited event.</param>
            <param name="performingIp">The IP address or the request triggering the audited event.</param>
            <param name="eventDateUtc">The date and time of the audited event.</param>
            <param name="affectedUserId">The identifier of the user affected by the audited event.</param>
            <param name="affectedDetails">Free-form details about the entity affected by the audited event.</param>
            <param name="eventType">
                The type of the audited event - must contain only alphanumeric chars and hyphens with forward slashes separating
                categories.
                <example>
                    The eventType will generally be formatted like: {application}/{entity-type}/{category}/{sub-category}
                    Example: umbraco/user/sign-in/failed
                </example>
            </param>
            <param name="eventDetails">Free-form details about the audited event.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IBasicFileService`1.GetAsync(System.String)">
            <summary>
            Gets <see cref="!:TEntity"/> by path.
            </summary>
            <param name="path">The path to get <see cref="!:TEntity"/> from.</param>
            <returns><see cref="!:TEntity"/>, or null if not found</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IBasicFileService`1.GetAllAsync(System.String[])">
            <summary>
            Gets all <see cref="!:TEntity"/> by path, or all if no paths are specified.
            </summary>
            <param name="paths">Optional paths of <see cref="!:TEntity"/> to get.</param>
            <returns>IEnumerable of <see cref="!:TEntity"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IBasicFileService`1.GetContentStreamAsync(System.String)">
            <summary>
            Get the content of a file as a stream.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>A stream containing the contents of the file.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IBasicFileService`1.SetContentStreamAsync(System.String,System.IO.Stream)">
            <summary>
            Set the content of a file from a stream.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="content">The desired content of the file as a stream.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IBasicFileService`1.GetFileSizeAsync(System.String)">
             <summary>
            
             </summary>
             <param name="path"></param>
             <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ICacheInstructionService.IsColdBootRequired(System.Int32)">
            <summary>
                Checks to see if a cold boot is required, either because instructions exist and none have been synced or
                because the last recorded synced instruction can't be found in the database.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ICacheInstructionService.IsInstructionCountOverLimit(System.Int32,System.Int32,System.Int32@)">
            <summary>
                Checks to see if the number of pending instructions are over the configured limit.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ICacheInstructionService.GetMaxInstructionId">
            <summary>
                Gets the most recent cache instruction record Id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ICacheInstructionService.DeliverInstructions(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Sync.RefreshInstruction},System.String)">
            <summary>
                Creates a cache instruction record from a set of individual instructions and saves it.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ICacheInstructionService.DeliverInstructionsInBatches(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Sync.RefreshInstruction},System.String)">
            <summary>
                Creates one or more cache instruction records based on the configured batch size from a set of individual
                instructions and saves them.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ICacheInstructionService.ProcessInstructions(Umbraco.Cms.Core.Cache.CacheRefresherCollection,Umbraco.Cms.Core.Sync.ServerRole,System.Threading.CancellationToken,System.String,System.DateTime,System.Int32)">
            <summary>
                Processes and then prunes pending database cache instructions.
            </summary>
            <param name="cacheRefreshers">Cache refreshers.</param>
            <param name="serverRole">Server role.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <param name="localIdentity">Local identity of the executing AppDomain.</param>
            <param name="lastPruned">Date of last prune operation.</param>
            <param name="lastId">Id of the latest processed instruction</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IConsentService">
            <summary>
                A service for handling lawful data processing requirements
            </summary>
            <remarks>
                <para>
                    Consent can be given or revoked or changed via the <see cref="M:Umbraco.Cms.Core.Services.IConsentService.RegisterConsent(System.String,System.String,System.String,Umbraco.Cms.Core.Models.ConsentState,System.String)" /> method, which
                    creates a new <see cref="T:Umbraco.Cms.Core.Models.IConsent" /> entity to track the consent. Revoking a consent is performed by
                    registering a revoked consent.
                </para>
                <para>A consent can be revoked, by registering a revoked consent, but cannot be deleted.</para>
                <para>
                    Getter methods return the current state of a consent, i.e. the latest <see cref="T:Umbraco.Cms.Core.Models.IConsent" />
                    entity that was created.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IConsentService.RegisterConsent(System.String,System.String,System.String,Umbraco.Cms.Core.Models.ConsentState,System.String)">
            <summary>
                Registers consent.
            </summary>
            <param name="source">The source, i.e. whoever is consenting.</param>
            <param name="context"></param>
            <param name="action"></param>
            <param name="state">The state of the consent.</param>
            <param name="comment">Additional free text.</param>
            <returns>The corresponding consent entity.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IConsentService.LookupConsent(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Retrieves consents.
            </summary>
            <param name="source">The optional source.</param>
            <param name="context">The optional context.</param>
            <param name="action">The optional action.</param>
            <param name="sourceStartsWith">Determines whether <paramref name="source" /> is a start pattern.</param>
            <param name="contextStartsWith">Determines whether <paramref name="context" /> is a start pattern.</param>
            <param name="actionStartsWith">Determines whether <paramref name="action" /> is a start pattern.</param>
            <param name="includeHistory">Determines whether to include the history of consents.</param>
            <returns>Consents matching the parameters.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentEditingService.DeleteFromRecycleBinAsync(System.Guid,System.Guid)">
            <summary>
            Deletes a Content Item if it is in the recycle bin.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentEditingService.DeleteAsync(System.Guid,System.Guid)">
            <summary>
            Deletes a Content Item whether it is in the recycle bin or not.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IContentPermissionService">
            <summary>
                Manages permissions for content access.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentPermissionService.AuthorizeAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Guid,System.String)">
            <summary>
                Authorize that a user has access to a content item.
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to authorize.</param>
            <param name="contentKey">The identifier of the content item to check for access.</param>
            <param name="permissionToCheck">The permission to authorize.</param>
            <returns>A task resolving into a <see cref="T:Umbraco.Cms.Core.Services.AuthorizationStatus.ContentAuthorizationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentPermissionService.AuthorizeAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.ISet{System.String})">
            <summary>
                Authorize that a user has access to content items.
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to authorize.</param>
            <param name="contentKeys">The identifiers of the content items to check for access.</param>
            <param name="permissionsToCheck">The collection of permissions to authorize.</param>
            <returns>A task resolving into a <see cref="T:Umbraco.Cms.Core.Services.AuthorizationStatus.ContentAuthorizationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentPermissionService.AuthorizeDescendantsAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Guid,System.String)">
            <summary>
                Authorize that a user has access to the descendant items of a content item.
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to authorize.</param>
            <param name="parentKey">The identifier of the parent content item to check its descendants for access.</param>
            <param name="permissionToCheck">The permission to authorize.</param>
            <returns>A task resolving into a <see cref="T:Umbraco.Cms.Core.Services.AuthorizationStatus.ContentAuthorizationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentPermissionService.AuthorizeDescendantsAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Guid,System.Collections.Generic.ISet{System.String})">
            <summary>
                Authorize that a user has access to the descendant items of a content item.
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to authorize.</param>
            <param name="parentKey">The identifier of the parent content item to check its descendants for access.</param>
            <param name="permissionsToCheck">The collection of permissions to authorize.</param>
            <returns>A task resolving into a <see cref="T:Umbraco.Cms.Core.Services.AuthorizationStatus.ContentAuthorizationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentPermissionService.AuthorizeRootAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.String)">
            <summary>
                Authorize that a user is allowed to perform action on the content root item.
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to authorize.</param>
            <param name="permissionToCheck">The permission to authorize.</param>
            <returns>A task resolving into a <see cref="T:Umbraco.Cms.Core.Services.AuthorizationStatus.ContentAuthorizationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentPermissionService.AuthorizeRootAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.ISet{System.String})">
            <summary>
                Authorize that a user is allowed to perform actions on the content root item.
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to authorize.</param>
            <param name="permissionsToCheck">The collection of permissions to authorize.</param>
            <returns>A task resolving into a <see cref="T:Umbraco.Cms.Core.Services.AuthorizationStatus.ContentAuthorizationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentPermissionService.AuthorizeBinAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.String)">
            <summary>
                Authorize that a user is allowed to perform action on the content bin item.
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to authorize.</param>
            <param name="permissionToCheck">The permission to authorize.</param>
            <returns>A task resolving into a <see cref="T:Umbraco.Cms.Core.Services.AuthorizationStatus.ContentAuthorizationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentPermissionService.AuthorizeBinAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.ISet{System.String})">
            <summary>
                Authorize that a user is allowed to perform actions on the content bin item.
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to authorize.</param>
            <param name="permissionsToCheck">The collection of permissions to authorize.</param>
            <returns>A task resolving into a <see cref="T:Umbraco.Cms.Core.Services.AuthorizationStatus.ContentAuthorizationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentPermissionService.AuthorizeCultureAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.ISet{System.String})">
            <summary>
                Authorize that a user has access to specific cultures
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to authorize.</param>
            <param name="culturesToCheck">The collection of cultures to authorize.</param>
            <returns>A task resolving into a <see cref="T:Umbraco.Cms.Core.Services.AuthorizationStatus.ContentAuthorizationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentPublishingService.PublishAsync(System.Guid,Umbraco.Cms.Core.Models.ContentPublishing.CultureAndScheduleModel,System.Guid)">
            <summary>
                Publishes a single content item.
            </summary>
            <param name="key">The key of the root content.</param>
            <param name="cultureAndSchedule">The cultures to publish and their publishing schedules.</param>
            <param name="userKey">The identifier of the user performing the operation.</param>
            <returns>Result of the publish operation.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentPublishingService.PublishBranchAsync(System.Guid,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Guid)">
            <summary>
                Publishes a content branch.
            </summary>
            <param name="key">The key of the root content.</param>
            <param name="cultures">The cultures to publish.</param>
            <param name="force">A value indicating whether to force-publish content that is not already published.</param>
            <param name="userKey">The identifier of the user performing the operation.</param>
            <returns>Result of the publish operation.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentPublishingService.PublishBranchAsync(System.Guid,System.Collections.Generic.IEnumerable{System.String},Umbraco.Cms.Core.Models.PublishBranchFilter,System.Guid)">
            <summary>
                Publishes a content branch.
            </summary>
            <param name="key">The key of the root content.</param>
            <param name="cultures">The cultures to publish.</param>
            <param name="publishBranchFilter">A value indicating options for force publishing unpublished or re-publishing unchanged content.</param>
            <param name="userKey">The identifier of the user performing the operation.</param>
            <returns>Result of the publish operation.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentPublishingService.PublishBranchAsync(System.Guid,System.Collections.Generic.IEnumerable{System.String},Umbraco.Cms.Core.Models.PublishBranchFilter,System.Guid,System.Boolean)">
            <summary>
                Publishes a content branch.
            </summary>
            <param name="key">The key of the root content.</param>
            <param name="cultures">The cultures to publish.</param>
            <param name="publishBranchFilter">A value indicating options for force publishing unpublished or re-publishing unchanged content.</param>
            <param name="userKey">The identifier of the user performing the operation.</param>
            <param name="useBackgroundThread">Flag indicating whether to use a background thread for the operation and immediately return to the caller.</param>
            <returns>Result of the publish operation.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentPublishingService.IsPublishingBranchAsync(System.Guid)">
            <summary>
            Gets the status of a background task that is publishing a content branch.
            </summary>
            <param name="taskId">The task Id.</param>
            <returns>True if the requested publish branch tag is still in process.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentPublishingService.GetPublishBranchResultAsync(System.Guid)">
            <summary>
            Retrieves the result of a background task that has published a content branch.
            </summary>
            <param name="taskId">The task Id.</param>
            <returns>Result of the publish operation.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentPublishingService.UnpublishAsync(System.Guid,System.Collections.Generic.ISet{System.String},System.Guid)">
            <summary>
                Unpublishes multiple cultures of a single content item.
            </summary>
            <param name="key">The key of the root content.</param>
            <param name="cultures">The cultures to unpublish. Use null to unpublish all cultures.</param>
            <param name="userKey">The identifier of the user performing the operation.</param>
            <returns>Status of the publish operation.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentPublishingService.PublishAsync(System.Guid,System.Collections.Generic.ICollection{Umbraco.Cms.Core.Models.ContentPublishing.CulturePublishScheduleModel},System.Guid)">
            <summary>
            Publishes a single content item.
            </summary>
            <param name="key">The key of the root content.</param>
            <param name="culturesToPublishOrSchedule">The cultures to publish or schedule.</param>
            <param name="userKey">The identifier of the user performing the operation.</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IContentService">
            <summary>
                Defines the ContentService, which is an easy access to operations involving <see cref="T:Umbraco.Cms.Core.Models.IContent" />
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.Rollback(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
                Rolls back the content to a specific version.
            </summary>
            <param name="id">The id of the content node.</param>
            <param name="versionId">The version id to roll back to.</param>
            <param name="culture">An optional culture to roll back.</param>
            <param name="userId">The identifier of the user who is performing the roll back.</param>
            <remarks>
                <para>When no culture is specified, all cultures are rolled back.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.GetBlueprintById(System.Int32)">
            <summary>
                Gets a blueprint.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.GetBlueprintById(System.Guid)">
            <summary>
                Gets a blueprint.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.GetBlueprintsForContentTypes(System.Int32[])">
            <summary>
                Gets blueprints for a content type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.SaveBlueprint(Umbraco.Cms.Core.Models.IContent,System.Int32)">
            <summary>
                Saves a blueprint.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.DeleteBlueprint(Umbraco.Cms.Core.Models.IContent,System.Int32)">
            <summary>
                Deletes a blueprint.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.CreateContentFromBlueprint(Umbraco.Cms.Core.Models.IContent,System.String,System.Int32)">
            <summary>
                Creates a new content item from a blueprint.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.DeleteBlueprintsOfType(System.Int32,System.Int32)">
            <summary>
                Deletes blueprints for a content type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.DeleteBlueprintsOfTypes(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
                Deletes blueprints for content types.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.GetById(System.Int32)">
            <summary>
                Gets a document.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.GetById(System.Guid)">
            <summary>
                Gets a document.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.GetContentScheduleByContentId(System.Int32)">
            <summary>
                Gets publish/unpublish schedule for a content node.
            </summary>
            <param name="contentId">Id of the Content to load schedule for</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.ContentScheduleCollection" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.PersistContentSchedule(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Models.ContentScheduleCollection)">
            <summary>
                Persists publish/unpublish schedule for a content node.
            </summary>
            <param name="content"></param>
            <param name="contentSchedule"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.GetByIds(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Gets documents.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.GetByIds(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
                Gets documents.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.GetByLevel(System.Int32)">
            <summary>
                Gets documents at a given level.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.GetParent(System.Int32)">
            <summary>
                Gets the parent of a document.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.GetParent(Umbraco.Cms.Core.Models.IContent)">
            <summary>
                Gets the parent of a document.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.GetAncestors(System.Int32)">
            <summary>
                Gets ancestor documents of a document.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.GetAncestors(Umbraco.Cms.Core.Models.IContent)">
            <summary>
                Gets ancestor documents of a document.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.GetVersions(System.Int32)">
            <summary>
                Gets all versions of a document.
            </summary>
            <remarks>Versions are ordered with current first, then most recent first.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.GetVersionsSlim(System.Int32,System.Int32,System.Int32)">
            <summary>
                Gets all versions of a document.
            </summary>
            <remarks>Versions are ordered with current first, then most recent first.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.GetVersionIds(System.Int32,System.Int32)">
            <summary>
                Gets top versions of a document.
            </summary>
            <remarks>Versions are ordered with current first, then most recent first.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.GetVersion(System.Int32)">
            <summary>
                Gets a version of a document.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.GetRootContent">
            <summary>
                Gets root-level documents.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.GetContentForExpiration(System.DateTime)">
            <summary>
                Gets documents having an expiration date before (lower than, or equal to) a specified date.
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IContent" /> objects</returns>
            <remarks>
                The content returned from this method may be culture variant, in which case you can use
                <see cref="M:Umbraco.Extensions.ContentExtensions.GetStatus(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Models.ContentScheduleCollection,System.String)" /> to get the status for a specific culture.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.GetContentForRelease(System.DateTime)">
            <summary>
                Gets documents having a release date before (lower than, or equal to) a specified date.
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IContent" /> objects</returns>
            <remarks>
                The content returned from this method may be culture variant, in which case you can use
                <see cref="M:Umbraco.Extensions.ContentExtensions.GetStatus(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Models.ContentScheduleCollection,System.String)" /> to get the status for a specific culture.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.GetPagedContentInRecycleBin(System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IContent},Umbraco.Cms.Core.Services.Ordering)">
            <summary>
                Gets documents in the recycle bin.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.GetPagedChildren(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IContent},Umbraco.Cms.Core.Services.Ordering)">
            <summary>
                Gets child documents of a parent.
            </summary>
            <param name="id">The parent identifier.</param>
            <param name="pageIndex">The page number.</param>
            <param name="pageSize">The page size.</param>
            <param name="totalRecords">Total number of documents.</param>
            <param name="filter">Query filter.</param>
            <param name="ordering">Ordering infos.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.GetPagedDescendants(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IContent},Umbraco.Cms.Core.Services.Ordering)">
            <summary>
                Gets descendant documents of a given parent.
            </summary>
            <param name="id">The parent identifier.</param>
            <param name="pageIndex">The page number.</param>
            <param name="pageSize">The page size.</param>
            <param name="totalRecords">Total number of documents.</param>
            <param name="filter">Query filter.</param>
            <param name="ordering">Ordering infos.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.GetPagedOfType(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IContent},Umbraco.Cms.Core.Services.Ordering)">
            <summary>
                Gets paged documents of a content
            </summary>
            <param name="contentTypeId">The page number.</param>
            <param name="pageIndex">The page number.</param>
            <param name="pageSize">The page size.</param>
            <param name="totalRecords">Total number of documents.</param>
            <param name="filter">Search text filter.</param>
            <param name="ordering">Ordering infos.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.GetPagedOfTypes(System.Int32[],System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IContent},Umbraco.Cms.Core.Services.Ordering)">
            <summary>
                Gets paged documents for specified content types
            </summary>
            <param name="contentTypeIds">The page number.</param>
            <param name="pageIndex">The page number.</param>
            <param name="pageSize">The page size.</param>
            <param name="totalRecords">Total number of documents.</param>
            <param name="filter">Search text filter.</param>
            <param name="ordering">Ordering infos.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.Count(System.String)">
            <summary>
                Counts documents of a given document type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.CountPublished(System.String)">
            <summary>
                Counts published documents of a given document type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.CountChildren(System.Int32,System.String)">
            <summary>
                Counts child documents of a given parent, of a given document type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.CountDescendants(System.Int32,System.String)">
            <summary>
                Counts descendant documents of a given parent, of a given document type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.HasChildren(System.Int32)">
            <summary>
                Gets a value indicating whether a document has children.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.Save(Umbraco.Cms.Core.Models.IContent,System.Nullable{System.Int32},Umbraco.Cms.Core.Models.ContentScheduleCollection)">
            <summary>
                Saves a document.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.Save(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IContent},System.Int32)">
            <summary>
                Saves documents.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.Delete(Umbraco.Cms.Core.Models.IContent,System.Int32)">
            <summary>
                Deletes a document.
            </summary>
            <remarks>
                <para>This method will also delete associated media files, child content and possibly associated domains.</para>
                <para>This method entirely clears the content from the database.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.DeleteOfType(System.Int32,System.Int32)">
            <summary>
                Deletes all documents of a given document type.
            </summary>
            <remarks>
                <para>All non-deleted descendants of the deleted documents are moved to the recycle bin.</para>
                <para>This operation is potentially dangerous and expensive.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.DeleteOfTypes(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
                Deletes all documents of given document types.
            </summary>
            <remarks>
                <para>All non-deleted descendants of the deleted documents are moved to the recycle bin.</para>
                <para>This operation is potentially dangerous and expensive.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.DeleteVersions(System.Int32,System.DateTime,System.Int32)">
            <summary>
                Deletes versions of a document prior to a given date.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.DeleteVersion(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
                Deletes a version of a document.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.Move(Umbraco.Cms.Core.Models.IContent,System.Int32,System.Int32)">
            <summary>
                Moves a document under a new parent.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.Copy(Umbraco.Cms.Core.Models.IContent,System.Int32,System.Boolean,System.Int32)">
            <summary>
                Copies a document.
            </summary>
            <remarks>
                <para>Recursively copies all children.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.Copy(Umbraco.Cms.Core.Models.IContent,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
                Copies a document.
            </summary>
            <remarks>
                <para>Optionally recursively copies all children.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.MoveToRecycleBin(Umbraco.Cms.Core.Models.IContent,System.Int32)">
            <summary>
                Moves a document to the recycle bin.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.EmptyRecycleBin(System.Int32)">
            <summary>
                Empties the Recycle Bin by deleting all <see cref="T:Umbraco.Cms.Core.Models.IContent" /> that resides in the bin
            </summary>
            <param name="userId">Optional Id of the User emptying the Recycle Bin</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.RecycleBinSmells">
            <summary>
                Returns true if there is any content in the recycle bin
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.Sort(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IContent},System.Int32)">
            <summary>
                Sorts documents.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.Sort(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
                Sorts documents.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.Publish(Umbraco.Cms.Core.Models.IContent,System.String[],System.Int32)">
            <summary>
                Publishes a document.
            </summary>
            <remarks>
                <para>When a culture is being published, it includes all varying values along with all invariant values.</para>
                <para>Wildcards (*) can be used as culture identifier to publish all cultures.</para>
                <para>An empty array (or a wildcard) can be passed for culture invariant content.</para>
            </remarks>
            <param name="content">The document to publish.</param>
            <param name="cultures">The cultures to publish.</param>
            <param name="userId">The identifier of the user performing the action.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.PublishBranch(Umbraco.Cms.Core.Models.IContent,System.Boolean,System.String[],System.Int32)">
            <summary>
                Publishes a document branch.
            </summary>
            <param name="content">The root document.</param>
            <param name="force">A value indicating whether to force-publish documents that are not already published.</param>
            <param name="cultures">The cultures to publish.</param>
            <param name="userId">The identifier of the user performing the operation.</param>
            <remarks>
                <para>
                    The <paramref name="force" /> parameter determines which documents are published. When <c>false</c>,
                    only those documents that are already published, are republished. When <c>true</c>, all documents are
                    published. The root of the branch is always published, regardless of <paramref name="force" />.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.PublishBranch(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Models.PublishBranchFilter,System.String[],System.Int32)">
            <summary>
                Publishes a document branch.
            </summary>
            <param name="content">The root document.</param>
            <param name="publishBranchFilter">A value indicating options for force publishing unpublished or re-publishing unchanged content.</param>
            <param name="cultures">The cultures to publish.</param>
            <param name="userId">The identifier of the user performing the operation.</param>
            <remarks>
                <para>
                    The root of the branch is always published, regardless of <paramref name="publishBranchFilter" />.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.Unpublish(Umbraco.Cms.Core.Models.IContent,System.String,System.Int32)">
            <summary>
                Unpublishes a document.
            </summary>
            <remarks>
                <para>
                    By default, unpublishes the document as a whole, but it is possible to specify a culture to be
                    unpublished. Depending on whether that culture is mandatory, and other cultures remain published,
                    the document as a whole may or may not remain published.
                </para>
                <para>
                    If the content type is variant, then culture can be either '*' or an actual culture, but neither null nor
                    empty. If the content type is invariant, then culture can be either '*' or null or empty.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.IsPathPublishable(Umbraco.Cms.Core.Models.IContent)">
            <summary>
                Gets a value indicating whether a document is path-publishable.
            </summary>
            <remarks>A document is path-publishable when all its ancestors are published.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.IsPathPublished(Umbraco.Cms.Core.Models.IContent)">
            <summary>
                Gets a value indicating whether a document is path-published.
            </summary>
            <remarks>A document is path-published when all its ancestors, and the document itself, are published.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.SendToPublication(Umbraco.Cms.Core.Models.IContent,System.Int32)">
            <summary>
                Saves a document and raises the "sent to publication" events.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.PerformScheduledPublish(System.DateTime)">
            <summary>
                Publishes and unpublishes scheduled documents.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.GetPermissions(Umbraco.Cms.Core.Models.IContent)">
            <summary>
                Gets permissions assigned to a document.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.SetPermissions(Umbraco.Cms.Core.Models.Membership.EntityPermissionSet)">
            <summary>
                Sets the permission of a document.
            </summary>
            <remarks>Replaces all permissions with the new set of permissions.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.SetPermission(Umbraco.Cms.Core.Models.IContent,System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Assigns a permission to a document.
            </summary>
            <remarks>Adds the permission to existing permissions.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.Create(System.String,System.Guid,System.String,System.Int32)">
            <summary>
                Creates a document.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.Create(System.String,System.Int32,System.String,System.Int32)">
            <summary>
                Creates a document.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.Create(System.String,System.Int32,Umbraco.Cms.Core.Models.IContentType,System.Int32)">
            <summary>
                Creates a document
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.Create(System.String,Umbraco.Cms.Core.Models.IContent,System.String,System.Int32)">
            <summary>
                Creates a document.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.CreateAndSave(System.String,System.Int32,System.String,System.Int32)">
            <summary>
                Creates and saves a document.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentService.CreateAndSave(System.String,Umbraco.Cms.Core.Models.IContent,System.String,System.Int32)">
            <summary>
                Creates and saves a document.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IContentServiceBase">
            <summary>
                Placeholder for sharing logic between the content, media (and member) services
                TODO: Start sharing the logic!
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentServiceBase.CheckDataIntegrity(Umbraco.Cms.Core.Models.ContentDataIntegrityReportOptions)">
            <summary>
                Checks/fixes the data integrity of node paths/levels stored in the database
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IContentTypeBaseServiceProvider">
            <summary>
                Provides the <see cref="T:Umbraco.Cms.Core.Services.IContentTypeBaseService" /> corresponding to an <see cref="T:Umbraco.Cms.Core.Models.IContentBase" /> object.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentTypeBaseServiceProvider.For(Umbraco.Cms.Core.Models.IContentBase)">
            <summary>
                Gets the content type service base managing types for the specified content base.
            </summary>
            <remarks>
                <para>
                    If <paramref name="contentBase" /> is an <see cref="T:Umbraco.Cms.Core.Models.IContent" />, this returns the
                    <see cref="T:Umbraco.Cms.Core.Services.IContentTypeService" />, and if it's an <see cref="T:Umbraco.Cms.Core.Models.IMedia" />, this returns
                    the <see cref="T:Umbraco.Cms.Core.Services.IMediaTypeService" />, etc.
                </para>
                <para>
                    Services are returned as <see cref="T:Umbraco.Cms.Core.Services.IContentTypeBaseService" /> and can be used
                    to retrieve the content / media / whatever type as <see cref="T:Umbraco.Cms.Core.Models.IContentTypeComposition" />.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentTypeBaseServiceProvider.GetContentTypeOf(Umbraco.Cms.Core.Models.IContentBase)">
            <summary>
                Gets the content type of an <see cref="T:Umbraco.Cms.Core.Models.IContentBase" /> object.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IContentTypeService">
            <summary>
                Manages <see cref="T:Umbraco.Cms.Core.Models.IContentType" /> objects.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentTypeService.GetAllPropertyTypeAliases">
            <summary>
                Gets all property type aliases.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentTypeService.GetAllContentTypeAliases(System.Guid[])">
            <summary>
                Gets all content type aliases
            </summary>
            <param name="objectTypes">
                If this list is empty, it will return all content type aliases for media, members and content, otherwise
                it will only return content type aliases for the object types specified
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentTypeService.GetAllContentTypeIds(System.String[])">
            <summary>
                Returns all content type Ids for the aliases given
            </summary>
            <param name="aliases"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IContentTypeBaseService">
            <summary>
                Provides a common base interface for <see cref="T:Umbraco.Cms.Core.Models.IContentTypeBase" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentTypeBaseService.Get(System.Int32)">
            <summary>
                Gets a content type.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IContentTypeBaseService`1">
            <summary>
                Provides a common base interface for <see cref="T:Umbraco.Cms.Core.Services.IContentTypeService" />, <see cref="T:Umbraco.Cms.Core.Services.IMediaTypeService" /> and
                <see cref="T:Umbraco.Cms.Core.Services.IMemberTypeService" />.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentTypeBaseService`1.Get(System.Int32)">
            <summary>
                Gets a content type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentTypeBaseService`1.Get(System.Guid)">
            <summary>
                Gets a content type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentTypeBaseService`1.GetAsync(System.Guid)">
            <summary>
            Gets a content type.
            </summary>
            <param name="guid">The key of the content type.</param>
            <returns>The found content type, null if none was found.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentTypeBaseService`1.Get(System.String)">
            <summary>
                Gets a content type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentTypeBaseService`1.HasContentNodes(System.Int32)">
            <summary>
                Returns true or false depending on whether content nodes have been created based on the provided content type id.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentTypeBaseService`1.DeleteAsync(System.Guid,System.Guid)">
            <summary>
            Deletes an item
            </summary>
            <param name="key">The item to delete.</param>
            <param name="performingUserKey"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentTypeBaseService`1.HasContainerInPath(System.String)">
            <summary>
                Given the path of a content item, this will return true if the content item exists underneath a list view content
                item
            </summary>
            <param name="contentPath"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentTypeBaseService`1.HasContainerInPath(System.Int32[])">
            <summary>
                Gets a value indicating whether there is a list view content item in the path.
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentTypeBaseService`1.GetAllAllowedAsRootAsync(System.Int32,System.Int32)">
            <summary>
            Returns all the content type allowed as root.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentTypeBaseService`1.GetAllowedChildrenAsync(System.Guid,System.Int32,System.Int32)">
            <summary>
            Returns all content types allowed as children for a given content type key.
            </summary>
            <param name="key">The content type key.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentTypeBaseService`1.GetAllowedChildrenAsync(System.Guid,System.Nullable{System.Guid},System.Int32,System.Int32)">
            <summary>
            Returns all content types allowed as children for a given content type key.
            </summary>
            <param name="key">The content type key.</param>
            <param name="parentContentKey">The parent content key.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IContentVersionCleanupPolicy">
            <summary>
                Used to filter historic content versions for cleanup.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentVersionCleanupPolicy.Apply(System.DateTime,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.ContentVersionMeta})">
            <summary>
                Filters a set of candidates historic content versions for cleanup according to policy settings.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IContentVersionService.PerformContentVersionCleanup(System.DateTime)">
            <summary>
                Removes historic content versions according to a policy.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ICultureImpactFactory.Create(System.String,System.Boolean,Umbraco.Cms.Core.Models.IContent)">
            <summary>
            Creates an impact instance representing the impact of a culture set,
            in the context of a content item variation.
            </summary>
            <param name="culture">The culture code.</param>
            <param name="isDefault">A value indicating whether the culture is the default culture.</param>
            <param name="content">The content item.</param>
            <remarks>
            <para>Validates that the culture is compatible with the variation.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ICultureImpactFactory.ImpactAll">
            <summary>
            Gets the impact of 'all' cultures (including the invariant culture).
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ICultureImpactFactory.ImpactInvariant">
            <summary>
            Gets the impact of the invariant culture.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ICultureImpactFactory.ImpactExplicit(System.String,System.Boolean)">
            <summary>
            Creates an impact instance representing the impact of a specific culture.
            </summary>
            <param name="culture">The culture code.</param>
            <param name="isDefault">A value indicating whether the culture is the default culture.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ICultureImpactFactory.GetCultureForInvariantErrors(Umbraco.Cms.Core.Models.IContent,System.String[],System.String)">
            <summary>
            Utility method to return the culture used for invariant property errors based on what cultures are being actively saved,
            the default culture and the state of the current content item
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IDataTypeService">
            <summary>
                Defines the DataType Service, which is an easy access to operations involving <see cref="T:Umbraco.Cms.Core.Models.IDataType" />
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDataTypeService.GetReferencesAsync(System.Guid)">
            <summary>
                Returns a dictionary of content type <see cref="T:Umbraco.Cms.Core.Udi" />s and the property type aliases that use a <see cref="T:Umbraco.Cms.Core.Models.IDataType" />
            </summary>
            <param name="id">The guid Id of the <see cref="T:Umbraco.Cms.Core.Models.IDataType" /></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDataTypeService.GetPagedRelationsAsync(System.Guid,System.Int32,System.Int32)">
            <summary>
                Gets a paged result of items which are in relation with the current data type.
            </summary>
            <param name="key">The identifier of the data type to retrieve relations for.</param>
            <param name="skip">The amount of items to skip</param>
            <param name="take">The amount of items to take.</param>
            <returns>A paged result of <see cref="T:Umbraco.Cms.Core.Models.RelationItemModel" /> objects.</returns>
            <remarks>
            Note that the model and method signature here aligns with with how we handle retrieval of concrete Umbraco
            relations based on documents, media and members in <see cref="T:Umbraco.Cms.Core.Services.ITrackedReferencesService"/>.
            The intention is that we align data type relations with these so they can be handled polymorphically at the management API
            and backoffice UI level.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDataTypeService.GetDataType(System.String)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.IDataType" /> by its Name
            </summary>
            <param name="name">Name of the <see cref="T:Umbraco.Cms.Core.Models.IDataType" /></param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IDataType" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDataTypeService.GetDataType(System.Int32)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.IDataType" /> by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.IDataType" /></param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IDataType" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDataTypeService.GetAsync(System.String)">
            <summary>
                Gets an <see cref="T:Umbraco.Cms.Core.Models.IDataType" /> by its Name
            </summary>
            <param name="name">Name of the <see cref="T:Umbraco.Cms.Core.Models.IDataType" /></param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IDataType" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDataTypeService.GetAsync(System.Guid)">
            <summary>
                Gets an <see cref="T:Umbraco.Cms.Core.Models.IDataType" /> by its unique guid Id
            </summary>
            <param name="id">Unique guid Id of the DataType</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IDataType" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDataTypeService.GetAllAsync(System.Guid[])">
            <summary>
            Gets multiple <see cref="T:Umbraco.Cms.Core.Models.IDataType"/> objects by their unique keys.
            </summary>
            <param name="keys">The keys to get datatypes by.</param>
            <returns>An attempt with the requested data types.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDataTypeService.FilterAsync(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets multiple <see cref="T:Umbraco.Cms.Core.Models.IDataType"/> objects by their unique keys.
            </summary>
            <param name="name">Name to filter by.</param>
            <param name="editorUiAlias">Editor ui alias to filter by.</param>
            <param name="editorAlias">Editor alias to filter by.</param>
            <param name="skip">Number of items to skip.</param>
            <param name="take">Number of items to take.</param>
            <returns>An attempt with the requested data types.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDataTypeService.GetAll(System.Int32[])">
            <summary>
                Gets all <see cref="T:Umbraco.Cms.Core.Models.IDataType" /> objects or those with the ids passed in
            </summary>
            <param name="ids">Optional array of Ids</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IDataType" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDataTypeService.Save(Umbraco.Cms.Core.Models.IDataType,System.Int32)">
            <summary>
                Saves an <see cref="T:Umbraco.Cms.Core.Models.IDataType" />
            </summary>
            <param name="dataType"><see cref="T:Umbraco.Cms.Core.Models.IDataType" /> to save</param>
            <param name="userId">Id of the user issuing the save</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDataTypeService.Save(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IDataType},System.Int32)">
            <summary>
                Saves a collection of <see cref="T:Umbraco.Cms.Core.Models.IDataType" />
            </summary>
            <param name="dataTypeDefinitions"><see cref="T:Umbraco.Cms.Core.Models.IDataType" /> to save</param>
            <param name="userId">Id of the user issuing the save</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDataTypeService.CreateAsync(Umbraco.Cms.Core.Models.IDataType,System.Guid)">
            <summary>
                Creates a new <see cref="T:Umbraco.Cms.Core.Models.IDataType" />
            </summary>
            <param name="dataType"><see cref="T:Umbraco.Cms.Core.Models.IDataType" /> to create</param>
            <param name="userKey">Key of the user issuing the creation</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDataTypeService.UpdateAsync(Umbraco.Cms.Core.Models.IDataType,System.Guid)">
            <summary>
                Updates an existing <see cref="T:Umbraco.Cms.Core.Models.IDataType" />
            </summary>
            <param name="dataType"><see cref="T:Umbraco.Cms.Core.Models.IDataType" /> to update</param>
            <param name="userKey">Key of the user issuing the update</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDataTypeService.Delete(Umbraco.Cms.Core.Models.IDataType,System.Int32)">
            <summary>
                Deletes an <see cref="T:Umbraco.Cms.Core.Models.IDataType" />
            </summary>
            <remarks>
                Please note that deleting a <see cref="T:Umbraco.Cms.Core.Models.IDataType" /> will remove
                all the <see cref="T:Umbraco.Cms.Core.Models.IPropertyType" /> data that references this <see cref="T:Umbraco.Cms.Core.Models.IDataType" />.
            </remarks>
            <param name="dataType"><see cref="T:Umbraco.Cms.Core.Models.IDataType" /> to delete</param>
            <param name="userId">Id of the user issuing the deletion</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDataTypeService.DeleteAsync(System.Guid,System.Guid)">
            <summary>
                Deletes an <see cref="T:Umbraco.Cms.Core.Models.IDataType" />
            </summary>
            <remarks>
                Please note that deleting a <see cref="T:Umbraco.Cms.Core.Models.IDataType" /> will remove
                all the <see cref="T:Umbraco.Cms.Core.Models.IPropertyType" /> data that references this <see cref="T:Umbraco.Cms.Core.Models.IDataType" />.
            </remarks>
            <param name="id">The guid Id of the <see cref="T:Umbraco.Cms.Core.Models.IDataType" /> to delete</param>
            <param name="userKey">Key of the user issuing the deletion</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDataTypeService.GetByEditorAlias(System.String)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.IDataType" /> by its control Id
            </summary>
            <param name="propertyEditorAlias">Alias of the property editor</param>
            <returns>Collection of <see cref="T:Umbraco.Cms.Core.Models.IDataType" /> objects with a matching control id</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDataTypeService.GetByEditorAliasAsync(System.String)">
            <summary>
                Gets all <see cref="T:Umbraco.Cms.Core.Models.IDataType" /> for a given property editor
            </summary>
            <param name="propertyEditorAlias">Alias of the property editor</param>
            <returns>Collection of <see cref="T:Umbraco.Cms.Core.Models.IDataType" /> configured for the property editor</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDataTypeService.GetByEditorUiAlias(System.String)">
            <summary>
                Gets all <see cref="T:Umbraco.Cms.Core.Models.IDataType" /> for a given editor UI alias
            </summary>
            <param name="editorUiAlias">The UI Alias to query by.</param>
            <returns>Collection of <see cref="T:Umbraco.Cms.Core.Models.IDataType" /> which has the UI alias.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDataTypeService.MoveAsync(Umbraco.Cms.Core.Models.IDataType,System.Nullable{System.Guid},System.Guid)">
            <summary>
            Moves a <see cref="T:Umbraco.Cms.Core.Models.IDataType"/> to a given container
            </summary>
            <param name="toMove">The data type that will be moved</param>
            <param name="containerKey">The container key where the data type will be moved to.</param>
            <param name="userKey">The user that did the Move action</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDataTypeService.CopyAsync(Umbraco.Cms.Core.Models.IDataType,System.Nullable{System.Guid},System.Guid)">
            <summary>
            Copies a <see cref="T:Umbraco.Cms.Core.Models.IDataType"/> to a given container
            </summary>
            <param name="toCopy">The data type that will be copied</param>
            <param name="containerKey">The container key where the data type will be copied to.</param>
            <param name="userKey">The user that did the Copy action</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDataTypeService.ValidateConfigurationData(Umbraco.Cms.Core.Models.IDataType)">
            <summary>
            Performs validation for the configuration data of a given data type.
            </summary>
            <param name="dataType">The data type whose configuration to validate.</param>
            <returns>One or more <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> if the configuration data is invalid, an empty collection otherwise.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDataTypeService.GetByEditorAliasAsync(System.String[])">
            <summary>
                Gets all <see cref="T:Umbraco.Cms.Core.Models.IDataType" /> for a set of property editors
            </summary>
            <param name="propertyEditorAlias">Aliases of the property editors</param>
            <returns>Collection of <see cref="T:Umbraco.Cms.Core.Models.IDataType" /> configured for the property editors</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDataTypeUsageService.HasSavedValuesAsync(System.Guid)">
            <summary>
            Checks if there are any saved property values using a given data type.
            </summary>
            <param name="dataTypeKey">The key of the data type to check.</param>
            <returns>An attempt with status and result if there are any property values using the data type, otherwise false.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDictionaryItemService.GetAsync(System.Guid)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> by its <see cref="T:System.Guid" /> id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /></param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDictionaryItemService.GetAsync(System.String)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> by  by its key
            </summary>
            <param name="key">Key of the <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /></param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDictionaryItemService.GetManyAsync(System.Guid[])">
            <summary>
                Gets a collection of <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> by their <see cref="T:System.Guid" /> ids
            </summary>
            <param name="ids">Ids of the <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /></param>
            <returns>
                A collection of <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDictionaryItemService.GetManyAsync(System.String[])">
            <summary>
                Gets a collection of <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> by their keys
            </summary>
            <param name="keys">Keys of the <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /></param>
            <returns>
                A collection of <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDictionaryItemService.GetChildrenAsync(System.Guid)">
            <summary>
                Gets a list of children for a <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" />
            </summary>
            <param name="parentId">Id of the parent</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDictionaryItemService.GetDescendantsAsync(System.Nullable{System.Guid},System.String)">
            <summary>
                Gets a list of descendants for a <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" />
            </summary>
            <param name="parentId">Id of the parent, null will return all dictionary items</param>
            <param name="filter">An optional filter, which will limit the results to only those dictionary items whose key starts with the filter value.</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDictionaryItemService.GetAtRootAsync">
            <summary>
                Gets the root/top <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDictionaryItemService.ExistsAsync(System.String)">
            <summary>
                Checks if a <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> with given key exists
            </summary>
            <param name="key">Key of the <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /></param>
            <returns>True if a <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> exists, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDictionaryItemService.CreateAsync(Umbraco.Cms.Core.Models.IDictionaryItem,System.Guid)">
            <summary>
                Creates and saves a new dictionary item and assigns translations to all applicable languages if specified
            </summary>
            <param name="dictionaryItem"><see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> to create</param>
            <param name="userKey">Key of the user saving the dictionary item</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDictionaryItemService.UpdateAsync(Umbraco.Cms.Core.Models.IDictionaryItem,System.Guid)">
            <summary>
                Updates an existing <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> object
            </summary>
            <param name="dictionaryItem"><see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> to update</param>
            <param name="userKey">Key of the user saving the dictionary item</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDictionaryItemService.DeleteAsync(System.Guid,System.Guid)">
            <summary>
                Deletes a <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> object and its related translations
                as well as its children.
            </summary>
            <param name="id">The ID of the <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> to delete</param>
            <param name="userKey">Key of the user deleting the dictionary item</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDictionaryItemService.MoveAsync(Umbraco.Cms.Core.Models.IDictionaryItem,System.Nullable{System.Guid},System.Guid)">
            <summary>
                Moves a <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> object
            </summary>
            <param name="dictionaryItem"><see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> to move</param>
            <param name="parentId">Id of the new <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> parent, null if the item should be moved to the root</param>
            <param name="userKey">Key of the user moving the dictionary item</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDictionaryItemService.GetPagedAsync(System.Nullable{System.Guid},System.Int32,System.Int32)">
            <summary>
            Gets the dictionary items in a paged manner.
            Currently implements the paging in memory on the itenkey property because the underlying repository does not support paging yet
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDictionaryPermissionService.AuthorizeCultureAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.ISet{System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IDocumentUrlService">
            <summary>
            Defines operations for handling document URLs.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDocumentUrlService.InitAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Initializes the service and ensure the content in the database is correct with the current configuration.
            </summary>
            <param name="forceEmpty">Forces an early return when we know there are no routes (i.e. on install).</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDocumentUrlService.RebuildAllUrlsAsync">
            <summary>
            Rebuilds all document URLs.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDocumentUrlService.GetUrlSegment(System.Guid,System.String,System.Boolean)">
            <summary>
            Gets a single URL segment from a document key and culture. Preview urls are returned if isDraft is true.
            </summary>
            <param name="documentKey">The key of the document.</param>
            <param name="culture">The culture code.</param>
            <param name="isDraft">Whether to get the url of the draft or published document.</param>
            <returns>A URL segment for the document.</returns>
            <remarks>If more than one segment is available, the first retrieved and indicated as primary will be returned.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDocumentUrlService.GetUrlSegments(System.Guid,System.String,System.Boolean)">
            <summary>
            Gets the URL segments from a document key and culture. Preview urls are returned if isDraft is true.
            </summary>
            <param name="documentKey">The key of the document.</param>
            <param name="culture">The culture code.</param>
            <param name="isDraft">Whether to get the url of the draft or published document.</param>
            <returns>The URL segments for the document.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDocumentUrlService.CreateOrUpdateUrlSegmentsAsync(System.Guid)">
            <summary>
            Creates or updates the URL segments for a single document.
            </summary>
            <param name="key">The document key.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDocumentUrlService.CreateOrUpdateUrlSegmentsWithDescendantsAsync(System.Guid)">
            <summary>
            Creates or updates the URL segments for a document and it's descendants.
            </summary>
            <param name="key">The document key.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDocumentUrlService.CreateOrUpdateUrlSegmentsAsync(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IContent})">
            <summary>
            Creates or updates the URL segments for a collection of documents.
            </summary>
            <param name="documents">The document collection.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDocumentUrlService.DeleteUrlsFromCacheAsync(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Deletes all URLs from the cache for a collection of document keys.
            </summary>
            <param name="documentKeys">The collection of document keys.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDocumentUrlService.GetDocumentKeyByRoute(System.String,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Gets a document key by route.
            </summary>
            <param name="route">The route.</param>
            <param name="culture">The culture code.</param>
            <param name="documentStartNodeId">The document start node Id.</param>
            <param name="isDraft">Whether to get the url of the draft or published document.</param>
            <returns>The document key, or null if not found.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDocumentUrlService.ListUrlsAsync(System.Guid)">
            <summary>
            Gets all the URLs for a given content key.
            </summary>
            <param name="contentKey">The content key.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDocumentUrlService.GetLegacyRouteFormat(System.Guid,System.String,System.Boolean)">
            <summary>
            Gets the legacy route format for a document key and culture.
            </summary>
            <param name="key">The key of the document.</param>
            <param name="culture">The culture code.</param>
            <param name="isDraft">Whether to get the url of the draft or published document.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDocumentUrlService.HasAny">
            <summary>
            Gets a value indicating whether any URLs have been cached.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDomainService.GetAssignedDomainsAsync(System.Guid,System.Boolean)">
            <summary>
            Gets all assigned domains for content item.
            </summary>
            <param name="contentKey">The key of the content item.</param>
            <param name="includeWildcards">Whether or not to include wildcard domains.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDomainService.GetAllAsync(System.Boolean)">
            <summary>
            Gets all assigned domains.
            </summary>
            <param name="includeWildcards">Whether or not to include wildcard domains.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IDomainService.UpdateDomainsAsync(System.Guid,Umbraco.Cms.Core.Models.ContentEditing.DomainsUpdateModel)">
            <summary>
            Updates the domain assignments for a content item.
            </summary>
            <param name="contentKey">The key of the content item.</param>
            <param name="updateModel">The domain assignments to apply.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IEntitySearchService">
            <summary>
            Performs entity search directly against the database.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.Get(System.Int32)">
            <summary>
                Gets an entity.
            </summary>
            <param name="id">The identifier of the entity.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.Get(System.Guid)">
            <summary>
                Gets an entity.
            </summary>
            <param name="key">The unique key of the entity.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.Get(System.Int32,Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <summary>
                Gets an entity.
            </summary>
            <param name="id">The identifier of the entity.</param>
            <param name="objectType">The object type of the entity.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.Get(System.Guid,Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <summary>
                Gets an entity.
            </summary>
            <param name="key">The unique key of the entity.</param>
            <param name="objectType">The object type of the entity.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.Get``1(System.Int32)">
            <summary>
                Gets an entity.
            </summary>
            <typeparam name="T">The type used to determine the object type of the entity.</typeparam>
            <param name="id">The identifier of the entity.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.Get``1(System.Guid)">
            <summary>
                Gets an entity.
            </summary>
            <typeparam name="T">The type used to determine the object type of the entity.</typeparam>
            <param name="key">The unique key of the entity.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.Exists(System.Int32)">
            <summary>
                Determines whether an entity exists.
            </summary>
            <param name="id">The identifier of the entity.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.Exists(System.Guid)">
            <summary>
                Determines whether an entity exists.
            </summary>
            <param name="key">The unique key of the entity.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.Exists(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
                Determines whether an entity exists.
            </summary>
            <param name="keys">The unique keys of the entities.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.Exists(System.Guid,Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <summary>
            Determines whether and entity of a certain object type exists.
            </summary>
            <param name="key">The unique key of the entity.</param>
            <param name="objectType">The object type to look for.</param>
            <returns>True if the entity exists, false if it does not.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.Exists(System.Int32,Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <summary>
            Determines whether and entity of a certain object type exists.
            </summary>
            <param name="id">The id of the entity.</param>
            <param name="objectType">The object type to look for.</param>
            <returns>True if the entity exists, false if it does not.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetAll``1">
            <summary>
                Gets entities of a given object type.
            </summary>
            <typeparam name="T">The type used to determine the object type of the entities.</typeparam>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetAll``1(System.Int32[])">
            <summary>
                Gets entities of a given object type.
            </summary>
            <typeparam name="T">The type used to determine the object type of the entities.</typeparam>
            <param name="ids">The identifiers of the entities.</param>
            <remarks>If <paramref name="ids" /> is empty, returns all entities.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetAll(Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <summary>
                Gets entities of a given object type.
            </summary>
            <param name="objectType">The object type of the entities.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetAll(Umbraco.Cms.Core.Models.UmbracoObjectTypes,System.Int32[])">
            <summary>
                Gets entities of a given object type.
            </summary>
            <param name="objectType">The object type of the entities.</param>
            <param name="ids">The identifiers of the entities.</param>
            <remarks>If <paramref name="ids" /> is empty, returns all entities.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetAll(System.Guid)">
            <summary>
                Gets entities of a given object type.
            </summary>
            <param name="objectType">The object type of the entities.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetAll(System.Guid,System.Int32[])">
            <summary>
                Gets entities of a given object type.
            </summary>
            <param name="objectType">The object type of the entities.</param>
            <param name="ids">The identifiers of the entities.</param>
            <remarks>If <paramref name="ids" /> is empty, returns all entities.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetAll``1(System.Guid[])">
            <summary>
                Gets entities of a given object type.
            </summary>
            <typeparam name="T">The type used to determine the object type of the entities.</typeparam>
            <param name="keys">The unique identifiers of the entities.</param>
            <remarks>If <paramref name="keys" /> is empty, returns all entities.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetAll(Umbraco.Cms.Core.Models.UmbracoObjectTypes,System.Guid[])">
            <summary>
                Gets entities of a given object type.
            </summary>
            <param name="objectType">The object type of the entities.</param>
            <param name="keys">The unique identifiers of the entities.</param>
            <remarks>If <paramref name="keys" /> is empty, returns all entities.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetAll(System.Guid,System.Guid[])">
            <summary>
                Gets entities of a given object type.
            </summary>
            <param name="objectType">The object type of the entities.</param>
            <param name="keys">The unique identifiers of the entities.</param>
            <remarks>If <paramref name="keys" /> is empty, returns all entities.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetRootEntities(Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <summary>
                Gets entities at root.
            </summary>
            <param name="objectType">The object type of the entities.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetParent(System.Int32)">
            <summary>
                Gets the parent of an entity.
            </summary>
            <param name="id">The identifier of the entity.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetParent(System.Int32,Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <summary>
                Gets the parent of an entity.
            </summary>
            <param name="id">The identifier of the entity.</param>
            <param name="objectType">The object type of the parent.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetChildren(System.Int32)">
            <summary>
                Gets the children of an entity.
            </summary>
            <param name="id">The identifier of the entity.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetChildren(System.Int32,Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <summary>
                Gets the children of an entity.
            </summary>
            <param name="id">The identifier of the entity.</param>
            <param name="objectType">The object type of the children.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetDescendants(System.Int32)">
            <summary>
                Gets the descendants of an entity.
            </summary>
            <param name="id">The identifier of the entity.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetDescendants(System.Int32,Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <summary>
                Gets the descendants of an entity.
            </summary>
            <param name="id">The identifier of the entity.</param>
            <param name="objectType">The object type of the descendants.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetPagedChildren(System.Int32,Umbraco.Cms.Core.Models.UmbracoObjectTypes,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.Entities.IUmbracoEntity},Umbraco.Cms.Core.Services.Ordering)">
            <summary>
                Gets children of an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetPagedTrashedChildren(System.Int32,Umbraco.Cms.Core.Models.UmbracoObjectTypes,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.Entities.IUmbracoEntity},Umbraco.Cms.Core.Services.Ordering)">
            <summary>
                Gets children of an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetPagedTrashedChildren(System.Nullable{System.Guid},Umbraco.Cms.Core.Models.UmbracoObjectTypes,System.Int32,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.Entities.IUmbracoEntity},Umbraco.Cms.Core.Services.Ordering)">
            <summary>
                Gets children of an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetPagedDescendants(System.Int32,Umbraco.Cms.Core.Models.UmbracoObjectTypes,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.Entities.IUmbracoEntity},Umbraco.Cms.Core.Services.Ordering)">
            <summary>
                Gets descendants of an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetPagedDescendants(System.Collections.Generic.IEnumerable{System.Int32},Umbraco.Cms.Core.Models.UmbracoObjectTypes,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.Entities.IUmbracoEntity},Umbraco.Cms.Core.Services.Ordering)">
            <summary>
                Gets descendants of entities.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetPagedDescendants(Umbraco.Cms.Core.Models.UmbracoObjectTypes,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.Entities.IUmbracoEntity},Umbraco.Cms.Core.Services.Ordering,System.Boolean)">
            <summary>
                Gets descendants of root.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetObjectType(System.Int32)">
            <summary>
                Gets the object type of an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetObjectType(System.Guid)">
            <summary>
                Gets the object type of an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetObjectType(Umbraco.Cms.Core.Models.Entities.IUmbracoEntity)">
            <summary>
                Gets the object type of an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetEntityType(System.Int32)">
            <summary>
                Gets the CLR type of an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetId(System.Guid,Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <summary>
                Gets the integer identifier corresponding to a unique Guid identifier.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetId(Umbraco.Cms.Core.Udi)">
            <summary>
                Gets the integer identifier corresponding to a Udi.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetKey(System.Int32,Umbraco.Cms.Core.Models.UmbracoObjectTypes)">
            <summary>
                Gets the unique Guid identifier corresponding to an integer identifier.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetAllPaths(Umbraco.Cms.Core.Models.UmbracoObjectTypes,System.Int32[])">
            <summary>
                Gets paths for entities.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetAllPaths(Umbraco.Cms.Core.Models.UmbracoObjectTypes,System.Guid[])">
            <summary>
                Gets paths for entities.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.ReserveId(System.Guid)">
            <summary>
                Reserves an identifier for a key.
            </summary>
            <param name="key">They key.</param>
            <returns>The identifier.</returns>
            <remarks>When a new content or a media is saved with the key, it will have the reserved identifier.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityService.GetPathKeys(Umbraco.Cms.Core.Models.Entities.ITreeEntity,System.Boolean)">
            <summary>
            Gets the GUID keys for an entity's path (provided as a comma separated list of integer Ids).
            </summary>
            <param name="entity">The entity.</param>
            <param name="omitSelf">A value indicating whether to omit the entity's own key from the result.</param>
            <returns>The path with each ID converted to a GUID.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityTypeContainerService`1.GetAsync(System.Guid)">
            <summary>
            Gets a container
            </summary>
            <param name="id">The ID of the container to get.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityTypeContainerService`1.GetAsync(System.String,System.Int32)">
            <summary>
            Gets containers by name and level
            </summary>
            <param name="name">The name of the containers to get.</param>
            <param name="level">The level in the tree of the containers to get.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityTypeContainerService`1.GetAllAsync">
            <summary>
            Gets all containers
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityTypeContainerService`1.GetParentAsync(Umbraco.Cms.Core.Models.EntityContainer)">
            <summary>
            Gets the parent container of a container
            </summary>
            <param name="container">The container whose parent container to get.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityTypeContainerService`1.GetParentAsync(`0)">
            <summary>
            Gets the parent container of an entity
            </summary>
            <param name="entity">The entity whose parent container to get.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityTypeContainerService`1.CreateAsync(System.Nullable{System.Guid},System.String,System.Nullable{System.Guid},System.Guid)">
            <summary>
            Creates a new container
            </summary>
            <param name="key">The key to assign to the newly created container (if null is specified, a random key will be assigned).</param>
            <param name="name">The name of the created container.</param>
            <param name="parentKey">The ID of the parent container to create the new container under.</param>
            <param name="userKey">Key of the user issuing the creation.</param>
            <returns></returns>
            <remarks>If parent key is supplied as null, the container will be created at the tree root.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityTypeContainerService`1.UpdateAsync(System.Guid,System.String,System.Guid)">
            <summary>
            Updates an existing container
            </summary>
            <param name="key">The key of the container to update.</param>
            <param name="name">The name to assign to the container.</param>
            <param name="userKey">Key of the user issuing the update.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityTypeContainerService`1.DeleteAsync(System.Guid,System.Guid)">
            <summary>
            Deletes a container
            </summary>
            <param name="id">The ID of the container to delete.</param>
            <param name="userKey">Key of the user issuing the deletion.</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IEntityXmlSerializer">
            <summary>
                Serializes entities to XML
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityXmlSerializer.Serialize(Umbraco.Cms.Core.Models.IContent,System.Boolean,System.Boolean)">
            <summary>
                Exports an IContent item as an XElement.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityXmlSerializer.Serialize(Umbraco.Cms.Core.Models.IMedia,System.Boolean,System.Action{Umbraco.Cms.Core.Models.IMedia,System.Xml.Linq.XElement})">
            <summary>
                Exports an IMedia item as an XElement.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityXmlSerializer.Serialize(Umbraco.Cms.Core.Models.IMember)">
            <summary>
                Exports an IMember item as an XElement.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityXmlSerializer.Serialize(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IDataType})">
            <summary>
                Exports a list of Data Types
            </summary>
            <param name="dataTypeDefinitions">List of data types to export</param>
            <returns><see cref="T:System.Xml.Linq.XElement" /> containing the xml representation of the IDataTypeDefinition objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityXmlSerializer.Serialize(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IDictionaryItem},System.Boolean)">
            <summary>
                Exports a list of <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> items to xml as an <see cref="T:System.Xml.Linq.XElement" />
            </summary>
            <param name="dictionaryItem">List of dictionary items to export</param>
            <param name="includeChildren">Optional boolean indicating whether or not to include children</param>
            <returns><see cref="T:System.Xml.Linq.XElement" /> containing the xml representation of the IDictionaryItem objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityXmlSerializer.Serialize(Umbraco.Cms.Core.Models.IDictionaryItem,System.Boolean)">
            <summary>
                Exports a single <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> item to xml as an <see cref="T:System.Xml.Linq.XElement" />
            </summary>
            <param name="dictionaryItem">Dictionary Item to export</param>
            <param name="includeChildren">Optional boolean indicating whether or not to include children</param>
            <returns><see cref="T:System.Xml.Linq.XElement" /> containing the xml representation of the IDictionaryItem object</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityXmlSerializer.Serialize(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.ILanguage})">
            <summary>
                Exports a list of <see cref="T:Umbraco.Cms.Core.Models.ILanguage" /> items to xml as an <see cref="T:System.Xml.Linq.XElement" />
            </summary>
            <param name="languages">List of Languages to export</param>
            <returns><see cref="T:System.Xml.Linq.XElement" /> containing the xml representation of the ILanguage objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IEntityXmlSerializer.Serialize(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.ITemplate})">
            <summary>
                Exports a list of <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> items to xml as an <see cref="T:System.Xml.Linq.XElement" />
            </summary>
            <param name="templates"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IExternalLoginWithKeyService.GetExternalLogins(System.Guid)">
            <summary>
                Returns all user logins assigned.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IExternalLoginWithKeyService.GetExternalLoginTokens(System.Guid)">
            <summary>
                Returns all user login tokens assigned.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IExternalLoginWithKeyService.Find(System.String,System.String)">
            <summary>
                Returns all logins matching the login info - generally there should only be one but in some cases
                there might be more than one depending on if an administrator has been editing/removing members.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IExternalLoginWithKeyService.Save(System.Guid,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Security.IExternalLogin})">
            <summary>
                Saves the external logins associated with the user.
            </summary>
            <param name="userOrMemberKey">
                The user or member key associated with the logins.
            </param>
            <param name="logins"></param>
            <remarks>
                This will replace all external login provider information for the user.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IExternalLoginWithKeyService.Save(System.Guid,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Security.IExternalLoginToken})">
            <summary>
                Saves the external login tokens associated with the user.
            </summary>
            <param name="userOrMemberKey">
                The user or member key associated with the logins.
            </param>
            <param name="tokens"></param>
            <remarks>
                This will replace all external login tokens for the user.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IExternalLoginWithKeyService.DeleteUserLogins(System.Guid)">
            <summary>
                Deletes all user logins - normally used when a member is deleted.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IExternalLoginWithKeyService.PurgeLoginsForRemovedProviders(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Deletes external logins and invalidates sessions for users that aren't associated with the current collection of providers.
            </summary>
            <param name="currentLoginProviders">The names of the currently configured providers.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IFileService">
            <summary>
                Defines the File Service, which is an easy access to operations involving <see cref="T:Umbraco.Cms.Core.Models.IFile" /> objects like
                Scripts, Stylesheets and Templates
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.GetPartialViews(System.String[])">
            <summary>
                Gets a list of all <see cref="T:Umbraco.Cms.Core.Models.IPartialView" /> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IPartialView" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.GetPartialViewFileContentStream(System.String)">
            <summary>
                Gets the content of a partial view as a stream.
            </summary>
            <param name="filepath">The filesystem path to the partial view.</param>
            <returns>The content of the partial view.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.SetPartialViewFileContent(System.String,System.IO.Stream)">
            <summary>
                Sets the content of a partial view.
            </summary>
            <param name="filepath">The filesystem path to the partial view.</param>
            <param name="content">The content of the partial view.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.GetPartialViewFileSize(System.String)">
            <summary>
                Gets the size of a partial view.
            </summary>
            <param name="filepath">The filesystem path to the partial view.</param>
            <returns>The size of the partial view.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.GetStylesheets(System.String[])">
            <summary>
                Gets a list of all <see cref="T:Umbraco.Cms.Core.Models.IStylesheet" /> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IStylesheet" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.GetStylesheet(System.String)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.IStylesheet" /> object by its name
            </summary>
            <param name="path">Path of the stylesheet incl. extension</param>
            <returns>A <see cref="T:Umbraco.Cms.Core.Models.IStylesheet" /> object</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.SaveStylesheet(Umbraco.Cms.Core.Models.IStylesheet,System.Nullable{System.Int32})">
            <summary>
                Saves a <see cref="T:Umbraco.Cms.Core.Models.IStylesheet" />
            </summary>
            <param name="stylesheet"><see cref="T:Umbraco.Cms.Core.Models.IStylesheet" /> to save</param>
            <param name="userId">Optional id of the user saving the stylesheet</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.DeleteStylesheet(System.String,System.Nullable{System.Int32})">
            <summary>
                Deletes a stylesheet by its name
            </summary>
            <param name="path">Name incl. extension of the Stylesheet to delete</param>
            <param name="userId">Optional id of the user deleting the stylesheet</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.CreateStyleSheetFolder(System.String)">
            <summary>
                Creates a folder for style sheets
            </summary>
            <param name="folderPath"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.DeleteStyleSheetFolder(System.String)">
            <summary>
                Deletes a folder for style sheets
            </summary>
            <param name="folderPath"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.GetStylesheetFileContentStream(System.String)">
            <summary>
                Gets the content of a stylesheet as a stream.
            </summary>
            <param name="filepath">The filesystem path to the stylesheet.</param>
            <returns>The content of the stylesheet.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.SetStylesheetFileContent(System.String,System.IO.Stream)">
            <summary>
                Sets the content of a stylesheet.
            </summary>
            <param name="filepath">The filesystem path to the stylesheet.</param>
            <param name="content">The content of the stylesheet.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.GetStylesheetFileSize(System.String)">
            <summary>
                Gets the size of a stylesheet.
            </summary>
            <param name="filepath">The filesystem path to the stylesheet.</param>
            <returns>The size of the stylesheet.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.GetScripts(System.String[])">
            <summary>
                Gets a list of all <see cref="T:Umbraco.Cms.Core.Models.IScript" /> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IScript" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.GetScript(System.String)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.IScript" /> object by its name
            </summary>
            <param name="name">Name of the script incl. extension</param>
            <returns>A <see cref="T:Umbraco.Cms.Core.Models.IScript" /> object</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.SaveScript(Umbraco.Cms.Core.Models.IScript,System.Nullable{System.Int32})">
            <summary>
                Saves a <see cref="T:Umbraco.Cms.Core.Models.Script" />
            </summary>
            <param name="script"><see cref="T:Umbraco.Cms.Core.Models.IScript" /> to save</param>
            <param name="userId">Optional id of the user saving the script</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.DeleteScript(System.String,System.Nullable{System.Int32})">
            <summary>
                Deletes a script by its name
            </summary>
            <param name="path">Name incl. extension of the Script to delete</param>
            <param name="userId">Optional id of the user deleting the script</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.CreateScriptFolder(System.String)">
            <summary>
                Creates a folder for scripts
            </summary>
            <param name="folderPath"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.DeleteScriptFolder(System.String)">
            <summary>
                Deletes a folder for scripts
            </summary>
            <param name="folderPath"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.GetScriptFileContentStream(System.String)">
            <summary>
                Gets the content of a script file as a stream.
            </summary>
            <param name="filepath">The filesystem path to the script.</param>
            <returns>The content of the script file.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.SetScriptFileContent(System.String,System.IO.Stream)">
            <summary>
                Sets the content of a script file.
            </summary>
            <param name="filepath">The filesystem path to the script.</param>
            <param name="content">The content of the script file.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.GetScriptFileSize(System.String)">
            <summary>
                Gets the size of a script file.
            </summary>
            <param name="filepath">The filesystem path to the script file.</param>
            <returns>The size of the script file.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.GetTemplates(System.String[])">
            <summary>
                Gets a list of all <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.GetTemplates(System.Int32)">
            <summary>
                Gets a list of all <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.GetTemplate(System.String)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> object by its alias.
            </summary>
            <param name="alias">The alias of the template.</param>
            <returns>The <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> object matching the alias, or null.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.GetTemplate(System.Int32)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> object by its identifier.
            </summary>
            <param name="id">The identifier of the template.</param>
            <returns>The <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> object matching the identifier, or null.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.GetTemplate(System.Guid)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> object by its guid identifier.
            </summary>
            <param name="id">The guid identifier of the template.</param>
            <returns>The <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> object matching the identifier, or null.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.GetTemplateDescendants(System.Int32)">
            <summary>
                Gets the template descendants
            </summary>
            <param name="masterTemplateId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.SaveTemplate(Umbraco.Cms.Core.Models.ITemplate,System.Int32)">
            <summary>
                Saves a <see cref="T:Umbraco.Cms.Core.Models.ITemplate" />
            </summary>
            <param name="template"><see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> to save</param>
            <param name="userId">Optional id of the user saving the template</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.CreateTemplateForContentType(System.String,System.String,System.Int32)">
            <summary>
                Creates a template for a content type
            </summary>
            <param name="contentTypeAlias"></param>
            <param name="contentTypeName"></param>
            <param name="userId"></param>
            <returns>
                The template created
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.DeleteTemplate(System.String,System.Int32)">
            <summary>
                Deletes a template by its alias
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> to delete</param>
            <param name="userId">Optional id of the user deleting the template</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.SaveTemplate(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.ITemplate},System.Int32)">
            <summary>
                Saves a collection of <see cref="T:Umbraco.Cms.Core.Models.Template" /> objects
            </summary>
            <param name="templates">List of <see cref="T:Umbraco.Cms.Core.Models.Template" /> to save</param>
            <param name="userId">Optional id of the user</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.GetTemplateFileContentStream(System.String)">
            <summary>
                Gets the content of a template as a stream.
            </summary>
            <param name="filepath">The filesystem path to the template.</param>
            <returns>The content of the template.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.SetTemplateFileContent(System.String,System.IO.Stream)">
            <summary>
                Sets the content of a template.
            </summary>
            <param name="filepath">The filesystem path to the template.</param>
            <param name="content">The content of the template.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IFileService.GetTemplateFileSize(System.String)">
            <summary>
                Gets the size of a template.
            </summary>
            <param name="filepath">The filesystem path to the template.</param>
            <returns>The size of the template.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IIndexedEntitySearchService">
            <summary>
            Performs entity search against search indexes.
            </summary>
            <remarks>
            Note that this service only supports entity types that are included in search indexes.
            By default this means documents, media and members.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IIsoCodeValidator">
            <summary>
            A validator for validating if an ISO code string can be is valid.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IIsoCodeValidator.IsValid(System.String)">
            <summary>
            Validates that a string is a valid ISO code.
            </summary>
            <param name="isoCode">The string to validate.</param>
            <returns>True if the string is a valid ISO code.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IIsoCodeValidator.IsValid(System.Globalization.CultureInfo)">
            <summary>
            Validates that a cultureInfo is a valid culture info in Umbraco.
            </summary>
            <param name="culture">The culture info to validate.</param>
            <returns>True if the CultureInfo is valid in Umbraco.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IKeyValueService">
            <summary>
                Manages the simplified key/value store.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IKeyValueService.GetValue(System.String)">
            <summary>
                Gets a value.
            </summary>
            <remarks>Returns <c>null</c> if no value was found for the key.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IKeyValueService.FindByKeyPrefix(System.String)">
            <summary>
                Returns key/value pairs for all keys with the specified prefix.
            </summary>
            <param name="keyPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IKeyValueService.SetValue(System.String,System.String)">
            <summary>
                Sets a value.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IKeyValueService.SetValue(System.String,System.String,System.String)">
            <summary>
                Sets a value.
            </summary>
            <remarks>
                Sets the value to <paramref name="newValue" /> if the value is <paramref name="originValue" />,
                and returns true; otherwise throws an exception. In other words, ensures that the value has not changed
                before setting it.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IKeyValueService.TrySetValue(System.String,System.String,System.String)">
            <summary>
                Tries to set a value.
            </summary>
            <remarks>
                Sets the value to <paramref name="newValue" /> if the value is <paramref name="originValue" />,
                and returns true; otherwise returns false. In other words, ensures that the value has not changed
                before setting it.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILanguageService.GetAsync(System.String)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.ILanguage" /> by its iso code
            </summary>
            <param name="isoCode">Iso Code of the language (ie. en-US)</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.ILanguage" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILanguageService.GetDefaultLanguageAsync">
            <summary>
                Gets the default <see cref="T:Umbraco.Cms.Core.Models.ILanguage" />
            </summary>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.ILanguage" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILanguageService.GetDefaultIsoCodeAsync">
            <summary>
                Gets the default language ISO code.
            </summary>
            <remarks>
                <para>This can be optimized and bypass all deep cloning.</para>
            </remarks>
            <returns>The default language ISO code</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILanguageService.GetAllAsync">
            <summary>
                Gets all available languages
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.ILanguage" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILanguageService.GetMultipleAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Gets all languages with the given iso codes
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.ILanguage" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILanguageService.UpdateAsync(Umbraco.Cms.Core.Models.ILanguage,System.Guid)">
            <summary>
                Updates an existing <see cref="T:Umbraco.Cms.Core.Models.ILanguage" /> object
            </summary>
            <param name="language"><see cref="T:Umbraco.Cms.Core.Models.ILanguage" /> to update</param>
            <param name="userKey">Key of the user saving the language</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILanguageService.CreateAsync(Umbraco.Cms.Core.Models.ILanguage,System.Guid)">
            <summary>
                Creates a new <see cref="T:Umbraco.Cms.Core.Models.ILanguage" /> object
            </summary>
            <param name="language"><see cref="T:Umbraco.Cms.Core.Models.ILanguage" /> to create</param>
            <param name="userKey">Key of the user creating the language</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILanguageService.DeleteAsync(System.String,System.Guid)">
            <summary>
                Deletes a <see cref="T:Umbraco.Cms.Core.Models.ILanguage" /> by removing it and its usages from the db
            </summary>
            <param name="isoCode">The ISO code of the <see cref="T:Umbraco.Cms.Core.Models.ILanguage" /> to delete</param>
            <param name="userKey">Key of the user deleting the language</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILanguageService.GetIsoCodesByIdsAsync(System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Retrieves the isoCodes of configured languages by their Ids
            </summary>
            <param name="ids">The ids of the configured <see cref="T:Umbraco.Cms.Core.Models.ILanguage" />s</param>
            <returns>The ISO codes of the <see cref="T:Umbraco.Cms.Core.Models.ILanguage" />s</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.ILocalizationService">
            <summary>
                Defines the Localization Service, which is an easy access to operations involving Languages and Dictionary
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizationService.AddOrUpdateDictionaryValue(Umbraco.Cms.Core.Models.IDictionaryItem,Umbraco.Cms.Core.Models.ILanguage,System.String)">
            <summary>
                Adds or updates a translation for a dictionary item and language
            </summary>
            <param name="item"></param>
            <param name="language"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizationService.CreateDictionaryItemWithIdentity(System.String,System.Nullable{System.Guid},System.String)">
            <summary>
                Creates and saves a new dictionary item and assigns a value to all languages if defaultValue is specified.
            </summary>
            <param name="key"></param>
            <param name="parentId"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizationService.GetDictionaryItemById(System.Int32)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> by its <see cref="T:System.Int32" /> id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /></param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizationService.GetDictionaryItemById(System.Guid)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> by its <see cref="T:System.Guid" /> id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /></param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizationService.GetDictionaryItemsByIds(System.Guid[])">
            <summary>
                Gets a collection of <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> by their <see cref="T:System.Guid" /> ids
            </summary>
            <param name="ids">Ids of the <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /></param>
            <returns>
                A collection of <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizationService.GetDictionaryItemByKey(System.String)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> by its key
            </summary>
            <param name="key">Key of the <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /></param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizationService.GetDictionaryItemsByKeys(System.String[])">
            <summary>
                Gets a collection of <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> by their keys
            </summary>
            <param name="keys">Keys of the <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /></param>
            <returns>
                A collection of <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizationService.GetDictionaryItemChildren(System.Guid)">
            <summary>
                Gets a list of children for a <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" />
            </summary>
            <param name="parentId">Id of the parent</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizationService.GetDictionaryItemDescendants(System.Nullable{System.Guid})">
            <summary>
                Gets a list of descendants for a <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" />
            </summary>
            <param name="parentId">Id of the parent, null will return all dictionary items</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizationService.GetRootDictionaryItems">
            <summary>
                Gets the root/top <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizationService.DictionaryItemExists(System.String)">
            <summary>
                Checks if a <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> with given key exists
            </summary>
            <param name="key">Key of the <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /></param>
            <returns>True if a <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> exists, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizationService.Save(Umbraco.Cms.Core.Models.IDictionaryItem,System.Int32)">
            <summary>
                Saves a <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> object
            </summary>
            <param name="dictionaryItem"><see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> to save</param>
            <param name="userId">Optional id of the user saving the dictionary item</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizationService.Delete(Umbraco.Cms.Core.Models.IDictionaryItem,System.Int32)">
            <summary>
                Deletes a <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> object and its related translations
                as well as its children.
            </summary>
            <param name="dictionaryItem"><see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> to delete</param>
            <param name="userId">Optional id of the user deleting the dictionary item</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizationService.GetLanguageById(System.Int32)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.ILanguage" /> by its id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.ILanguage" /></param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.ILanguage" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizationService.GetLanguageByIsoCode(System.String)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.ILanguage" /> by its iso code
            </summary>
            <param name="isoCode">Iso Code of the language (ie. en-US)</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.ILanguage" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizationService.GetLanguageIdByIsoCode(System.String)">
            <summary>
                Gets a language identifier from its ISO code.
            </summary>
            <remarks>
                <para>This can be optimized and bypass all deep cloning.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizationService.GetLanguageIsoCodeById(System.Int32)">
            <summary>
                Gets a language ISO code from its identifier.
            </summary>
            <remarks>
                <para>This can be optimized and bypass all deep cloning.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizationService.GetDefaultLanguageIsoCode">
            <summary>
                Gets the default language ISO code.
            </summary>
            <remarks>
                <para>This can be optimized and bypass all deep cloning.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizationService.GetDefaultLanguageId">
            <summary>
                Gets the default language identifier.
            </summary>
            <remarks>
                <para>This can be optimized and bypass all deep cloning.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizationService.GetAllLanguages">
            <summary>
                Gets all available languages
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.ILanguage" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizationService.Save(Umbraco.Cms.Core.Models.ILanguage,System.Int32)">
            <summary>
                Saves a <see cref="T:Umbraco.Cms.Core.Models.ILanguage" /> object
            </summary>
            <param name="language"><see cref="T:Umbraco.Cms.Core.Models.ILanguage" /> to save</param>
            <param name="userId">Optional id of the user saving the language</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizationService.Delete(Umbraco.Cms.Core.Models.ILanguage,System.Int32)">
            <summary>
                Deletes a <see cref="T:Umbraco.Cms.Core.Models.ILanguage" /> by removing it and its usages from the db
            </summary>
            <param name="language"><see cref="T:Umbraco.Cms.Core.Models.ILanguage" /> to delete</param>
            <param name="userId">Optional id of the user deleting the language</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizationService.GetDictionaryItemKeyMap">
            <summary>
                Gets the full dictionary key map.
            </summary>
            <returns>The full dictionary key map.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.ILocalizedTextService">
            <summary>
                The entry point to localize any key in the text storage source for a given culture
            </summary>
            <remarks>
                This class is created to be as simple as possible so that it can be replaced very easily,
                all other methods are extension methods that simply call the one underlying method in this class
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizedTextService.Localize(System.String,System.String,System.Globalization.CultureInfo,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Localize a key with variables
            </summary>
            <param name="area"></param>
            <param name="alias"></param>
            <param name="culture"></param>
            <param name="tokens">This can be null</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizedTextService.GetAllStoredValuesByAreaAndAlias(System.Globalization.CultureInfo)">
            <summary>
                Returns all key/values in storage for the given culture
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizedTextService.GetAllStoredValues(System.Globalization.CultureInfo)">
            <summary>
                Returns all key/values in storage for the given culture
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizedTextService.GetSupportedCultures">
            <summary>
                Returns a list of all currently supported cultures
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILocalizedTextService.ConvertToSupportedCultureWithRegionCode(System.Globalization.CultureInfo)">
            <summary>
                Tries to resolve a full 4 letter culture from a 2 letter culture name
            </summary>
            <param name="currentCulture">
                The culture to determine if it is only a 2 letter culture, if so we'll try to convert it, otherwise it will just be
                returned
            </param>
            <returns></returns>
            <remarks>
                TODO: This is just a hack due to the way we store the language files, they should be stored with 4 letters since
                that
                is what they reference but they are stored with 2, further more our user's languages are stored with 2. So this
                attempts
                to resolve the full culture if possible.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILogViewerRepository.GetLogs(Umbraco.Cms.Core.Logging.Viewer.LogTimePeriod,System.String)">
            <summary>
                Returns the collection of log entries.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILogViewerRepository.GetLogCount(Umbraco.Cms.Core.Logging.Viewer.LogTimePeriod)">
            <summary>
                Returns the number of the different log level entries.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILogViewerRepository.GetMessageTemplates(Umbraco.Cms.Core.Logging.Viewer.LogTimePeriod)">
            <summary>
                Returns a list of all unique message templates and their counts.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILogViewerRepository.GetGlobalMinLogLevel">
            <summary>
                Gets the minimum-level log value from the config file.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILogViewerRepository.RestrictedToMinimumLevel">
            <summary>
                Get the minimum-level log value from the config file.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILogViewerService.GetPagedLogsAsync(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,Umbraco.Cms.Core.Direction,System.String,System.String[])">
            <summary>
                Gets all logs as a paged model. The attempt will fail if the log files
                for the given time period are too large (more than 1GB).
            </summary>
            <param name="startDate">The start date for the date range.</param>
            <param name="endDate">The end date for the date range.</param>
            <param name="skip">The amount of items to skip.</param>
            <param name="take">The amount of items to take.</param>
            <param name="orderDirection">
                The direction in which the log entries are to be ordered.
            </param>
            <param name="filterExpression">The query expression to filter on.</param>
            <param name="logLevels">The log levels for which to retrieve the log messages.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILogViewerService.GetSavedLogQueriesAsync(System.Int32,System.Int32)">
            <summary>
                Get all saved log queries from your chosen data source as a paged model.
            </summary>
            <param name="skip">The amount of items to skip.</param>
            <param name="take">The amount of items to take.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILogViewerService.GetSavedLogQueryByNameAsync(System.String)">
            <summary>
                Gets a saved log query by name from your chosen data source.
            </summary>
            <param name="name">The name of the saved log query.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILogViewerService.AddSavedLogQueryAsync(System.String,System.String)">
            <summary>
                Adds a new saved log query to your chosen data source.
            </summary>
            <param name="name">The name of the new saved log query.</param>
            <param name="query">The query of the new saved log query.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILogViewerService.DeleteSavedLogQueryAsync(System.String)">
            <summary>
                Deletes a saved log query to your chosen data source.
            </summary>
            <param name="name">The name of the saved log search.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILogViewerService.CanViewLogsAsync(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Returns a value indicating whether the log files for the given time
                period are not too large to view (more than 1GB).
            </summary>
            <param name="startDate">The start date for the date range.</param>
            <param name="endDate">The end date for the date range.</param>
            <returns>The value whether or not you are able to view the logs.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILogViewerService.GetLogLevelCountsAsync(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Returns a number of the different log level entries.
                The attempt will fail if the log files for the given
                time period are too large (more than 1GB).
            </summary>
            <param name="startDate">The start date for the date range.</param>
            <param name="endDate">The end date for the date range.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILogViewerService.GetMessageTemplatesAsync(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32)">
            <summary>
                Returns a paged model of all unique message templates and their counts.
                The attempt will fail if the log files for the given
                time period are too large (more than 1GB).
            </summary>
            <param name="startDate">The start date for the date range.</param>
            <param name="endDate">The end date for the date range.</param>
            <param name="skip">The amount of items to skip.</param>
            <param name="take">The amount of items to take.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILogViewerService.GetLogLevelsFromSinks">
            <summary>
                Get the log level values of the global minimum and the UmbracoFile one from the config file.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ILogViewerService.GetGlobalMinLogLevel">
            <summary>
                Get the minimum log level value from the config file.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IMediaPermissionService">
            <summary>
                Manages permissions for media access.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaPermissionService.AuthorizeAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Guid)">
            <summary>
                Authorize that a user has access to a media item.
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to authorize.</param>
            <param name="mediaKey">The identifier of the media item to check for access.</param>
            <returns>A task resolving into a <see cref="T:Umbraco.Cms.Core.Services.AuthorizationStatus.MediaAuthorizationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaPermissionService.AuthorizeAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
                Authorize that a user has access to media items.
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to authorize.</param>
            <param name="mediaKeys">The identifiers of the media items to check for access.</param>
            <returns>A task resolving into a <see cref="T:Umbraco.Cms.Core.Services.AuthorizationStatus.MediaAuthorizationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaPermissionService.AuthorizeRootAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser)">
            <summary>
                Authorize that a user has access to the media root item.
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to authorize.</param>
            <returns>A task resolving into a <see cref="T:Umbraco.Cms.Core.Services.AuthorizationStatus.MediaAuthorizationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaPermissionService.AuthorizeBinAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser)">
            <summary>
                Authorize that a user has access to the media bin item.
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to authorize.</param>
            <returns>A task resolving into a <see cref="T:Umbraco.Cms.Core.Services.AuthorizationStatus.MediaAuthorizationStatus"/>.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IMediaService">
            <summary>
                Defines the Media Service, which is an easy access to operations involving <see cref="T:Umbraco.Cms.Core.Models.IMedia" />
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.CreateMedia(System.String,System.Guid,System.String,System.Int32)">
            <summary>
                Creates an <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> object using the alias of the <see cref="T:Umbraco.Cms.Core.Models.IMediaType" />
                that this Media should based on.
            </summary>
            <remarks>
                Note that using this method will simply return a new IMedia without any identity
                as it has not yet been persisted. It is intended as a shortcut to creating new media objects
                that does not invoke a save operation against the database.
            </remarks>
            <param name="name">Name of the Media object</param>
            <param name="parentId">Id of Parent for the new Media item</param>
            <param name="mediaTypeAlias">Alias of the <see cref="T:Umbraco.Cms.Core.Models.IMediaType" /></param>
            <param name="userId">Optional id of the user creating the media item</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IMedia" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.CreateMedia(System.String,System.Int32,System.String,System.Int32)">
            <summary>
                Creates an <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> object using the alias of the <see cref="T:Umbraco.Cms.Core.Models.IMediaType" />
                that this Media should based on.
            </summary>
            <remarks>
                Note that using this method will simply return a new IMedia without any identity
                as it has not yet been persisted. It is intended as a shortcut to creating new media objects
                that does not invoke a save operation against the database.
            </remarks>
            <param name="name">Name of the Media object</param>
            <param name="parentId">Id of Parent for the new Media item</param>
            <param name="mediaTypeAlias">Alias of the <see cref="T:Umbraco.Cms.Core.Models.IMediaType" /></param>
            <param name="userId">Optional id of the user creating the media item</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IMedia" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.CreateMedia(System.String,Umbraco.Cms.Core.Models.IMedia,System.String,System.Int32)">
            <summary>
                Creates an <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> object using the alias of the <see cref="T:Umbraco.Cms.Core.Models.IMediaType" />
                that this Media should based on.
            </summary>
            <remarks>
                Note that using this method will simply return a new IMedia without any identity
                as it has not yet been persisted. It is intended as a shortcut to creating new media objects
                that does not invoke a save operation against the database.
            </remarks>
            <param name="name">Name of the Media object</param>
            <param name="parent">Parent <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> for the new Media item</param>
            <param name="mediaTypeAlias">Alias of the <see cref="T:Umbraco.Cms.Core.Models.IMediaType" /></param>
            <param name="userId">Optional id of the user creating the media item</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IMedia" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.GetById(System.Int32)">
            <summary>
                Gets an <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> object by Id
            </summary>
            <param name="id">Id of the Content to retrieve</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IMedia" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.GetPagedChildren(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IMedia},Umbraco.Cms.Core.Services.Ordering)">
            <summary>
                Gets a collection of <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> objects by Parent Id
            </summary>
            <param name="id">Id of the Parent to retrieve Children from</param>
            <param name="pageIndex">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="totalRecords">Total records query would return without paging</param>
            <param name="filter"></param>
            <param name="ordering"></param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IContent" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.GetPagedDescendants(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IMedia},Umbraco.Cms.Core.Services.Ordering)">
            <summary>
                Gets a collection of <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> objects by Parent Id
            </summary>
            <param name="id">Id of the Parent to retrieve Descendants from</param>
            <param name="pageIndex">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="totalRecords">Total records query would return without paging</param>
            <param name="ordering"></param>
            <param name="filter"></param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IContent" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.GetPagedOfType(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IMedia},Umbraco.Cms.Core.Services.Ordering)">
            <summary>
                Gets paged documents of a content
            </summary>
            <param name="contentTypeId">The page number.</param>
            <param name="pageIndex">The page number.</param>
            <param name="pageSize">The page size.</param>
            <param name="totalRecords">Total number of documents.</param>
            <param name="filter">Search text filter.</param>
            <param name="ordering">Ordering infos.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.GetPagedOfTypes(System.Int32[],System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IMedia},Umbraco.Cms.Core.Services.Ordering)">
            <summary>
                Gets paged documents for specified content types
            </summary>
            <param name="contentTypeIds">The page number.</param>
            <param name="pageIndex">The page number.</param>
            <param name="pageSize">The page size.</param>
            <param name="totalRecords">Total number of documents.</param>
            <param name="filter">Search text filter.</param>
            <param name="ordering">Ordering infos.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.GetRootMedia">
            <summary>
                Gets a collection of <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> objects, which reside at the first level / root
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.GetPagedMediaInRecycleBin(System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IMedia},Umbraco.Cms.Core.Services.Ordering)">
            <summary>
                Gets a collection of an <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> objects, which resides in the Recycle Bin
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.Move(Umbraco.Cms.Core.Models.IMedia,System.Int32,System.Int32)">
            <summary>
                Moves an <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> object to a new location
            </summary>
            <param name="media">The <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> to move</param>
            <param name="parentId">Id of the Media's new Parent</param>
            <param name="userId">Id of the User moving the Media</param>
            <returns>True if moving succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.MoveToRecycleBin(Umbraco.Cms.Core.Models.IMedia,System.Int32)">
            <summary>
                Deletes an <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> object by moving it to the Recycle Bin
            </summary>
            <param name="media">The <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> to delete</param>
            <param name="userId">Id of the User deleting the Media</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.EmptyRecycleBin(System.Int32)">
            <summary>
                Empties the Recycle Bin by deleting all <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> that resides in the bin
            </summary>
            <param name="userId">Optional Id of the User emptying the Recycle Bin</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.RecycleBinSmells">
            <summary>
                Returns true if there is any media in the recycle bin
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.DeleteMediaOfType(System.Int32,System.Int32)">
            <summary>
                Deletes all media of specified type. All children of deleted media is moved to Recycle Bin.
            </summary>
            <remarks>This needs extra care and attention as its potentially a dangerous and extensive operation</remarks>
            <param name="mediaTypeId">Id of the <see cref="T:Umbraco.Cms.Core.Models.IMediaType" /></param>
            <param name="userId">Optional Id of the user deleting Media</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.DeleteMediaOfTypes(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
                Deletes all media of the specified types. All Descendants of deleted media that is not of these types is moved to
                Recycle Bin.
            </summary>
            <remarks>This needs extra care and attention as its potentially a dangerous and extensive operation</remarks>
            <param name="mediaTypeIds">Ids of the <see cref="T:Umbraco.Cms.Core.Models.IMediaType" />s</param>
            <param name="userId">Optional Id of the user issuing the delete operation</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.Delete(Umbraco.Cms.Core.Models.IMedia,System.Int32)">
            <summary>
                Permanently deletes an <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> object
            </summary>
            <remarks>
                Please note that this method will completely remove the Media from the database,
                but current not from the file system.
            </remarks>
            <param name="media">The <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> to delete</param>
            <param name="userId">Id of the User deleting the Media</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.Save(Umbraco.Cms.Core.Models.IMedia,System.Int32)">
            <summary>
                Saves a single <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> object
            </summary>
            <param name="media">The <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> to save</param>
            <param name="userId">Id of the User saving the Media</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.Save(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IMedia},System.Int32)">
            <summary>
                Saves a collection of <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> objects
            </summary>
            <param name="medias">Collection of <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> to save</param>
            <param name="userId">Id of the User saving the Media</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.GetById(System.Guid)">
            <summary>
                Gets an <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> object by its 'UniqueId'
            </summary>
            <param name="key">Guid key of the Media to retrieve</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IMedia" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.GetByLevel(System.Int32)">
            <summary>
                Gets a collection of <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> objects by Level
            </summary>
            <param name="level">The level to retrieve Media from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.GetVersion(System.Int32)">
            <summary>
                Gets a specific version of an <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> item.
            </summary>
            <param name="versionId">Id of the version to retrieve</param>
            <returns>An <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> item</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.GetVersions(System.Int32)">
            <summary>
                Gets a collection of an <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> objects versions by Id
            </summary>
            <param name="id"></param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.HasChildren(System.Int32)">
            <summary>
                Checks whether an <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> item has any children
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.IMedia" /></param>
            <returns>True if the media has any children otherwise False</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.DeleteVersions(System.Int32,System.DateTime,System.Int32)">
            <summary>
                Permanently deletes versions from an <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> object prior to a specific date.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> object to delete versions from</param>
            <param name="versionDate">Latest version date</param>
            <param name="userId">Optional Id of the User deleting versions of a Content object</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.DeleteVersion(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
                Permanently deletes specific version(s) from an <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> object.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> object to delete a version from</param>
            <param name="versionId">Id of the version to delete</param>
            <param name="deletePriorVersions">Boolean indicating whether to delete versions prior to the versionId</param>
            <param name="userId">Optional Id of the User deleting versions of a Content object</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.GetMediaByPath(System.String)">
            <summary>
                Gets an <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> object from the path stored in the 'umbracoFile' property.
            </summary>
            <param name="mediaPath">Path of the media item to retrieve (for example: /media/1024/koala_403x328.jpg)</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IMedia" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.GetAncestors(System.Int32)">
            <summary>
                Gets a collection of <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> objects, which are ancestors of the current media.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> to retrieve ancestors for</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.GetAncestors(Umbraco.Cms.Core.Models.IMedia)">
            <summary>
                Gets a collection of <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> objects, which are ancestors of the current media.
            </summary>
            <param name="media"><see cref="T:Umbraco.Cms.Core.Models.IMedia" /> to retrieve ancestors for</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.GetParent(System.Int32)">
            <summary>
                Gets the parent of the current media as an <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> item.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> to retrieve the parent from</param>
            <returns>Parent <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> object</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.GetParent(Umbraco.Cms.Core.Models.IMedia)">
            <summary>
                Gets the parent of the current media as an <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> item.
            </summary>
            <param name="media"><see cref="T:Umbraco.Cms.Core.Models.IMedia" /> to retrieve the parent from</param>
            <returns>Parent <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> object</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.Sort(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IMedia},System.Int32)">
            <summary>
                Sorts a collection of <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> objects by updating the SortOrder according
                to the ordering of items in the passed in <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <param name="items"></param>
            <param name="userId"></param>
            <returns>True if sorting succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.CreateMediaWithIdentity(System.String,Umbraco.Cms.Core.Models.IMedia,System.String,System.Int32)">
            <summary>
                Creates an <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> object using the alias of the <see cref="T:Umbraco.Cms.Core.Models.IMediaType" />
                that this Media should based on.
            </summary>
            <remarks>
                This method returns an <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> object that has been persisted to the database
                and therefor has an identity.
            </remarks>
            <param name="name">Name of the Media object</param>
            <param name="parent">Parent <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> for the new Media item</param>
            <param name="mediaTypeAlias">Alias of the <see cref="T:Umbraco.Cms.Core.Models.IMediaType" /></param>
            <param name="userId">Optional id of the user creating the media item</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IMedia" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.CreateMediaWithIdentity(System.String,System.Int32,System.String,System.Int32)">
            <summary>
                Creates an <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> object using the alias of the <see cref="T:Umbraco.Cms.Core.Models.IMediaType" />
                that this Media should based on.
            </summary>
            <remarks>
                This method returns an <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> object that has been persisted to the database
                and therefor has an identity.
            </remarks>
            <param name="name">Name of the Media object</param>
            <param name="parentId">Id of Parent for the new Media item</param>
            <param name="mediaTypeAlias">Alias of the <see cref="T:Umbraco.Cms.Core.Models.IMediaType" /></param>
            <param name="userId">Optional id of the user creating the media item</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IMedia" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.GetMediaFileContentStream(System.String)">
            <summary>
                Gets the content of a media as a stream.
            </summary>
            <param name="filepath">The filesystem path to the media.</param>
            <returns>The content of the media.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.SetMediaFileContent(System.String,System.IO.Stream)">
            <summary>
                Sets the content of a media.
            </summary>
            <param name="filepath">The filesystem path to the media.</param>
            <param name="content">The content of the media.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.DeleteMediaFile(System.String)">
            <summary>
                Deletes a media file.
            </summary>
            <param name="filepath">The filesystem path to the media.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMediaService.GetMediaFileSize(System.String)">
            <summary>
                Gets the size of a media.
            </summary>
            <param name="filepath">The filesystem path to the media.</param>
            <returns>The size of the media.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IMediaTypeService">
            <summary>
                Manages <see cref="T:Umbraco.Cms.Core.Models.IMediaType" /> objects.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberGroupService.GetByNameAsync(System.String)">
            <summary>
                Get a member group by name.
            </summary>
            <param name="name">Name of the member group to get.</param>
            <returns>A <see cref="T:Umbraco.Cms.Core.Models.IMemberGroup" /> object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberGroupService.GetAsync(System.Guid)">
            <summary>
                Get a member group by key.
            </summary>
            <param name="key"><see cref="T:System.Guid" /> of the member group to get.</param>
            <returns>A <see cref="T:Umbraco.Cms.Core.Models.IMemberGroup" /> object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberGroupService.GetAllAsync">
            <summary>
                Gets all member groups
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IMemberGroup" /> objects.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberGroupService.GetByIdsAsync(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Gets a list of member groups with the given ids.
            </summary>
            <param name="ids">An enumerable list of <see cref="T:System.Int32" /> ids, to get the member groups by.</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IMemberGroup" /> objects.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberGroupService.CreateAsync(Umbraco.Cms.Core.Models.IMemberGroup)">
            <summary>
                Creates a new <see cref="T:Umbraco.Cms.Core.Models.IMemberGroup" /> object
            </summary>
            <param name="memberGroup"><see cref="T:Umbraco.Cms.Core.Models.IMemberGroup" /> to create</param>
            <returns>An attempt with a status of whether the operation was successful or not, and the created object if it succeeded.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberGroupService.DeleteAsync(System.Guid)">
            <summary>
                Deletes a <see cref="T:Umbraco.Cms.Core.Models.IMemberGroup" /> by removing it and its usages from the db
            </summary>
            <param name="key">The key of the <see cref="T:Umbraco.Cms.Core.Models.IMemberGroup" /> to delete</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberGroupService.UpdateAsync(Umbraco.Cms.Core.Models.IMemberGroup)">
            <summary>
                Updates <see cref="T:Umbraco.Cms.Core.Models.IMemberGroup" /> object
            </summary>
            <param name="memberGroup"><see cref="T:Umbraco.Cms.Core.Models.IMemberGroup" /> to create</param>
            <returns>An attempt with a status of whether the operation was successful or not, and the object.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IMemberService">
            <summary>
                Defines the MemberService, which is an easy access to operations involving (umbraco) members.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.GetAll(System.Int64,System.Int32,System.Int64@,System.String,Umbraco.Cms.Core.Direction,System.String,System.String)">
            <summary>
                Gets a list of paged <see cref="T:Umbraco.Cms.Core.Models.IMember" /> objects
            </summary>
            <remarks>An <see cref="T:Umbraco.Cms.Core.Models.IMember" /> can be of type <see cref="T:Umbraco.Cms.Core.Models.IMember" /> </remarks>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="orderBy">Field to order by</param>
            <param name="orderDirection">Direction to order by</param>
            <param name="memberTypeAlias"></param>
            <param name="filter">Search text filter</param>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.GetAll(System.Int32,System.Int32,System.Int64@,System.String,Umbraco.Cms.Core.Direction,System.String,System.String)">
            <summary>
                Gets a list of paged <see cref="T:Umbraco.Cms.Core.Models.IMember" /> objects
            </summary>
            <remarks>An <see cref="T:Umbraco.Cms.Core.Models.IMember" /> can be of type <see cref="T:Umbraco.Cms.Core.Models.IMember" /> </remarks>
            <param name="skip">Amount to skip.</param>
            <param name="take">Amount to take.</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="orderBy">Field to order by</param>
            <param name="orderDirection">Direction to order by</param>
            <param name="memberTypeAlias"></param>
            <param name="filter">Search text filter</param>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.GetAll(System.Int64,System.Int32,System.Int64@,System.String,Umbraco.Cms.Core.Direction,System.Boolean,System.String,System.String)">
            <summary>
                Gets a list of paged <see cref="T:Umbraco.Cms.Core.Models.IMember" /> objects
            </summary>
            <remarks>An <see cref="T:Umbraco.Cms.Core.Models.IMember" /> can be of type <see cref="T:Umbraco.Cms.Core.Models.IMember" /> </remarks>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="orderBy">Field to order by</param>
            <param name="orderDirection">Direction to order by</param>
            <param name="orderBySystemField">Flag to indicate when ordering by system field</param>
            <param name="memberTypeAlias"></param>
            <param name="filter">Search text filter</param>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.CreateMember(System.String,System.String,System.String,System.String)">
            <summary>
                Creates an <see cref="T:Umbraco.Cms.Core.Models.IMember" /> object without persisting it
            </summary>
            <remarks>
                This method is convenient for when you need to add properties to a new Member
                before persisting it in order to limit the amount of times its saved.
                Also note that the returned <see cref="T:Umbraco.Cms.Core.Models.IMember" /> will not have an Id until its saved.
            </remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="memberTypeAlias">Alias of the MemberType the Member should be based on</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IMember" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.CreateMember(System.String,System.String,System.String,Umbraco.Cms.Core.Models.IMemberType)">
            <summary>
                Creates an <see cref="T:Umbraco.Cms.Core.Models.IMember" /> object without persisting it
            </summary>
            <remarks>
                This method is convenient for when you need to add properties to a new Member
                before persisting it in order to limit the amount of times its saved.
                Also note that the returned <see cref="T:Umbraco.Cms.Core.Models.IMember" /> will not have an Id until its saved.
            </remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="memberType">MemberType the Member should be based on</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IMember" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.CreateMemberWithIdentity(System.String,System.String,System.String)">
            <summary>
                Creates and persists a Member
            </summary>
            <remarks>
                Using this method will persist the Member object before its returned
                meaning that it will have an Id available (unlike the CreateMember method)
            </remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="memberTypeAlias">Alias of the MemberType the Member should be based on</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IMember" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.CreateMemberWithIdentity(System.String,System.String,System.String,System.Boolean)">
            <summary>
                Creates and persists a Member
            </summary>
            <remarks>
                Using this method will persist the Member object before its returned
                meaning that it will have an Id available (unlike the CreateMember method)
            </remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="memberTypeAlias">Alias of the MemberType the Member should be based on</param>
            <param name="isApproved">Whether the member is approved or not</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IMember" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.CreateMemberWithIdentity(System.String,System.String,System.String,System.String)">
            <summary>
                Creates and persists a Member
            </summary>
            <remarks>
                Using this method will persist the Member object before its returned
                meaning that it will have an Id available (unlike the CreateMember method)
            </remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="memberTypeAlias">Alias of the MemberType the Member should be based on</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IMember" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.CreateMemberWithIdentity(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
                Creates and persists a Member
            </summary>
            <remarks>
                Using this method will persist the Member object before its returned
                meaning that it will have an Id available (unlike the CreateMember method)
            </remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="memberTypeAlias">Alias of the MemberType the Member should be based on</param>
            <param name="isApproved">Whether the member is approved or not</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IMember" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.CreateMemberWithIdentity(System.String,System.String,System.String,Umbraco.Cms.Core.Models.IMemberType)">
            <summary>
                Creates and persists a Member
            </summary>
            <remarks>
                Using this method will persist the Member object before its returned
                meaning that it will have an Id available (unlike the CreateMember method)
            </remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="memberType">MemberType the Member should be based on</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IMember" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.Save(Umbraco.Cms.Core.Models.IMember,Umbraco.Cms.Core.Models.PublishNotificationSaveOptions,System.Int32)">
            <summary>
                Saves an <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" />
            </summary>
            <remarks>An <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" /> can be of type <see cref="T:Umbraco.Cms.Core.Models.IMember" /> or <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /></remarks>
            <param name="member"><see cref="T:Umbraco.Cms.Core.Models.IMember" /> or <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to Save</param>
            <param name="publishNotificationSaveOptions"> Enum for deciding which notifications to publish.</param>
            <param name="userId">Id of the User saving the Member</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.Save(Umbraco.Cms.Core.Models.IMember,System.Int32)">
            <summary>
                Saves a single <see cref="T:Umbraco.Cms.Core.Models.IMember" /> object
            </summary>
            <param name="media">The <see cref="T:Umbraco.Cms.Core.Models.IMember" /> to save</param>
            <param name="userId">Id of the User saving the Member</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.Save(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IMember},System.Int32)">
            <summary>
                Saves a list of <see cref="T:Umbraco.Cms.Core.Models.IMember" /> objects
            </summary>
            <param name="members">Collection of <see cref="T:Umbraco.Cms.Core.Models.IMember" /> to save</param>
            <param name="userId">Id of the User saving the Members</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.Count(System.String)">
            <summary>
                Gets the count of Members by an optional MemberType alias
            </summary>
            <remarks>If no alias is supplied then the count for all Member will be returned</remarks>
            <param name="memberTypeAlias">Optional alias for the MemberType when counting number of Members</param>
            <returns><see cref="T:System.Int32" /> with number of Members</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.Exists(System.Int32)">
            <summary>
                Checks if a Member with the id exists
            </summary>
            <param name="id">Id of the Member</param>
            <returns><c>True</c> if the Member exists otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.GetByKey(System.Guid)">
            <summary>
                Gets a Member by the unique key
            </summary>
            <remarks>
                The guid key corresponds to the unique id in the database
                and the user id in the membership provider.
            </remarks>
            <param name="id"><see cref="T:System.Guid" /> Id</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IMember" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.GetById(System.Int32)">
            <summary>
                Gets a Member by its integer id
            </summary>
            <param name="id"><see cref="T:System.Int32" /> Id</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IMember" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.GetMembersByEmail(System.String)">
            <summary>
                Get an list of <see cref="T:Umbraco.Cms.Core.Models.IMember"/> for all members with the specified email.
            </summary>
            <param name="email">Email to use for retrieval</param>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.GetMembersByMemberType(System.String)">
            <summary>
                Gets all Members for the specified MemberType alias
            </summary>
            <param name="memberTypeAlias">Alias of the MemberType</param>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.GetMembersByMemberType(System.Int32)">
            <summary>
                Gets all Members for the MemberType id
            </summary>
            <param name="memberTypeId">Id of the MemberType</param>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.GetMembersByGroup(System.String)">
            <summary>
                Gets all Members within the specified MemberGroup name
            </summary>
            <param name="memberGroupName">Name of the MemberGroup</param>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.GetAllMembers(System.Int32[])">
            <summary>
                Gets all Members with the ids specified
            </summary>
            <remarks>If no Ids are specified all Members will be retrieved</remarks>
            <param name="ids">Optional list of Member Ids</param>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.GetByKeysAsync(System.Guid[])">
            <summary>
                Gets <see cref="T:Umbraco.Cms.Core.Models.IMember" /> objects by Ids
            </summary>
            <param name="ids">Ids of the Member to retrieve</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IMember" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.Delete(Umbraco.Cms.Core.Models.IMember,System.Int32)">
            <summary>
                Permanently deletes an <see cref="T:Umbraco.Cms.Core.Models.IMember" /> object
            </summary>
            <param name="member">The <see cref="T:Umbraco.Cms.Core.Models.IMember" /> to delete</param>
            <param name="userId">Id of the User deleting the Member</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.DeleteMembersOfType(System.Int32)">
            <summary>
                Delete Members of the specified MemberType id
            </summary>
            <param name="memberTypeId">Id of the MemberType</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.FindMembersByDisplayName(System.String,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
                Finds Members based on their display name
            </summary>
            <param name="displayNameToMatch">Display name to match</param>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="matchType">
                The type of match to make as <see cref="T:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType" />. Default is
                <see cref="F:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType.StartsWith" />
            </param>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.GetMembersByPropertyValue(System.String,System.String,Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
                Gets a list of Members based on a property search
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to search for</param>
            <param name="value"><see cref="T:System.String" /> Value to match</param>
            <param name="matchType">
                The type of match to make as <see cref="T:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType" />. Default is
                <see cref="F:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType.Exact" />
            </param>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.GetMembersByPropertyValue(System.String,System.Int32,Umbraco.Cms.Core.Persistence.Querying.ValuePropertyMatchType)">
            <summary>
                Gets a list of Members based on a property search
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to search for</param>
            <param name="value"><see cref="T:System.Int32" /> Value to match</param>
            <param name="matchType">
                The type of match to make as <see cref="T:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType" />. Default is
                <see cref="F:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType.Exact" />
            </param>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.GetMembersByPropertyValue(System.String,System.Boolean)">
            <summary>
                Gets a list of Members based on a property search
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to search for</param>
            <param name="value"><see cref="T:System.Boolean" /> Value to match</param>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberService.GetMembersByPropertyValue(System.String,System.DateTime,Umbraco.Cms.Core.Persistence.Querying.ValuePropertyMatchType)">
            <summary>
                Gets a list of Members based on a property search
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to search for</param>
            <param name="value"><see cref="T:System.DateTime" /> Value to match</param>
            <param name="matchType">
                The type of match to make as <see cref="T:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType" />. Default is
                <see cref="F:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType.Exact" />
            </param>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IMembershipMemberService">
            <summary>
                Defines part of the MemberService, which is specific to methods used by the membership provider.
            </summary>
            <remarks>
                Idea is to have this as an isolated interface so that it can be easily 'replaced' in the membership provider
                implementation.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMembershipMemberService.CreateMemberWithIdentity(System.String,System.String,Umbraco.Cms.Core.Models.IMemberType)">
            <summary>
                Creates and persists a new Member
            </summary>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="memberType"><see cref="T:Umbraco.Cms.Core.Models.IMemberType" /> which the Member should be based on</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IMember" />
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IMembershipMemberService`1">
            <summary>
                Defines part of the UserService/MemberService, which is specific to methods used by the membership provider.
                The generic type is restricted to <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" />. The implementation of this interface  uses
                either <see cref="T:Umbraco.Cms.Core.Models.IMember" /> for the MemberService or <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> for the UserService.
            </summary>
            <remarks>
                Idea is to have this as an isolated interface so that it can be easily 'replaced' in the membership provider
                implementation.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMembershipMemberService`1.GetCount(Umbraco.Cms.Core.Models.Membership.MemberCountType)">
            <summary>
                Gets the total number of Members or Users based on the count type
            </summary>
            <remarks>
                The way the Online count is done is the same way that it is done in the MS SqlMembershipProvider - We query for any
                members
                that have their last active date within the Membership.UserIsOnlineTimeWindow (which is in minutes). It isn't exact
                science
                but that is how MS have made theirs so we'll follow that principal.
            </remarks>
            <param name="countType"><see cref="T:Umbraco.Cms.Core.Models.Membership.MemberCountType" /> to count by</param>
            <returns><see cref="T:System.Int32" /> with number of Members or Users for passed in type</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMembershipMemberService`1.Exists(System.String)">
            <summary>
                Checks if a Member with the username exists
            </summary>
            <param name="username">Username to check</param>
            <returns><c>True</c> if the Member exists otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMembershipMemberService`1.CreateWithIdentity(System.String,System.String,System.String,System.String)">
            <summary>
                Creates and persists a new <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" />
            </summary>
            <remarks>An <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" /> can be of type <see cref="T:Umbraco.Cms.Core.Models.IMember" /> or <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /></remarks>
            <param name="username">Username of the <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" /> to create</param>
            <param name="email">Email of the <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" /> to create</param>
            <param name="passwordValue">
                This value should be the encoded/encrypted/hashed value for the password that will be
                stored in the database
            </param>
            <param name="memberTypeAlias">Alias of the Type</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMembershipMemberService`1.CreateWithIdentity(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
                Creates and persists a new <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" />
            </summary>
            <remarks>An <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" /> can be of type <see cref="T:Umbraco.Cms.Core.Models.IMember" /> or <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /></remarks>
            <param name="username">Username of the <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" /> to create</param>
            <param name="email">Email of the <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" /> to create</param>
            <param name="passwordValue">
                This value should be the encoded/encrypted/hashed value for the password that will be
                stored in the database
            </param>
            <param name="memberTypeAlias">Alias of the Type</param>
            <param name="isApproved">IsApproved of the <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" /> to create</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMembershipMemberService`1.GetByProviderKey(System.Object)">
            <summary>
                Gets an <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" /> by its provider key
            </summary>
            <remarks>An <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" /> can be of type <see cref="T:Umbraco.Cms.Core.Models.IMember" /> or <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /></remarks>
            <param name="id">Id to use for retrieval</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMembershipMemberService`1.GetByEmail(System.String)">
            <summary>
                Get an <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" /> by email
            </summary>
            <remarks>An <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" /> can be of type <see cref="T:Umbraco.Cms.Core.Models.IMember" /> or <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /></remarks>
            <param name="email">Email to use for retrieval</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMembershipMemberService`1.GetByUsername(System.String)">
            <summary>
                Get an <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" /> by username
            </summary>
            <remarks>An <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" /> can be of type <see cref="T:Umbraco.Cms.Core.Models.IMember" /> or <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /></remarks>
            <param name="username">Username to use for retrieval</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMembershipMemberService`1.Delete(`0)">
            <summary>
                Deletes an <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" />
            </summary>
            <remarks>An <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" /> can be of type <see cref="T:Umbraco.Cms.Core.Models.IMember" /> or <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /></remarks>
            <param name="membershipUser"><see cref="T:Umbraco.Cms.Core.Models.IMember" /> or <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to Delete</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMembershipMemberService`1.Save(`0)">
            <summary>
                Saves an <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" />
            </summary>
            <remarks>An <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" /> can be of type <see cref="T:Umbraco.Cms.Core.Models.IMember" /> or <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /></remarks>
            <param name="entity"><see cref="T:Umbraco.Cms.Core.Models.IMember" /> or <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to Save</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMembershipMemberService`1.Save(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Saves a list of <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" /> objects
            </summary>
            <remarks>An <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" /> can be of type <see cref="T:Umbraco.Cms.Core.Models.IMember" /> or <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /></remarks>
            <param name="entities"><see cref="T:System.Collections.Generic.IEnumerable`1" /> to save</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMembershipMemberService`1.FindByEmail(System.String,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
                Finds a list of <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" /> objects by a partial email string
            </summary>
            <remarks>An <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" /> can be of type <see cref="T:Umbraco.Cms.Core.Models.IMember" /> or <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /></remarks>
            <param name="emailStringToMatch">Partial email string to match</param>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="matchType">
                The type of match to make as <see cref="T:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType" />. Default is
                <see cref="F:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType.StartsWith" />
            </param>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMembershipMemberService`1.FindByUsername(System.String,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
                Finds a list of <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" /> objects by a partial username
            </summary>
            <remarks>An <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" /> can be of type <see cref="T:Umbraco.Cms.Core.Models.IMember" /> or <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /></remarks>
            <param name="login">Partial username to match</param>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="matchType">
                The type of match to make as <see cref="T:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType" />. Default is
                <see cref="F:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType.StartsWith" />
            </param>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMembershipMemberService`1.GetAll(System.Int64,System.Int32,System.Int64@)">
            <summary>
                Gets a list of paged <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" /> objects
            </summary>
            <remarks>An <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" /> can be of type <see cref="T:Umbraco.Cms.Core.Models.IMember" /> or <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /></remarks>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IMembershipUserService">
            <summary>
                Defines part of the UserService, which is specific to methods used by the membership provider.
            </summary>
            <remarks>
                Idea is to have this is an isolated interface so that it can be easily 'replaced' in the membership provider impl.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMembershipUserService.CreateUserWithIdentity(System.String,System.String)">
            <summary>
                Creates and persists a new User
            </summary>
            <remarks>
                The user will be saved in the database and returned with an Id.
                This method is convenient when you need to perform operations, which needs the
                Id of the user once its been created.
            </remarks>
            <param name="username">Username of the User to create</param>
            <param name="email">Email of the User to create</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" />
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IMemberTwoFactorLoginService">
            <summary>
            A member specific Two factor service, that ensures the member exists before doing the job.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberTwoFactorLoginService.DisableAsync(System.Guid,System.String)">
            <summary>
            Disables a specific two factor provider on a specific member.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberTwoFactorLoginService.GetProviderNamesAsync(System.Guid)">
            <summary>
            Gets the two factor providers on a specific member.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberTwoFactorLoginService.GetSetupInfoAsync(System.Guid,System.String)">
            <remarks>
                The returned type can be anything depending on the setup providers. You will need to cast it to the type handled by
                the provider.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberTwoFactorLoginService.ValidateAndSaveAsync(System.String,System.Guid,System.String,System.String)">
            <summary>
            Validates and Saves.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IMemberTwoFactorLoginService.DisableByCodeAsync(System.String,System.Guid,System.String)">
            <summary>
            Disables 2FA with Code.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IMemberTypeService">
            <summary>
                Manages <see cref="T:Umbraco.Cms.Core.Models.IMemberType" /> objects.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ImportExport.ContentTypeImportService.Import(System.Guid,System.Guid,System.Nullable{System.Guid})">
            <summary>
            Imports the contentType
            </summary>
            <param name="temporaryFileId"></param>
            <param name="userKey"></param>
            <param name="contentTypeId">the id of the contentType to overwrite, null if a new contentType should be created</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ImportExport.TemporaryFileToXmlImportService.LoadXElementFromTemporaryFileAsync(System.Guid)">
            <remark>
            Only if this method is called within a scope, the temporary file will be cleaned up if that scope completes.
            </remark>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ImportExport.TemporaryFileToXmlImportService.AnalyzeAsync(System.Guid)">
            <summary>
            Reads the file trough the use of <see cref="M:Umbraco.Cms.Core.Services.ImportExport.TemporaryFileToXmlImportService.LoadXElementFromTemporaryFileAsync(System.Guid)"/> and returns basic information regarding the entity that would be imported if this file was processed by
            <see cref="M:Umbraco.Cms.Core.Services.ImportExport.IContentTypeImportService.Import(System.Guid,System.Guid,System.Nullable{System.Guid})"/> or <see cref="M:Umbraco.Cms.Core.Services.ImportExport.IMediaTypeImportService.Import(System.Guid,System.Guid,System.Nullable{System.Guid})"/>.
            </summary>
            <remarks>As this method does not persist anything, no scope is created and the temporary file is not cleaned up, see remark in <see cref="M:Umbraco.Cms.Core.Services.ImportExport.TemporaryFileToXmlImportService.LoadXElementFromTemporaryFileAsync(System.Guid)"/>.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.INotificationService.SendNotifications(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IContent},System.String,System.String,System.Uri,System.Func{System.ValueTuple{Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Models.NotificationEmailSubjectParams},System.String},System.Func{System.ValueTuple{Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Models.NotificationEmailBodyParams,System.Boolean},System.String})">
            <summary>
                Sends the notifications for the specified user regarding the specified nodes and action.
            </summary>
            <param name="entities"></param>
            <param name="operatingUser"></param>
            <param name="action"></param>
            <param name="actionName"></param>
            <param name="siteUri"></param>
            <param name="createSubject"></param>
            <param name="createBody"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.INotificationService.GetUserNotifications(Umbraco.Cms.Core.Models.Membership.IUser)">
            <summary>
                Gets the notifications for the user
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.INotificationService.GetUserNotifications(Umbraco.Cms.Core.Models.Membership.IUser,System.String)">
            <summary>
                Gets the notifications for the user based on the specified node path
            </summary>
            <param name="user"></param>
            <param name="path"></param>
            <returns></returns>
            <remarks>
                Notifications are inherited from the parent so any child node will also have notifications assigned based on it's
                parent (ancestors)
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.INotificationService.GetEntityNotifications(Umbraco.Cms.Core.Models.Entities.IEntity)">
            <summary>
                Returns the notifications for an entity
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.INotificationService.DeleteNotifications(Umbraco.Cms.Core.Models.Entities.IEntity)">
            <summary>
                Deletes notifications by entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.INotificationService.DeleteNotifications(Umbraco.Cms.Core.Models.Membership.IUser)">
            <summary>
                Deletes notifications by user
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.INotificationService.DeleteNotifications(Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Models.Entities.IEntity)">
            <summary>
                Delete notifications by user and entity
            </summary>
            <param name="user"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.INotificationService.SetNotifications(Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Models.Entities.IEntity,System.String[])">
            <summary>
                Sets the specific notifications for the user and entity
            </summary>
            <param name="user"></param>
            <param name="entity"></param>
            <param name="actions"></param>
            <remarks>
                This performs a full replace
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.INotificationService.CreateNotification(Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Models.Entities.IEntity,System.String)">
            <summary>
                Creates a new notification
            </summary>
            <param name="user"></param>
            <param name="entity"></param>
            <param name="action">The action letter - note: this is a string for future compatibility</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Installer.IInstallService.InstallAsync(Umbraco.Cms.Core.Models.Installer.InstallData)">
            <summary>
            Runs all the steps in the <see cref="T:Umbraco.Cms.Core.Installer.NewInstallStepCollection"/>, installing Umbraco
            </summary>
            <param name="model">InstallData containing the required data used to install</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Installer.InstallService.InstallAsync(Umbraco.Cms.Core.Models.Installer.InstallData)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Installer.IUpgradeService.UpgradeAsync">
            <summary>
            Runs all the steps in the <see cref="T:Umbraco.Cms.Core.Installer.UpgradeStepCollection"/>, upgrading Umbraco.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Installer.UpgradeService.UpgradeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPackageDataInstallation.ImportMediaTypes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Int32)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Cms.Core.Models.IContentType"/>
            </summary>
            <param name="docTypeElements">Xml to import</param>
            <param name="userId">Optional id of the User performing the operation. Default is zero (admin).</param>
            <returns>An enumerable list of generated ContentTypes</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPackageDataInstallation.ImportDocumentTypes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Int32)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Cms.Core.Models.IContentType"/>
            </summary>
            <param name="docTypeElements">Xml to import</param>
            <param name="userId">Optional id of the User performing the operation. Default is zero (admin).</param>
            <returns>An enumerable list of generated ContentTypes</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPackageDataInstallation.ImportDataTypes(System.Collections.Generic.IReadOnlyCollection{System.Xml.Linq.XElement},System.Int32)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Cms.Core.Models.IDataType"/>
            </summary>
            <param name="dataTypeElements">Xml to import</param>
            <param name="userId">Optional id of the user</param>
            <returns>An enumerable list of generated DataTypeDefinitions</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPackageDataInstallation.ImportDictionaryItems(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Int32)">
            <summary>
            Imports and saves the 'DictionaryItems' part of the package xml as a list of <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem"/>
            </summary>
            <param name="dictionaryItemElementList">Xml to import</param>
            <param name="userId"></param>
            <returns>An enumerable list of dictionary items</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPackageDataInstallation.ImportLanguages(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Int32)">
            <summary>
            Imports and saves the 'Languages' part of a package xml as a list of <see cref="T:Umbraco.Cms.Core.Models.ILanguage"/>
            </summary>
            <param name="languageElements">Xml to import</param>
            <param name="userId">Optional id of the User performing the operation</param>
            <returns>An enumerable list of generated languages</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPackageDataInstallation.ImportTemplatesAsync(System.Collections.Generic.IReadOnlyCollection{System.Xml.Linq.XElement},System.Int32)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Cms.Core.Models.ITemplate"/>
            </summary>
            <param name="templateElements">Xml to import</param>
            <param name="userId">Optional user id</param>
            <returns>An enumerable list of generated Templates</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPackagingService.GetCompiledPackageInfo(System.Xml.Linq.XDocument)">
            <summary>
                Returns a <see cref="T:Umbraco.Cms.Core.Models.Packaging.CompiledPackage" /> result from an umbraco package file (zip)
            </summary>
            <param name="packageXml"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPackagingService.InstallCompiledPackageData(System.IO.FileInfo,System.Int32)">
            <summary>
                Installs the data, entities, objects contained in an umbraco package file (zip)
            </summary>
            <param name="packageXmlFile"></param>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPackagingService.GetAllInstalledPackagesAsync">
            <summary>
                Returns the advertised installed packages
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPackagingService.GetInstalledPackagesFromMigrationPlansAsync(System.Int32,System.Int32)">
            <summary>
                Returns installed packages collected from the package migration plans.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPackagingService.GetCreatedPackagesAsync(System.Int32,System.Int32)">
            <summary>
                Returns the created packages as a paged model.
            </summary>
            <param name="skip">The amount of items to skip.</param>
            <param name="take">The amount of items to take.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPackagingService.GetCreatedPackageById(System.Int32)">
            <summary>
                Returns a created package by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPackagingService.GetCreatedPackageByKeyAsync(System.Guid)">
            <summary>
                Returns a created package by key.
            </summary>
            <param name="key">The key of the package.</param>
            <returns>The package or null if the package was not found.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPackagingService.DeleteCreatedPackageAsync(System.Guid,System.Guid)">
            <summary>
                Deletes a created package by key.
            </summary>
            <param name="key">The key of the package.</param>
            <param name="userKey">Key of the user deleting the package.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPackagingService.CreateCreatedPackageAsync(Umbraco.Cms.Core.Packaging.PackageDefinition,System.Guid)">
            <summary>
                Creates a new package.
            </summary>
            <param name="package"><see cref="T:Umbraco.Cms.Core.Packaging.PackageDefinition" />model for the package to create.</param>
            <param name="userKey">Key of the user performing the create.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPackagingService.UpdateCreatedPackageAsync(Umbraco.Cms.Core.Packaging.PackageDefinition,System.Guid)">
            <summary>
                Updates a created package.
            </summary>
            <param name="package"><see cref="T:Umbraco.Cms.Core.Packaging.PackageDefinition" />model for the package to update.</param>
            <param name="userKey">Key of the user performing the update.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPackagingService.ExportCreatedPackage(Umbraco.Cms.Core.Packaging.PackageDefinition)">
            <summary>
                Creates the package file and returns it's physical path
            </summary>
            <param name="definition"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPackagingService.GetPackageFileStream(Umbraco.Cms.Core.Packaging.PackageDefinition)">
            <summary>
                Gets the package file stream.
            </summary>
            <param name="definition"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPartialViewService.DeleteAsync(System.String,System.Guid)">
            <summary>
            Deletes a partial view.
            </summary>
            <param name="path">The path of the partial view to delete.</param>
            <param name="userKey">The key of the user performing the operation.</param>
            <returns>An operation status.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPartialViewService.GetSnippetsAsync(System.Int32,System.Int32)">
            <summary>
            Gets all the available partial view snippets.
            </summary>
            <param name="skip">Amount to skip.</param>
            <param name="take">Amount to take.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPartialViewService.GetSnippetAsync(System.String)">
            <summary>
            Gets a partial view snippet by ID, returns null if not found.
            </summary>
            <param name="id">The name of the snippet to get.</param>
            <returns>The partial view snippet, null if not found.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPartialViewService.CreateAsync(Umbraco.Cms.Core.Models.PartialViewCreateModel,System.Guid)">
            <summary>
            Creates a new partial view.
            </summary>
            <param name="createModel"><see cref="T:Umbraco.Cms.Core.Models.PartialViewCreateModel"/> containing the information about the partial view being created.</param>
            <param name="userKey">The key of the user performing the operation.</param>
            <returns>An attempt indicating if the operation was a success as well as a more detailed <see cref="T:Umbraco.Cms.Core.Services.OperationStatus.PartialViewOperationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPartialViewService.UpdateAsync(System.String,Umbraco.Cms.Core.Models.PartialViewUpdateModel,System.Guid)">
            <summary>
            Updates an existing partial view.
            </summary>
            <param name="path">The path of the partial view to update.</param>
            <param name="updateModel">A <see cref="T:Umbraco.Cms.Core.Models.PartialViewUpdateModel"/> with the changes.</param>
            <param name="userKey">The key of the user performing the operation.</param>
            <returns>An attempt indicating if the operation was a success as well as a more detailed <see cref="T:Umbraco.Cms.Core.Services.OperationStatus.PartialViewOperationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPartialViewService.RenameAsync(System.String,Umbraco.Cms.Core.Models.PartialViewRenameModel,System.Guid)">
            <summary>
            Renames a partial view.
            </summary>
            <param name="path">The path of the partial view to rename.</param>
            <param name="renameModel">A <see cref="T:Umbraco.Cms.Core.Models.PartialViewRenameModel"/> with the changes.</param>
            <param name="userKey">The key of the user performing the operation.</param>
            <returns>An attempt indicating if the operation was a success as well as a more detailed <see cref="T:Umbraco.Cms.Core.Services.OperationStatus.PartialViewOperationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPreviewService.TryEnterPreviewAsync(Umbraco.Cms.Core.Models.Membership.IUser)">
            <summary>
            Enters preview mode for a given user that calls this
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPreviewService.EndPreviewAsync">
            <summary>
            Exits preview mode for a given user that calls this
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPropertyTypeUsageService.HasSavedPropertyValuesAsync(System.Guid,System.String)">
            <summary>
            Checks if a property type has any saved property values associated with it.
            </summary>
            <param name="contentTypeKey">The key of the content type to check.</param>
            <param name="propertyAlias">The alias of the property to check.</param>
            <returns>An attempt with status and result if the property type has any property values, otherwise false.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPropertyValidationService.IsPropertyDataValid(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Models.IProperty[]@,Umbraco.Cms.Core.Models.CultureImpact)">
            <summary>
                Validates the content item's properties pass validation rules
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPropertyValidationService.IsPropertyValid(Umbraco.Cms.Core.Models.IProperty,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <summary>
                Gets a value indicating whether the property has valid values.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPropertyValidationService.ValidatePropertyValue(Umbraco.Cms.Core.PropertyEditors.IDataEditor,Umbraco.Cms.Core.Models.IDataType,System.Object,System.Boolean,System.String,System.String,System.String,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <summary>
                Validates a property value.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPropertyValidationService.ValidatePropertyValue(Umbraco.Cms.Core.Models.IPropertyType,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <summary>
                Validates a property value.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPublicAccessService.GetAll">
            <summary>
                Gets all defined entries and associated rules
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPublicAccessService.GetEntryForContent(Umbraco.Cms.Core.Models.IContent)">
            <summary>
                Gets the entry defined for the content item's path
            </summary>
            <param name="content"></param>
            <returns>Returns null if no entry is found</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPublicAccessService.GetEntryForContent(System.String)">
            <summary>
                Gets the entry defined for the content item based on a content path
            </summary>
            <param name="contentPath"></param>
            <returns>Returns null if no entry is found</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPublicAccessService.IsProtected(Umbraco.Cms.Core.Models.IContent)">
            <summary>
                Returns true if the content has an entry for it's path
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPublicAccessService.IsProtected(System.String)">
            <summary>
                Returns true if the content has an entry based on a content path
            </summary>
            <param name="contentPath"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPublicAccessService.AddRule(Umbraco.Cms.Core.Models.IContent,System.String,System.String)">
            <summary>
                Adds a rule if the entry doesn't already exist
            </summary>
            <param name="content"></param>
            <param name="ruleType"></param>
            <param name="ruleValue"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPublicAccessService.RemoveRule(Umbraco.Cms.Core.Models.IContent,System.String,System.String)">
            <summary>
                Removes a rule
            </summary>
            <param name="content"></param>
            <param name="ruleType"></param>
            <param name="ruleValue"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPublicAccessService.Save(Umbraco.Cms.Core.Models.PublicAccessEntry)">
            <summary>
                Saves the entry
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPublicAccessService.CreateAsync(Umbraco.Cms.Core.Models.PublicAccessEntrySlim)">
            <summary>
                Saves the entry asynchronously and returns a status result whether the operation succeeded or not
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPublicAccessService.UpdateAsync(Umbraco.Cms.Core.Models.PublicAccessEntrySlim)">
            <summary>
                Updates the entry asynchronously and returns a status result whether the operation succeeded or not
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPublicAccessService.Delete(Umbraco.Cms.Core.Models.PublicAccessEntry)">
            <summary>
                Deletes the entry and all associated rules
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPublicAccessService.GetEntryByContentKeyAsync(System.Guid)">
            <summary>
                Gets the entry defined for the content item based on a content key
            </summary>
            <param name="key"></param>
            <returns>Returns null if no entry is found</returns>
            <remarks>
            This method supports inheritance by considering ancestor entries (if any),
            if no entry is found for the specified content key.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPublicAccessService.GetEntryByContentKeyWithoutAncestorsAsync(System.Guid)">
            <summary>
                Gets the entry defined for the content item based on a content key, without taking ancestor entries into account.
            </summary>
            <param name="key"></param>
            <returns>Returns null if no entry is found</returns>
            <remarks>
            This method does not support inheritance. Use <see cref="M:Umbraco.Cms.Core.Services.IPublicAccessService.GetEntryByContentKeyAsync(System.Guid)"/> to include ancestor entries (if any).
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IPublicAccessService.DeleteAsync(System.Guid)">
            <summary>
                Deletes the entry and all associated rules for a given key.
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IRedirectUrlService">
            <summary>
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRedirectUrlService.Register(System.String,System.Guid,System.String)">
            <summary>
                Registers a redirect URL.
            </summary>
            <param name="url">The Umbraco URL route.</param>
            <param name="contentKey">The content unique key.</param>
            <param name="culture">The culture.</param>
            <remarks>Is a proper Umbraco route eg /path/to/foo or 123/path/tofoo.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRedirectUrlService.DeleteContentRedirectUrls(System.Guid)">
            <summary>
                Deletes all redirect URLs for a given content.
            </summary>
            <param name="contentKey">The content unique key.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRedirectUrlService.Delete(Umbraco.Cms.Core.Models.IRedirectUrl)">
            <summary>
                Deletes a redirect URL.
            </summary>
            <param name="redirectUrl">The redirect URL to delete.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRedirectUrlService.Delete(System.Guid)">
            <summary>
                Deletes a redirect URL.
            </summary>
            <param name="id">The redirect URL identifier.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRedirectUrlService.DeleteAll">
            <summary>
                Deletes all redirect URLs.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRedirectUrlService.GetMostRecentRedirectUrl(System.String)">
            <summary>
                Gets the most recent redirect URLs corresponding to an Umbraco redirect URL route.
            </summary>
            <param name="url">The Umbraco redirect URL route.</param>
            <returns>The most recent redirect URLs corresponding to the route.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRedirectUrlService.GetMostRecentRedirectUrl(System.String,System.String)">
            <summary>
                Gets the most recent redirect URLs corresponding to an Umbraco redirect URL route.
            </summary>
            <param name="url">The Umbraco redirect URL route.</param>
            <param name="culture">The culture of the request.</param>
            <returns>The most recent redirect URLs corresponding to the route.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRedirectUrlService.GetMostRecentRedirectUrlAsync(System.String,System.String)">
            <summary>
            Gets the most recent redirect URLs corresponding to an Umbraco redirect URL route.
            </summary>
            <param name="url">The Umbraco redirect URL route.</param>
            <param name="culture">The culture of the request.</param>
            <returns>The most recent redirect URLs corresponding to the route.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRedirectUrlService.GetContentRedirectUrls(System.Guid)">
            <summary>
                Gets all redirect URLs for a content item.
            </summary>
            <param name="contentKey">The content unique key.</param>
            <returns>All redirect URLs for the content item.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRedirectUrlService.GetAllRedirectUrls(System.Int64,System.Int32,System.Int64@)">
            <summary>
                Gets all redirect URLs.
            </summary>
            <param name="pageIndex">The page index.</param>
            <param name="pageSize">The page size.</param>
            <param name="total">The total count of redirect URLs.</param>
            <returns>The redirect URLs.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRedirectUrlService.GetAllRedirectUrls(System.Int32,System.Int32,System.Int64@)">
            <summary>
                Gets all redirect URLs.
            </summary>
            <param name="skip">Amount to skip.</param>
            <param name="take">Amount to take.</param>
            <param name="total">The total count of redirect URLs.</param>
            <returns>The redirect URLs.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRedirectUrlService.GetAllRedirectUrls(System.Int32,System.Int64,System.Int32,System.Int64@)">
            <summary>
                Gets all redirect URLs below a given content item.
            </summary>
            <param name="rootContentId">The content unique identifier.</param>
            <param name="pageIndex">The page index.</param>
            <param name="pageSize">The page size.</param>
            <param name="total">The total count of redirect URLs.</param>
            <returns>The redirect URLs.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRedirectUrlService.SearchRedirectUrls(System.String,System.Int64,System.Int32,System.Int64@)">
            <summary>
                Searches for all redirect URLs that contain a given search term in their URL property.
            </summary>
            <param name="searchTerm">The term to search for.</param>
            <param name="pageIndex">The page index.</param>
            <param name="pageSize">The page size.</param>
            <param name="total">The total count of redirect URLs.</param>
            <returns>The redirect URLs.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRedirectUrlService.SearchRedirectUrls(System.String,System.Int32,System.Int32,System.Int64@)">
            <summary>
                Searches for all redirect URLs that contain a given search term in their URL property.
            </summary>
            <param name="searchTerm">The term to search for.</param>
            <param name="skip">Amount to skip.</param>
            <param name="take">Amount to take.</param>
            <param name="total">The total count of redirect URLs.</param>
            <returns>The redirect URLs.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetById(System.Int32)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.IRelation" /></param>
            <returns>A <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> object</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetRelationTypeById(System.Int32)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.IRelationType" /> by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.IRelationType" /></param>
            <returns>A <see cref="T:Umbraco.Cms.Core.Models.IRelationType" /> object</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetRelationTypeById(System.Guid)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.IRelationType" /> by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.IRelationType" /></param>
            <returns>A <see cref="T:Umbraco.Cms.Core.Models.IRelationType" /> object</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetRelationTypeByAlias(System.String)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.IRelationType" /> by its Alias
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Cms.Core.Models.IRelationType" /></param>
            <returns>A <see cref="T:Umbraco.Cms.Core.Models.IRelationType" /> object</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetAllRelations(System.Int32[])">
            <summary>
                Gets all <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects
            </summary>
            <param name="ids">Optional array of integer ids to return relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetAllRelationsByRelationType(Umbraco.Cms.Core.Models.IRelationType)">
            <summary>
                Gets all <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects by their <see cref="T:Umbraco.Cms.Core.Models.IRelationType" />
            </summary>
            <param name="relationType"><see cref="T:Umbraco.Cms.Core.Models.IRelation" /> to retrieve Relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetAllRelationsByRelationType(System.Int32)">
            <summary>
                Gets all <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects by their <see cref="T:Umbraco.Cms.Core.Models.IRelationType" />'s Id
            </summary>
            <param name="relationTypeId">Id of the <see cref="T:Umbraco.Cms.Core.Models.IRelationType" /> to retrieve Relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetAllRelationTypes(System.Int32[])">
            <summary>
                Gets all <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects
            </summary>
            <param name="ids">Optional array of integer ids to return relationtypes for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetByParentId(System.Int32)">
            <summary>
                Gets a list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects by their parent Id
            </summary>
            <param name="id">Id of the parent to retrieve relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetByParentId(System.Int32,System.String)">
            <summary>
                Gets a list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects by their parent Id
            </summary>
            <param name="id">Id of the parent to retrieve relations for</param>
            <param name="relationTypeAlias">Alias of the type of relation to retrieve</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetByParent(Umbraco.Cms.Core.Models.Entities.IUmbracoEntity)">
            <summary>
                Gets a list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects by their parent entity
            </summary>
            <param name="parent">Parent Entity to retrieve relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetByParent(Umbraco.Cms.Core.Models.Entities.IUmbracoEntity,System.String)">
            <summary>
                Gets a list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects by their parent entity
            </summary>
            <param name="parent">Parent Entity to retrieve relations for</param>
            <param name="relationTypeAlias">Alias of the type of relation to retrieve</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetByChildId(System.Int32)">
            <summary>
                Gets a list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects by their child Id
            </summary>
            <param name="id">Id of the child to retrieve relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetByChildId(System.Int32,System.String)">
            <summary>
                Gets a list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects by their child Id
            </summary>
            <param name="id">Id of the child to retrieve relations for</param>
            <param name="relationTypeAlias">Alias of the type of relation to retrieve</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetByChild(Umbraco.Cms.Core.Models.Entities.IUmbracoEntity)">
            <summary>
                Gets a list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects by their child Entity
            </summary>
            <param name="child">Child Entity to retrieve relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetByChild(Umbraco.Cms.Core.Models.Entities.IUmbracoEntity,System.String)">
            <summary>
                Gets a list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects by their child Entity
            </summary>
            <param name="child">Child Entity to retrieve relations for</param>
            <param name="relationTypeAlias">Alias of the type of relation to retrieve</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetByParentOrChildId(System.Int32)">
            <summary>
                Gets a list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects by their child or parent Id.
                Using this method will get you all relations regards of it being a child or parent relation.
            </summary>
            <param name="id">Id of the child or parent to retrieve relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetByParentAndChildId(System.Int32,System.Int32,Umbraco.Cms.Core.Models.IRelationType)">
            <summary>
                Gets a relation by the unique combination of parentId, childId and relationType.
            </summary>
            <param name="parentId">The id of the parent item.</param>
            <param name="childId">The id of the child item.</param>
            <param name="relationType">The RelationType.</param>
            <returns>The relation or null</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetByRelationTypeName(System.String)">
            <summary>
                Gets a list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects by the Name of the <see cref="T:Umbraco.Cms.Core.Models.IRelationType" />
            </summary>
            <param name="relationTypeName">Name of the <see cref="T:Umbraco.Cms.Core.Models.IRelationType" /> to retrieve Relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetByRelationTypeAlias(System.String)">
            <summary>
                Gets a list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects by the Alias of the <see cref="T:Umbraco.Cms.Core.Models.IRelationType" />
            </summary>
            <param name="relationTypeAlias">Alias of the <see cref="T:Umbraco.Cms.Core.Models.IRelationType" /> to retrieve Relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetByRelationTypeId(System.Int32)">
            <summary>
                Gets a list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects by the Id of the <see cref="T:Umbraco.Cms.Core.Models.IRelationType" />
            </summary>
            <param name="relationTypeId">Id of the <see cref="T:Umbraco.Cms.Core.Models.IRelationType" /> to retrieve Relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetPagedByRelationTypeId(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Services.Ordering)">
            <summary>
                Gets a paged result of <see cref="T:Umbraco.Cms.Core.Models.IRelation" />
            </summary>
            <param name="relationTypeId"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="ordering"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetPagedByRelationTypeKeyAsync(System.Guid,System.Int32,System.Int32,Umbraco.Cms.Core.Services.Ordering)">
            <summary>
                Gets a paged result of <see cref="T:Umbraco.Cms.Core.Models.IRelation" />
            </summary>
            <param name="key"></param>
            <param name="skip"></param>
            <param name="take"></param>
            <param name="ordering"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetChildEntityFromRelation(Umbraco.Cms.Core.Models.IRelation)">
            <summary>
                Gets the Child object from a Relation as an <see cref="T:Umbraco.Cms.Core.Models.Entities.IUmbracoEntity" />
            </summary>
            <param name="relation">Relation to retrieve child object from</param>
            <returns>An <see cref="T:Umbraco.Cms.Core.Models.Entities.IUmbracoEntity" /></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetParentEntityFromRelation(Umbraco.Cms.Core.Models.IRelation)">
            <summary>
                Gets the Parent object from a Relation as an <see cref="T:Umbraco.Cms.Core.Models.Entities.IUmbracoEntity" />
            </summary>
            <param name="relation">Relation to retrieve parent object from</param>
            <returns>An <see cref="T:Umbraco.Cms.Core.Models.Entities.IUmbracoEntity" /></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetEntitiesFromRelation(Umbraco.Cms.Core.Models.IRelation)">
            <summary>
                Gets the Parent and Child objects from a Relation as a <see cref="T:System.Tuple" />"/> with <see cref="T:Umbraco.Cms.Core.Models.Entities.IUmbracoEntity" />.
            </summary>
            <param name="relation">Relation to retrieve parent and child object from</param>
            <returns>Returns a Tuple with Parent (item1) and Child (item2)</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetChildEntitiesFromRelations(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IRelation})">
            <summary>
                Gets the Child objects from a list of Relations as a list of <see cref="T:Umbraco.Cms.Core.Models.Entities.IUmbracoEntity" /> objects.
            </summary>
            <param name="relations">List of relations to retrieve child objects from</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.Entities.IUmbracoEntity" /></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetParentEntitiesFromRelations(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IRelation})">
            <summary>
                Gets the Parent objects from a list of Relations as a list of <see cref="T:Umbraco.Cms.Core.Models.Entities.IUmbracoEntity" /> objects.
            </summary>
            <param name="relations">List of relations to retrieve parent objects from</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.Entities.IUmbracoEntity" /></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetPagedParentEntitiesByChildId(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Models.UmbracoObjectTypes[])">
            <summary>
                Returns paged parent entities for a related child id
            </summary>
            <param name="id"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalChildren"></param>
            <param name="entityTypes"></param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.Entities.IUmbracoEntity" /></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetPagedChildEntitiesByParentId(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Models.UmbracoObjectTypes[])">
            <summary>
                Returns paged child entities for a related parent id
            </summary>
            <param name="id"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalChildren"></param>
            <param name="entityTypes"></param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.Entities.IUmbracoEntity" /></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetEntitiesFromRelations(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IRelation})">
            <summary>
                Gets the Parent and Child objects from a list of Relations as a list of <see cref="T:Umbraco.Cms.Core.Models.Entities.IUmbracoEntity" /> objects.
            </summary>
            <param name="relations">List of relations to retrieve parent and child objects from</param>
            <returns>An enumerable list of <see cref="T:System.Tuple" /> with <see cref="T:Umbraco.Cms.Core.Models.Entities.IUmbracoEntity" /></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.Relate(System.Int32,System.Int32,Umbraco.Cms.Core.Models.IRelationType)">
            <summary>
                Relates two objects by their entity Ids.
            </summary>
            <param name="parentId">Id of the parent</param>
            <param name="childId">Id of the child</param>
            <param name="relationType">The type of relation to create</param>
            <returns>The created <see cref="T:Umbraco.Cms.Core.Models.IRelation" /></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.Relate(Umbraco.Cms.Core.Models.Entities.IUmbracoEntity,Umbraco.Cms.Core.Models.Entities.IUmbracoEntity,Umbraco.Cms.Core.Models.IRelationType)">
            <summary>
                Relates two objects that are based on the <see cref="T:Umbraco.Cms.Core.Models.Entities.IUmbracoEntity" /> interface.
            </summary>
            <param name="parent">Parent entity</param>
            <param name="child">Child entity</param>
            <param name="relationType">The type of relation to create</param>
            <returns>The created <see cref="T:Umbraco.Cms.Core.Models.IRelation" /></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.Relate(System.Int32,System.Int32,System.String)">
            <summary>
                Relates two objects by their entity Ids.
            </summary>
            <param name="parentId">Id of the parent</param>
            <param name="childId">Id of the child</param>
            <param name="relationTypeAlias">Alias of the type of relation to create</param>
            <returns>The created <see cref="T:Umbraco.Cms.Core.Models.IRelation" /></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.Relate(Umbraco.Cms.Core.Models.Entities.IUmbracoEntity,Umbraco.Cms.Core.Models.Entities.IUmbracoEntity,System.String)">
            <summary>
                Relates two objects that are based on the <see cref="T:Umbraco.Cms.Core.Models.Entities.IUmbracoEntity" /> interface.
            </summary>
            <param name="parent">Parent entity</param>
            <param name="child">Child entity</param>
            <param name="relationTypeAlias">Alias of the type of relation to create</param>
            <returns>The created <see cref="T:Umbraco.Cms.Core.Models.IRelation" /></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.HasRelations(Umbraco.Cms.Core.Models.IRelationType)">
            <summary>
                Checks whether any relations exists for the passed in <see cref="T:Umbraco.Cms.Core.Models.IRelationType" />.
            </summary>
            <param name="relationType"><see cref="T:Umbraco.Cms.Core.Models.IRelationType" /> to check for relations</param>
            <returns>
                Returns <c>True</c> if any relations exists for the given <see cref="T:Umbraco.Cms.Core.Models.IRelationType" />, otherwise <c>False</c>
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.IsRelated(System.Int32)">
            <summary>
                Checks whether any relations exists for the passed in Id.
            </summary>
            <param name="id">Id of an object to check relations for</param>
            <returns>Returns <c>True</c> if any relations exists with the given Id, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.IsRelated(System.Int32,Umbraco.Cms.Core.Models.RelationDirectionFilter)">
            <summary>
                Checks whether any relations exists for the passed in Id and direction.
            </summary>
            <param name="id">Id of an object to check relations for</param>
            <param name="directionFilter">Indicates whether to check for relations as parent, child or in either direction.</param>
            <returns>Returns <c>True</c> if any relations exists with the given Id, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.AreRelated(System.Int32,System.Int32)">
            <summary>
                Checks whether two items are related
            </summary>
            <param name="parentId">Id of the Parent relation</param>
            <param name="childId">Id of the Child relation</param>
            <returns>Returns <c>True</c> if any relations exists with the given Ids, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.AreRelated(Umbraco.Cms.Core.Models.Entities.IUmbracoEntity,Umbraco.Cms.Core.Models.Entities.IUmbracoEntity)">
            <summary>
                Checks whether two items are related
            </summary>
            <param name="parent">Parent entity</param>
            <param name="child">Child entity</param>
            <returns>Returns <c>True</c> if any relations exist between the entities, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.AreRelated(Umbraco.Cms.Core.Models.Entities.IUmbracoEntity,Umbraco.Cms.Core.Models.Entities.IUmbracoEntity,System.String)">
            <summary>
                Checks whether two items are related
            </summary>
            <param name="parent">Parent entity</param>
            <param name="child">Child entity</param>
            <param name="relationTypeAlias">Alias of the type of relation to create</param>
            <returns>Returns <c>True</c> if any relations exist between the entities, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.AreRelated(System.Int32,System.Int32,System.String)">
            <summary>
                Checks whether two items are related
            </summary>
            <param name="parentId">Id of the Parent relation</param>
            <param name="childId">Id of the Child relation</param>
            <param name="relationTypeAlias">Alias of the type of relation to create</param>
            <returns>Returns <c>True</c> if any relations exist between the entities, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.Save(Umbraco.Cms.Core.Models.IRelation)">
            <summary>
                Saves a <see cref="T:Umbraco.Cms.Core.Models.IRelation" />
            </summary>
            <param name="relation">Relation to save</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.Save(Umbraco.Cms.Core.Models.IRelationType)">
            <summary>
                Saves a <see cref="T:Umbraco.Cms.Core.Models.IRelationType" />
            </summary>
            <param name="relationType">RelationType to Save</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.CreateAsync(Umbraco.Cms.Core.Models.IRelationType,System.Guid)">
            <summary>
                Saves a <see cref="T:Umbraco.Cms.Core.Models.IRelationType" />
            </summary>
            <param name="relationType">RelationType to Save</param>
            <param name="userKey">Key of the user thats saving the relation type</param>
            <returns>A <see cref="T:Umbraco.Cms.Core.Attempt"/> with a status of whether the operations was a success or failure</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.UpdateAsync(Umbraco.Cms.Core.Models.IRelationType,System.Guid)">
            <summary>
                Saves a <see cref="T:Umbraco.Cms.Core.Models.IRelationType" />
            </summary>
            <param name="relationType">RelationType to Save</param>
            <param name="userKey">Key of the user thats saving the relation type</param>
            <returns>A <see cref="T:Umbraco.Cms.Core.Attempt"/> with a status of whether the operations was a success or failure</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.Delete(Umbraco.Cms.Core.Models.IRelation)">
            <summary>
                Deletes a <see cref="T:Umbraco.Cms.Core.Models.IRelation" />
            </summary>
            <param name="relation">Relation to Delete</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.Delete(Umbraco.Cms.Core.Models.IRelationType)">
            <summary>
                Deletes a <see cref="T:Umbraco.Cms.Core.Models.IRelationType" />
            </summary>
            <param name="relationType">RelationType to Delete</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.DeleteAsync(System.Guid,System.Guid)">
            <summary>
                Deletes a <see cref="T:Umbraco.Cms.Core.Models.IRelationType" />
            </summary>
            <param name="key">Key of the relation type to delete</param>
            <param name="userKey">Key of the user that is deleting the relation type</param>
            <returns><placeholder>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</placeholder></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.DeleteRelationsOfType(Umbraco.Cms.Core.Models.IRelationType)">
            <summary>
                Deletes all <see cref="T:Umbraco.Cms.Core.Models.IRelation" /> objects based on the passed in <see cref="T:Umbraco.Cms.Core.Models.IRelationType" />
            </summary>
            <param name="relationType"><see cref="T:Umbraco.Cms.Core.Models.IRelationType" /> to Delete Relations for</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetAllowedObjectTypes">
            <summary>
                Gets all allowed parent/child object types for a given <see cref="T:Umbraco.Cms.Core.Models.IRelationType" /> />
            </summary>
            <returns>All of the allowed <see cref="T:Umbraco.Cms.Core.Models.UmbracoObjectTypes"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRelationService.GetPagedRelationTypesAsync(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Gets the Relation types in a paged manner.
            Currently implements the paging in memory on the name attribute because the underlying repository does not support paging yet
            </summary>
            <param name="skip"></param>
            <param name="take"></param>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IRuntime">
            <summary>
                Defines the Umbraco runtime.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.IRuntime.State">
            <summary>
                Gets the runtime state.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRuntime.RestartAsync">
            <summary>
                Stops and Starts the runtime using the original cancellation token.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IRuntimeState">
            <summary>
                Represents the state of the Umbraco runtime.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.IRuntimeState.Version">
            <summary>
                Gets the version of the executing code.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.IRuntimeState.VersionComment">
            <summary>
                Gets the version comment of the executing code.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.IRuntimeState.SemanticVersion">
            <summary>
                Gets the semantic version of the executing code.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.IRuntimeState.Level">
            <summary>
                Gets the runtime level of execution.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.IRuntimeState.Reason">
            <summary>
                Gets the reason for the runtime level of execution.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.IRuntimeState.CurrentMigrationState">
            <summary>
                Gets the current migration state.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.IRuntimeState.FinalMigrationState">
            <summary>
                Gets the final migration state.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.IRuntimeState.BootFailedException">
            <summary>
                Gets the exception that caused the boot to fail.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.IRuntimeState.StartupState">
            <summary>
                Returns any state data that was collected during startup
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IRuntimeState.DetermineRuntimeLevel">
            <summary>
                Determines the runtime level.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IScriptService.CreateAsync(Umbraco.Cms.Core.Models.ScriptCreateModel,System.Guid)">
            <summary>
            Creates a new script.
            </summary>
            <param name="createModel"><see cref="T:Umbraco.Cms.Core.Models.ScriptCreateModel"/> containing the information about the script being created.</param>
            <param name="userKey">The key of the user performing the operation.</param>
            <returns>An attempt indicating if the operation was a success as well as a more detailed <see cref="T:Umbraco.Cms.Core.Services.OperationStatus.ScriptOperationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IScriptService.UpdateAsync(System.String,Umbraco.Cms.Core.Models.ScriptUpdateModel,System.Guid)">
            <summary>
            Updates an existing script.
            </summary>
            <param name="path">The path of the script to update.</param>
            <param name="updateModel">A <see cref="T:Umbraco.Cms.Core.Models.ScriptUpdateModel"/> with the changes.</param>
            <param name="userKey">The key of the user performing the operation.</param>
            <returns>An attempt indicating if the operation was a success as well as a more detailed <see cref="T:Umbraco.Cms.Core.Services.OperationStatus.ScriptOperationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IScriptService.DeleteAsync(System.String,System.Guid)">
            <summary>
            Deletes a Script.
            </summary>
            <param name="path">The path of the script to delete.</param>
            <param name="userKey">The key of the user performing the operation.</param>
            <returns>An operation status.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IScriptService.RenameAsync(System.String,Umbraco.Cms.Core.Models.ScriptRenameModel,System.Guid)">
            <summary>
            Renames a script.
            </summary>
            <param name="path">The path of the script to rename.</param>
            <param name="renameModel">A <see cref="T:Umbraco.Cms.Core.Models.ScriptRenameModel"/> with the changes.</param>
            <param name="userKey">The key of the user performing the operation.</param>
            <returns>An attempt indicating if the operation was a success as well as a more detailed <see cref="T:Umbraco.Cms.Core.Services.OperationStatus.ScriptOperationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IServerRegistrationService.TouchServer(System.String,System.TimeSpan)">
            <summary>
                Touches a server to mark it as active; deactivate stale servers.
            </summary>
            <param name="serverAddress">The server URL.</param>
            <param name="staleTimeout">The time after which a server is considered stale.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IServerRegistrationService.DeactiveServer(System.String)">
            <summary>
                Deactivates a server.
            </summary>
            <param name="serverIdentity">The server unique identity.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IServerRegistrationService.DeactiveStaleServers(System.TimeSpan)">
            <summary>
                Deactivates stale servers.
            </summary>
            <param name="staleTimeout">The time after which a server is considered stale.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IServerRegistrationService.GetActiveServers(System.Boolean)">
            <summary>
                Return all active servers.
            </summary>
            <param name="refresh">A value indicating whether to force-refresh the cache.</param>
            <returns>All active servers.</returns>
            <remarks>
                By default this method will rely on the repository's cache, which is updated each
                time the current server is touched, and the period depends on the configuration. Use the
                <paramref name="refresh" /> parameter to force a cache refresh and reload active servers
                from the database.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IServerRegistrationService.GetServers(System.Boolean)">
            <summary>
                Return all servers (active and inactive).
            </summary>
            <param name="refresh">A value indicating whether to force-refresh the cache.</param>
            <returns>All servers.</returns>
            <remarks>
                By default this method will rely on the repository's cache, which is updated each
                time the current server is touched, and the period depends on the configuration. Use the
                <paramref name="refresh" /> parameter to force a cache refresh and reload all servers
                from the database.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IServerRegistrationService.GetCurrentServerRole">
            <summary>
                Gets the role of the current server.
            </summary>
            <returns>The role of the current server.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IService">
            <summary>
                Marker interface for services, which is used to store difference services in a list or dictionary
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IsoCodeValidator">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IsoCodeValidator.IsValid(System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IStylesheetService.CreateAsync(Umbraco.Cms.Core.Models.StylesheetCreateModel,System.Guid)">
            <summary>
            Creates a new stylesheet.
            </summary>
            <param name="createModel"><see cref="T:Umbraco.Cms.Core.Models.StylesheetCreateModel"/> containing the information about the stylesheet being created.</param>
            <param name="userKey">The key of the user performing the operation.</param>
            <returns>An attempt indicating if the operation was a success as well as a more detailed <see cref="T:Umbraco.Cms.Core.Services.OperationStatus.StylesheetOperationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IStylesheetService.UpdateAsync(System.String,Umbraco.Cms.Core.Models.StylesheetUpdateModel,System.Guid)">
            <summary>
            Updates an existing stylesheet.
            </summary>
            <param name="path">The path of the stylesheet to update.</param>
            <param name="updateModel">A <see cref="T:Umbraco.Cms.Core.Models.StylesheetUpdateModel"/> with the changes.</param>
            <param name="userKey">The key of the user performing the operation.</param>
            <returns>An attempt indicating if the operation was a success as well as a more detailed <see cref="T:Umbraco.Cms.Core.Services.OperationStatus.StylesheetOperationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IStylesheetService.DeleteAsync(System.String,System.Guid)">
            <summary>
            Deletes a stylesheet.
            </summary>
            <param name="path">The path of the stylesheet to delete.</param>
            <param name="userKey">The key of the user performing the operation.</param>
            <returns>An operation status.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IStylesheetService.RenameAsync(System.String,Umbraco.Cms.Core.Models.StylesheetRenameModel,System.Guid)">
            <summary>
            Renames a stylesheet.
            </summary>
            <param name="path">The path of the stylesheet to rename.</param>
            <param name="renameModel">A <see cref="T:Umbraco.Cms.Core.Models.StylesheetRenameModel"/> with the changes.</param>
            <param name="userKey">The key of the user performing the operation.</param>
            <returns>An attempt indicating if the operation was a success as well as a more detailed <see cref="T:Umbraco.Cms.Core.Services.OperationStatus.StylesheetOperationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ISystemTroubleshootingInformationService.GetTroubleshootingInformation">
            <summary>
            Retrieves various system/server information (i.e. OS and framework version) and Umbraco configuration (i.e. runtime mode and server role).
            </summary>
            <returns>Key/value pairs of system information</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.ITagService">
            <summary>
                Tag service to query for tags in the tags db table. The tags returned are only relevant for published content &amp;
                saved media or members
            </summary>
            <remarks>
                If there is unpublished content with tags, those tags will not be contained.
                This service does not contain methods to query for content, media or members based on tags, those methods will be added
                to the content, media and member services respectively.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITagService.GetTaggedEntityById(System.Int32)">
            <summary>
                Gets a tagged entity.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITagService.GetTaggedEntityByKey(System.Guid)">
            <summary>
                Gets a tagged entity.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITagService.GetTaggedContentByTagGroup(System.String,System.String)">
            <summary>
                Gets all documents tagged with any tag in the specified group.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITagService.GetTaggedContentByTag(System.String,System.String,System.String)">
            <summary>
                Gets all documents tagged with the specified tag.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITagService.GetTaggedMediaByTagGroup(System.String,System.String)">
            <summary>
                Gets all media tagged with any tag in the specified group.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITagService.GetTaggedMediaByTag(System.String,System.String,System.String)">
            <summary>
                Gets all media tagged with the specified tag.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITagService.GetTaggedMembersByTagGroup(System.String,System.String)">
            <summary>
                Gets all members tagged with any tag in the specified group.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITagService.GetTaggedMembersByTag(System.String,System.String,System.String)">
            <summary>
                Gets all members tagged with the specified tag.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITagService.GetAllTags(System.String,System.String)">
            <summary>
                Gets all tags.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITagService.GetAllContentTags(System.String,System.String)">
            <summary>
                Gets all document tags.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITagService.GetAllMediaTags(System.String,System.String)">
            <summary>
                Gets all media tags.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITagService.GetAllMemberTags(System.String,System.String)">
            <summary>
                Gets all member tags.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITagService.GetTagsForProperty(System.Int32,System.String,System.String,System.String)">
            <summary>
                Gets all tags attached to an entity via a property.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITagService.GetTagsForEntity(System.Int32,System.String,System.String)">
            <summary>
                Gets all tags attached to an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITagService.GetTagsForProperty(System.Guid,System.String,System.String,System.String)">
            <summary>
                Gets all tags attached to an entity via a property.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITagService.GetTagsForEntity(System.Guid,System.String,System.String)">
            <summary>
                Gets all tags attached to an entity.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITemplateService.GetAllAsync(System.String[])">
            <summary>
                Gets a list of all <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.ITemplate" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITemplateService.GetAllAsync(System.Guid[])">
            <summary>
                Gets a list of all <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.ITemplate" />.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITemplateService.GetChildrenAsync(System.Int32)">
            <summary>
                Gets a list of all <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITemplateService.GetAsync(System.String)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> object by its alias.
            </summary>
            <param name="alias">The alias of the template.</param>
            <returns>The <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> object matching the alias, or null.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITemplateService.GetAsync(System.Int32)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> object by its identifier.
            </summary>
            <param name="id">The identifier of the template.</param>
            <returns>The <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> object matching the identifier, or null.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITemplateService.GetAsync(System.Guid)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> object by its guid identifier.
            </summary>
            <param name="id">The guid identifier of the template.</param>
            <returns>The <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> object matching the identifier, or null.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITemplateService.GetDescendantsAsync(System.Int32)">
            <summary>
                Gets the template descendants
            </summary>
            <param name="masterTemplateId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITemplateService.UpdateAsync(Umbraco.Cms.Core.Models.ITemplate,System.Guid)">
            <summary>
                Updates a <see cref="T:Umbraco.Cms.Core.Models.ITemplate" />
            </summary>
            <param name="template"><see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> to update</param>
            <param name="userKey">Key of the user saving the template</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITemplateService.CreateForContentTypeAsync(System.String,System.String,System.Guid)">
            <summary>
                Creates a template for a content type
            </summary>
            <param name="contentTypeAlias"></param>
            <param name="contentTypeName"></param>
            <param name="userKey">Key of the user performing the Create.</param>
            <returns>
                The template created
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITemplateService.CreateAsync(System.String,System.String,System.String,System.Guid,System.Nullable{System.Guid})">
            <summary>
                Creates a new template
            </summary>
            <param name="templateKey"></param>
            <param name="name">Name of the new template</param>
            <param name="alias">Alias of the template</param>
            <param name="content">View content for the new template</param>
            <param name="userKey">Key of the user performing the Create.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITemplateService.CreateAsync(Umbraco.Cms.Core.Models.ITemplate,System.Guid)">
            <summary>
                Creates a new template
            </summary>
            <param name="template">The new template</param>
            <param name="userKey">Key of the user performing the Create.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITemplateService.DeleteAsync(System.String,System.Guid)">
            <summary>
                Deletes a template by its alias
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> to delete</param>
            <param name="userKey">Key of the user performing the Delete.</param>
            <returns>True if the template was deleted, false otherwise</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITemplateService.DeleteAsync(System.Guid,System.Guid)">
            <summary>
                Deletes a template by its key
            </summary>
            <param name="key">Key of the <see cref="T:Umbraco.Cms.Core.Models.ITemplate" /> to delete</param>
            <param name="userKey">Key of the user performing the Delete.</param>
            <returns>True if the template was deleted, false otherwise</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITemplateService.GetFileContentStreamAsync(System.String)">
            <summary>
                Gets the content of a template as a stream.
            </summary>
            <param name="filepath">The filesystem path to the template.</param>
            <returns>The content of the template.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITemplateService.SetFileContentAsync(System.String,System.IO.Stream)">
            <summary>
                Sets the content of a template.
            </summary>
            <param name="filepath">The filesystem path to the template.</param>
            <param name="content">The content of the template.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITemplateService.GetFileSizeAsync(System.String)">
            <summary>
                Gets the size of a template.
            </summary>
            <param name="filepath">The filesystem path to the template.</param>
            <returns>The size of the template.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITrackedReferencesService.GetPagedRelationsForItemAsync(System.Guid,System.Int64,System.Int64,System.Boolean)">
            <summary>
                Gets a paged result of items which are in relation with the current item.
                Basically, shows the items which depend on the current item.
            </summary>
            <param name="key">The identifier of the entity to retrieve relations for.</param>
            <param name="skip">The amount of items to skip</param>
            <param name="take">The amount of items to take.</param>
            <param name="filterMustBeIsDependency">
                A boolean indicating whether to filter only the RelationTypes which are
                dependencies (isDependency field is set to true).
            </param>
            <returns>A paged result of <see cref="T:Umbraco.Cms.Core.Models.RelationItemModel" /> objects.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITrackedReferencesService.GetPagedRelationsForRecycleBinAsync(Umbraco.Cms.Core.Models.UmbracoObjectTypes,System.Int64,System.Int64,System.Boolean)">
            <summary>
                Gets a paged result of items which are in relation with an item in the recycle bin.
            </summary>
            <param name="objectType">The Umbraco object type that has recycle bin support (currently Document or Media).</param>
            <param name="skip">The amount of items to skip</param>
            <param name="take">The amount of items to take.</param>
            <param name="filterMustBeIsDependency">
                A boolean indicating whether to filter only the RelationTypes which are
                dependencies (isDependency field is set to true).
            </param>
            <returns>A paged result of <see cref="T:Umbraco.Cms.Core.Models.RelationItemModel" /> objects.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITrackedReferencesService.GetPagedDescendantsInReferencesAsync(System.Guid,System.Int64,System.Int64,System.Boolean)">
            <summary>
                Gets a paged result of the descending items that have any references, given a parent id.
            </summary>
            <param name="parentKey">The unique identifier of the parent to retrieve descendants for.</param>
            <param name="skip">The amount of items to skip</param>
            <param name="take">The amount of items to take.</param>
            <param name="filterMustBeIsDependency">
                A boolean indicating whether to filter only the RelationTypes which are
                dependencies (isDependency field is set to true).
            </param>
            <returns>A paged result of <see cref="T:Umbraco.Cms.Core.Models.RelationItemModel" /> objects.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITrackedReferencesService.GetPagedItemsWithRelationsAsync(System.Collections.Generic.ISet{System.Guid},System.Int64,System.Int64,System.Boolean)">
            <summary>
                Gets a paged result of items used in any kind of relation from selected integer ids.
            </summary>
            <param name="keys">The identifiers of the entities to check for relations.</param>
            <param name="skip">The amount of items to skip</param>
            <param name="take">The amount of items to take.</param>
            <param name="filterMustBeIsDependency">
                A boolean indicating whether to filter only the RelationTypes which are
                dependencies (isDependency field is set to true).
            </param>
            <returns>A paged result of <see cref="T:Umbraco.Cms.Core.Models.RelationItemModel" /> objects.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.ITwoFactorLoginService">
            <summary>
                Service handling 2FA logins.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITwoFactorLoginService.DeleteUserLoginsAsync(System.Guid)">
            <summary>
                Deletes all user logins - normally used when a member is deleted.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITwoFactorLoginService.IsTwoFactorEnabledAsync(System.Guid)">
            <summary>
                Checks whether 2FA is enabled for the user or member with the specified key.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITwoFactorLoginService.GetSecretForUserAndProviderAsync(System.Guid,System.String)">
            <summary>
                Gets the secret for user or member and a specific provider.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITwoFactorLoginService.GetAllProviderNames">
            <summary>
                Gets all registered providers names.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITwoFactorLoginService.DisableAsync(System.Guid,System.String)">
            <summary>
                Disables the 2FA provider with the specified provider name for the specified user or member.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITwoFactorLoginService.ValidateTwoFactorSetup(System.String,System.String,System.String)">
            <summary>
                Validates the setup of the provider using the secret and code.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITwoFactorLoginService.SaveAsync(Umbraco.Cms.Core.Models.TwoFactorLogin)">
            <summary>
                Saves the 2FA login information.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ITwoFactorLoginService.GetEnabledTwoFactorProviderNamesAsync(System.Guid)">
            <summary>
            Gets all the enabled 2FA providers for the user or member with the specified key.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IUserGroupPermissionService">
            <summary>
                Manages permissions for user group access.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserGroupPermissionService.AuthorizeAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Guid)">
            <summary>
                Authorize that a user belongs to a user group.
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to authorize.</param>
            <param name="userGroupKey">The identifier of the user group to check for access.</param>
            <returns>A task resolving into a <see cref="T:Umbraco.Cms.Core.Services.AuthorizationStatus.UserGroupAuthorizationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserGroupPermissionService.AuthorizeAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
                Authorize that a user belongs to user groups.
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to authorize.</param>
            <param name="userGroupKeys">The identifiers of the user groups to check for access.</param>
            <returns>A task resolving into a <see cref="T:Umbraco.Cms.Core.Services.AuthorizationStatus.UserGroupAuthorizationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserGroupPermissionService.AuthorizeCreateAsync(Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Models.Membership.IUserGroup)">
            <summary>
                Authorize that a user is allowed to create a new user group.
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to authorize.</param>
            <param name="userGroup">The user group to be created.</param>
            <returns>A task resolving into a <see cref="T:Umbraco.Cms.Core.Services.AuthorizationStatus.UserGroupAuthorizationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserGroupPermissionService.AuthorizeUpdateAsync(Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Models.Membership.IUserGroup)">
            <summary>
                Authorize that a user is allowed to update an existing user group.
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to authorize.</param>
            <param name="userGroup">The user group to be updated.</param>
            <returns>A task resolving into a <see cref="T:Umbraco.Cms.Core.Services.AuthorizationStatus.UserGroupAuthorizationStatus"/>.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IUserGroupService">
            <summary>
            Manages user groups.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserGroupService.GetAllAsync(System.Int32,System.Int32)">
            <summary>
            Gets all user groups.
            </summary>
            <param name="skip">The amount of user groups to skip.</param>
            <param name="take">The amount of user groups to take.</param>
            <returns>All user groups as an enumerable list of <see cref="T:Umbraco.Cms.Core.Models.Membership.IUserGroup"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserGroupService.GetAsync(System.Int32[])">
            <summary>
                Gets all UserGroups matching an ID in the parameter list.
            </summary>
            <param name="ids">Optional Ids of UserGroups to retrieve.</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.Membership.IUserGroup"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserGroupService.GetAsync(System.String[])">
            <summary>
                Gets all UserGroups matching an alias in the parameter list.
            </summary>
            <param name="aliases">Alias of the UserGroup to retrieve.</param>
            <returns>
                <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.Membership.IUserGroup"/>.</returns>
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserGroupService.GetAsync(System.String)">
            <summary>
                Gets a UserGroup by its Alias
            </summary>
            <param name="alias">Name of the UserGroup to retrieve.</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.Membership.IUserGroup" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserGroupService.GetAsync(System.Int32)">
            <summary>
                Gets a UserGroup by its Id
            </summary>
            <param name="id">Id of the UserGroup to retrieve.</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.Membership.IUserGroup" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserGroupService.GetAsync(System.Guid)">
            <summary>
            Gets a UserGroup by its key
            </summary>
            <param name="key">Key of the UserGroup to retrieve.</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.Membership.IUserGroup" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserGroupService.FilterAsync(System.Guid,System.String,System.Int32,System.Int32)">
            <summary>
            Performs filtering for user groups
            </summary>
            <param name="userKey">The key of the performing (current) user.</param>
            <param name="filter">The filter to apply.</param>
            <param name="skip">The amount of user groups to skip.</param>
            <param name="take">The amount of user groups to take.</param>
            <returns>All matching user groups as an enumerable list of <see cref="T:Umbraco.Cms.Core.Models.Membership.IUserGroup"/>.</returns>
            <remarks>
            If the performing user is not an administrator, this method only returns groups that the performing user is a member of.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserGroupService.CreateAsync(Umbraco.Cms.Core.Models.Membership.IUserGroup,System.Guid,System.Guid[])">
            <summary>
            Persists a new user group.
            </summary>
            <param name="userGroup">The user group to create.</param>
            <param name="userKey">The key of the user responsible for creating the group.</param>
            <param name="groupMembersKeys">The keys of the users that should be part of the group when created.</param>
            <returns>An attempt indicating if the operation was a success as well as a more detailed <see cref="T:Umbraco.Cms.Core.Services.OperationStatus.UserGroupOperationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserGroupService.UpdateAsync(Umbraco.Cms.Core.Models.Membership.IUserGroup,System.Guid)">
            <summary>
            Updates an existing user group.
            </summary>
            <param name="userGroup">The user group to update.</param>
            <param name="userKey">The ID of the user responsible for updating the group.</param>
            <returns>An attempt indicating if the operation was a success as well as a more detailed <see cref="T:Umbraco.Cms.Core.Services.OperationStatus.UserGroupOperationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserGroupService.DeleteAsync(System.Collections.Generic.ISet{System.Guid})">
            <summary>
                Deletes a UserGroup
            </summary>
            <param name="userGroupKeys">The keys of the user groups to delete.</param>
            <returns>An attempt indicating if the operation was a success as well as a more detailed <see cref="T:Umbraco.Cms.Core.Services.OperationStatus.UserGroupOperationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserGroupService.UpdateUserGroupsOnUsersAsync(System.Collections.Generic.ISet{System.Guid},System.Collections.Generic.ISet{System.Guid})">
            <summary>
            Updates the users to have the groups specified.
            </summary>
            <param name="userGroupKeys">The user groups the users should be part of.</param>
            <param name="userKeys">The user whose groups we want to alter.</param>
            <returns>An attempt indicating if the operation was a success as well as a more detailed <see cref="T:Umbraco.Cms.Core.Services.OperationStatus.UserGroupOperationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserIdKeyResolver.GetAsync(System.Guid)">
            <summary>
            Tries to resolve a user key to a user id without fetching the entire user.
            </summary>
            <param name="key">The key of the user. </param>
            <returns>The id of the user, null if the user doesn't exist.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserIdKeyResolver.GetAsync(System.Int32)">
            <summary>
            Tries to resolve a user id to a user key without fetching the entire user.
            </summary>
            <param name="id">The id of the user. </param>
            <returns>The key of the user, null if the user doesn't exist.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IUserPermissionService">
            <summary>
                Manages permissions for user access.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserPermissionService.AuthorizeAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Guid)">
            <summary>
                Authorize that a user has access to user account.
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to authorize.</param>
            <param name="userKey">The identifier of the user account to check for access.</param>
            <returns>A task resolving into a <see cref="T:Umbraco.Cms.Core.Services.AuthorizationStatus.UserAuthorizationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserPermissionService.AuthorizeAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
                Authorize that a user has access to user accounts.
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to authorize.</param>
            <param name="userKeys">The identifiers of the user accounts to check for access.</param>
            <returns>A task resolving into a <see cref="T:Umbraco.Cms.Core.Services.AuthorizationStatus.UserAuthorizationStatus"/>.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IUserService">
            <summary>
                Defines the UserService, which is an easy access to operations involving <see cref="T:Umbraco.Cms.Core.Models.Membership.IProfile" /> and eventually
                Users.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.CreateLoginSession(System.Int32,System.String)">
            <summary>
                Creates a database entry for starting a new login session for a user
            </summary>
            <param name="userId"></param>
            <param name="requestingIpAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.ValidateLoginSession(System.Int32,System.Guid)">
            <summary>
                Validates that a user login session is valid/current and hasn't been closed
            </summary>
            <param name="userId"></param>
            <param name="sessionId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.ClearLoginSession(System.Guid)">
            <summary>
                Removes the session's validity
            </summary>
            <param name="sessionId"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.ClearLoginSessions(System.Int32)">
            <summary>
                Removes all valid sessions for the user
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.GetUserStates">
            <summary>
                This is basically facets of UserStates key = state, value = count
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.CreateAsync(System.Guid,Umbraco.Cms.Core.Models.UserCreateModel,System.Boolean)">
            <summary>
            Creates a user based in a create model and persists it to the database.
            </summary>
            <remarks>
            This creates both the Umbraco user and the identity user.
            </remarks>
            <param name="performingUserKey">The key of the user performing the operation.</param>
            <param name="model">Model to create the user from.</param>
            <param name="approveUser">Specifies if the user should be enabled be default. Defaults to false.</param>
            <returns>An attempt indicating if the operation was a success as well as a more detailed <see cref="T:Umbraco.Cms.Core.Services.OperationStatus.UserOperationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.GetAllAsync(System.Guid,System.Int32,System.Int32)">
            <summary>
            Gets all users that the requesting user is allowed to see.
            </summary>
            <param name="performingUserKey">The Key of the user requesting the users.</param>
            <param name="skip">Amount to skip.</param>
            <param name="take">Amount to take.</param>
            <returns>All users that the user is allowed to see.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.GetAll(System.Int64,System.Int32,System.Int64@,System.String,Umbraco.Cms.Core.Direction,Umbraco.Cms.Core.Models.Membership.UserState[],System.String[],System.String[],Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.Membership.IUser})">
            <summary>
                Get paged users
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="orderBy"></param>
            <param name="orderDirection"></param>
            <param name="userState"></param>
            <param name="includeUserGroups">
                A filter to only include user that belong to these user groups
            </param>
            <param name="excludeUserGroups">
                A filter to only include users that do not belong to these user groups
            </param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.GetAll(System.Int64,System.Int32,System.Int64@,System.String,Umbraco.Cms.Core.Direction,Umbraco.Cms.Core.Models.Membership.UserState[],System.String[],System.String)">
            <summary>
                Get paged users
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="orderBy"></param>
            <param name="orderDirection"></param>
            <param name="userState"></param>
            <param name="userGroups">
                A filter to only include user that belong to these user groups
            </param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.Delete(Umbraco.Cms.Core.Models.Membership.IUser,System.Boolean)">
            <summary>
                Deletes or disables a User
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to delete</param>
            <param name="deletePermanently"><c>True</c> to permanently delete the user, <c>False</c> to disable the user</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.GetProfileById(System.Int32)">
            <summary>
                Gets an IProfile by User Id.
            </summary>
            <param name="id">Id of the User to retrieve</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.Membership.IProfile" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.GetProfileByUserName(System.String)">
            <summary>
                Gets a profile by username
            </summary>
            <param name="username">Username</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.Membership.IProfile" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.GetAsync(System.Guid)">
            <summary>
            Get a user by its key.
            </summary>
            <param name="key">The GUID key of the user.</param>
            <returns>The found user, or null if nothing was found.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.GetUserById(System.Int32)">
            <summary>
                Gets a user by Id
            </summary>
            <param name="id">Id of the user to retrieve</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.GetUsersById(System.Int32[])">
            <summary>
                Gets a users by Id
            </summary>
            <param name="ids">Ids of the users to retrieve</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.DeleteSectionFromAllUserGroups(System.String)">
            <summary>
                Removes a specific section from all user groups
            </summary>
            <remarks>This is useful when an entire section is removed from config</remarks>
            <param name="sectionAlias">Alias of the section to remove</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.GetPermissionsAsync(System.Guid,System.Guid[])">
            <summary>
            Get explicitly assigned permissions for a user and node keys.
            </summary>
            <param name="userKey">Key of user to retrieve permissions for. </param>
            <param name="nodeKeys">The keys of the nodes to get permissions for.</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.NodePermissions"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.GetMediaPermissionsAsync(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Get explicitly assigned content permissions for a user and node keys.
            </summary>
            <param name="userKey">Key of user to retrieve permissions for. </param>
            <param name="mediaKeys">The keys of the media to get permissions for.</param>
            <returns>An attempt indicating if the operation was a success as well as a more detailed <see cref="T:Umbraco.Cms.Core.Services.OperationStatus.UserOperationStatus"/>, and an enumerable of permissions.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.GetDocumentPermissionsAsync(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Get explicitly assigned media permissions for a user and node keys.
            </summary>
            <param name="userKey">Key of user to retrieve permissions for. </param>
            <param name="contentKeys">The keys of the content to get permissions for.</param>
            <returns>An attempt indicating if the operation was a success as well as a more detailed <see cref="T:Umbraco.Cms.Core.Services.OperationStatus.UserOperationStatus"/>, and an enumerable of permissions.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.GetPermissions(Umbraco.Cms.Core.Models.Membership.IUser,System.Int32[])">
            <summary>
                Get explicitly assigned permissions for a user and optional node ids
            </summary>
            <remarks>If no permissions are found for a particular entity then the user's default permissions will be applied</remarks>
            <param name="user">User to retrieve permissions for</param>
            <param name="nodeIds">
                Specifying nothing will return all user permissions for all nodes that have explicit permissions
                defined
            </param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.Membership.EntityPermission" /></returns>
            <remarks>
                This will return the default permissions for the user's groups for node ids that don't have explicitly defined
                permissions
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.GetPermissions(Umbraco.Cms.Core.Models.Membership.IUserGroup[],System.Boolean,System.Int32[])">
            <summary>
                Get explicitly assigned permissions for groups and optional node Ids
            </summary>
            <param name="groups"></param>
            <param name="fallbackToDefaultPermissions">
                Flag indicating if we want to include the default group permissions for each result if there are not explicit
                permissions set
            </param>
            <param name="nodeIds">Specifying nothing will return all permissions for all nodes</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.Membership.EntityPermission" /></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.GetPermissionsForPath(Umbraco.Cms.Core.Models.Membership.IUser,System.String)">
            <summary>
                Gets the implicit/inherited permissions for the user for the given path
            </summary>
            <param name="user">User to check permissions for</param>
            <param name="path">Path to check permissions for</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.GetPermissionsForPath(Umbraco.Cms.Core.Models.Membership.IUserGroup[],System.String,System.Boolean)">
            <summary>
                Gets the permissions for the provided groups and path
            </summary>
            <param name="groups"></param>
            <param name="path">Path to check permissions for</param>
            <param name="fallbackToDefaultPermissions">
                Flag indicating if we want to include the default group permissions for each result if there are not explicit
                permissions set
            </param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.ReplaceUserGroupPermissions(System.Int32,System.Collections.Generic.ISet{System.String},System.Int32[])">
            <summary>
                Replaces the same permission set for a single group to any number of entities
            </summary>
            <param name="groupId">Id of the group</param>
            <param name="permissions">
                Permissions as enumerable list of <see cref="T:System.Char" />,
                if no permissions are specified then all permissions for this node are removed for this group
            </param>
            <param name="entityIds">
                Specify the nodes to replace permissions for. If nothing is specified all permissions are
                removed.
            </param>
            <remarks>If no 'entityIds' are specified all permissions will be removed for the specified group.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.AssignUserGroupPermission(System.Int32,System.String,System.Int32[])">
            <summary>
                Assigns the same permission set for a single user group to any number of entities
            </summary>
            <param name="groupId">Id of the group</param>
            <param name="permission"></param>
            <param name="entityIds">Specify the nodes to replace permissions for</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.GetAllInGroup(System.Nullable{System.Int32})">
            <summary>
                Gets a list of <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> objects associated with a given group
            </summary>
            <param name="groupId">Id of group</param>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.GetAllNotInGroup(System.Int32)">
            <summary>
                Gets a list of <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> objects not associated with a given group
            </summary>
            <param name="groupId">Id of group</param>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.VerifyPasswordResetAsync(System.Guid,System.String)">
            <summary>
                Verifies the reset code sent from the reset password mail for a given user.
            </summary>
            <param name="userKey">The unique key of the user.</param>
            <param name="token">The reset password token.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.ResetPasswordAsync(System.Guid,System.String,System.String)">
            <summary>
                Changes the user's password.
            </summary>
            <param name="userKey">The unique key of the user.</param>
            <param name="token">The reset password token.</param>
            <param name="password">The new password of the user.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserService.SendResetPasswordEmailAsync(System.String)">
            <summary>
                Sends an email with a link to reset user's password.
            </summary>
            <param name="userEmail">The email address of the user.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.IUserTwoFactorLoginService">
            <summary>
            A user specific Two factor service, that ensures the user exists before doing the job.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserTwoFactorLoginService.DisableAsync(System.Guid,System.String)">
            <summary>
            Disables a specific two factor provider on a specific user.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserTwoFactorLoginService.GetProviderNamesAsync(System.Guid)">
            <summary>
            Gets the two factor providers on a specific user.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserTwoFactorLoginService.GetSetupInfoAsync(System.Guid,System.String)">
            <remarks>
                The returned type can be anything depending on the setup providers. You will need to cast it to the type handled by
                the provider.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserTwoFactorLoginService.ValidateAndSaveAsync(System.String,System.Guid,System.String,System.String)">
            <summary>
            Validates and Saves.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IUserTwoFactorLoginService.DisableByCodeAsync(System.String,System.Guid,System.String)">
            <summary>
            Disables 2FA with Code.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IWebhookRequestService.CreateAsync(System.Guid,System.String,System.Object)">
            <summary>
                Creates a webhook request.
            </summary>
            <param name="webhookKey">The key of the webhook.</param>
            <param name="eventAlias">The alias of the event that is creating the request.</param>
            <param name="payload">The payload you want to send with your request.</param>
            <returns>The created <see cref="T:Umbraco.Cms.Core.Models.WebhookRequest" /> webhook</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IWebhookRequestService.GetAllAsync">
            <summary>
                Gets all of the webhook requests in the current database.
            </summary>
            <returns>An enumerable of <see cref="T:Umbraco.Cms.Core.Models.WebhookRequest" /> objects.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IWebhookRequestService.DeleteAsync(Umbraco.Cms.Core.Models.WebhookRequest)">
            <summary>
                Deletes a webhook request
            </summary>
            <param name="webhookRequest">The webhook request to be deleted.</param>
            <returns><placeholder>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</placeholder></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IWebhookRequestService.UpdateAsync(Umbraco.Cms.Core.Models.WebhookRequest)">
            <summary>
                Update a webhook request.
            </summary>
            <param name="webhookRequest">The webhook request you want to update.</param>
            <returns>The updated <see cref="T:Umbraco.Cms.Core.Models.WebhookRequest" /> webhook</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IWebhookService.CreateAsync(Umbraco.Cms.Core.Models.IWebhook)">
            <summary>
                Creates a webhook.
            </summary>
            <param name="webhook"><see cref="T:Umbraco.Cms.Core.Models.IWebhook" /> to create.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IWebhookService.UpdateAsync(Umbraco.Cms.Core.Models.IWebhook)">
            <summary>
                Updates a webhook.
            </summary>
            <param name="webhook"><see cref="T:Umbraco.Cms.Core.Models.IWebhook" /> to update.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IWebhookService.DeleteAsync(System.Guid)">
            <summary>
                Deletes a webhook.
            </summary>
            <param name="key">The unique key of the webhook.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IWebhookService.GetAsync(System.Guid)">
            <summary>
                Gets a webhook by its key.
            </summary>
            <param name="key">The unique key of the webhook.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IWebhookService.GetMultipleAsync(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
                Gets all webhooks with the given keys.
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IWebhook" /> objects.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IWebhookService.GetAllAsync(System.Int32,System.Int32)">
            <summary>
                Gets all webhooks.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.IWebhookService.GetByAliasAsync(System.String)">
            <summary>
                Gets webhooks by event name.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.KeyValueService.GetValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.KeyValueService.FindByKeyPrefix(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.KeyValueService.SetValue(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.KeyValueService.SetValue(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.KeyValueService.TrySetValue(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LanguageService.GetAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LanguageService.GetDefaultLanguageAsync">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LanguageService.GetDefaultIsoCodeAsync">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LanguageService.GetAllAsync">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LanguageService.UpdateAsync(Umbraco.Cms.Core.Models.ILanguage,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LanguageService.CreateAsync(Umbraco.Cms.Core.Models.ILanguage,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LanguageService.DeleteAsync(System.String,System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Services.LocalizationService">
            <summary>
                Represents the Localization Service, which is an easy access to operations involving <see cref="T:Umbraco.Cms.Core.Models.Language" /> and
                <see cref="T:Umbraco.Cms.Core.Models.DictionaryItem" />
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizationService.AddOrUpdateDictionaryValue(Umbraco.Cms.Core.Models.IDictionaryItem,Umbraco.Cms.Core.Models.ILanguage,System.String)">
            <summary>
                Adds or updates a translation for a dictionary item and language
            </summary>
            <param name="item"></param>
            <param name="language"></param>
            <param name="value"></param>
            <returns></returns>
            <remarks>
                This does not save the item, that needs to be done explicitly
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizationService.CreateDictionaryItemWithIdentity(System.String,System.Nullable{System.Guid},System.String)">
            <summary>
                Creates and saves a new dictionary item and assigns a value to all languages if defaultValue is specified.
            </summary>
            <param name="key"></param>
            <param name="parentId"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizationService.GetDictionaryItemById(System.Int32)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> by its <see cref="T:System.Int32" /> id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /></param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizationService.GetDictionaryItemById(System.Guid)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> by its <see cref="T:System.Guid" /> id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /></param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.DictionaryItem" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizationService.GetDictionaryItemsByIds(System.Guid[])">
            <summary>
                Gets a collection <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> by their <see cref="T:System.Guid" /> ids
            </summary>
            <param name="ids">Ids of the <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /></param>
            <returns>
                A collection of <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizationService.GetDictionaryItemByKey(System.String)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> by its key
            </summary>
            <param name="key">Key of the <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /></param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizationService.GetDictionaryItemsByKeys(System.String[])">
            <summary>
                Gets a collection of <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> by their keys
            </summary>
            <param name="keys">Keys of the <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /></param>
            <returns>
                A collection of <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizationService.GetDictionaryItemChildren(System.Guid)">
            <summary>
            Gets a list of children for a <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem"/>
            </summary>
            <param name="parentId">Id of the parent</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem"/> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizationService.GetDictionaryItemDescendants(System.Nullable{System.Guid})">
            <summary>
                Gets a list of descendants for a <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" />
            </summary>
            <param name="parentId">Id of the parent, null will return all dictionary items</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizationService.GetRootDictionaryItems">
            <summary>
            Gets the root/top <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem"/> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizationService.DictionaryItemExists(System.String)">
            <summary>
                Checks if a <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> with given key exists
            </summary>
            <param name="key">Key of the <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /></param>
            <returns>True if a <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> exists, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizationService.Save(Umbraco.Cms.Core.Models.IDictionaryItem,System.Int32)">
            <summary>
                Saves a <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> object
            </summary>
            <param name="dictionaryItem"><see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> to save</param>
            <param name="userId">Optional id of the user saving the dictionary item</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizationService.Delete(Umbraco.Cms.Core.Models.IDictionaryItem,System.Int32)">
            <summary>
                Deletes a <see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> object and its related translations
                as well as its children.
            </summary>
            <param name="dictionaryItem"><see cref="T:Umbraco.Cms.Core.Models.IDictionaryItem" /> to delete</param>
            <param name="userId">Optional id of the user deleting the dictionary item</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizationService.GetLanguageById(System.Int32)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.Language" /> by its id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.Language" /></param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.Language" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizationService.GetLanguageByIsoCode(System.String)">
            <summary>
                Gets a <see cref="T:Umbraco.Cms.Core.Models.Language" /> by its iso code
            </summary>
            <param name="isoCode">Iso Code of the language (ie. en-US)</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.Language" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizationService.GetLanguageIdByIsoCode(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizationService.GetLanguageIsoCodeById(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizationService.GetDefaultLanguageIsoCode">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizationService.GetDefaultLanguageId">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizationService.GetAllLanguages">
            <summary>
                Gets all available languages
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.ILanguage" /> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizationService.Save(Umbraco.Cms.Core.Models.ILanguage,System.Int32)">
            <summary>
                Saves a <see cref="T:Umbraco.Cms.Core.Models.ILanguage" /> object
            </summary>
            <param name="language"><see cref="T:Umbraco.Cms.Core.Models.ILanguage" /> to save</param>
            <param name="userId">Optional id of the user saving the language</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizationService.Delete(Umbraco.Cms.Core.Models.ILanguage,System.Int32)">
            <summary>
                Deletes a <see cref="T:Umbraco.Cms.Core.Models.ILanguage" /> by removing it (but not its usages) from the db
            </summary>
            <param name="language"><see cref="T:Umbraco.Cms.Core.Models.ILanguage" /> to delete</param>
            <param name="userId">Optional id of the user deleting the language</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.LocalizedTextService">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizedTextService.#ctor(System.Lazy{Umbraco.Cms.Core.Services.LocalizedTextServiceFileSources},Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Services.LocalizedTextService})">
            <summary>
                Initializes with a file sources instance
            </summary>
            <param name="fileSources"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizedTextService.#ctor(System.Collections.Generic.IDictionary{System.Globalization.CultureInfo,System.Lazy{System.Xml.Linq.XDocument}},Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Services.LocalizedTextService})">
            <summary>
                Initializes with an XML source
            </summary>
            <param name="source"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizedTextService.#ctor(System.Collections.Generic.IDictionary{System.Globalization.CultureInfo,System.Lazy{System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.String}}}},Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Services.LocalizedTextService})">
            <summary>
            Initializes with a source of a dictionary of culture -> areas -> sub dictionary of keys/values
            </summary>
            <param name="source"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizedTextService.GetAllStoredValues(System.Globalization.CultureInfo)">
            <summary>
                Returns all key/values in storage for the given culture
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizedTextService.GetSupportedCultures">
            <summary>
                Returns a list of all currently supported cultures
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizedTextService.ConvertToSupportedCultureWithRegionCode(System.Globalization.CultureInfo)">
            <summary>
                Tries to resolve a full 4 letter culture from a 2 letter culture name
            </summary>
            <param name="currentCulture">
                The culture to determine if it is only a 2 letter culture, if so we'll try to convert it, otherwise it will just be
                returned
            </param>
            <returns></returns>
            <remarks>
                TODO: This is just a hack due to the way we store the language files, they should be stored with 4 letters since
                that
                is what they reference but they are stored with 2, further more our user's languages are stored with 2. So this
                attempts
                to resolve the full culture if possible.
                This only works when this service is constructed with the LocalizedTextServiceFileSources
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizedTextService.GetAllStoredValuesByAreaAndAlias(System.Globalization.CultureInfo)">
            <summary>
                Returns all key/values in storage for the given culture
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizedTextService.ParseTokens(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Parses the tokens in the value
            </summary>
            <param name="value"></param>
            <param name="tokens"></param>
            <returns></returns>
            <remarks>
                This is based on how the legacy ui localized text worked, each token was just a sequential value delimited with a %
                symbol.
                For example: hello %0%, you are %1% !
                Since we're going to continue using the same language files for now, the token system needs to remain the same.
                With our new service
                we support a dictionary which means in the future we can really have any sort of token system.
                Currently though, the token key's will need to be an integer and sequential - though we aren't going to throw
                exceptions if that is not the case.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.LocalizedTextServiceFileSources">
            <summary>
                Exposes the XDocument sources from files for the default localization text service and ensure caching is taken care
                of
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizedTextServiceFileSources.#ctor(Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Services.LocalizedTextServiceFileSources},Umbraco.Cms.Core.Cache.AppCaches,System.IO.DirectoryInfo,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Services.LocalizedTextServiceSupplementaryFileSource},Microsoft.Extensions.FileProviders.IDirectoryContents)">
            <summary>
                This is used to configure the file sources with the main file sources shipped with Umbraco and also including
                supplemental/plugin based
                localization files. The supplemental files will be loaded in and merged in after the primary files.
                The supplemental files must be named with the 4 letter culture name with a hyphen such as : en-AU.xml
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizedTextServiceFileSources.#ctor(Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Services.LocalizedTextServiceFileSources},Umbraco.Cms.Core.Cache.AppCaches,System.IO.DirectoryInfo)">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LocalizedTextServiceFileSources.GetXmlSources">
            <summary>
                Returns all xml sources for all culture files found in the folder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LogViewerService.GetPagedLogsAsync(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32,Umbraco.Cms.Core.Direction,System.String,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LogViewerService.GetSavedLogQueriesAsync(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LogViewerService.GetSavedLogQueryByNameAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LogViewerService.AddSavedLogQueryAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LogViewerService.DeleteSavedLogQueryAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LogViewerService.CanViewLogsAsync(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LogViewerService.GetLogLevelCountsAsync(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LogViewerService.GetMessageTemplatesAsync(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LogViewerService.GetLogLevelsFromSinks">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LogViewerService.GetGlobalMinLogLevel">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LogViewerService.GetTimePeriod(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Returns a <see cref="T:Umbraco.Cms.Core.Logging.Viewer.LogTimePeriod" /> representation from a start and end date for filtering log files.
            </summary>
            <param name="startDate">The start date for the date range (can be null).</param>
            <param name="endDate">The end date for the date range (can be null).</param>
            <returns>The LogTimePeriod object used to filter logs.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.LogViewerService.CanViewLogs(Umbraco.Cms.Core.Logging.Viewer.LogTimePeriod)">
            <summary>
                Returns a value indicating whether to stop a GET request that is attempting to fetch logs from a 1GB file.
            </summary>
            <param name="logTimePeriod">The time period to filter the logs.</param>
            <returns>The value whether or not you are able to view the logs.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.MediaPermissionService">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaPermissionService.AuthorizeAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.IEnumerable{System.Guid})">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaPermissionService.AuthorizeRootAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaPermissionService.AuthorizeBinAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.MediaService">
            <summary>
            Represents the Media Service, which is an easy access to operations involving <see cref="T:Umbraco.Cms.Core.Models.IMedia"/>
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.CreateMedia(System.String,System.Guid,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> object using the alias of the <see cref="T:Umbraco.Cms.Core.Models.IMediaType"/>
            that this Media should based on.
            </summary>
            <remarks>
            Note that using this method will simply return a new IMedia without any identity
            as it has not yet been persisted. It is intended as a shortcut to creating new media objects
            that does not invoke a save operation against the database.
            </remarks>
            <param name="name">Name of the Media object</param>
            <param name="parentId">Id of Parent for the new Media item</param>
            <param name="mediaTypeAlias">Alias of the <see cref="T:Umbraco.Cms.Core.Models.IMediaType"/></param>
            <param name="userId">Optional id of the user creating the media item</param>
            <returns><see cref="T:Umbraco.Cms.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.CreateMedia(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> object of a specified media type.
            </summary>
            <remarks>This method simply returns a new, non-persisted, IMedia without any identity. It
            is intended as a shortcut to creating new media objects that does not invoke a save
            operation against the database.
            </remarks>
            <param name="name">The name of the media object.</param>
            <param name="parentId">The identifier of the parent, or -1.</param>
            <param name="mediaTypeAlias">The alias of the media type.</param>
            <param name="userId">The optional id of the user creating the media.</param>
            <returns>The media object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.CreateMedia(System.String,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> object of a specified media type, at root.
            </summary>
            <remarks>This method simply returns a new, non-persisted, IMedia without any identity. It
            is intended as a shortcut to creating new media objects that does not invoke a save
            operation against the database.
            </remarks>
            <param name="name">The name of the media object.</param>
            <param name="mediaTypeAlias">The alias of the media type.</param>
            <param name="userId">The optional id of the user creating the media.</param>
            <returns>The media object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.CreateMedia(System.String,Umbraco.Cms.Core.Models.IMedia,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> object of a specified media type, under a parent.
            </summary>
            <remarks>This method simply returns a new, non-persisted, IMedia without any identity. It
            is intended as a shortcut to creating new media objects that does not invoke a save
            operation against the database.
            </remarks>
            <param name="name">The name of the media object.</param>
            <param name="parent">The parent media object.</param>
            <param name="mediaTypeAlias">The alias of the media type.</param>
            <param name="userId">The optional id of the user creating the media.</param>
            <returns>The media object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.CreateMediaWithIdentity(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> object of a specified media type.
            </summary>
            <remarks>This method returns a new, persisted, IMedia with an identity.</remarks>
            <param name="name">The name of the media object.</param>
            <param name="parentId">The identifier of the parent, or -1.</param>
            <param name="mediaTypeAlias">The alias of the media type.</param>
            <param name="userId">The optional id of the user creating the media.</param>
            <returns>The media object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.CreateMediaWithIdentity(System.String,Umbraco.Cms.Core.Models.IMedia,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> object of a specified media type, under a parent.
            </summary>
            <remarks>This method returns a new, persisted, IMedia with an identity.</remarks>
            <param name="name">The name of the media object.</param>
            <param name="parent">The parent media object.</param>
            <param name="mediaTypeAlias">The alias of the media type.</param>
            <param name="userId">The optional id of the user creating the media.</param>
            <returns>The media object.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.GetById(System.Int32)">
            <summary>
            Gets an <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> object by Id
            </summary>
            <param name="id">Id of the Media to retrieve</param>
            <returns><see cref="T:Umbraco.Cms.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.GetByIds(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets an <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> object by Id
            </summary>
            <param name="ids">Ids of the Media to retrieve</param>
            <returns><see cref="T:Umbraco.Cms.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.GetById(System.Guid)">
            <summary>
            Gets an <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> object by its 'UniqueId'
            </summary>
            <param name="key">Guid key of the Media to retrieve</param>
            <returns><see cref="T:Umbraco.Cms.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.GetByIds(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets an <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> object by Id
            </summary>
            <param name="ids">Ids of the Media to retrieve</param>
            <returns><see cref="T:Umbraco.Cms.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.GetPagedOfType(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IMedia},Umbraco.Cms.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.GetPagedOfTypes(System.Int32[],System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IMedia},Umbraco.Cms.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.GetByLevel(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> objects by Level
            </summary>
            <param name="level">The level to retrieve Media from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> objects</returns>
            <remarks>Contrary to most methods, this method filters out trashed media items.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.GetVersion(System.Int32)">
            <summary>
            Gets a specific version of an <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> item.
            </summary>
            <param name="versionId">Id of the version to retrieve</param>
            <returns>An <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> item</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.GetVersions(System.Int32)">
            <summary>
            Gets a collection of an <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> objects versions by Id
            </summary>
            <param name="id"></param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.GetAncestors(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> objects, which are ancestors of the current media.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> to retrieve ancestors for</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.GetAncestors(Umbraco.Cms.Core.Models.IMedia)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> objects, which are ancestors of the current media.
            </summary>
            <param name="media"><see cref="T:Umbraco.Cms.Core.Models.IMedia"/> to retrieve ancestors for</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.GetPagedChildren(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IMedia},Umbraco.Cms.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.GetPagedDescendants(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IMedia},Umbraco.Cms.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.GetParent(System.Int32)">
            <summary>
            Gets the parent of the current media as an <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> item.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> to retrieve the parent from</param>
            <returns>Parent <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> object</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.GetParent(Umbraco.Cms.Core.Models.IMedia)">
            <summary>
            Gets the parent of the current media as an <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> item.
            </summary>
            <param name="media"><see cref="T:Umbraco.Cms.Core.Models.IMedia"/> to retrieve the parent from</param>
            <returns>Parent <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> object</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.GetRootMedia">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> objects, which reside at the first level / root
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.GetPagedMediaInRecycleBin(System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.IMedia},Umbraco.Cms.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.HasChildren(System.Int32)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> item has any children
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.IMedia"/></param>
            <returns>True if the media has any children otherwise False</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.GetMediaByPath(System.String)">
            <summary>
            Gets an <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> object from the path stored in the 'umbracoFile' property.
            </summary>
            <param name="mediaPath">Path of the media item to retrieve (for example: /media/1024/koala_403x328.jpg)</param>
            <returns><see cref="T:Umbraco.Cms.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.Save(Umbraco.Cms.Core.Models.IMedia,System.Int32)">
            <summary>
            Saves a single <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> object
            </summary>
            <param name="media">The <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> to save</param>
            <param name="userId">Id of the User saving the Media</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.Save(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IMedia},System.Int32)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> objects
            </summary>
            <param name="medias">Collection of <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> to save</param>
            <param name="userId">Id of the User saving the Media</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.Delete(Umbraco.Cms.Core.Models.IMedia,System.Int32)">
            <summary>
            Permanently deletes an <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> object
            </summary>
            <param name="media">The <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> to delete</param>
            <param name="userId">Id of the User deleting the Media</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.DeleteVersions(System.Int32,System.DateTime,System.Int32)">
            <summary>
            Permanently deletes versions from an <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> object prior to a specific date.
            This method will never delete the latest version of a media item.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> object to delete versions from</param>
            <param name="versionDate">Latest version date</param>
            <param name="userId">Optional Id of the User deleting versions of a Media object</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.DeleteVersion(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Permanently deletes specific version(s) from an <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> object.
            This method will never delete the latest version of a media item.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> object to delete a version from</param>
            <param name="versionId">Id of the version to delete</param>
            <param name="deletePriorVersions">Boolean indicating whether to delete versions prior to the versionId</param>
            <param name="userId">Optional Id of the User deleting versions of a Media object</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.MoveToRecycleBin(Umbraco.Cms.Core.Models.IMedia,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> object by moving it to the Recycle Bin
            </summary>
            <param name="media">The <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> to delete</param>
            <param name="userId">Id of the User deleting the Media</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.Move(Umbraco.Cms.Core.Models.IMedia,System.Int32,System.Int32)">
            <summary>
            Moves an <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> object to a new location
            </summary>
            <param name="media">The <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> to move</param>
            <param name="parentId">Id of the Media's new Parent</param>
            <param name="userId">Id of the User moving the Media</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.EmptyRecycleBin(System.Int32)">
            <summary>
            Empties the Recycle Bin by deleting all <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> that resides in the bin
            </summary>
            <param name="userId">Optional Id of the User emptying the Recycle Bin</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.Sort(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IMedia},System.Int32)">
            <summary>
            Sorts a collection of <see cref="T:Umbraco.Cms.Core.Models.IMedia"/> objects by updating the SortOrder according
            to the ordering of items in the passed in <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="items"></param>
            <param name="userId"></param>
            <returns>True if sorting succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.DeleteMediaOfTypes(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Deletes all media of specified type. All children of deleted media is moved to Recycle Bin.
            </summary>
            <remarks>
            <para>This needs extra care and attention as its potentially a dangerous and extensive operation.</para>
            <para>Deletes media items of the specified type, and only that type. Does *not* handle content types
            inheritance and compositions, which need to be managed outside of this method.</para>
            </remarks>
            <param name="mediaTypeIds">Id of the <see cref="T:Umbraco.Cms.Core.Models.IMediaType"/></param>
            <param name="userId">Optional id of the user deleting the media</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MediaService.DeleteMediaOfType(System.Int32,System.Int32)">
            <summary>
            Deletes all media of specified type. All children of deleted media is moved to Recycle Bin.
            </summary>
            <remarks>This needs extra care and attention as its potentially a dangerous and extensive operation</remarks>
            <param name="mediaTypeId">Id of the <see cref="T:Umbraco.Cms.Core.Models.IMediaType"/></param>
            <param name="userId">Optional id of the user deleting the media</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberGroupService.GetByNameAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberGroupService.GetAsync(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberGroupService.GetAllAsync">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberGroupService.CreateAsync(Umbraco.Cms.Core.Models.IMemberGroup)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberGroupService.DeleteAsync(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.MemberService">
            <summary>
            Represents the MemberService.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.GetCount(Umbraco.Cms.Core.Models.Membership.MemberCountType)">
            <summary>
            Gets the total number of Members based on the count type
            </summary>
            <remarks>
            The way the Online count is done is the same way that it is done in the MS SqlMembershipProvider - We query for any members
            that have their last active date within the Membership.UserIsOnlineTimeWindow (which is in minutes). It isn't exact science
            but that is how MS have made theirs so we'll follow that principal.
            </remarks>
            <param name="countType"><see cref="T:Umbraco.Cms.Core.Models.Membership.MemberCountType"/> to count by</param>
            <returns><see cref="T:System.Int32"/> with number of Members for passed in type</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.Count(System.String)">
            <summary>
            Gets the count of Members by an optional MemberType alias
            </summary>
            <remarks>If no alias is supplied then the count for all Member will be returned</remarks>
            <param name="memberTypeAlias">Optional alias for the MemberType when counting number of Members</param>
            <returns><see cref="T:System.Int32"/> with number of Members</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.CreateMember(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an <see cref="T:Umbraco.Cms.Core.Models.IMember"/> object without persisting it
            </summary>
            <remarks>This method is convenient for when you need to add properties to a new Member
            before persisting it in order to limit the amount of times its saved.
            Also note that the returned <see cref="T:Umbraco.Cms.Core.Models.IMember"/> will not have an Id until its saved.</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="memberTypeAlias">Alias of the MemberType the Member should be based on</param>
            <exception cref="T:System.ArgumentException">Thrown when a member type for the given alias isn't found</exception>
            <returns><see cref="T:Umbraco.Cms.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.CreateMember(System.String,System.String,System.String,Umbraco.Cms.Core.Models.IMemberType)">
            <summary>
            Creates an <see cref="T:Umbraco.Cms.Core.Models.IMember"/> object without persisting it
            </summary>
            <remarks>This method is convenient for when you need to add properties to a new Member
            before persisting it in order to limit the amount of times its saved.
            Also note that the returned <see cref="T:Umbraco.Cms.Core.Models.IMember"/> will not have an Id until its saved.</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="memberType">MemberType the Member should be based on</param>
            <returns><see cref="T:Umbraco.Cms.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.Umbraco#Cms#Core#Services#IMembershipMemberService{Umbraco#Cms#Core#Models#IMember}#CreateWithIdentity(System.String,System.String,System.String,System.String)">
            <summary>
            Creates and persists a new <see cref="T:Umbraco.Cms.Core.Models.IMember"/>
            </summary>
            <remarks>An <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser"/> can be of type <see cref="T:Umbraco.Cms.Core.Models.IMember"/> or <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser"/></remarks>
            <param name="username">Username of the <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser"/> to create</param>
            <param name="email">Email of the <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser"/> to create</param>
            <param name="passwordValue">This value should be the encoded/encrypted/hashed value for the password that will be stored in the database</param>
            <param name="memberTypeAlias">Alias of the Type</param>
            <returns><see cref="T:Umbraco.Cms.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.Umbraco#Cms#Core#Services#IMembershipMemberService{Umbraco#Cms#Core#Models#IMember}#CreateWithIdentity(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates and persists a new <see cref="T:Umbraco.Cms.Core.Models.IMember"/>
            </summary>
            <remarks>An <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser"/> can be of type <see cref="T:Umbraco.Cms.Core.Models.IMember"/> or <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser"/></remarks>
            <param name="username">Username of the <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser"/> to create</param>
            <param name="email">Email of the <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser"/> to create</param>
            <param name="passwordValue">This value should be the encoded/encrypted/hashed value for the password that will be stored in the database</param>
            <param name="memberTypeAlias">Alias of the Type</param>
            <param name="isApproved"></param>
            <returns><see cref="T:Umbraco.Cms.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.CreateMemberWithIdentity(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates and persists a Member.
            </summary>
            <remarks>Using this method will persist the Member object before its returned
            meaning that it will have an Id available (unlike the <see cref="M:Umbraco.Cms.Core.Services.MemberService.CreateMember(System.String,System.String,System.String,System.String)"/> method).</remarks>
            <param name="username">Username of the Member to create.</param>
            <param name="email">Email of the Member to create.</param>
            <param name="name">Name of the Member to create.</param>
            <param name="passwordValue">Password value of the Member to create.</param>
            <param name="memberTypeAlias">Alias of the MemberType the Member should be based on.</param>
            <param name="isApproved">Optional IsApproved of the Member to create.</param>
            <returns><see cref="T:Umbraco.Cms.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.CreateMemberWithIdentity(System.String,System.String,Umbraco.Cms.Core.Models.IMemberType,System.Boolean)">
            <summary>
            Creates and persists a Member
            </summary>
            <remarks>Using this method will persist the Member object before its returned
            meaning that it will have an Id available (unlike the CreateMember method)</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="memberType">MemberType the Member should be based on</param>
            <param name="isApproved">Is the member approved.</param>
            <returns><see cref="T:Umbraco.Cms.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.CreateMemberWithIdentity(System.String,System.String,System.String,Umbraco.Cms.Core.Models.IMemberType,System.Boolean)">
            <summary>
            Creates and persists a Member
            </summary>
            <remarks>Using this method will persist the Member object before its returned
            meaning that it will have an Id available (unlike the CreateMember method)</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="memberType">MemberType the Member should be based on</param>
            <param name="isApproved">Is the member approved</param>
            <returns><see cref="T:Umbraco.Cms.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.CreateMemberWithIdentity(System.String,System.String,System.String,System.String,Umbraco.Cms.Core.Models.IMemberType,System.Boolean)">
            <summary>
            Creates and persists a Member
            </summary>
            <remarks>Using this method will persist the Member object before its returned
            meaning that it will have an Id available (unlike the CreateMember method)</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="passwordValue">This value should be the encoded/encrypted/hashed value for the password that will be stored in the database</param>
            <param name="memberType">MemberType the Member should be based on</param>
            <param name="isApproved">Is the member approved</param>
            <returns><see cref="T:Umbraco.Cms.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.GetById(System.Int32)">
            <summary>
            Gets a Member by its integer id
            </summary>
            <param name="id"><see cref="T:System.Int32"/> Id</param>
            <returns><see cref="T:Umbraco.Cms.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.GetById(System.Guid)">
            <summary>
            Gets a Member by the unique key
            </summary>
            <remarks>The guid key corresponds to the unique id in the database
            and the user id in the membership provider.</remarks>
            <param name="id"><see cref="T:System.Guid"/> Id</param>
            <returns><see cref="T:Umbraco.Cms.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.GetAll(System.Int64,System.Int32,System.Int64@)">
            <summary>
            Gets a list of paged <see cref="T:Umbraco.Cms.Core.Models.IMember"/> objects
            </summary>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.GetByProviderKey(System.Object)">
            <summary>
            Gets an <see cref="T:Umbraco.Cms.Core.Models.IMember"/> by its provider key
            </summary>
            <param name="id">Id to use for retrieval</param>
            <returns><see cref="T:Umbraco.Cms.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.GetByEmail(System.String)">
            <summary>
            Get an <see cref="T:Umbraco.Cms.Core.Models.IMember"/> by email. If RequireUniqueEmailForMembers is set to false, then the first member found with the specified email will be returned.
            </summary>
            <param name="email">Email to use for retrieval</param>
            <returns><see cref="T:Umbraco.Cms.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.GetMembersByEmail(System.String)">
            <summary>
            Get an list of <see cref="T:Umbraco.Cms.Core.Models.IMember"/> for all members with the specified email.
            </summary>
            <param name="email">Email to use for retrieval</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.GetByUsername(System.String)">
            <summary>
            Get an <see cref="T:Umbraco.Cms.Core.Models.IMember"/> by username
            </summary>
            <param name="username">Username to use for retrieval</param>
            <returns><see cref="T:Umbraco.Cms.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.GetMembersByMemberType(System.String)">
            <summary>
            Gets all Members for the specified MemberType alias
            </summary>
            <param name="memberTypeAlias">Alias of the MemberType</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.GetMembersByMemberType(System.Int32)">
            <summary>
            Gets all Members for the MemberType id
            </summary>
            <param name="memberTypeId">Id of the MemberType</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.GetMembersByGroup(System.String)">
            <summary>
            Gets all Members within the specified MemberGroup name
            </summary>
            <param name="memberGroupName">Name of the MemberGroup</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.GetAllMembers(System.Int32[])">
            <summary>
            Gets all Members with the ids specified
            </summary>
            <remarks>If no Ids are specified all Members will be retrieved</remarks>
            <param name="ids">Optional list of Member Ids</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.GetByKeysAsync(System.Guid[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.FindMembersByDisplayName(System.String,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
            Finds Members based on their display name
            </summary>
            <param name="displayNameToMatch">Display name to match</param>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType.StartsWith"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.FindByEmail(System.String,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
            Finds a list of <see cref="T:Umbraco.Cms.Core.Models.IMember"/> objects by a partial email string
            </summary>
            <param name="emailStringToMatch">Partial email string to match</param>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType.StartsWith"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.FindByUsername(System.String,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
            Finds a list of <see cref="T:Umbraco.Cms.Core.Models.IMember"/> objects by a partial username
            </summary>
            <param name="login">Partial username to match</param>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType.StartsWith"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.GetMembersByPropertyValue(System.String,System.String,Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
            Gets a list of Members based on a property search
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to search for</param>
            <param name="value"><see cref="T:System.String"/> Value to match</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType.Exact"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.GetMembersByPropertyValue(System.String,System.Int32,Umbraco.Cms.Core.Persistence.Querying.ValuePropertyMatchType)">
            <summary>
            Gets a list of Members based on a property search
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to search for</param>
            <param name="value"><see cref="T:System.Int32"/> Value to match</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType.Exact"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.GetMembersByPropertyValue(System.String,System.Boolean)">
            <summary>
            Gets a list of Members based on a property search
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to search for</param>
            <param name="value"><see cref="T:System.Boolean"/> Value to match</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.GetMembersByPropertyValue(System.String,System.DateTime,Umbraco.Cms.Core.Persistence.Querying.ValuePropertyMatchType)">
            <summary>
            Gets a list of Members based on a property search
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to search for</param>
            <param name="value"><see cref="T:System.DateTime"/> Value to match</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType.Exact"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.Exists(System.Int32)">
            <summary>
            Checks if a Member with the id exists
            </summary>
            <param name="id">Id of the Member</param>
            <returns><c>True</c> if the Member exists otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.Exists(System.String)">
            <summary>
            Checks if a Member with the username exists
            </summary>
            <param name="username">Username to check</param>
            <returns><c>True</c> if the Member exists otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.Save(Umbraco.Cms.Core.Models.IMember,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.Save(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IMember},System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.Save(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IMember})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.Delete(Umbraco.Cms.Core.Models.IMember,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.Delete(Umbraco.Cms.Core.Models.IMember)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.GetAllRoles">
            <summary>
            Returns a list of all member roles
            </summary>
            <returns>A list of member roles</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.GetAllRoles(System.Int32)">
            <summary>
            Returns a list of all member roles for a given member ID
            </summary>
            <param name="memberId"></param>
            <returns>A list of member roles</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.ExportMember(System.Guid)">
            <summary>
            Exports a member.
            </summary>
            <remarks>
            This is internal for now and is used to export a member in the member editor,
            it will raise an event so that auditing logs can be created.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberService.DeleteMembersOfType(System.Int32)">
            <summary>
            Delete Members of the specified MemberType id
            </summary>
            <param name="memberTypeId">Id of the MemberType</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.MemberTwoFactorLoginService">
            <inheritdoc cref="T:Umbraco.Cms.Core.Services.IMemberTwoFactorLoginService" />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberTwoFactorLoginService.DisableAsync(System.Guid,System.String)">
            <inheritdoc cref="M:Umbraco.Cms.Core.Services.IMemberTwoFactorLoginService.DisableAsync(System.Guid,System.String)" />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberTwoFactorLoginService.GetProviderNamesAsync(System.Guid)">
            <inheritdoc cref="M:Umbraco.Cms.Core.Services.IMemberTwoFactorLoginService.GetProviderNamesAsync(System.Guid)" />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberTwoFactorLoginService.GetSetupInfoAsync(System.Guid,System.String)">
            <inheritdoc cref="M:Umbraco.Cms.Core.Services.IMemberTwoFactorLoginService.GetSetupInfoAsync(System.Guid,System.String)" />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.MemberTwoFactorLoginService.ValidateAndSaveAsync(System.String,System.Guid,System.String,System.String)">
            <inheritdoc cref="M:Umbraco.Cms.Core.Services.IMemberTwoFactorLoginService.ValidateAndSaveAsync(System.String,System.Guid,System.String,System.String)" />
        </member>
        <member name="T:Umbraco.Cms.Core.Services.MoveOperationStatusType">
            <summary>
                A status type of the result of moving an item
            </summary>
            <remarks>
                Anything less than 10 = Success!
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.MoveOperationStatusType.Success">
            <summary>
                The move was successful.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.MoveOperationStatusType.FailedParentNotFound">
            <summary>
                The parent being moved to doesn't exist
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.MoveOperationStatusType.FailedCancelledByEvent">
            <summary>
                The move action has been cancelled by an event handler
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.MoveOperationStatusType.FailedNotAllowedByPath">
            <summary>
                Trying to move an item to an invalid path (i.e. a child of itself)
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Navigation.ContentNavigationServiceBase`2.RebuildAsync">
            <summary>
                Rebuilds the entire main navigation structure. Implementations should define how the structure is rebuilt.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Navigation.ContentNavigationServiceBase`2.RebuildBinAsync">
            <summary>
                Rebuilds the recycle bin navigation structure. Implementations should define how the bin structure is rebuilt.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Navigation.ContentNavigationServiceBase`2.HandleRebuildAsync(System.Int32,System.Guid,System.Boolean)">
            <summary>
                Rebuilds the navigation structure based on the specified object type key and whether the items are trashed.
                Only relevant for items in the content and media trees (which have readLock values of -333 or -334).
            </summary>
            <param name="readLock">The read lock value, should be -333 or -334 for content and media trees.</param>
            <param name="objectTypeKey">The key of the object type to rebuild.</param>
            <param name="trashed">Indicates whether the items are in the recycle bin.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.Navigation.INavigationManagementService">
            <summary>
                Placeholder for sharing logic between the document and media navigation services
                for managing the navigation structure.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Navigation.INavigationManagementService.RebuildAsync">
            <summary>
                Rebuilds the entire navigation structure by refreshing the navigation tree based
                on the current state of the underlying repository.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Navigation.INavigationManagementService.MoveToBin(System.Guid)">
            <summary>
                Removes a node from the main navigation structure and moves it, along with
                its descendants, to the root of the recycle bin structure.
            </summary>
            <param name="key">The unique identifier of the node to remove.</param>
            <returns>
                <c>true</c> if the node and its descendants were successfully removed from the
                main navigation structure and added to the recycle bin; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Navigation.INavigationManagementService.Add(System.Guid,System.Guid,System.Nullable{System.Guid},System.Nullable{System.Int32})">
            <summary>
                Adds a new node to the main navigation structure. If a parent key is provided,
                the new node is added as a child of the specified parent. If no parent key is
                provided, the new node is added at the root level.
            </summary>
            <param name="key">The unique identifier of the new node to add.</param>
            <param name="contentTypeKey">The unique identifier of the node's content type.</param>
            <param name="parentKey">
                The unique identifier of the parent node. If <c>null</c>, the new node will be added to
                the root level.
            </param>
            <param name="sortOrder">
                Optional value to define the node's position among its siblings when
                adding node at root level.</param>
            <returns>
                <c>true</c> if the node was successfully added to the main navigation structure;
                otherwise, <c>false</c>.
            </returns>
            <remarks>
                The sort order is particularly important when adding nodes at the root level. For child nodes,
                it can usually be determined by the number of existing children under the parent. However,
                when adding nodes directly to the root (where parentKey is null), a sort order must be provided
                to ensure the item appears in the correct position among other root-level items.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Navigation.INavigationManagementService.Move(System.Guid,System.Nullable{System.Guid})">
            <summary>
                Moves an existing node to a new parent in the main navigation structure. If a
                target parent key is provided, the node is moved under the specified parent.
                If no target parent key is provided, the node is moved to the root level.
            </summary>
            <param name="key">The unique identifier of the node to move.</param>
            <param name="targetParentKey">
                The unique identifier of the new parent node. If <c>null</c>, the node will be moved to
                the root level.
            </param>
            <returns>
                <c>true</c> if the node and its descendants were successfully moved to the new parent
                in the main navigation structure; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Navigation.INavigationManagementService.UpdateSortOrder(System.Guid,System.Int32)">
            <summary>
                Updates the sort order of a node in the main navigation structure.
                The sort order of other nodes in the same level will be adjusted accordingly.
            </summary>
            <param name="key">The unique identifier of the node to update.</param>
            <param name="newSortOrder">The new sort order for the node.</param>
            <returns>
                <c>true</c> if the node's sort order was successfully updated; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.Navigation.INavigationQueryService">
            <summary>
                Placeholder for sharing logic between the document and media navigation services
                for querying the navigation structure.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.Navigation.IRecycleBinNavigationManagementService">
            <summary>
                Placeholder for sharing logic between the document and media navigation services
                for managing the recycle bin navigation structure.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Navigation.IRecycleBinNavigationManagementService.RebuildBinAsync">
            <summary>
                Rebuilds the recycle bin navigation structure by fetching the latest trashed nodes
                from the underlying repository.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Navigation.IRecycleBinNavigationManagementService.RemoveFromBin(System.Guid)">
            <summary>
                Permanently removes a node and all of its descendants from the recycle bin navigation structure.
            </summary>
            <param name="key">The unique identifier of the node to remove.</param>
            <returns>
                <c>true</c> if the node and its descendants were successfully removed from the recycle bin;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Navigation.IRecycleBinNavigationManagementService.RestoreFromBin(System.Guid,System.Nullable{System.Guid})">
            <summary>
                Restores a node and all of its descendants from the recycle bin navigation structure and moves them back
                to the main navigation structure. The node can be restored to a specified target parent or to the root
                level if no parent is specified.
            </summary>
            <param name="key">The unique identifier of the node to restore from the recycle bin navigation structure.</param>
            <param name="targetParentKey">
                The unique identifier of the target parent node in the main navigation structure to which the node
                should be restored. If <c>null</c>, the node will be restored to the root level.
            </param>
            <returns>
                <c>true</c> if the node and its descendants were successfully restored to the main navigation structure;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.Navigation.IRecycleBinNavigationQueryService">
            <summary>
                Placeholder for sharing logic between the document and media navigation services
                for querying the recycle bin navigation structure.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.Navigation.NavigationInitializationNotificationHandler">
            <summary>
                Responsible for seeding the in-memory navigation structures at application's startup
                by rebuild the navigation structures.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.Navigation.IPublishStatusQueryService">
            <summary>
            Verifies the published status of documents.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Navigation.IPublishStatusQueryService.IsDocumentPublished(System.Guid,System.String)">
            <summary>
            Checks if a document is published in a specific culture.
            </summary>
            <param name="documentKey">The document's key.</param>
            <param name="culture">The culture.</param>
            <returns>True if document is published in the specified culture.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Navigation.IPublishStatusQueryService.IsDocumentPublishedInAnyCulture(System.Guid)">
            <summary>
            Checks if a document is published in any culture.
            </summary>
            <param name="documentKey">The document's key.</param>
            <returns>True if document has any published culture.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Navigation.IPublishStatusQueryService.HasPublishedAncestorPath(System.Guid)">
            <summary>
            Verifies if a document has a published ancestor path (i.e. all ancestors are themselves published in at least one culture).
            </summary>
            <param name="documentKey">The document's key.</param>
            <returns>True if document has a published ancestor path.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.Navigation.PublishStatusInitializationNotificationHandler">
            <summary>
                Responsible for seeding the in-memory publish status cache at application's startup
                by loading all data from the database.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.Navigation.PublishStatusService">
            <summary>
            Implements <see cref="T:Umbraco.Cms.Core.Services.Navigation.IPublishStatusManagementService" /> and <see cref="T:Umbraco.Cms.Core.Services.Navigation.IPublishStatusQueryService" /> verifying the published
            status of documents.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Navigation.PublishStatusService.#ctor(Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Services.Navigation.PublishStatusService},Umbraco.Cms.Core.Persistence.Repositories.IPublishStatusRepository,Umbraco.Cms.Core.Scoping.ICoreScopeProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Services.Navigation.PublishStatusService"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Navigation.PublishStatusService.#ctor(Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Services.Navigation.PublishStatusService},Umbraco.Cms.Core.Persistence.Repositories.IPublishStatusRepository,Umbraco.Cms.Core.Scoping.ICoreScopeProvider,Umbraco.Cms.Core.Services.ILanguageService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Services.Navigation.PublishStatusService"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Navigation.PublishStatusService.#ctor(Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Services.Navigation.PublishStatusService},Umbraco.Cms.Core.Persistence.Repositories.IPublishStatusRepository,Umbraco.Cms.Core.Scoping.ICoreScopeProvider,Umbraco.Cms.Core.Services.ILanguageService,Umbraco.Cms.Core.Services.Navigation.IDocumentNavigationQueryService)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Services.Navigation.PublishStatusService"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Navigation.PublishStatusService.InitializeAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Navigation.PublishStatusService.IsDocumentPublished(System.Guid,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Navigation.PublishStatusService.IsDocumentPublishedInAnyCulture(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Navigation.PublishStatusService.HasPublishedAncestorPath(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Navigation.PublishStatusService.AddOrUpdateStatusAsync(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Navigation.PublishStatusService.RemoveAsync(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Navigation.PublishStatusService.AddOrUpdateStatusWithDescendantsAsync(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.NotificationService.SendNotifications(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IContent},System.String,System.String,System.Uri,System.Func{System.ValueTuple{Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Models.NotificationEmailSubjectParams},System.String},System.Func{System.ValueTuple{Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Models.NotificationEmailBodyParams,System.Boolean},System.String})">
            <summary>
                Sends the notifications for the specified user regarding the specified node and action.
            </summary>
            <param name="entities"></param>
            <param name="operatingUser"></param>
            <param name="action"></param>
            <param name="actionName"></param>
            <param name="siteUri"></param>
            <param name="createSubject"></param>
            <param name="createBody"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.NotificationService.GetUserNotifications(Umbraco.Cms.Core.Models.Membership.IUser)">
            <summary>
                Gets the notifications for the user
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.NotificationService.GetUserNotifications(Umbraco.Cms.Core.Models.Membership.IUser,System.String)">
            <summary>
                Gets the notifications for the user based on the specified node path
            </summary>
            <param name="user"></param>
            <param name="path"></param>
            <returns></returns>
            <remarks>
                Notifications are inherited from the parent so any child node will also have notifications assigned based on it's
                parent (ancestors)
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.NotificationService.GetEntityNotifications(Umbraco.Cms.Core.Models.Entities.IEntity)">
            <summary>
                Deletes notifications by entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.NotificationService.DeleteNotifications(Umbraco.Cms.Core.Models.Entities.IEntity)">
            <summary>
                Deletes notifications by entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.NotificationService.DeleteNotifications(Umbraco.Cms.Core.Models.Membership.IUser)">
            <summary>
                Deletes notifications by user
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.NotificationService.DeleteNotifications(Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Models.Entities.IEntity)">
            <summary>
                Delete notifications by user and entity
            </summary>
            <param name="user"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.NotificationService.SetNotifications(Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Models.Entities.IEntity,System.String[])">
            <summary>
                Sets the specific notifications for the user and entity
            </summary>
            <param name="user"></param>
            <param name="entity"></param>
            <param name="actions"></param>
            <remarks>
                This performs a full replace
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.NotificationService.CreateNotification(Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Models.Entities.IEntity,System.String)">
            <summary>
                Creates a new notification
            </summary>
            <param name="user"></param>
            <param name="entity"></param>
            <param name="action">The action letter - note: this is a string for future compatibility</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.NotificationService.FilterUserNotificationsByPath(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.Notification},System.String)">
            <summary>
                Filters a userNotifications collection by a path
            </summary>
            <param name="userNotifications"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.NotificationService.GetPreviousVersion(System.Int32)">
            <summary>
                Gets the previous version to the latest version of the content item if there is one
            </summary>
            <param name="contentId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.NotificationService.ReplaceHtmlSymbols(System.String@)">
            <summary>
                Replaces the HTML symbols with the character equivalent.
            </summary>
            <param name="oldString">The old string.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.NotificationService.CreateNotificationRequest(Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Models.IContentBase,System.String,System.Uri,System.Func{System.ValueTuple{Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Models.NotificationEmailSubjectParams},System.String},System.Func{System.ValueTuple{Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Models.NotificationEmailBodyParams,System.Boolean},System.String})">
            <summary>
                Sends the notification
            </summary>
            <param name="performingUser"></param>
            <param name="mailingUser"></param>
            <param name="content"></param>
            <param name="oldDoc"></param>
            <param name="actionName">
                The action readable name - currently an action is just a single letter, this is the name
                associated with the letter
            </param>
            <param name="siteUri"></param>
            <param name="createSubject">Callback to create the mail subject</param>
            <param name="createBody">Callback to create the mail body</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.OperationResult`1">
            <summary>
                Represents the result of a service operation.
            </summary>
            <typeparam name="TResultType">The type of the result type.</typeparam>
            <remarks>
                Type <typeparamref name="TResultType" /> must be an enumeration, and its
                underlying type must be byte. Values indicating success should be in the 0-127
                range, while values indicating failure should be in the 128-255 range. See
                <see cref="T:Umbraco.Cms.Core.Services.OperationResultType" /> for a base implementation.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.OperationResult`1.#ctor(`0,Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Services.OperationResult`1" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.OperationResult`1.Success">
            <summary>
                Gets a value indicating whether the operation was successful.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.OperationResult`1.Result">
            <summary>
                Gets the result of the operation.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.OperationResult`1.EventMessages">
            <summary>
                Gets the event messages produced by the operation.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.OperationResult`2">
            <inheritdoc />
            <summary>
                Represents the result of a service operation for a given entity.
            </summary>
            <typeparam name="TResultType">The type of the result type.</typeparam>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <remarks>
                Type <typeparamref name="TResultType" /> must be an enumeration, and its
                underlying type must be byte. Values indicating success should be in the 0-127
                range, while values indicating failure should be in the 128-255 range. See
                <see cref="T:Umbraco.Cms.Core.Services.OperationResultType" /> for a base implementation.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.OperationResult`2.#ctor(`0,Umbraco.Cms.Core.Events.EventMessages)">
            <inheritdoc />
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Services.OperationResult`2" /> class.
            </summary>
            <param name="result">The status of the operation.</param>
            <param name="eventMessages">Event messages produced by the operation.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.OperationResult`2.#ctor(`0,Umbraco.Cms.Core.Events.EventMessages,`1)">
            <inheritdoc />
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Services.OperationResult`2" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.OperationResult`2.Entity">
            <summary>
                Gets the entity.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.OperationResult">
            <inheritdoc />
            <summary>
                Represents the default operation result.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.OperationResult.#ctor(Umbraco.Cms.Core.Services.OperationResultType,Umbraco.Cms.Core.Events.EventMessages)">
            <inheritdoc />
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Services.OperationResult" /> class with a status and event messages.
            </summary>
            <param name="result">The status of the operation.</param>
            <param name="eventMessages">Event messages produced by the operation.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.OperationResult.Attempt.Succeed(Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
                Creates a successful operation attempt.
            </summary>
            <param name="eventMessages">The event messages produced by the operation.</param>
            <returns>A new attempt instance.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.OperationResult.Attempt.NoOperation(Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
                Creates a successful operation attempt indicating that nothing was done.
            </summary>
            <param name="eventMessages">The event messages produced by the operation.</param>
            <returns>A new attempt instance.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.OperationResult.Attempt.Cancel(Umbraco.Cms.Core.Events.EventMessages)">
            <summary>
                Creates a failed operation attempt indicating that the operation has been cancelled.
            </summary>
            <param name="eventMessages">The event messages produced by the operation.</param>
            <returns>A new attempt instance.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.OperationResult.Attempt.Fail(Umbraco.Cms.Core.Events.EventMessages,System.Exception)">
            <summary>
                Creates a failed operation attempt indicating that an exception was thrown during the operation.
            </summary>
            <param name="eventMessages">The event messages produced by the operation.</param>
            <param name="exception">The exception that caused the operation to fail.</param>
            <returns>A new attempt instance.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.OperationResultType">
            <summary>
                A value indicating the result of an operation.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.OperationResultType.Success">
            <summary>
                The operation was successful.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.OperationResultType.Failed">
            <summary>
                The operation failed.
            </summary>
            <remarks>All values above this value indicate a failure.</remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.OperationResultType.FailedCannot">
            <summary>
                The operation could not complete because of invalid preconditions (eg creating a reference
                to an item that does not exist).
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.OperationResultType.FailedCancelledByEvent">
            <summary>
                The operation has been cancelled by an event handler.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.OperationResultType.FailedExceptionThrown">
            <summary>
                The operation could not complete due to an exception.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.OperationResultType.NoOperation">
            <summary>
                No operation has been executed because it was not needed (eg deleting an item that doesn't exist).
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.OperationResultType.FailedDuplicateKey">
            <summary>
                The operation could not complete due to duplicate key detection
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.OperationStatus.UserOperationStatus">
            <summary>
            Used to signal a user operation succeeded or an atomic failure reason
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.Ordering">
            <summary>
                Represents ordering information.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Ordering.#ctor(System.String,Umbraco.Cms.Core.Direction,System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Services.Ordering" /> class.
            </summary>
            <param name="orderBy">The name of the ordering field.</param>
            <param name="direction">The ordering direction.</param>
            <param name="culture">The (ISO) culture to consider when sorting multi-lingual fields.</param>
            <param name="isCustomField">A value indicating whether the ordering field is a custom user property.</param>
            <remarks>
                <para>
                    The <paramref name="orderBy" /> can be null, meaning: not sorting. If it is the empty string, it becomes
                    null.
                </para>
                <para>
                    The <paramref name="culture" /> can be the empty string, meaning: invariant. If it is null, it becomes the
                    empty string.
                </para>
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.Ordering.OrderBy">
            <summary>
                Gets the name of the ordering field.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.Ordering.Direction">
            <summary>
                Gets the ordering direction.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.Ordering.Culture">
            <summary>
                Gets (ISO) culture to consider when sorting multi-lingual fields.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.Ordering.IsCustomField">
            <summary>
                Gets a value indicating whether the ordering field is a custom user property.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.Ordering.IsEmpty">
            <summary>
                Gets a value indicating whether this ordering is the default ordering.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.Ordering.IsInvariant">
            <summary>
                Gets a value indicating whether the culture of this ordering is invariant.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Ordering.By(System.String,Umbraco.Cms.Core.Direction,System.String,System.Boolean)">
            <summary>
                Creates a new instance of the <see cref="T:Umbraco.Cms.Core.Services.Ordering" /> class.
            </summary>
            <param name="orderBy">The name of the ordering field.</param>
            <param name="direction">The ordering direction.</param>
            <param name="culture">The (ISO) culture to consider when sorting multi-lingual fields.</param>
            <param name="isCustomField">A value indicating whether the ordering field is a custom user property.</param>
            <remarks>
                <para>
                    The <paramref name="orderBy" /> can be null, meaning: not sorting. If it is the empty string, it becomes
                    null.
                </para>
                <para>
                    The <paramref name="culture" /> can be the empty string, meaning: invariant. If it is null, it becomes the
                    empty string.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.Ordering.ByDefault">
            <summary>
                Gets the default <see cref="T:Umbraco.Cms.Core.Services.Ordering" /> instance.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.PartialViewService.GetSnippetsAsync(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.PartialViewService.GetSnippetAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.PartialViewService.DeleteAsync(System.String,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.PartialViewService.CreateAsync(Umbraco.Cms.Core.Models.PartialViewCreateModel,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.PartialViewService.UpdateAsync(System.String,Umbraco.Cms.Core.Models.PartialViewUpdateModel,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.PartialViewService.RenameAsync(System.String,Umbraco.Cms.Core.Models.PartialViewRenameModel,System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Services.ProcessInstructionsResult">
            <summary>
                Defines a result object for the <see cref="M:Umbraco.Cms.Core.Services.ICacheInstructionService.ProcessInstructions(Umbraco.Cms.Core.Cache.CacheRefresherCollection,Umbraco.Cms.Core.Sync.ServerRole,System.Threading.CancellationToken,System.String,System.DateTime,System.Int32)" />
                operation.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.PropertyTypeUsageService.HasSavedPropertyValuesAsync(System.Guid,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.PropertyValidationService.ValidatePropertyValue(Umbraco.Cms.Core.Models.IPropertyType,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.PropertyValidationService.ValidatePropertyValue(Umbraco.Cms.Core.PropertyEditors.IDataEditor,Umbraco.Cms.Core.Models.IDataType,System.Object,System.Boolean,System.String,System.String,System.String,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.PropertyValidationService.IsPropertyDataValid(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Models.IProperty[]@,Umbraco.Cms.Core.Models.CultureImpact)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.PropertyValidationService.IsPropertyValid(Umbraco.Cms.Core.Models.IProperty,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.PropertyValidationService.IsValidPropertyValue(Umbraco.Cms.Core.Models.IProperty,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <summary>
                Boolean indicating whether the passed in value is valid
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns>True is property value is valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.PropertyValidationService.IsPropertyValueValid(Umbraco.Cms.Core.Models.IPropertyType,System.Object,Umbraco.Cms.Core.Models.Validation.PropertyValidationContext)">
            <summary>
                Determines whether a value is valid for this property type.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.PublicAccessService.GetAll">
            <summary>
                Gets all defined entries and associated rules
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.PublicAccessService.GetEntryForContent(Umbraco.Cms.Core.Models.IContent)">
            <summary>
                Gets the entry defined for the content item's path
            </summary>
            <param name="content"></param>
            <returns>Returns null if no entry is found</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.PublicAccessService.GetEntryForContent(System.String)">
            <summary>
                Gets the entry defined for the content item based on a content path
            </summary>
            <param name="contentPath"></param>
            <returns>Returns null if no entry is found</returns>
            <remarks>
                NOTE: This method get's called *very* often! This will return the results from cache
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.PublicAccessService.IsProtected(Umbraco.Cms.Core.Models.IContent)">
            <summary>
                Returns true if the content has an entry for it's path
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.PublicAccessService.IsProtected(System.String)">
            <summary>
                Returns true if the content has an entry based on a content path
            </summary>
            <param name="contentPath"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.PublicAccessService.AddRule(Umbraco.Cms.Core.Models.IContent,System.String,System.String)">
            <summary>
                Adds a rule
            </summary>
            <param name="content"></param>
            <param name="ruleType"></param>
            <param name="ruleValue"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.PublicAccessService.RemoveRule(Umbraco.Cms.Core.Models.IContent,System.String,System.String)">
            <summary>
                Removes a rule
            </summary>
            <param name="content"></param>
            <param name="ruleType"></param>
            <param name="ruleValue"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.PublicAccessService.Save(Umbraco.Cms.Core.Models.PublicAccessEntry)">
            <summary>
                Saves the entry
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.PublicAccessService.Delete(Umbraco.Cms.Core.Models.PublicAccessEntry)">
            <summary>
                Deletes the entry and all associated rules
            </summary>
            <param name="entry"></param>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.PublishResult">
            <summary>
                Represents the result of publishing a document.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.PublishResult.#ctor(Umbraco.Cms.Core.Services.PublishResultType,Umbraco.Cms.Core.Events.EventMessages,Umbraco.Cms.Core.Models.IContent)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Services.PublishResult" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.PublishResult.#ctor(Umbraco.Cms.Core.Events.EventMessages,Umbraco.Cms.Core.Models.IContent)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Services.PublishResult" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.PublishResult.Content">
            <summary>
                Gets the document.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.PublishResult.InvalidProperties">
            <summary>
                Gets or sets the invalid properties, if the status failed due to validation.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.PublishResultType">
            <summary>
                A value indicating the result of publishing or unpublishing a document.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.PublishResultType.SuccessPublish">
            <summary>
                The document was successfully published.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.PublishResultType.SuccessPublishCulture">
            <summary>
                The specified document culture was successfully published.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.PublishResultType.SuccessPublishAlready">
            <summary>
                The document was already published.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.PublishResultType.SuccessUnpublish">
            <summary>
                The document was successfully unpublished.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.PublishResultType.SuccessUnpublishAlready">
            <summary>
                The document was already unpublished.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.PublishResultType.SuccessUnpublishCulture">
            <summary>
                The specified document culture was unpublished, the document item itself remains published.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.PublishResultType.SuccessUnpublishMandatoryCulture">
            <summary>
                The specified document culture was unpublished, and was a mandatory culture, therefore the document itself was
                unpublished.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.PublishResultType.SuccessUnpublishLastCulture">
            <summary>
                The specified document culture was unpublished, and was the last published culture in the document, therefore the
                document itself was unpublished.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.PublishResultType.SuccessMixedCulture">
            <summary>
                Specified document cultures were successfully published and unpublished (in the same operation).
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.PublishResultType.FailedPublish">
            <summary>
                The operation failed.
            </summary>
            <remarks>All values above this value indicate a failure.</remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.PublishResultType.FailedPublishPathNotPublished">
            <summary>
                The document could not be published because its ancestor path is not published.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.PublishResultType.FailedPublishHasExpired">
            <summary>
                The document has expired so we cannot force it to be
                published again as part of a bulk publish operation.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.PublishResultType.FailedPublishAwaitingRelease">
            <summary>
                The document is scheduled to be released in the future and therefore we cannot force it to
                be published during a bulk publish operation.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.PublishResultType.FailedPublishCultureHasExpired">
            <summary>
                A document culture has expired so we cannot force it to be
                published again as part of a bulk publish operation.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.PublishResultType.FailedPublishCultureAwaitingRelease">
            <summary>
                A document culture is scheduled to be released in the future and therefore we cannot force it to
                be published during a bulk publish operation.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.PublishResultType.FailedPublishIsTrashed">
            <summary>
                The document could not be published because it is in the trash.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.PublishResultType.FailedPublishCancelledByEvent">
            <summary>
                The publish action has been cancelled by an event handler.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.PublishResultType.FailedPublishContentInvalid">
            <summary>
                The document could not be published because it contains invalid data (has not passed validation requirements).
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.PublishResultType.FailedPublishNothingToPublish">
            <summary>
                The document could not be published because it has no publishing flags or values or if its a variant document, no
                cultures were specified to be published.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.PublishResultType.FailedPublishMandatoryCultureMissing">
            <summary>
                The document could not be published because some mandatory cultures are missing.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.PublishResultType.FailedPublishConcurrencyViolation">
            <summary>
                The document could not be published because it has been modified by another user.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.PublishResultType.FailedPublishUnsavedChanges">
            <summary>
                The document could not be published because it has unsaved changes (is dirty).
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.PublishResultType.FailedUnpublish">
            <summary>
                The document could not be unpublished.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Services.PublishResultType.FailedUnpublishCancelledByEvent">
            <summary>
                The unpublish action has been cancelled by an event handler.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.Querying.RecycleBin.RecycleBinQueryResultType">
            <summary>
            &lt;10 = Success.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetById(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetRelationTypeById(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetRelationTypeById(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetRelationTypeByAlias(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetAllRelations(System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetAllRelationsByRelationType(Umbraco.Cms.Core.Models.IRelationType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetAllRelationsByRelationType(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetAllRelationTypes(System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetPagedRelationTypesAsync(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Gets the Relation types in a paged manner.
            Currently implements the paging in memory on the name property because the underlying repository does not support paging yet
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.CountRelationTypes">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetByParentId(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetByParentId(System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetByParent(Umbraco.Cms.Core.Models.Entities.IUmbracoEntity)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetByParent(Umbraco.Cms.Core.Models.Entities.IUmbracoEntity,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetByChildId(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetByChildId(System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetByChild(Umbraco.Cms.Core.Models.Entities.IUmbracoEntity)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetByChild(Umbraco.Cms.Core.Models.Entities.IUmbracoEntity,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetByParentOrChildId(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetByParentOrChildId(System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetByParentAndChildId(System.Int32,System.Int32,Umbraco.Cms.Core.Models.IRelationType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetByRelationTypeName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetByRelationTypeAlias(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetByRelationTypeId(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetPagedByRelationTypeId(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetPagedByChildKeyAsync(System.Guid,System.Int32,System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetPagedByRelationTypeKeyAsync(System.Guid,System.Int32,System.Int32,Umbraco.Cms.Core.Services.Ordering)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetChildEntityFromRelation(Umbraco.Cms.Core.Models.IRelation)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetParentEntityFromRelation(Umbraco.Cms.Core.Models.IRelation)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetEntitiesFromRelation(Umbraco.Cms.Core.Models.IRelation)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetChildEntitiesFromRelations(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IRelation})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetParentEntitiesFromRelations(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IRelation})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetPagedParentEntitiesByChildId(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Models.UmbracoObjectTypes[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetPagedChildEntitiesByParentId(System.Int32,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Models.UmbracoObjectTypes[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetEntitiesFromRelations(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IRelation})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.Relate(System.Int32,System.Int32,Umbraco.Cms.Core.Models.IRelationType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.Relate(Umbraco.Cms.Core.Models.Entities.IUmbracoEntity,Umbraco.Cms.Core.Models.Entities.IUmbracoEntity,Umbraco.Cms.Core.Models.IRelationType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.Relate(System.Int32,System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.Relate(Umbraco.Cms.Core.Models.Entities.IUmbracoEntity,Umbraco.Cms.Core.Models.Entities.IUmbracoEntity,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.HasRelations(Umbraco.Cms.Core.Models.IRelationType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.IsRelated(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.IsRelated(System.Int32,Umbraco.Cms.Core.Models.RelationDirectionFilter)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.AreRelated(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.AreRelated(System.Int32,System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.AreRelated(Umbraco.Cms.Core.Models.Entities.IUmbracoEntity,Umbraco.Cms.Core.Models.Entities.IUmbracoEntity)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.AreRelated(Umbraco.Cms.Core.Models.Entities.IUmbracoEntity,Umbraco.Cms.Core.Models.Entities.IUmbracoEntity,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.Save(Umbraco.Cms.Core.Models.IRelation)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.Save(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IRelation})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.Save(Umbraco.Cms.Core.Models.IRelationType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.CreateAsync(Umbraco.Cms.Core.Models.IRelationType,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.UpdateAsync(Umbraco.Cms.Core.Models.IRelationType,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.Delete(Umbraco.Cms.Core.Models.IRelation)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.Delete(Umbraco.Cms.Core.Models.IRelationType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.DeleteAsync(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.DeleteRelationsOfType(Umbraco.Cms.Core.Models.IRelationType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.AreRelated(System.Int32,System.Int32,Umbraco.Cms.Core.Models.IRelationType)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.RelationService.GetAllowedObjectTypes">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Services.RepositoryService">
            <summary>
                Represents a service that works on top of repositories.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ScriptService.CreateAsync(Umbraco.Cms.Core.Models.ScriptCreateModel,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ScriptService.UpdateAsync(System.String,Umbraco.Cms.Core.Models.ScriptUpdateModel,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ScriptService.DeleteAsync(System.String,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ScriptService.RenameAsync(System.String,Umbraco.Cms.Core.Models.ScriptRenameModel,System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Services.ServiceContext">
            <summary>
                Represents the Umbraco Service context, which provides access to all services.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ServiceContext.#ctor(System.Lazy{Umbraco.Cms.Core.Services.IPublicAccessService},System.Lazy{Umbraco.Cms.Core.Services.IDomainService},System.Lazy{Umbraco.Cms.Core.Services.IAuditService},System.Lazy{Umbraco.Cms.Core.Services.ILocalizedTextService},System.Lazy{Umbraco.Cms.Core.Services.ITagService},System.Lazy{Umbraco.Cms.Core.Services.IContentService},System.Lazy{Umbraco.Cms.Core.Services.IUserService},System.Lazy{Umbraco.Cms.Core.Services.IMemberService},System.Lazy{Umbraco.Cms.Core.Services.IMediaService},System.Lazy{Umbraco.Cms.Core.Services.IContentTypeService},System.Lazy{Umbraco.Cms.Core.Services.IMediaTypeService},System.Lazy{Umbraco.Cms.Core.Services.IDataTypeService},System.Lazy{Umbraco.Cms.Core.Services.IFileService},System.Lazy{Umbraco.Cms.Core.Services.ILocalizationService},System.Lazy{Umbraco.Cms.Core.Services.IPackagingService},System.Lazy{Umbraco.Cms.Core.Services.IServerRegistrationService},System.Lazy{Umbraco.Cms.Core.Services.IEntityService},System.Lazy{Umbraco.Cms.Core.Services.IRelationService},System.Lazy{Umbraco.Cms.Core.Services.IMemberTypeService},System.Lazy{Umbraco.Cms.Core.Services.IMemberGroupService},System.Lazy{Umbraco.Cms.Core.Services.INotificationService},System.Lazy{Umbraco.Cms.Core.Services.IExternalLoginWithKeyService},System.Lazy{Umbraco.Cms.Core.Services.IRedirectUrlService},System.Lazy{Umbraco.Cms.Core.Services.IConsentService},System.Lazy{Umbraco.Cms.Core.Services.IKeyValueService},System.Lazy{Umbraco.Cms.Core.Services.IContentTypeBaseServiceProvider},System.Lazy{Umbraco.Cms.Core.Services.IWebhookService})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Services.ServiceContext" /> class with lazy services.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.PublicAccessService">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Services.IPublicAccessService" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.DomainService">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Services.IDomainService" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.AuditService">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Services.IAuditService" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.TextService">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Services.ILocalizedTextService" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.NotificationService">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Services.INotificationService" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.ServerRegistrationService">
            <summary>
                Gets the <see cref="P:Umbraco.Cms.Core.Services.ServiceContext.ServerRegistrationService" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.TagService">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Services.ITagService" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.EntityService">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Services.IEntityService" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.RelationService">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Services.IRelationService" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.ContentService">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Services.IContentService" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.ContentTypeService">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Services.IContentTypeService" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.MediaTypeService">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Services.IMediaTypeService" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.DataTypeService">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Services.IDataTypeService" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.FileService">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Services.IFileService" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.LocalizationService">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Services.ILocalizationService" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.MediaService">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Services.IMediaService" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.PackagingService">
            <summary>
                Gets the <see cref="P:Umbraco.Cms.Core.Services.ServiceContext.PackagingService" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.UserService">
            <summary>
                Gets the <see cref="P:Umbraco.Cms.Core.Services.ServiceContext.UserService" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.MemberService">
            <summary>
                Gets the <see cref="P:Umbraco.Cms.Core.Services.ServiceContext.MemberService" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.MemberTypeService">
            <summary>
                Gets the MemberTypeService
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.MemberGroupService">
            <summary>
                Gets the MemberGroupService
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.ExternalLoginService">
            <summary>
                Gets the ExternalLoginService.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.RedirectUrlService">
            <summary>
                Gets the RedirectUrlService.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.ConsentService">
            <summary>
                Gets the ConsentService.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.KeyValueService">
            <summary>
                Gets the KeyValueService.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.ContentTypeBaseServices">
            <summary>
                Gets the ContentTypeServiceBaseFactory.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Services.ServiceContext.WebhookService">
            <summary>
                Gets the WebhookService.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.ServiceContext.CreatePartial(Umbraco.Cms.Core.Services.IContentService,Umbraco.Cms.Core.Services.IMediaService,Umbraco.Cms.Core.Services.IContentTypeService,Umbraco.Cms.Core.Services.IMediaTypeService,Umbraco.Cms.Core.Services.IDataTypeService,Umbraco.Cms.Core.Services.IFileService,Umbraco.Cms.Core.Services.ILocalizationService,Umbraco.Cms.Core.Services.IPackagingService,Umbraco.Cms.Core.Services.IEntityService,Umbraco.Cms.Core.Services.IRelationService,Umbraco.Cms.Core.Services.IMemberGroupService,Umbraco.Cms.Core.Services.IMemberTypeService,Umbraco.Cms.Core.Services.IMemberService,Umbraco.Cms.Core.Services.IUserService,Umbraco.Cms.Core.Services.ITagService,Umbraco.Cms.Core.Services.INotificationService,Umbraco.Cms.Core.Services.ILocalizedTextService,Umbraco.Cms.Core.Services.IAuditService,Umbraco.Cms.Core.Services.IDomainService,Umbraco.Cms.Core.Services.IPublicAccessService,Umbraco.Cms.Core.Services.IExternalLoginWithKeyService,Umbraco.Cms.Core.Services.IServerRegistrationService,Umbraco.Cms.Core.Services.IRedirectUrlService,Umbraco.Cms.Core.Services.IConsentService,Umbraco.Cms.Core.Services.IKeyValueService,Umbraco.Cms.Core.Services.IContentTypeBaseServiceProvider,Umbraco.Cms.Core.Services.IWebhookService)">
            <summary>
                Creates a partial service context with only some services (for tests).
            </summary>
            <remarks>
                <para>Using a true constructor for this confuses DI containers.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.StylesheetService.CreateAsync(Umbraco.Cms.Core.Models.StylesheetCreateModel,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.StylesheetService.UpdateAsync(System.String,Umbraco.Cms.Core.Models.StylesheetUpdateModel,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.StylesheetService.DeleteAsync(System.String,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.StylesheetService.RenameAsync(System.String,Umbraco.Cms.Core.Models.StylesheetRenameModel,System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Services.TagService">
            <summary>
                Tag service to query for tags in the tags db table. The tags returned are only relevant for published content &amp;
                saved media or members
            </summary>
            <remarks>
                If there is unpublished content with tags, those tags will not be contained
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TagService.GetTaggedEntityById(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TagService.GetTaggedEntityByKey(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TagService.GetTaggedContentByTagGroup(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TagService.GetTaggedContentByTag(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TagService.GetTaggedMediaByTagGroup(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TagService.GetTaggedMediaByTag(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TagService.GetTaggedMembersByTagGroup(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TagService.GetTaggedMembersByTag(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TagService.GetAllTags(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TagService.GetAllContentTags(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TagService.GetAllMediaTags(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TagService.GetAllMemberTags(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TagService.GetTagsForProperty(System.Int32,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TagService.GetTagsForEntity(System.Int32,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TagService.GetTagsForProperty(System.Guid,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TagService.GetTagsForEntity(System.Guid,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TemplateContentParserService.LayoutRegex">
            <remarks>
            Pattern:<br/>
            <code>\\s*Layout\\s*=\\s*"?(?&lt;layout&gt;[\\w\\s\\.]*)"?;</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a whitespace character atomically any number of times.<br/>
            ○ Match the string "Layout".<br/>
            ○ Match a whitespace character atomically any number of times.<br/>
            ○ Match '='.<br/>
            ○ Match a whitespace character greedily any number of times.<br/>
            ○ Match '"' greedily, optionally.<br/>
            ○ "layout" capture group.<br/>
                ○ Match a character in the set [.\w\s] atomically any number of times.<br/>
            ○ Match '"' atomically, optionally.<br/>
            ○ Match ';'.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TemplateService.CreateForContentTypeAsync(System.String,System.String,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TemplateService.CreateAsync(System.String,System.String,System.String,System.Guid,System.Nullable{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TemplateService.CreateAsync(Umbraco.Cms.Core.Models.ITemplate,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TemplateService.GetAllAsync(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TemplateService.GetAllAsync(System.Guid[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TemplateService.GetChildrenAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TemplateService.GetAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TemplateService.GetAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TemplateService.GetAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TemplateService.GetDescendantsAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TemplateService.UpdateAsync(Umbraco.Cms.Core.Models.ITemplate,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TemplateService.DeleteAsync(System.String,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TemplateService.DeleteAsync(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TemplateService.GetFileContentStreamAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TemplateService.SetFileContentAsync(System.String,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TemplateService.GetFileSizeAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TemplateService.SetMasterTemplateAsync(Umbraco.Cms.Core.Models.ITemplate,Umbraco.Cms.Core.Models.ITemplate,System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Services.TwoFactorLoginService">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TwoFactorLoginService.#ctor(Umbraco.Cms.Core.Persistence.Repositories.ITwoFactorLoginRepository,Umbraco.Cms.Core.Scoping.ICoreScopeProvider,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Security.ITwoFactorProvider},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Identity.IdentityOptions},Microsoft.Extensions.Options.IOptions{Umbraco.Cms.Core.Security.BackOfficeIdentityOptions},Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Services.TwoFactorLoginService})">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Services.TwoFactorLoginService" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TwoFactorLoginService.DeleteUserLoginsAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TwoFactorLoginService.GetEnabledTwoFactorProviderNamesAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TwoFactorLoginService.IsTwoFactorEnabledAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TwoFactorLoginService.GetSecretForUserAndProviderAsync(System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TwoFactorLoginService.GetAllProviderNames">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TwoFactorLoginService.DisableAsync(System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TwoFactorLoginService.ValidateTwoFactorSetup(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TwoFactorLoginService.SaveAsync(Umbraco.Cms.Core.Models.TwoFactorLogin)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TwoFactorLoginService.GenerateSecret">
            <summary>
                Generates a new random unique secret.
            </summary>
            <returns>The random secret</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TwoFactorLoginService.IsKnownProviderName(System.String)">
            <summary>
                The provider needs to be registered as either a member provider or backoffice provider to show up.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.TwoFactorLoginServiceBase">
            <summary>
            Base class for setting up members or users to use 2FA.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TwoFactorLoginServiceBase.GetProviderNamesAsync(System.Guid)">
            <summary>
            Gets the two factor providers on a specific user.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TwoFactorLoginServiceBase.GenerateSecret">
            <summary>
                Generates a new random unique secret.
            </summary>
            <returns>The random secret</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.TwoFactorLoginServiceBase.DisableByCodeAsync(System.String,System.Guid,System.String)">
            <summary>
            Disables 2FA with Code.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.UserGroupPermissionService">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserGroupPermissionService.AuthorizeAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.IEnumerable{System.Guid})">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserGroupPermissionService.AuthorizeCreateAsync(Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Models.Membership.IUserGroup)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserGroupPermissionService.AuthorizeUpdateAsync(Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Models.Membership.IUserGroup)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserGroupPermissionService.ValidateAccess(Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Models.Membership.IUserGroup)">
            <summary>
                Validate user's access to create/modify user group.
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to validate access.</param>
            <param name="userGroup">The user group to be validated.</param>
            <returns><see cref="T:Umbraco.Cms.Core.Services.AuthorizationStatus.UserGroupAuthorizationStatus"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserGroupPermissionService.HasAccessToUsersSection(Umbraco.Cms.Core.Models.Membership.IUser)">
            <summary>
                Check that a user has access to the Users section.
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to check for access.</param>
            <returns><c>true</c> if the user has access; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserGroupPermissionService.HasAccessToAllUserGroupSections(Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Models.Membership.IUserGroup)">
            <summary>
                Check that a user is not adding a section to the group that they don't have access to.
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to check for access.</param>
            <param name="userGroup">The user group being created or updated.</param>
            <returns><c>true</c> if the user has access; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserGroupPermissionService.HasAccessToContentStartNode(Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Models.Membership.IUserGroup)">
            <summary>
                Check that a user has access to the content start node.
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to check for access.</param>
            <param name="userGroup">The user group being created or updated.</param>
            <returns><c>true</c> if the user has access; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserGroupPermissionService.HasAccessToMediaStartNode(Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Models.Membership.IUserGroup)">
            <summary>
                Check that a user has access to the media start node.
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to check for access.</param>
            <param name="userGroup">The user group being created or updated.</param>
            <returns><c>true</c> if the user has access; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.UserGroupService">
            <inheritdoc cref="T:Umbraco.Cms.Core.Services.IUserGroupService" />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserGroupService.GetAllAsync(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserGroupService.GetAsync(System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserGroupService.GetAsync(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserGroupService.GetAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserGroupService.GetAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserGroupService.GetAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserGroupService.FilterAsync(System.Guid,System.String,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserGroupService.DeleteAsync(System.Collections.Generic.ISet{System.Guid})">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserGroupService.CreateAsync(Umbraco.Cms.Core.Models.Membership.IUserGroup,System.Guid,System.Guid[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserGroupService.UpdateAsync(Umbraco.Cms.Core.Models.Membership.IUserGroup,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserGroupService.ResolveUserGroupManipulationModel(Umbraco.Cms.Core.Models.UsersToUserGroupManipulationModel,System.Guid)">
            <summary>
            Resolves the user group manipulation model keys into actual entities.
            Checks whether the performing user exists.
            Checks whether all users that are part of the manipulation exist.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserGroupService.ValidateCommon(Umbraco.Cms.Core.Models.Membership.IUserGroup)">
            <summary>
            Validate common user group properties, that are shared between update, create, etc.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserGroupService.EnsureNonAdminUserIsInSavedUserGroup(Umbraco.Cms.Core.Models.Membership.IUser,System.Guid[])">
            <summary>
            Ensures that the user creating the user group is either an admin, or in the group itself.
            </summary>
            <remarks>
            This is to ensure that the user can access the group they themselves created at a later point and modify it.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.UserPermissionService">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserPermissionService.AuthorizeAccessAsync(Umbraco.Cms.Core.Models.Membership.IUser,System.Collections.Generic.IEnumerable{System.Guid})">
            <inheritdoc/>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.UserService">
            <summary>
                Represents the UserService, which is an easy access to operations involving <see cref="T:Umbraco.Cms.Core.Models.Membership.IProfile" />,
                <see cref="T:Umbraco.Cms.Core.Models.Membership.IMembershipUser" /> and eventually Backoffice Users.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.TryGetAssignedPermissionsForNode(System.Collections.Generic.IList{Umbraco.Cms.Core.Models.Membership.EntityPermission},System.Int32,System.String@)">
            <summary>
                Checks in a set of permissions associated with a user for those related to a given nodeId
            </summary>
            <param name="permissions">The set of permissions</param>
            <param name="nodeId">The node Id</param>
            <param name="assignedPermissions">The permissions to return</param>
            <returns>True if permissions for the given path are found</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.Exists(System.String)">
            <summary>
                Checks if a User with the username exists
            </summary>
            <param name="username">Username to check</param>
            <returns><c>True</c> if the User exists otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.CreateUserWithIdentity(System.String,System.String)">
            <summary>
                Creates a new User
            </summary>
            <remarks>The user will be saved in the database and returned with an Id</remarks>
            <param name="username">Username of the user to create</param>
            <param name="email">Email of the user to create</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.Umbraco#Cms#Core#Services#IMembershipMemberService{Umbraco#Cms#Core#Models#Membership#IUser}#CreateWithIdentity(System.String,System.String,System.String,System.String)">
            <summary>
                Creates and persists a new <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" />
            </summary>
            <param name="username">Username of the <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to create</param>
            <param name="email">Email of the <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to create</param>
            <param name="passwordValue">
                This value should be the encoded/encrypted/hashed value for the password that will be
                stored in the database
            </param>
            <param name="memberTypeAlias">Not used for users</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.Umbraco#Cms#Core#Services#IMembershipMemberService{Umbraco#Cms#Core#Models#Membership#IUser}#CreateWithIdentity(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
                Creates and persists a new <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" />
            </summary>
            <param name="username">Username of the <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to create</param>
            <param name="email">Email of the <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to create</param>
            <param name="passwordValue">
                This value should be the encoded/encrypted/hashed value for the password that will be
                stored in the database
            </param>
            <param name="memberTypeAlias">Alias of the Type</param>
            <param name="isApproved">Is the member approved</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.CreateUserWithIdentity(System.String,System.String,System.String,System.Boolean)">
            <summary>
                Creates and persists a Member
            </summary>
            <remarks>
                Using this method will persist the Member object before its returned
                meaning that it will have an Id available (unlike the CreateMember method)
            </remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="passwordValue">
                This value should be the encoded/encrypted/hashed value for the password that will be
                stored in the database
            </param>
            <param name="isApproved">Is the user approved</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.GetByProviderKey(System.Object)">
            <summary>
                Gets an <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> by its provider key
            </summary>
            <param name="id">Id to use for retrieval</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.GetByEmail(System.String)">
            <summary>
                Get an <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> by email
            </summary>
            <param name="email">Email to use for retrieval</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.GetByUsername(System.String)">
            <summary>
                Get an <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> by username
            </summary>
            <param name="username">Username to use for retrieval</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.Delete(Umbraco.Cms.Core.Models.Membership.IUser)">
            <summary>
                Disables an <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" />
            </summary>
            <param name="membershipUser"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to disable</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.Delete(Umbraco.Cms.Core.Models.Membership.IUser,System.Boolean)">
            <summary>
                Deletes or disables a User
            </summary>
            <param name="user"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to delete</param>
            <param name="deletePermanently"><c>True</c> to permanently delete the user, <c>False</c> to disable the user</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.Save(Umbraco.Cms.Core.Models.Membership.IUser)">
            <summary>
            Saves an <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" />
            </summary>
            <param name="entity"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to Save</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.SaveAsync(Umbraco.Cms.Core.Models.Membership.IUser)">
            <summary>
            Saves an <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" />
            </summary>
            <param name="entity"><see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> to Save</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.Save(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.Membership.IUser})">
            <summary>
                Saves a list of <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> objects
            </summary>
            <param name="entities"><see cref="T:System.Collections.Generic.IEnumerable`1" /> to save</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.FindByEmail(System.String,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
                Finds a list of <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> objects by a partial email string
            </summary>
            <param name="emailStringToMatch">Partial email string to match</param>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="matchType">
                The type of match to make as <see cref="T:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType" />. Default is
                <see cref="F:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType.StartsWith" />
            </param>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.FindByUsername(System.String,System.Int64,System.Int32,System.Int64@,Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
                Finds a list of <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> objects by a partial username
            </summary>
            <param name="login">Partial username to match</param>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="matchType">
                The type of match to make as <see cref="T:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType" />. Default is
                <see cref="F:Umbraco.Cms.Core.Persistence.Querying.StringPropertyMatchType.StartsWith" />
            </param>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.GetCount(Umbraco.Cms.Core.Models.Membership.MemberCountType)">
            <summary>
                Gets the total number of Users based on the count type
            </summary>
            <remarks>
                The way the Online count is done is the same way that it is done in the MS SqlMembershipProvider - We query for any
                members
                that have their last active date within the Membership.UserIsOnlineTimeWindow (which is in minutes). It isn't exact
                science
                but that is how MS have made theirs so we'll follow that principal.
            </remarks>
            <param name="countType"><see cref="T:Umbraco.Cms.Core.Models.Membership.MemberCountType" /> to count by</param>
            <returns><see cref="T:System.Int32" /> with number of Users for passed in type</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.CreateAsync(System.Guid,Umbraco.Cms.Core.Models.UserCreateModel,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.ChangePasswordAsync(System.Guid,Umbraco.Cms.Core.Models.Membership.ChangeUserPasswordModel)">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.CreateBaseUserFilter(Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Persistence.Querying.IQuery{Umbraco.Cms.Core.Models.Membership.IUser}@)">
            <summary>
            Creates a base user filter which ensures our rules are followed, I.E. Only admins can se other admins.
            </summary>
            <remarks>
            We return the query as an out parameter instead of having it in the intermediate object because a two queries cannot be merged into one.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.GetAll(System.Int64,System.Int32,System.Int64@)">
            <summary>
                Gets a list of paged <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> objects
            </summary>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.GetAllInGroup(System.Nullable{System.Int32})">
            <summary>
                Gets a list of <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> objects associated with a given group
            </summary>
            <param name="groupId">Id of group</param>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.GetAllNotInGroup(System.Int32)">
            <summary>
                Gets a list of <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" /> objects not associated with a given group
            </summary>
            <param name="groupId">Id of group</param>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.GetProfileById(System.Int32)">
            <summary>
                Gets an IProfile by User Id.
            </summary>
            <param name="id">Id of the User to retrieve</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.Membership.IProfile" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.GetProfileByUserName(System.String)">
            <summary>
                Gets a profile by username
            </summary>
            <param name="username">Username</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.Membership.IProfile" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.GetUserById(System.Int32)">
            <summary>
                Gets a user by Id
            </summary>
            <param name="id">Id of the user to retrieve.</param>
            <returns>
                <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser" />
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.GetAsync(System.Guid)">
            <summary>
                Gets a user by it's key.
            </summary>
            <param name="key">Key of the user to retrieve.</param>
            <returns>Task resolving into an <see cref="T:Umbraco.Cms.Core.Models.Membership.IUser"/>.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.ReplaceUserGroupPermissions(System.Int32,System.Collections.Generic.ISet{System.String},System.Int32[])">
            <summary>
                Replaces the same permission set for a single group to any number of entities
            </summary>
            <remarks>If no 'entityIds' are specified all permissions will be removed for the specified group.</remarks>
            <param name="groupId">Id of the group</param>
            <param name="permissions">
                Permissions as enumerable list of <see cref="T:System.Char" /> If nothing is specified all permissions
                are removed.
            </param>
            <param name="entityIds">Specify the nodes to replace permissions for. </param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.AssignUserGroupPermission(System.Int32,System.String,System.Int32[])">
            <summary>
                Assigns the same permission set for a single user group to any number of entities
            </summary>
            <param name="groupId">Id of the user group</param>
            <param name="permission"></param>
            <param name="entityIds">Specify the nodes to replace permissions for</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.DeleteSectionFromAllUserGroups(System.String)">
            <summary>
                Removes a specific section from all users
            </summary>
            <remarks>This is useful when an entire section is removed from config</remarks>
            <param name="sectionAlias">Alias of the section to remove</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.GetMediaPermissionsAsync(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.GetDocumentPermissionsAsync(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <inheritdoc/>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.GetPermissionsAsync(System.Guid,System.Guid[])">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.GetPermissions(Umbraco.Cms.Core.Models.Membership.IUser,System.Int32[])">
            <summary>
                Get explicitly assigned permissions for a user and optional node ids
            </summary>
            <param name="user">User to retrieve permissions for</param>
            <param name="nodeIds">Specifying nothing will return all permissions for all nodes</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.Membership.EntityPermission" /></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.GetPermissions(Umbraco.Cms.Core.Models.Membership.IUserGroup[],System.Boolean,System.Int32[])">
            <summary>
                Get explicitly assigned permissions for a group and optional node Ids
            </summary>
            <param name="groups"></param>
            <param name="fallbackToDefaultPermissions">
                Flag indicating if we want to include the default group permissions for each result if there are not explicit
                permissions set
            </param>
            <param name="nodeIds">Specifying nothing will return all permissions for all nodes</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.Membership.EntityPermission" /></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.GetPermissions(Umbraco.Cms.Core.Models.Membership.IReadOnlyUserGroup[],System.Boolean,System.Int32[])">
            <summary>
                Get explicitly assigned permissions for a group and optional node Ids
            </summary>
            <param name="groups">Groups to retrieve permissions for</param>
            <param name="fallbackToDefaultPermissions">
                Flag indicating if we want to include the default group permissions for each result if there are not explicit
                permissions set
            </param>
            <param name="nodeIds">Specifying nothing will return all permissions for all nodes</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.Membership.EntityPermission" /></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.GetPermissionsForPath(Umbraco.Cms.Core.Models.Membership.IUser,System.String)">
            <summary>
                Gets the implicit/inherited permissions for the user for the given path
            </summary>
            <param name="user">User to check permissions for</param>
            <param name="path">Path to check permissions for</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.GetPermissionsForPath(Umbraco.Cms.Core.Models.Membership.IUserGroup[],System.String,System.Boolean)">
            <summary>
                Gets the permissions for the provided group and path
            </summary>
            <param name="groups"></param>
            <param name="path">Path to check permissions for</param>
            <param name="fallbackToDefaultPermissions">
                Flag indicating if we want to include the default group permissions for each result if there are not explicit
                permissions set
            </param>
            <returns>String indicating permissions for provided user and path</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.CalculatePermissionsForPathForUser(Umbraco.Cms.Core.Models.Membership.EntityPermission[],System.Int32[])">
            <summary>
                This performs the calculations for inherited nodes based on this
                http://issues.umbraco.org/issue/U4-10075#comment=67-40085
            </summary>
            <param name="groupPermissions"></param>
            <param name="pathIds"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.GetPermissionsForPathForGroup(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.Membership.EntityPermission},System.Int32[],System.Boolean)">
            <summary>
                Returns the resulting permission set for a group for the path based on all permissions provided for the branch
            </summary>
            <param name="pathPermissions">
                The collective set of permissions provided to calculate the resulting permissions set for the path
                based on a single group
            </param>
            <param name="pathIds">Must be ordered deepest to shallowest (right to left)</param>
            <param name="fallbackToDefaultPermissions">
                Flag indicating if we want to include the default group permissions for each result if there are not explicit
                permissions set
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserService.ValidClientId">
            <remarks>
            Pattern:<br/>
            <code>^[\\w\\d\\-\\._~]{1,100}$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [-._~\w\d] atomically at least 1 and at most 100 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Services.UserTwoFactorLoginService">
            <inheritdoc cref="T:Umbraco.Cms.Core.Services.IUserTwoFactorLoginService" />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserTwoFactorLoginService.DisableAsync(System.Guid,System.String)">
            <inheritdoc cref="M:Umbraco.Cms.Core.Services.IUserTwoFactorLoginService.DisableAsync(System.Guid,System.String)" />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserTwoFactorLoginService.GetProviderNamesAsync(System.Guid)">
            <inheritdoc cref="M:Umbraco.Cms.Core.Services.IUserTwoFactorLoginService.GetProviderNamesAsync(System.Guid)" />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserTwoFactorLoginService.GetSetupInfoAsync(System.Guid,System.String)">
            <inheritdoc cref="M:Umbraco.Cms.Core.Services.IUserTwoFactorLoginService.GetSetupInfoAsync(System.Guid,System.String)" />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.UserTwoFactorLoginService.ValidateAndSaveAsync(System.String,System.Guid,System.String,System.String)">
            <inheritdoc cref="M:Umbraco.Cms.Core.Services.IUserTwoFactorLoginService.ValidateAndSaveAsync(System.String,System.Guid,System.String,System.String)" />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.WebhookService.CreateAsync(Umbraco.Cms.Core.Models.IWebhook)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.WebhookService.UpdateAsync(Umbraco.Cms.Core.Models.IWebhook)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.WebhookService.DeleteAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.WebhookService.GetAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.WebhookService.GetMultipleAsync(System.Collections.Generic.IEnumerable{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.WebhookService.GetAllAsync(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Services.WebhookService.GetByAliasAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Settable`1">
            <summary>
                Represents a value that can be assigned a value.
            </summary>
            <typeparam name="T">The type of the value</typeparam>
        </member>
        <member name="P:Umbraco.Cms.Core.Settable`1.HasValue">
            <summary>
                Gets a value indicating whether a value has been assigned to this <see cref="T:Umbraco.Cms.Core.Settable`1" /> instance.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Settable`1.Value">
            <summary>
                Gets the value assigned to this <see cref="T:Umbraco.Cms.Core.Settable`1" /> instance.
            </summary>
            <remarks>An exception is thrown if the HasValue property is false.</remarks>
            <exception cref="T:System.InvalidOperationException">No value has been assigned to this instance.</exception>
        </member>
        <member name="M:Umbraco.Cms.Core.Settable`1.Set(`0)">
            <summary>
                Assigns a value to this <see cref="T:Umbraco.Cms.Core.Settable`1" /> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Settable`1.Set(Umbraco.Cms.Core.Settable{`0})">
            <summary>
                Assigns a value to this <see cref="T:Umbraco.Cms.Core.Settable`1" /> instance by copying the value
                of another instance, if the other instance has a value.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Settable`1.Clear">
            <summary>
                Clears the value.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Settable`1.ValueOrDefault">
            <summary>
                Gets the value assigned to this <see cref="T:Umbraco.Cms.Core.Settable`1" /> instance, if a value has been assigned,
                otherwise the default value of <typeparamref name="T" />.
            </summary>
            <returns>
                The value assigned to this <see cref="T:Umbraco.Cms.Core.Settable`1" /> instance, if a value has been assigned,
                else the default value of <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Settable`1.ValueOrDefault(`0)">
            <summary>
                Gets the value assigned to this <see cref="T:Umbraco.Cms.Core.Settable`1" /> instance, if a value has been assigned,
                otherwise a specified default value.
            </summary>
            <param name="defaultValue">The default value.</param>
            <returns>
                The value assigned to this <see cref="T:Umbraco.Cms.Core.Settable`1" /> instance, if a value has been assigned,
                else <paramref name="defaultValue" />.
            </returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Settable`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.SimpleMainDom">
            <summary>
                Provides a simple implementation of <see cref="T:Umbraco.Cms.Core.Runtime.IMainDom" />.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.SimpleMainDom.IsMainDom">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.SimpleMainDom.Register(System.Action,System.Action,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Snippets.PartialViewSnippet">
            <summary>
            Defines a partial view snippet.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Snippets.PartialViewSnippet.Content">
            <summary>
            Gets the content of the snippet.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Snippets.PartialViewSnippetCollectionBuilder">
            <summary>
            The partial view snippet collection builder.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Snippets.PartialViewSnippetCollectionBuilder.HeaderRegex">
            <remarks>
            Pattern:<br/>
            <code>^@inherits\\s+?.*$</code><br/>
            Options:<br/>
            <code>RegexOptions.Multiline</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of a line.<br/>
            ○ Match the string "@inherits".<br/>
            ○ Match a whitespace character lazily at least once.<br/>
            ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ Match if at the end of a line.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Snippets.PartialViewSnippetSlim">
            <summary>
            A lightweight representation of a partial view snippet (i.e. without content).
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Snippets.PartialViewSnippetSlim.Id">
            <summary>
            Gets the ID of the snippet.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Snippets.PartialViewSnippetSlim.Name">
            <summary>
            Gets the name of the snippet.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Strings.CleanStringType">
            <summary>
                Specifies the type of a clean string.
            </summary>
            <remarks>
                <para>Specifies its casing, and its encoding.</para>
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Strings.CleanStringType.None">
            <summary>
                No value.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Strings.CleanStringType.CaseMask">
            <summary>
                Flag mask for casing.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Strings.CleanStringType.PascalCase">
            <summary>
                Pascal casing eg "PascalCase".
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Strings.CleanStringType.CamelCase">
            <summary>
                Camel casing eg "camelCase".
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Strings.CleanStringType.Unchanged">
            <summary>
                Unchanged casing eg "UncHanGed".
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Strings.CleanStringType.LowerCase">
            <summary>
                Lower casing eg "lowercase".
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Strings.CleanStringType.UpperCase">
            <summary>
                Upper casing eg "UPPERCASE".
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Strings.CleanStringType.UmbracoCase">
            <summary>
                Umbraco "safe alias" case.
            </summary>
            <remarks>
                Uppercases the first char of each term except for the first
                char of the string, everything else including the first char of the
                string is unchanged.
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Strings.CleanStringType.CodeMask">
            <summary>
                Flag mask for encoding.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Strings.CleanStringType.Utf8">
            <summary>
                Utf8 encoding.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Strings.CleanStringType.Ascii">
            <summary>
                Ascii encoding.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Strings.CleanStringType.TryAscii">
            <summary>
                Ascii encoding, if possible.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Strings.CleanStringType.RoleMask">
            <summary>
                Flag mask for role.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Strings.CleanStringType.UrlSegment">
            <summary>
                Url role.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Strings.CleanStringType.Alias">
            <summary>
                Alias role.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Strings.CleanStringType.FileName">
            <summary>
                FileName role.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Strings.CleanStringType.ConvertCase">
            <summary>
                ConvertCase role.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Strings.CleanStringType.UnderscoreAlias">
            <summary>
                UnderscoreAlias role.
            </summary>
            <remarks>This is Alias + leading underscore.</remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Strings.DefaultShortStringHelper">
            <summary>
            New default implementation of string functions for short strings such as aliases or URL segments.
            </summary>
            <remarks>
            <para>Not optimized to work on large bodies of text.</para>
            <para>Meant to replace <c>LegacyShortStringHelper</c> where/when backward compatibility is not an issue.</para>
            <para>NOTE: pre-filters run _before_ the string is re-encoded.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.DefaultShortStringHelper.CleanStringForSafeAlias(System.String)">
            <summary>
            Cleans a string to produce a string that can safely be used in an alias.
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The safe alias.</returns>
            <remarks>
            <para>The string will be cleaned in the context of the default culture.</para>
            <para>Safe aliases are Ascii only.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.DefaultShortStringHelper.CleanStringForSafeAlias(System.String,System.String)">
            <summary>
            Cleans a string, in the context of a specified culture, to produce a string that can safely be used in an alias.
            </summary>
            <param name="text">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe alias.</returns>
            <remarks>
            <para>Safe aliases are Ascii only.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.DefaultShortStringHelper.CleanStringForUrlSegment(System.String)">
            <summary>
            Cleans a string to produce a string that can safely be used in an URL segment.
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The safe URL segment.</returns>
            <remarks>
            <para>The string will be cleaned in the context of the default culture.</para>
            <para>Url segments are Ascii only (no accents...).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.DefaultShortStringHelper.CleanStringForUrlSegment(System.String,System.String)">
            <summary>
            Cleans a string, in the context of a specified culture, to produce a string that can safely be used in an URL segment.
            </summary>
            <param name="text">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe URL segment.</returns>
            <remarks>
            <para>Url segments are Ascii only (no accents...).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.DefaultShortStringHelper.CleanStringForSafeFileName(System.String)">
            <summary>
            Cleans a string, in the context of the default culture, to produce a string that can safely be used as a filename,
            both internally (on disk) and externally (as a URL).
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The safe filename.</returns>
            <remarks>Legacy says this was used to "overcome an issue when Umbraco is used in IE in an intranet environment" but that issue is not documented.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.DefaultShortStringHelper.CleanStringForSafeFileName(System.String,System.String)">
            <summary>
            Cleans a string to produce a string that can safely be used as a filename,
            both internally (on disk) and externally (as a URL).
            </summary>
            <param name="text">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe filename.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.DefaultShortStringHelper.CleanString(System.String,Umbraco.Cms.Core.Strings.CleanStringType)">
            <summary>
            Cleans a string.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default,
            strings are cleaned up to camelCase and Ascii.</param>
            <returns>The clean string.</returns>
            <remarks>The string is cleaned in the context of the default culture.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.DefaultShortStringHelper.CleanString(System.String,Umbraco.Cms.Core.Strings.CleanStringType,System.Char)">
            <summary>
            Cleans a string, using a specified separator.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default,
            strings are cleaned up to camelCase and Ascii.</param>
            <param name="separator">The separator.</param>
            <returns>The clean string.</returns>
            <remarks>The string is cleaned in the context of the default culture.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.DefaultShortStringHelper.CleanString(System.String,Umbraco.Cms.Core.Strings.CleanStringType,System.String)">
            <summary>
            Cleans a string in the context of a specified culture.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default,
            strings are cleaned up to camelCase and Ascii.</param>
            <param name="culture">The culture.</param>
            <returns>The clean string.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.DefaultShortStringHelper.CleanString(System.String,Umbraco.Cms.Core.Strings.CleanStringType,System.Char,System.String)">
            <summary>
            Cleans a string in the context of a specified culture, using a specified separator.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default,
            strings are cleaned up to camelCase and Ascii.</param>
            <param name="separator">The separator.</param>
            <param name="culture">The culture.</param>
            <returns>The clean string.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.DefaultShortStringHelper.SplitPascalCasing(System.String,System.Char)">
            <summary>
            Splits a Pascal-cased string into a phrase separated by a separator.
            </summary>
            <param name="text">The text to split.</param>
            <param name="separator">The separator, which defaults to a whitespace.</param>
            <returns>The split text.</returns>
            <remarks>Supports Utf8 and Ascii strings, not Unicode strings.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.DefaultShortStringHelperConfig.WithDefault(Umbraco.Cms.Core.Configuration.Models.RequestHandlerSettings)">
            <summary>
                Sets the default configuration.
            </summary>
            <returns>The short string helper.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.DefaultShortStringHelperConfig.ApplyUrlReplaceCharacters(System.String)">
            <summary>
                Returns a new string in which characters have been replaced according to the Umbraco settings UrlReplaceCharacters.
            </summary>
            <param name="s">The string to filter.</param>
            <returns>The filtered string.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Strings.DefaultUrlSegmentProvider">
            <summary>
                Default implementation of IUrlSegmentProvider.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.DefaultUrlSegmentProvider.GetUrlSegment(Umbraco.Cms.Core.Models.IContentBase,System.String)">
            <summary>
                Gets the URL segment for a specified content and culture.
            </summary>
            <param name="content">The content.</param>
            <param name="culture">The culture.</param>
            <returns>The URL segment.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Strings.Diff">
            <summary>
                This Class implements the Difference Algorithm published in
                "An O(ND) Difference Algorithm and its Variations" by Eugene Myers
                Algorithmica Vol. 1 No. 2, 1986, p 251.
                The algorithm itself is comparing 2 arrays of numbers so when comparing 2 text documents
                each line is converted into a (hash) number. See DiffText().
                diff.cs: A port of the algorithm to C#
                Copyright (c) by Matthias Hertel, http://www.mathertel.de
                This work is licensed under a BSD style license. See http://www.mathertel.de/License.aspx
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.Diff.DiffText(System.String,System.String)">
            <summary>
                Find the difference in 2 texts, comparing by text lines.
            </summary>
            <param name="textA">A-version of the text (usually the old one)</param>
            <param name="textB">B-version of the text (usually the new one)</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.Diff.DiffText1(System.String,System.String)">
            <summary>
                Find the difference in 2 texts, comparing by text lines.
                This method uses the DiffInt internally by 1st converting the string into char codes
                then uses the diff int method
            </summary>
            <param name="textA">A-version of the text (usually the old one)</param>
            <param name="textB">B-version of the text (usually the new one)</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.Diff.DiffText(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Find the difference in 2 text documents, comparing by text lines.
                The algorithm itself is comparing 2 arrays of numbers so when comparing 2 text documents
                each line is converted into a (hash) number. This hash-value is computed by storing all
                text lines into a common Hashtable so i can find duplicates in there, and generating a
                new number each time a new text line is inserted.
            </summary>
            <param name="textA">A-version of the text (usually the old one)</param>
            <param name="textB">B-version of the text (usually the new one)</param>
            <param name="trimSpace">
                When set to true, all leading and trailing whitespace characters are stripped out before the
                comparison is done.
            </param>
            <param name="ignoreSpace">
                When set to true, all whitespace characters are converted to a single space character before
                the comparison is done.
            </param>
            <param name="ignoreCase">
                When set to true, all characters are converted to their lowercase equivalence before the
                comparison is done.
            </param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.Diff.DiffInt(System.Int32[],System.Int32[])">
            <summary>
                Find the difference in 2 arrays of integers.
            </summary>
            <param name="arrayA">A-version of the numbers (usually the old one)</param>
            <param name="arrayB">B-version of the numbers (usually the new one)</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.Diff.DiffCharCodes(System.String,System.Boolean)">
            <summary>
                Diffs the char codes.
            </summary>
            <param name="aText">A text.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.Diff.Optimize(Umbraco.Cms.Core.Strings.Diff.DiffData)">
            <summary>
                If a sequence of modified lines starts with a line that contains the same content
                as the line that appends the changes, the difference sequence is modified so that the
                appended line and not the starting line is marked as modified.
                This leads to more readable diff sequences when comparing text files.
            </summary>
            <param name="data">A Diff data buffer containing the identified changes.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.Diff.DiffCodes(System.String,System.Collections.IDictionary,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                This function converts all text lines of the text into unique numbers for every unique text line
                so further work can work only with simple numbers.
            </summary>
            <param name="aText">the input text</param>
            <param name="h">This extern initialized Hashtable is used for storing all ever used text lines.</param>
            <param name="trimSpace">ignore leading and trailing space characters</param>
            <param name="ignoreSpace"></param>
            <param name="ignoreCase"></param>
            <returns>a array of integers.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.Diff.Sms(Umbraco.Cms.Core.Strings.Diff.DiffData,System.Int32,System.Int32,Umbraco.Cms.Core.Strings.Diff.DiffData,System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <summary>
                This is the algorithm to find the Shortest Middle Snake (SMS).
            </summary>
            <param name="dataA">sequence A</param>
            <param name="lowerA">lower bound of the actual range in DataA</param>
            <param name="upperA">upper bound of the actual range in DataA (exclusive)</param>
            <param name="dataB">sequence B</param>
            <param name="lowerB">lower bound of the actual range in DataB</param>
            <param name="upperB">upper bound of the actual range in DataB (exclusive)</param>
            <param name="downVector">a vector for the (0,0) to (x,y) search. Passed as a parameter for speed reasons.</param>
            <param name="upVector">a vector for the (u,v) to (N,M) search. Passed as a parameter for speed reasons.</param>
            <returns>a MiddleSnakeData record containing x,y and u,v</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.Diff.Lcs(Umbraco.Cms.Core.Strings.Diff.DiffData,System.Int32,System.Int32,Umbraco.Cms.Core.Strings.Diff.DiffData,System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <summary>
                This is the divide-and-conquer implementation of the longest common-subsequence (LCS)
                algorithm.
                The published algorithm passes recursively parts of the A and B sequences.
                To avoid copying these arrays the lower and upper bounds are passed while the sequences stay constant.
            </summary>
            <param name="dataA">sequence A</param>
            <param name="lowerA">lower bound of the actual range in DataA</param>
            <param name="upperA">upper bound of the actual range in DataA (exclusive)</param>
            <param name="dataB">sequence B</param>
            <param name="lowerB">lower bound of the actual range in DataB</param>
            <param name="upperB">upper bound of the actual range in DataB (exclusive)</param>
            <param name="downVector">a vector for the (0,0) to (x,y) search. Passed as a parameter for speed reasons.</param>
            <param name="upVector">a vector for the (u,v) to (N,M) search. Passed as a parameter for speed reasons.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.Diff.CreateDiffs(Umbraco.Cms.Core.Strings.Diff.DiffData,Umbraco.Cms.Core.Strings.Diff.DiffData)">
            <summary>
                Scan the tables of which lines are inserted and deleted,
                producing an edit script in forward order.
            </summary>
            dynamic array
        </member>
        <member name="T:Umbraco.Cms.Core.Strings.Diff.Item">
            <summary>details of one difference.</summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Strings.Diff.Item.StartA">
            <summary>Start Line number in Data A.</summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Strings.Diff.Item.StartB">
            <summary>Start Line number in Data B.</summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Strings.Diff.Item.DeletedA">
            <summary>Number of changes in Data A.</summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Strings.Diff.Item.InsertedB">
            <summary>Number of changes in Data B.</summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Strings.Diff.DiffData">
            <summary>
                Data on one input file being compared.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Strings.Diff.DiffData.Data">
            <summary>Buffer of numbers that will be compared.</summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Strings.Diff.DiffData.Length">
            <summary>Number of elements (lines).</summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Strings.Diff.DiffData.Modified">
            <summary>
                Array of booleans that flag for modified data.
                This is the result of the diff.
                This means deletedA in the first Data or inserted in the second Data.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.Diff.DiffData.#ctor(System.Int32[])">
            <summary>
                Initialize the Diff-Data buffer.
            </summary>
            <param name="initData">reference to the buffer</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Strings.Diff.Smsrd">
            <summary>
                Shortest Middle Snake Return Data
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Strings.HtmlEncodedString">
            <summary>
                Represents an HTML-encoded string that should not be encoded again.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.HtmlEncodedString.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Web.HtmlString" /> class.</summary>
            <param name="value">An HTML-encoded string that should not be encoded again.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.HtmlEncodedString.ToHtmlString">
            <summary>Returns an HTML-encoded string.</summary>
            <returns>An HTML-encoded string.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.HtmlEncodedString.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Strings.IHtmlEncodedString">
            <summary>
                Represents an HTML-encoded string that should not be encoded again.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.IHtmlEncodedString.ToHtmlString">
            <summary>
                Returns an HTML-encoded string.
            </summary>
            <returns>An HTML-encoded string.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Strings.IShortStringHelper">
            <summary>
                Provides string functions for short strings such as aliases or URL segments.
            </summary>
            <remarks>Not necessarily optimized to work on large bodies of text.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.IShortStringHelper.CleanStringForSafeAlias(System.String)">
            <summary>
                Cleans a string to produce a string that can safely be used in an alias.
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The safe alias.</returns>
            <remarks>
                <para>The string will be cleaned in the context of the IShortStringHelper default culture.</para>
                <para>A safe alias is [a-z][a-zA-Z0-9_]* although legacy will also accept '-', and '_' at the beginning.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.IShortStringHelper.CleanStringForSafeAlias(System.String,System.String)">
            <summary>
                Cleans a string, in the context of a specified culture, to produce a string that can safely be used in an alias.
            </summary>
            <param name="text">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe alias.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.IShortStringHelper.CleanStringForUrlSegment(System.String)">
            <summary>
                Cleans a string to produce a string that can safely be used in an URL segment.
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The safe URL segment.</returns>
            <remarks>The string will be cleaned in the context of the IShortStringHelper default culture.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.IShortStringHelper.CleanStringForUrlSegment(System.String,System.String)">
            <summary>
                Cleans a string, in the context of a specified culture, to produce a string that can safely be used in an URL
                segment.
            </summary>
            <param name="text">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe URL segment.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.IShortStringHelper.CleanStringForSafeFileName(System.String)">
            <summary>
                Cleans a string, in the context of the invariant culture, to produce a string that can safely be used as a
                filename,
                both internally (on disk) and externally (as a URL).
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The safe filename.</returns>
            <remarks>
                Legacy says this was used to "overcome an issue when Umbraco is used in IE in an intranet environment" but
                that issue is not documented.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.IShortStringHelper.CleanStringForSafeFileName(System.String,System.String)">
            <summary>
                Cleans a string, in the context of a specified culture, to produce a string that can safely be used as a filename,
                both internally (on disk) and externally (as a URL).
            </summary>
            <param name="text">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe filename.</returns>
            <remarks>
                Legacy says this was used to "overcome an issue when Umbraco is used in IE in an intranet environment" but
                that issue is not documented.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.IShortStringHelper.SplitPascalCasing(System.String,System.Char)">
            <summary>
                Splits a pascal-cased string by inserting a separator in between each term.
            </summary>
            <param name="text">The text to split.</param>
            <param name="separator">The separator.</param>
            <returns>The split string.</returns>
            <remarks>Supports Utf8 and Ascii strings, not Unicode strings.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.IShortStringHelper.CleanString(System.String,Umbraco.Cms.Core.Strings.CleanStringType)">
            <summary>
                Cleans a string.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">
                A flag indicating the target casing and encoding of the string. By default,
                strings are cleaned up to camelCase and Ascii.
            </param>
            <returns>The clean string.</returns>
            <remarks>The string is cleaned in the context of the IShortStringHelper default culture.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.IShortStringHelper.CleanString(System.String,Umbraco.Cms.Core.Strings.CleanStringType,System.Char)">
            <summary>
                Cleans a string, using a specified separator.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">
                A flag indicating the target casing and encoding of the string. By default,
                strings are cleaned up to camelCase and Ascii.
            </param>
            <param name="separator">The separator.</param>
            <returns>The clean string.</returns>
            <remarks>The string is cleaned in the context of the IShortStringHelper default culture.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.IShortStringHelper.CleanString(System.String,Umbraco.Cms.Core.Strings.CleanStringType,System.String)">
            <summary>
                Cleans a string in the context of a specified culture.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">
                A flag indicating the target casing and encoding of the string. By default,
                strings are cleaned up to camelCase and Ascii.
            </param>
            <param name="culture">The culture.</param>
            <returns>The clean string.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.IShortStringHelper.CleanString(System.String,Umbraco.Cms.Core.Strings.CleanStringType,System.Char,System.String)">
            <summary>
                Cleans a string in the context of a specified culture, using a specified separator.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">
                A flag indicating the target casing and encoding of the string. By default,
                strings are cleaned up to camelCase and Ascii.
            </param>
            <param name="separator">The separator.</param>
            <param name="culture">The culture.</param>
            <returns>The clean string.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Strings.IUrlSegmentProvider">
            <summary>
                Provides URL segments for content.
            </summary>
            <remarks>Url segments should comply with IETF RFCs regarding content, encoding, etc.</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Strings.IUrlSegmentProvider.AllowAdditionalSegments">
            <summary>
            Gets a value indicating whether the URL segment provider allows additional segments after providing one.
            </summary>
            <remarks>
            If set to true, when more than one URL segment provider is available, futher providers after this one in the collection will be called
            even if the current provider provides a segment.
            If false, the provider will terminate the chain of URL segment providers if it provides a segment.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.IUrlSegmentProvider.GetUrlSegment(Umbraco.Cms.Core.Models.IContentBase,System.String)">
            <summary>
                Gets the URL segment for a specified content and culture.
            </summary>
            <param name="content">The content.</param>
            <param name="culture">The culture.</param>
            <returns>The URL segment.</returns>
            <remarks>
                This is for when Umbraco is capable of managing more than one URL
                per content, in 1-to-1 multilingual configurations. Then there would be one
                URL per culture.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.IUrlSegmentProvider.GetUrlSegment(Umbraco.Cms.Core.Models.IContentBase,System.Boolean,System.String)">
            <summary>
                Gets the URL segment for a specified content, published status and  and culture.
            </summary>
            <param name="content">The content.</param>
            <param name="culture">The culture.</param>
            <returns>The URL segment.</returns>
            <remarks>
                This is for when Umbraco is capable of managing more than one URL
                per content, in 1-to-1 multilingual configurations. Then there would be one
                URL per culture.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.PathUtility.EnsurePathIsApplicationRootPrefixed(System.String)">
            <summary>
                Ensures that a path has `~/` as prefix
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Strings.Utf8ToAsciiConverter">
            <summary>
                Provides methods to convert Utf8 text to Ascii.
            </summary>
            <remarks>
                <para>Tries to match characters such as accented eg "é" to Ascii equivalent eg "e".</para>
                <para>Converts all "whitespace" characters to a single whitespace.</para>
                <para>Removes all non-Utf8 (unicode) characters, so in fact it can sort-of "convert" Unicode to Ascii.</para>
                <para>Replaces symbols with '?'.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.Utf8ToAsciiConverter.ToAsciiString(System.String,System.Char)">
            <summary>
                Converts an Utf8 string into an Ascii string.
            </summary>
            <param name="text">The text to convert.</param>
            <param name="fail">The character to use to replace characters that cannot properly be converted.</param>
            <returns>The converted text.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.Utf8ToAsciiConverter.ToAsciiString(System.ReadOnlySpan{System.Char},System.Char)">
            <summary>
                Converts an Utf8 string into an Ascii string.
            </summary>
            <param name="text">The text to convert.</param>
            <param name="fail">The character to use to replace characters that cannot properly be converted.</param>
            <returns>The converted text.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.Utf8ToAsciiConverter.ToAsciiCharArray(System.String,System.Char)">
            <summary>
                Converts an Utf8 string into an array of Ascii characters.
            </summary>
            <param name="text">The text to convert.</param>
            <param name="fail">The character to use to replace characters that cannot properly be converted.</param>
            <returns>The converted text.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.Utf8ToAsciiConverter.ToAscii(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Char)">
            <summary>
                Converts an array of Utf8 characters into an array of Ascii characters.
            </summary>
            <param name="input">The input array.</param>
            <param name="output">The output array.</param>
            <param name="fail">The character to use to replace characters that cannot properly be converted.</param>
            <returns>The number of characters in the output array.</returns>
            <remarks>The caller must ensure that the output array is big enough.</remarks>
            <exception cref="T:System.OverflowException">The output array is not big enough.</exception>
        </member>
        <member name="M:Umbraco.Cms.Core.Strings.Utf8ToAsciiConverter.ToAscii(System.ReadOnlySpan{System.Char},System.Int32,System.Span{System.Char},System.Int32@,System.Char)">
            <summary>
                Converts the character at position <paramref name="ipos" /> in input array of Utf8 characters
                <paramref name="input" />
                and writes the converted value to output array of Ascii characters <paramref name="output" /> at position
                <paramref name="opos" />,
                and increments that position accordingly.
            </summary>
            <param name="input">The input array.</param>
            <param name="ipos">The input position.</param>
            <param name="output">The output array.</param>
            <param name="opos">The output position.</param>
            <param name="fail">The character to use to replace characters that cannot properly be converted.</param>
            <remarks>
                <para>Adapted from various sources on the 'net including <c>Lucene.Net.Analysis.ASCIIFoldingFilter</c>.</para>
                <para>Input should contain Utf8 characters exclusively and NOT Unicode.</para>
                <para>Removes controls, normalizes whitespaces, replaces symbols by '?'.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.StringUdi">
            <summary>
                Represents a string-based entity identifier.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.StringUdi.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the StringUdi class with an entity type and a string id.
            </summary>
            <param name="entityType">The entity type part of the udi.</param>
            <param name="id">The string id part of the udi.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.StringUdi.#ctor(System.Uri)">
            <summary>
                Initializes a new instance of the StringUdi class with a uri value.
            </summary>
            <param name="uriValue">The uri value of the udi.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.StringUdi.Id">
            <summary>
                The string part of the identifier.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.StringUdi.IsRoot">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Sync.ElectedServerRoleAccessor">
            <summary>
                Gets the current server's <see cref="T:Umbraco.Cms.Core.Sync.ServerRole" /> based on active servers registered with
                <see cref="T:Umbraco.Cms.Core.Services.IServerRegistrationService" />
            </summary>
            <remarks>
                This is the default service which determines a server's role by using a master election process.
                The scheduling publisher election process doesn't occur until just after startup so this election process doesn't
                really affect the primary startup phase.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Sync.ElectedServerRoleAccessor.#ctor(Umbraco.Cms.Core.Services.IServerRegistrationService)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Sync.ElectedServerRoleAccessor" /> class.
            </summary>
            <param name="registrationService">The registration service.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Sync.ElectedServerRoleAccessor.CurrentServerRole">
            <summary>
                Gets the role of the current server in the application environment.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Sync.IServerAddress">
            <summary>
                Provides the address of a server.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Sync.IServerAddress.ServerAddress">
            <summary>
                Gets the server address.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Sync.IServerMessenger">
            <summary>
                Transmits distributed cache notifications for all servers of a load balanced environment.
            </summary>
            <remarks>Also ensures that the notification is processed on the local environment.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Sync.IServerMessenger.Sync">
            <summary>
                Called to synchronize a server with queued notifications
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Sync.IServerMessenger.SendMessages">
            <summary>
                Called to send/commit the queued messages created with the Perform methods
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Sync.IServerMessenger.QueueRefresh``1(Umbraco.Cms.Core.Cache.ICacheRefresher,``0[])">
            <summary>
                Notifies the distributed cache, for a specified <see cref="T:Umbraco.Cms.Core.Cache.ICacheRefresher" />.
            </summary>
            <param name="refresher">The ICacheRefresher.</param>
            <param name="payload">The notification content.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Sync.IServerMessenger.QueueRefresh``1(Umbraco.Cms.Core.Cache.ICacheRefresher,System.Func{``0,System.Int32},``0[])">
            <summary>
                Notifies the distributed cache of specified item invalidation, for a specified <see cref="T:Umbraco.Cms.Core.Cache.ICacheRefresher" />.
            </summary>
            <typeparam name="T">The type of the invalidated items.</typeparam>
            <param name="refresher">The ICacheRefresher.</param>
            <param name="getNumericId">A function returning the unique identifier of items.</param>
            <param name="instances">The invalidated items.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Sync.IServerMessenger.QueueRefresh``1(Umbraco.Cms.Core.Cache.ICacheRefresher,System.Func{``0,System.Guid},``0[])">
            <summary>
                Notifies the distributed cache of specified item invalidation, for a specified <see cref="T:Umbraco.Cms.Core.Cache.ICacheRefresher" />.
            </summary>
            <typeparam name="T">The type of the invalidated items.</typeparam>
            <param name="refresher">The ICacheRefresher.</param>
            <param name="getGuidId">A function returning the unique identifier of items.</param>
            <param name="instances">The invalidated items.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Sync.IServerMessenger.QueueRemove``1(Umbraco.Cms.Core.Cache.ICacheRefresher,System.Func{``0,System.Int32},``0[])">
            <summary>
                Notifies all servers of specified items removal, for a specified <see cref="T:Umbraco.Cms.Core.Cache.ICacheRefresher" />.
            </summary>
            <typeparam name="T">The type of the removed items.</typeparam>
            <param name="refresher">The ICacheRefresher.</param>
            <param name="getNumericId">A function returning the unique identifier of items.</param>
            <param name="instances">The removed items.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Sync.IServerMessenger.QueueRemove(Umbraco.Cms.Core.Cache.ICacheRefresher,System.Int32[])">
            <summary>
                Notifies all servers of specified items removal, for a specified <see cref="T:Umbraco.Cms.Core.Cache.ICacheRefresher" />.
            </summary>
            <param name="refresher">The ICacheRefresher.</param>
            <param name="numericIds">The unique identifiers of the removed items.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Sync.IServerMessenger.QueueRefresh(Umbraco.Cms.Core.Cache.ICacheRefresher,System.Int32[])">
            <summary>
                Notifies all servers of specified items invalidation, for a specified <see cref="T:Umbraco.Cms.Core.Cache.ICacheRefresher" />.
            </summary>
            <param name="refresher">The ICacheRefresher.</param>
            <param name="numericIds">The unique identifiers of the invalidated items.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Sync.IServerMessenger.QueueRefresh(Umbraco.Cms.Core.Cache.ICacheRefresher,System.Guid[])">
            <summary>
                Notifies all servers of specified items invalidation, for a specified <see cref="T:Umbraco.Cms.Core.Cache.ICacheRefresher" />.
            </summary>
            <param name="refresher">The ICacheRefresher.</param>
            <param name="guidIds">The unique identifiers of the invalidated items.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Sync.IServerMessenger.QueueRefreshAll(Umbraco.Cms.Core.Cache.ICacheRefresher)">
            <summary>
                Notifies all servers of a global invalidation for a specified <see cref="T:Umbraco.Cms.Core.Cache.ICacheRefresher" />.
            </summary>
            <param name="refresher">The ICacheRefresher.</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Sync.IServerRoleAccessor">
            <summary>
                Gets the current server's <see cref="T:Umbraco.Cms.Core.Sync.ServerRole" />
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Sync.IServerRoleAccessor.CurrentServerRole">
            <summary>
                Gets the role of the current server in the application environment.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Sync.ISyncBootStateAccessor">
            <summary>
                Retrieve the <see cref="T:Umbraco.Cms.Core.Sync.SyncBootState" /> for the application during startup
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Sync.ISyncBootStateAccessor.GetSyncBootState">
            <summary>
                Get the <see cref="T:Umbraco.Cms.Core.Sync.SyncBootState" />
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Sync.MessageType">
            <summary>
                The message type to be used for syncing across servers.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Sync.NonRuntimeLevelBootStateAccessor">
            <summary>
                Boot state implementation for when umbraco is not in the run state
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Sync.RefreshInstruction.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Sync.RefreshInstruction" /> class.
            </summary>
            <remarks>
                Need this public, parameter-less constructor so the web service messenger can de-serialize the instructions it
                receives.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Sync.RefreshInstruction.#ctor(System.Guid,Umbraco.Cms.Core.Sync.RefreshMethodType,System.Guid,System.Int32,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Sync.RefreshInstruction" /> class.
            </summary>
            <remarks>
                Need this public one so it can be de-serialized - used by the Json thing
                otherwise, should use GetInstructions(...)
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Sync.RefreshInstruction.#ctor(Umbraco.Cms.Core.Cache.ICacheRefresher,Umbraco.Cms.Core.Sync.RefreshMethodType,System.String,System.Int32)">
            <summary>
                A private constructor to create a new instance
            </summary>
            <param name="refresher"></param>
            <param name="refreshType"></param>
            <param name="json"></param>
            <param name="idCount">
                When the refresh method is <see cref="F:Umbraco.Cms.Core.Sync.RefreshMethodType.RefreshByIds" /> we know how many Ids are being refreshed
                so we know the instruction
                count which will be taken into account when we store this count in the database.
            </param>
        </member>
        <member name="P:Umbraco.Cms.Core.Sync.RefreshInstruction.RefreshType">
            <summary>
                Gets or sets the refresh action type.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Sync.RefreshInstruction.RefresherId">
            <summary>
                Gets or sets the refresher unique identifier.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Sync.RefreshInstruction.GuidId">
            <summary>
                Gets or sets the Guid data value.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Sync.RefreshInstruction.IntId">
            <summary>
                Gets or sets the int data value.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Sync.RefreshInstruction.JsonIds">
            <summary>
                Gets or sets the ids data value.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Sync.RefreshInstruction.JsonIdCount">
            <summary>
                Gets or sets the number of Ids contained in the JsonIds json value.
            </summary>
            <remarks>
                This is used to determine the instruction count per row.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Sync.RefreshInstruction.JsonPayload">
            <summary>
                Gets or sets the payload data value.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Sync.RefreshMethodType">
            <summary>
                Describes <see cref="T:Umbraco.Cms.Core.Sync.RefreshInstruction" /> refresh action type.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Sync.ServerRole">
            <summary>
                The role of a server in an application environment.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Sync.ServerRole.Unknown">
            <summary>
                The server role is unknown.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Sync.ServerRole.Single">
            <summary>
                The server is the single server of a single-server environment.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Sync.ServerRole.Subscriber">
            <summary>
                In a multi-servers environment, the server is a Subscriber server.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Sync.ServerRole.SchedulingPublisher">
            <summary>
                In a multi-servers environment, the server is the Scheduling Publisher.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Sync.SingleServerRoleAccessor">
            <summary>
                Can be used when Umbraco is definitely not operating in a Load Balanced scenario to micro-optimize some startup
                performance
            </summary>
            <remarks>
                The micro optimization is specifically to avoid a DB query just after the app starts up to determine the
                <see cref="T:Umbraco.Cms.Core.Sync.ServerRole" />
                which by default is done with scheduling publisher election by a database query. The master election process
                doesn't occur until just after startup
                so this micro optimization doesn't really affect the primary startup phase.
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Sync.SyncBootState.Unknown">
            <summary>
                Unknown state. Treat as WarmBoot
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Sync.SyncBootState.ColdBoot">
            <summary>
                Cold boot. No Sync state
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Sync.SyncBootState.WarmBoot">
            <summary>
                Warm boot. Sync state present
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Telemetry.ISiteIdentifierService">
            <summary>
                Used to get and create the site identifier
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Telemetry.ISiteIdentifierService.TryGetSiteIdentifier(System.Guid@)">
            <summary>
                Tries to get the site identifier
            </summary>
            <returns>True if success.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Telemetry.ISiteIdentifierService.TryCreateSiteIdentifier(System.Guid@)">
            <summary>
                Creates the site identifier and writes it to config.
            </summary>
            <param name="createdGuid">asd.</param>
            <returns>True if success.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Telemetry.ISiteIdentifierService.TryGetOrCreateSiteIdentifier(System.Guid@)">
            <summary>
                Tries to get the site identifier or otherwise create it if it doesn't exist.
            </summary>
            <param name="siteIdentifier">The out parameter for the existing or create site identifier.</param>
            <returns>True if success.</returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Telemetry.ITelemetryService">
            <summary>
                Service which gathers the data for telemetry reporting
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Telemetry.ITelemetryService.GetTelemetryReportDataAsync">
            <summary>
                Attempts to get the <see cref="T:Umbraco.Cms.Core.Telemetry.Models.TelemetryReportData" />
            </summary>
            <remarks>
                May return null if the site is in an unknown state.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Telemetry.Models.PackageTelemetry">
            <summary>
            Serializable class containing information about an installed package.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Telemetry.Models.PackageTelemetry.Id">
            <summary>
            Gets or sets the identifier of the installed package.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Telemetry.Models.PackageTelemetry.Name">
            <summary>
            Gets or sets the name of the installed package.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.Telemetry.Models.PackageTelemetry.Version">
            <summary>
            Gets or sets the version of the installed package.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="T:Umbraco.Cms.Core.Telemetry.Models.TelemetryReportData">
            <summary>
                Serializable class containing telemetry information.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Telemetry.Models.TelemetryReportData.Id">
            <summary>
                Gets or sets a random GUID to prevent an instance posting multiple times pr. day.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Telemetry.Models.TelemetryReportData.Version">
            <summary>
                Gets or sets the Umbraco CMS version.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Telemetry.Models.TelemetryReportData.Packages">
            <summary>
                Gets or sets an enumerable containing information about packages.
            </summary>
            <remarks>
                Contains only the name and version of the packages, unless no version is specified.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Telemetry.SiteIdentifierService">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Telemetry.SiteIdentifierService.TryGetSiteIdentifier(System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Telemetry.SiteIdentifierService.TryGetOrCreateSiteIdentifier(System.Guid@)">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Telemetry.SiteIdentifierService.TryCreateSiteIdentifier(System.Guid@)">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.Telemetry.TelemetryService">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Telemetry.TelemetryService.#ctor(Umbraco.Cms.Core.Services.IPackagingService,Umbraco.Cms.Core.Configuration.IUmbracoVersion,Umbraco.Cms.Core.Telemetry.ISiteIdentifierService,Umbraco.Cms.Core.Services.IUsageInformationService,Umbraco.Cms.Core.Services.IMetricsConsentService)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Telemetry.TelemetryService" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Telemetry.TelemetryService.GetTelemetryReportDataAsync">
            <inheritdoc />
        </member>
        <member name="M:Umbraco.Cms.Core.Templates.HtmlImageSourceParser.FindUdisFromDataAttributes(System.String)">
            <summary>
                Parses out media UDIs from an html string based on 'data-udi' html attributes
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Templates.HtmlImageSourceParser.EnsureImageSources(System.String)">
            <summary>
                Parses the string looking for Umbraco image tags and updates them to their up-to-date image sources.
            </summary>
            <param name="text"></param>
            <returns></returns>
            <remarks>Umbraco image tags are identified by their data-udi attributes</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Templates.HtmlImageSourceParser.RemoveImageSources(System.String)">
            <summary>
                Removes media URLs from &lt;img&gt; tags where a data-udi attribute is present
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Cms.Core.Templates.HtmlLocalLinkParser">
            <summary>
                Utility class used to parse internal links
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Templates.HtmlLocalLinkParser.EnsureInternalLinks(System.String,System.Boolean)">
            <summary>
                Parses the string looking for the {localLink} syntax and updates them to their correct links.
            </summary>
            <param name="text"></param>
            <param name="preview"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Templates.HtmlLocalLinkParser.EnsureInternalLinks(System.String)">
            <summary>
                Parses the string looking for the {localLink} syntax and updates them to their correct links.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Templates.HtmlUrlParser.EnsureUrls(System.String)">
            <summary>
                The RegEx matches any HTML attribute values that start with a tilde (~), those that match are passed to ResolveUrl
                to replace the tilde with the application path.
            </summary>
            <param name="text"></param>
            <returns></returns>
            <remarks>
                When used with a Virtual-Directory set-up, this would resolve all URLs correctly.
                The recommendation is that the "ResolveUrlsFromTextString" option (in umbracoSettings.config) is set to false for
                non-Virtual-Directory installs.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Templates.ITemplateRenderer">
            <summary>
                This is used purely for the RenderTemplate functionality in Umbraco
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Templates.IUmbracoComponentRenderer">
            <summary>
                Methods used to render umbraco components as HTML in templates
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Templates.IUmbracoComponentRenderer.RenderTemplateAsync(System.Int32,System.Nullable{System.Int32})">
            <summary>
                Renders the template for the specified pageId and an optional altTemplateId
            </summary>
            <param name="contentId">The content id</param>
            <param name="altTemplateId">If not specified, will use the template assigned to the node</param>
        </member>
        <member name="T:Umbraco.Cms.Core.Templates.UmbracoComponentRenderer">
            <summary>
                Methods used to render umbraco components as HTML in templates
            </summary>
            <remarks>
                Used by UmbracoHelper
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Templates.UmbracoComponentRenderer.#ctor(Umbraco.Cms.Core.Templates.ITemplateRenderer)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Templates.UmbracoComponentRenderer" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Templates.UmbracoComponentRenderer.RenderTemplateAsync(System.Int32,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="T:Umbraco.Cms.Core.TimedScope">
            <summary>
            Makes a code block timed (take at least a certain amount of time). This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.TimedScope.Elapsed">
            <summary>
            Gets the elapsed time.
            </summary>
            <value>
            The elapsed time.
            </value>
        </member>
        <member name="P:Umbraco.Cms.Core.TimedScope.Remaining">
            <summary>
            Gets the remaining time.
            </summary>
            <value>
            The remaining time.
            </value>
        </member>
        <member name="M:Umbraco.Cms.Core.TimedScope.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.TimedScope" /> class.
            </summary>
            <param name="millisecondsDuration">The number of milliseconds the scope should at least take.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.TimedScope.#ctor(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.TimedScope" /> class.
            </summary>
            <param name="millisecondsDuration">The number of milliseconds the scope should at least take.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.TimedScope.#ctor(System.Int64,System.TimeProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.TimedScope" /> class.
            </summary>
            <param name="millisecondsDuration">The number of milliseconds the scope should at least take.</param>
            <param name="timeProvider">The time provider.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.TimedScope.#ctor(System.Int64,System.TimeProvider,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.TimedScope" /> class.
            </summary>
            <param name="millisecondsDuration">The number of milliseconds the scope should at least take.</param>
            <param name="timeProvider">The time provider.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.TimedScope.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.TimedScope"/> class.
            </summary>
            <param name="duration">The duration the scope should at least take.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.TimedScope.#ctor(System.TimeSpan,System.TimeProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.TimedScope" /> class.
            </summary>
            <param name="duration">The duration the scope should at least take.</param>
            <param name="timeProvider">The time provider.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.TimedScope.#ctor(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.TimedScope" /> class.
            </summary>
            <param name="duration">The duration the scope should at least take.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.TimedScope.#ctor(System.TimeSpan,System.TimeProvider,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.TimedScope" /> class.
            </summary>
            <param name="duration">The duration the scope should at least take.</param>
            <param name="timeProvider">The time provider.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.TimedScope.Cancel">
            <summary>
            Cancels the timed scope.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.TimedScope.CancelAsync">
            <summary>
            Cancels the timed scope asynchronously.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.TimedScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            This will block using <see cref="M:System.Threading.Thread.Sleep(System.TimeSpan)" /> until the remaining time has elapsed, if not cancelled.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.TimedScope.DisposeAsync">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.
            </summary>
            <returns>
            A task that represents the asynchronous dispose operation.
            </returns>
            <remarks>
            This will delay using <see cref="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.TimeProvider,System.Threading.CancellationToken)" /> until the remaining time has elapsed, if not cancelled.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Udi">
            <summary>
                Represents an entity identifier.
            </summary>
            <remarks>An Udi can be fully qualified or "closed" eg umb://document/{guid} or "open" eg umb://document.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Udi.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the Udi class.
            </summary>
            <param name="entityType">The entity type part of the identifier.</param>
            <param name="stringValue">The string value of the identifier.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Udi.#ctor(System.Uri)">
            <summary>
                Initializes a new instance of the Udi class.
            </summary>
            <param name="uriValue">The uri value of the identifier.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.Udi.EntityType">
            <summary>
                Gets the entity type part of the identifier.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Udi.IsRoot">
            <summary>
                Gets a value indicating whether this Udi is a root Udi.
            </summary>
            <remarks>A root Udi points to the "root of all things" for a given entity type, e.g. the content tree root.</remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Udi.Create(System.String)">
            <summary>
                Creates a root Udi for an entity type.
            </summary>
            <param name="entityType">The entity type.</param>
            <returns>The root Udi for the entity type.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Udi.Create(System.String,System.String)">
            <summary>
                Creates a string Udi.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="id">The identifier.</param>
            <returns>The string Udi for the entity type and identifier.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Udi.Create(System.String,System.Guid)">
            <summary>
                Creates a Guid Udi.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="id">The identifier.</param>
            <returns>The Guid Udi for the entity type and identifier.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Udi.EnsureNotRoot">
            <summary>
                Ensures that this Udi is not a root Udi.
            </summary>
            <returns>This Udi.</returns>
            <exception cref="T:System.Exception">When this Udi is a Root Udi.</exception>
        </member>
        <member name="M:Umbraco.Cms.Core.UdiParser.ResetUdiTypes">
            <summary>
                Internal API for tests to resets all udi types back to only the known udi types.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.UdiParser.Parse(System.String)">
            <summary>
                Converts the string representation of an entity identifier into the equivalent Udi instance.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>An Udi instance that contains the value that was parsed.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.UdiParser.Parse(System.String,System.Boolean)">
            <summary>
                Converts the string representation of an entity identifier into the equivalent Udi instance.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="knownTypes">A value indicating whether to only deal with known types.</param>
            <returns>An Udi instance that contains the value that was parsed.</returns>
            <remarks>
                <para>
                    If <paramref name="knownTypes" /> is <c>true</c>, and the string could not be parsed because
                    the entity type was not known, the method succeeds but sets <c>udi</c>to an
                    <see cref="T:Umbraco.Cms.Core.UnknownTypeUdi" /> value.
                </para>
                <para>
                    If <paramref name="knownTypes" /> is <c>true</c>, assemblies are not scanned for types,
                    and therefore only builtin types may be known. Unless scanning already took place.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.UdiParser.TryParse(System.String,Umbraco.Cms.Core.Udi@)">
            <summary>
                Converts the string representation of an entity identifier into the equivalent Udi instance.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="udi">An Udi instance that contains the value that was parsed.</param>
            <returns>A boolean value indicating whether the string could be parsed.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.UdiParser.TryParse``1(System.String,``0@)">
            <summary>
                Converts the string representation of an entity identifier into the equivalent Udi instance.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="udi">An Udi instance that contains the value that was parsed.</param>
            <returns>A boolean value indicating whether the string could be parsed.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.UdiParser.TryParse(System.String,System.Boolean,Umbraco.Cms.Core.Udi@)">
            <summary>
                Converts the string representation of an entity identifier into the equivalent Udi instance.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="knownTypes">A value indicating whether to only deal with known types.</param>
            <param name="udi">An Udi instance that contains the value that was parsed.</param>
            <returns>A boolean value indicating whether the string could be parsed.</returns>
            <remarks>
                <para>
                    If <paramref name="knownTypes" /> is <c>true</c>, and the string could not be parsed because
                    the entity type was not known, the method returns <c>false</c> but still sets <c>udi</c>
                    to an <see cref="T:Umbraco.Cms.Core.UnknownTypeUdi" /> value.
                </para>
                <para>
                    If <paramref name="knownTypes" /> is <c>true</c>, assemblies are not scanned for types,
                    and therefore only builtin types may be known. Unless scanning already took place.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.UdiParser.RegisterUdiType(System.String,Umbraco.Cms.Core.UdiType)">
            <summary>
                Registers a custom entity type.
            </summary>
            <param name="entityType"></param>
            <param name="udiType"></param>
        </member>
        <member name="T:Umbraco.Cms.Core.UdiRange">
            <summary>
                Represents a <see cref="T:Umbraco.Cms.Core.Udi" /> range.
            </summary>
            <remarks>
                <remarks>
                    A Udi range is composed of a <see cref="T:Umbraco.Cms.Core.Udi" /> which represents the base of the range,
                    plus a selector that can be "." (the Udi), ".*" (the Udi and its children), ".**" (the udi and
                    its descendants, "*" (the children of the Udi), and "**" (the descendants of the Udi).
                </remarks>
                <remarks>The Udi here can be a closed entity, or an open entity.</remarks>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.UdiRange.#ctor(Umbraco.Cms.Core.Udi,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.UdiRange" /> class with a <see cref="T:Umbraco.Cms.Core.Udi" /> and an optional
                selector.
            </summary>
            <param name="udi">A <see cref="P:Umbraco.Cms.Core.UdiRange.Udi" />.</param>
            <param name="selector">An optional selector.</param>
        </member>
        <member name="P:Umbraco.Cms.Core.UdiRange.Udi">
            <summary>
                Gets the <see cref="P:Umbraco.Cms.Core.UdiRange.Udi" /> for this range.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.UdiRange.Selector">
            <summary>
                Gets or sets the selector for this range.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.UdiRange.EntityType">
            <summary>
                Gets the entity type of the <see cref="T:Umbraco.Cms.Core.Udi" /> for this range.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.UdiType">
            <summary>
                Defines Udi types.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.UdiTypeConverter">
            <summary>
                A custom type converter for UDI
            </summary>
            <remarks>
                Primarily this is used so that WebApi can auto-bind a string parameter to a UDI instance
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.UmbracoContextReference">
            <summary>
                Represents a reference to an <see cref="P:Umbraco.Cms.Core.UmbracoContextReference.UmbracoContext" /> instance.
            </summary>
            <remarks>
                <para>
                    A reference points to an <see cref="P:Umbraco.Cms.Core.UmbracoContextReference.UmbracoContext" /> and it may own it (when it
                    is a root reference) or just reference it. A reference must be disposed after it has
                    been used. Disposing does nothing if the reference is not a root reference. Otherwise,
                    it disposes the <see cref="P:Umbraco.Cms.Core.UmbracoContextReference.UmbracoContext" /> and clears the
                    <see cref="T:Umbraco.Cms.Core.Web.IUmbracoContextAccessor" />.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.UmbracoContextReference.#ctor(Umbraco.Cms.Core.Web.IUmbracoContext,System.Boolean,Umbraco.Cms.Core.Web.IUmbracoContextAccessor)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.UmbracoContextReference" /> class.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.UmbracoContextReference.UmbracoContext">
            <summary>
                Gets the <see cref="P:Umbraco.Cms.Core.UmbracoContextReference.UmbracoContext" />.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.UmbracoContextReference.IsRoot">
            <summary>
                Gets a value indicating whether the reference is a root reference.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Web.HybridUmbracoContextAccessor">
            <summary>
                Implements a hybrid <see cref="T:Umbraco.Cms.Core.Web.IUmbracoContextAccessor" />.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Web.HybridUmbracoContextAccessor.#ctor(Umbraco.Cms.Core.Cache.IRequestCache)">
            <summary>
                Initializes a new instance of the <see cref="T:Umbraco.Cms.Core.Web.HybridUmbracoContextAccessor" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Web.HybridUmbracoContextAccessor.TryGetUmbracoContext(Umbraco.Cms.Core.Web.IUmbracoContext@)">
            <summary>
                Tries to get the <see cref="T:Umbraco.Cms.Core.Web.IUmbracoContext" /> object.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Web.HybridUmbracoContextAccessor.Clear">
            <summary>
                Clears the current <see cref="T:Umbraco.Cms.Core.Web.IUmbracoContext" /> object.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Web.HybridUmbracoContextAccessor.Set(Umbraco.Cms.Core.Web.IUmbracoContext)">
            <summary>
                Sets the <see cref="T:Umbraco.Cms.Core.Web.IUmbracoContext" /> object.
            </summary>
            <param name="umbracoContext"></param>
        </member>
        <member name="T:Umbraco.Cms.Core.Web.ICookieManager">
            <summary>
            Defines cookie related operations.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Web.ICookieManager.ExpireCookie(System.String)">
            <summary>
            Expires the cookie with the specified name.
            </summary>
            <param name="cookieName">The cookie name.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Web.ICookieManager.GetCookieValue(System.String)">
            <summary>
            Gets the value of the cookie with the specified name.
            </summary>
            <param name="cookieName">The cookie name.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Web.ICookieManager.SetCookieValue(System.String,System.String)">
            <summary>
            Sets the value of a cookie with the specified name.
            </summary>
            <param name="cookieName">The cookie name.</param>
            <param name="value">The cookie value.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Web.ICookieManager.SetCookieValue(System.String,System.String,System.Boolean)">
            <summary>
            Sets the value of a cookie with the specified name.
            </summary>
            <param name="cookieName">The cookie name.</param>
            <param name="value">The cookie value.</param>
            <param name="httpOnly">Indicates whether the created cookie should be marked as HTTP only.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Web.ICookieManager.SetCookieValue(System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Sets the value of a cookie with the specified name.
            </summary>
            <param name="cookieName">The cookie name.</param>
            <param name="value">The cookie value.</param>
            <param name="httpOnly">Indicates whether the created cookie should be marked as HTTP only.</param>
            <param name="secure">Indicates whether the created cookie should be marked as secure.</param>
            <param name="sameSiteMode">Indicates the created cookie's same site status.</param>
            <remarks>
            The value provided by <paramref name="sameSiteMode"/> should match the enum values available from
            Microsoft.AspNetCore.Http.SameSiteMode.
            This hasn't been used as the parameter directly to avoid a dependency on Microsoft.AspNetCore.Http in
            the core project.
            </remarks>
        </member>
        <member name="M:Umbraco.Cms.Core.Web.ICookieManager.HasCookie(System.String)">
            <summary>
            Determines whether a cookie with the specified name exists.
            </summary>
            <param name="cookieName">The cookie name.</param>
        </member>
        <member name="M:Umbraco.Cms.Core.Web.IRequestAccessor.GetRequestValue(System.String)">
            <summary>
                Returns the request/form/querystring value for the given name
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Web.IRequestAccessor.GetQueryStringValue(System.String)">
            <summary>
                Returns the query string value for the given name
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Web.IRequestAccessor.GetRequestUrl">
            <summary>
                Returns the current request uri
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Web.IUmbracoContext.ObjectCreated">
            <summary>
                Gets the DateTime this instance was created.
            </summary>
            <remarks>
                Used internally for performance calculations, the ObjectCreated DateTime is set as soon as this
                object is instantiated which in the web site is created during the BeginRequest phase.
                We can then determine complete rendering time from that.
            </remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Web.IUmbracoContext.OriginalRequestUrl">
            <summary>
                Gets the uri that is handled by ASP.NET after server-side rewriting took place.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Web.IUmbracoContext.CleanedUmbracoUrl">
            <summary>
                Gets the cleaned up url that is handled by Umbraco.
            </summary>
            <remarks>That is, lowercase, no trailing slash after path, no .aspx...</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Web.IUmbracoContext.Content">
            <summary>
                Gets the published content cache.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Web.IUmbracoContext.Media">
            <summary>
                Gets the published media cache.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Web.IUmbracoContext.Domains">
            <summary>
                Gets the domains cache.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Web.IUmbracoContext.PublishedRequest">
            <summary>
                Gets or sets the PublishedRequest object
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Web.IUmbracoContext.IsDebug">
            <summary>
                Gets a value indicating whether the request has debugging enabled
            </summary>
            <value><c>true</c> if this instance is debug; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Cms.Core.Web.IUmbracoContext.InPreviewMode">
            <summary>
                Gets a value indicating whether the current user is in a preview mode and browsing the site (ie. not in the admin UI)
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Web.IUmbracoContextAccessor">
            <summary>
                Provides access to a TryGetUmbracoContext bool method that will return true if the "current" <see cref="T:Umbraco.Cms.Core.Web.IUmbracoContext" /> is not null.
                Provides a Clear() method that will clear the current <see cref="T:Umbraco.Cms.Core.Web.IUmbracoContext" /> object.
                Provides a Set() method that til set the current <see cref="T:Umbraco.Cms.Core.Web.IUmbracoContext" /> object.
            </summary>
        </member>
        <member name="T:Umbraco.Cms.Core.Web.IUmbracoContextFactory">
            <summary>
                Creates and manages <see cref="T:Umbraco.Cms.Core.Web.IUmbracoContext" /> instances.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Web.IUmbracoContextFactory.EnsureUmbracoContext">
            <summary>
                Ensures that a current <see cref="T:Umbraco.Cms.Core.Web.IUmbracoContext" /> exists.
            </summary>
            <remarks>
                <para>
                    If an <see cref="T:Umbraco.Cms.Core.Web.IUmbracoContext" /> is already registered in the
                    <see cref="T:Umbraco.Cms.Core.Web.IUmbracoContextAccessor" />, returns a non-root reference to it.
                    Otherwise, create a new instance, registers it, and return a root reference
                    to it.
                </para>
            </remarks>
            <example>
                using (var contextReference = contextFactory.EnsureUmbracoContext())
                {
                var umbracoContext = contextReference.UmbracoContext;
                // use umbracoContext...
                }
            </example>
        </member>
        <member name="T:Umbraco.Cms.Core.Web.Mvc.PluginControllerMetadata">
            <summary>
                Represents some metadata about the controller
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Web.Mvc.PluginControllerMetadata.IsBackOffice">
            <summary>
                This is determined by another attribute [IsBackOffice] which slightly modifies the route path
                allowing us to determine if it is indeed a back office request or not
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Webhooks.WebhookEventAttribute.Name">
            <summary>
                Gets the friendly name of the event.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Webhooks.WebhookEventAttribute.EventType">
            <summary>
                Gets the type of event.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Webhooks.WebhookEventBase`1.ProcessWebhooks(`0,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Models.IWebhook},System.Threading.CancellationToken)">
            <summary>
             Process the webhooks for the given notification.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Webhooks.WebhookEventBase`1.ShouldFireWebhookForNotification(`0)">
            <summary>
             should webhooks fire for this notification.
            </summary>
            <returns>true if webhooks should be fired.</returns>
        </member>
        <member name="M:Umbraco.Cms.Core.Webhooks.WebhookEventBase`1.ConvertNotificationToRequestPayload(`0)">
            <summary>
            Use this method if you wish to change the shape of the object to be serialised
            for the JSON webhook payload.
            For example excluding sensitive data
            </summary>
            <param name="notification"></param>
            <returns></returns>
        </member>
        <member name="F:Umbraco.Cms.Core.Webhooks.WebhookPayloadType.Minimal">
            <summary>
            Returns the minimal information required to identify the resources affected, providing identifiers to support retrieval of additional detail about the event from the source system.
            </summary>
            <remarks>
            Expected to be the default option from Umbraco 17.
            </remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Webhooks.WebhookPayloadType.Extended">
            <summary>
            Provides the minimal payload extended for certain webhooks with relevant information ready to consume. For example, content delivery API models are provided for content and media save and publish events.
            </summary>
        </member>
        <member name="F:Umbraco.Cms.Core.Webhooks.WebhookPayloadType.Legacy">
            <summary>
            Legacy payloads containing a mix of minimal information and full service models with legacy integer references.
            </summary>
            <remarks>
            This is the default option for Umbraco 16 and will be available as a configurable option for Umbraco 17.
            Expected to be removed in Umbraco 18.
            </remarks>
        </member>
        <member name="T:Umbraco.Cms.Core.Xml.XmlNamespaces">
            <summary>
                Provides public constants for wellknown XML namespaces.
            </summary>
            <remarks>Author: Daniel Cazzulino, <a href="http://clariusconsulting.net/kzu">blog</a></remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Xml.XmlNamespaces.Xml">
            <summary>
                The public XML 1.0 namespace.
            </summary>
            <remarks>See http://www.w3.org/TR/2004/REC-xml-20040204/</remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Xml.XmlNamespaces.XmlNs">
            <summary>
                Public Xml Namespaces specification namespace.
            </summary>
            <remarks>See http://www.w3.org/TR/REC-xml-names/</remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Xml.XmlNamespaces.XmlNsPrefix">
            <summary>
                Public Xml Namespaces prefix.
            </summary>
            <remarks>See http://www.w3.org/TR/REC-xml-names/</remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Xml.XmlNamespaces.Xsi">
            <summary>
                XML Schema instance namespace.
            </summary>
            <remarks>See http://www.w3.org/TR/xmlschema-1/</remarks>
        </member>
        <member name="F:Umbraco.Cms.Core.Xml.XmlNamespaces.Xsd">
            <summary>
                XML 1.0 Schema namespace.
            </summary>
            <remarks>See http://www.w3.org/TR/xmlschema-1/</remarks>
        </member>
        <member name="P:Umbraco.Cms.Core.Xml.XmlNodeListFactory.XmlNodeListIterator.Done">
            <summary>
                Flags that the iterator has been consumed.
            </summary>
        </member>
        <member name="P:Umbraco.Cms.Core.Xml.XmlNodeListFactory.XmlNodeListIterator.CurrentPosition">
            <summary>
                Current count of nodes in the iterator (read so far).
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Xml.XmlNodeListFactory.XmlNodeListIterator.ReadToEnd">
            <summary>
                Reads the entire iterator.
            </summary>
        </member>
        <member name="M:Umbraco.Cms.Core.Xml.XmlNodeListFactory.XmlNodeListIterator.ReadTo(System.Int32)">
            <summary>
                Reads up to the specified index, or until the
                iterator is consumed.
            </summary>
        </member>
        <member name="T:Umbraco.Extensions.AppCacheExtensions">
            <summary>
                Extensions for strongly typed access
            </summary>
        </member>
        <member name="T:Umbraco.Extensions.DistributedCacheExtensions">
            <summary>
            Extension methods for <see cref="T:Umbraco.Cms.Core.Cache.DistributedCache" />.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.TypeFinderExtensions.FindClassesOfTypeWithAttribute``2(Umbraco.Cms.Core.Composing.ITypeFinder,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
                Finds any classes derived from the type T that contain the attribute TAttribute
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TAttribute"></typeparam>
            <param name="typeFinder"></param>
            <param name="assemblies"></param>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.TypeFinderExtensions.FindClassesOfType``1(Umbraco.Cms.Core.Composing.ITypeFinder,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
                Returns all types found of in the assemblies specified of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="typeFinder"></param>
            <param name="assemblies"></param>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.TypeFinderExtensions.FindClassesWithAttribute``1(Umbraco.Cms.Core.Composing.ITypeFinder,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
                Finds the classes with attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="typeFinder"></param>
            <param name="assemblies">The assemblies.</param>
            <param name="onlyConcreteClasses">if set to <c>true</c> only concrete classes.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentSettingsExtensions.IsFileAllowedForUpload(Umbraco.Cms.Core.Configuration.Models.ContentSettings,System.String)">
            <summary>
            Determines if file extension is allowed for upload based on (optional) allow list and deny list held in settings.
            Disallowed file extensions are only considered if there are no allowed file extensions.
            </summary>
            <param name="contentSettings">The content settings.</param>
            <param name="extension">The file extension.</param>
            <returns>
              <c>true</c> if the file extension is allowed for upload; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentSettingsExtensions.GetConfig(Umbraco.Cms.Core.Configuration.Models.ContentSettings,System.String)">
            <summary>
            Gets the auto-fill configuration for a specified property alias.
            </summary>
            <param name="contentSettings">The content settings.</param>
            <param name="propertyTypeAlias">The property type alias.</param>
            <returns>
            The auto-fill configuration for the specified property alias or <c>null</c> if not configured.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.GlobalSettingsExtensions.GetBackOfficePath(Umbraco.Cms.Core.Configuration.Models.GlobalSettings,Umbraco.Cms.Core.Hosting.IHostingEnvironment)">
            <summary>
                Returns the absolute path for the Umbraco back office
            </summary>
            <param name="globalSettings"></param>
            <param name="hostingEnvironment"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.GlobalSettingsExtensions.GetUmbracoMvcArea(Umbraco.Cms.Core.Configuration.Models.GlobalSettings,Umbraco.Cms.Core.Hosting.IHostingEnvironment)">
            <summary>
                This returns the string of the MVC Area route.
            </summary>
            <remarks>
                This will return the MVC area that we will route all custom routes through like surface controllers, etc...
                We will use the 'Path' (default ~/umbraco) to create it but since it cannot contain '/' and people may specify a
                path of ~/asdf/asdf/admin
                we will convert the '/' to '-' and use that as the path. its a bit lame but will work.
                We also make sure that the virtual directory (SystemDirectories.Root) is stripped off first, otherwise we'd end up
                with something
                like "MyVirtualDirectory-Umbraco" instead of just "Umbraco".
            </remarks>
        </member>
        <member name="T:Umbraco.Extensions.LoggingSettingsExtensions">
            <summary>
            Extension methods for <see cref="T:Umbraco.Cms.Core.Configuration.Models.LoggingSettings" />.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.LoggingSettingsExtensions.GetAbsoluteLoggingPath(Umbraco.Cms.Core.Configuration.Models.LoggingSettings,Microsoft.Extensions.Hosting.IHostEnvironment)">
            <summary>
            Gets the absolute logging path (maps a virtual path to the applications content root).
            </summary>
            <param name="loggingSettings">The logging settings.</param>
            <param name="hostEnvironment">The host environment.</param>
            <returns>
            The absolute logging path.
            </returns>
        </member>
        <member name="T:Umbraco.Extensions.ModelsModeExtensions">
            <summary>
                Provides extensions for the <see cref="T:Umbraco.Cms.Core.Configuration.ModelsMode" /> enumeration.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ModelsModeExtensions.IsAuto(Umbraco.Cms.Core.Configuration.ModelsMode)">
            <summary>
                Gets a value indicating whether the mode is *Auto.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ModelsModeExtensions.IsAutoNotInMemory(Umbraco.Cms.Core.Configuration.ModelsMode)">
            <summary>
                Gets a value indicating whether the mode is *Auto but not InMemory.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ModelsModeExtensions.SupportsExplicitGeneration(Umbraco.Cms.Core.Configuration.ModelsMode)">
            <summary>
                Gets a value indicating whether the mode supports explicit manual generation.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ServiceCollectionExtensions.AddUnique``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Adds a service of type <typeparamref name="TService" /> with an implementation type of
                <typeparamref name="TImplementing" /> to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <remarks>
                Removes all previous registrations for the type <typeparamref name="TService" />.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.ServiceCollectionExtensions.AddUnique``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
                Adds a service of type <typeparamref name="TService" /> with an implementation type of
                <typeparamref name="TImplementing" /> to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <remarks>
                Removes all previous registrations for the type <typeparamref name="TService" />.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.ServiceCollectionExtensions.AddMultipleUnique``3(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Adds services of types <typeparamref name="TService1" /> &amp; <typeparamref name="TService2" /> with a shared
                implementation type of <typeparamref name="TImplementing" /> to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <remarks>
                Removes all previous registrations for the types <typeparamref name="TService1" /> &amp;
                <typeparamref name="TService2" />.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.ServiceCollectionExtensions.AddMultipleUnique``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Adds services of types <typeparamref name="TService1"/> &amp; <typeparamref name="TService2"/> with a shared implementation type of <typeparamref name="TImplementing"/> to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
            <remarks>
            Removes all previous registrations for the types <typeparamref name="TService1"/> &amp; <typeparamref name="TService2"/>.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.ServiceCollectionExtensions.AddUnique``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})">
            <summary>
                Adds a service of type <typeparamref name="TService" /> with an implementation factory method to the specified
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <remarks>
                Removes all previous registrations for the type <typeparamref name="TService" />.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.ServiceCollectionExtensions.AddUnique``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Adds a service of type <typeparamref name="TService"/> with an implementation factory method to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
            <remarks>
            Removes all previous registrations for the type <typeparamref name="TService"/>.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.ServiceCollectionExtensions.AddUnique(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Object)">
            <summary>
                Adds a singleton service of the type specified by <paramref name="serviceType" /> to the specified
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <remarks>
                Removes all previous registrations for the type specified by <paramref name="serviceType" />.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.ServiceCollectionExtensions.AddUnique``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0)">
            <summary>
                Adds a singleton service of type <typeparamref name="TService" /> to the specified
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <remarks>
                Removes all previous registrations for the type type <typeparamref name="TService" />.
            </remarks>
        </member>
        <member name="T:Umbraco.Extensions.ServiceProviderExtensions">
            <summary>
                Provides extension methods to the <see cref="T:System.IServiceProvider" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ServiceProviderExtensions.CreateInstance``1(System.IServiceProvider,System.Object[])">
            <summary>
                Creates an instance with arguments.
            </summary>
            <typeparam name="T">The type of the instance.</typeparam>
            <param name="serviceProvider">The factory.</param>
            <param name="args">Arguments.</param>
            <returns>An instance of the specified type.</returns>
            <remarks>
                <para>Throws an exception if the factory failed to get an instance of the specified type.</para>
                <para>The arguments are used as dependencies by the factory.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.ServiceProviderExtensions.CreateInstance(System.IServiceProvider,System.Type,System.Object[])">
            <summary>
                Creates an instance of a service, with arguments.
            </summary>
            <param name="serviceProvider">The <see cref="T:System.IServiceProvider" />.</param>
            <param name="type">The type of the instance.</param>
            <param name="args">Named arguments.</param>
            <returns>An instance of the specified type.</returns>
            <remarks>
                <para>The instance type does not need to be registered into the factory.</para>
                <para>
                    The arguments are used as dependencies by the factory. Other dependencies
                    are retrieved from the factory.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.AssemblyExtensions.GetRootDirectorySafe(System.Reflection.Assembly)">
            <summary>
                Utility method that returns the path to the root of the application, by getting the path to where the assembly
                where this
                method is included is present, then traversing until it's past the /bin directory. Ie. this makes it work
                even if the assembly is in a /bin/debug or /bin/release folder
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.AssemblyExtensions.GetAssemblyFile(System.Reflection.Assembly)">
            <summary>
                Returns the file used to load the assembly
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.AssemblyExtensions.IsAppCodeAssembly(System.Reflection.Assembly)">
            <summary>
                Returns true if the assembly is the App_Code assembly
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.AssemblyExtensions.IsGlobalAsaxAssembly(System.Reflection.Assembly)">
            <summary>
                Returns true if the assembly is the compiled global asax.
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.AssemblyExtensions.GetAssemblyFile(System.Reflection.AssemblyName)">
            <summary>
                Returns the file used to load the assembly
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.AssemblyExtensions.TryGetInformationalVersion(System.Reflection.Assembly,System.String@)">
            <summary>
            Gets the assembly informational version for the specified <paramref name="assembly" />.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="version">The assembly version.</param>
            <returns>
              <c>true</c> if the assembly information version is retrieved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Umbraco.Extensions.ClaimsIdentityExtensions.RequiredBackOfficeClaimTypes">
            <summary>
                Returns the required claim types for a back office identity
            </summary>
            <remarks>
                This does not include the role claim type or allowed apps type since that is a collection and in theory could be
                empty
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.ClaimsIdentityExtensions.GetUserId(System.Security.Principal.IIdentity)">
            <summary>
                Returns the user id from the <see cref="T:System.Security.Principal.IIdentity" /> of either the claim type
                <see cref="F:System.Security.Claims.ClaimTypes.NameIdentifier" /> or "sub"
            </summary>
            <param name="identity"></param>
            <returns>
                The string value of the user id if found otherwise null
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ClaimsIdentityExtensions.GetUserKey(System.Security.Principal.IIdentity)">
            <summary>
                Returns the user key from the <see cref="T:System.Security.Principal.IIdentity" /> of the claim type "sub".
            </summary>
            <param name="identity"></param>
            <returns>
                The string value of the user id if found otherwise null.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ClaimsIdentityExtensions.GetUserName(System.Security.Principal.IIdentity)">
            <summary>
                Returns the user name from the <see cref="T:System.Security.Principal.IIdentity" /> of either the claim type <see cref="F:System.Security.Claims.ClaimTypes.Name" /> or
                "preferred_username"
            </summary>
            <param name="identity"></param>
            <returns>
                The string value of the user name if found otherwise null
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ClaimsIdentityExtensions.FindFirstValue(System.Security.Claims.ClaimsIdentity,System.String)">
            <summary>
                Returns the first claim value found in the <see cref="T:System.Security.Claims.ClaimsIdentity" /> for the given claimType
            </summary>
            <param name="identity"></param>
            <param name="claimType"></param>
            <returns>
                The string value of the claim if found otherwise null
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ClaimsIdentityExtensions.VerifyBackOfficeIdentity(System.Security.Claims.ClaimsIdentity,System.Security.Claims.ClaimsIdentity@)">
            <summary>
                Verify that a ClaimsIdentity has all the required claim types
            </summary>
            <param name="identity"></param>
            <param name="verifiedIdentity">Verified identity wrapped in a ClaimsIdentity with BackOfficeAuthentication type</param>
            <returns>True if ClaimsIdentity</returns>
        </member>
        <member name="M:Umbraco.Extensions.ClaimsIdentityExtensions.AddRequiredClaims(System.Security.Claims.ClaimsIdentity,System.String,System.Guid,System.String,System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Add the required claims to be a BackOffice ClaimsIdentity
            </summary>
            <param name="identity">this</param>
            <param name="userId">The users Id</param>
            <param name="userKey">The users key</param>
            <param name="username">Username</param>
            <param name="realName">Real name</param>
            <param name="startContentNodes">Start content nodes</param>
            <param name="startMediaNodes">Start media nodes</param>
            <param name="culture">The locality of the user</param>
            <param name="securityStamp">Security stamp</param>
            <param name="allowedApps">Allowed apps</param>
            <param name="roles">Roles</param>
        </member>
        <member name="M:Umbraco.Extensions.ClaimsIdentityExtensions.GetStartContentNodes(System.Security.Claims.ClaimsIdentity)">
            <summary>
                Get the start content nodes from a ClaimsIdentity
            </summary>
            <param name="identity"></param>
            <returns>Array of start content nodes</returns>
        </member>
        <member name="M:Umbraco.Extensions.ClaimsIdentityExtensions.GetStartMediaNodes(System.Security.Claims.ClaimsIdentity)">
            <summary>
                Get the start media nodes from a ClaimsIdentity
            </summary>
            <param name="identity"></param>
            <returns>Array of start media nodes</returns>
        </member>
        <member name="M:Umbraco.Extensions.ClaimsIdentityExtensions.GetAllowedApplications(System.Security.Claims.ClaimsIdentity)">
            <summary>
                Get the allowed applications from a ClaimsIdentity
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.ClaimsIdentityExtensions.GetId(System.Security.Claims.ClaimsIdentity)">
            <summary>
                Get the user ID from a ClaimsIdentity
            </summary>
            <param name="identity"></param>
            <returns>User ID as integer</returns>
        </member>
        <member name="M:Umbraco.Extensions.ClaimsIdentityExtensions.GetRealName(System.Security.Claims.ClaimsIdentity)">
            <summary>
                Get the real name belonging to the user from a ClaimsIdentity
            </summary>
            <param name="identity"></param>
            <returns>Real name of the user</returns>
        </member>
        <member name="M:Umbraco.Extensions.ClaimsIdentityExtensions.GetUsername(System.Security.Claims.ClaimsIdentity)">
            <summary>
                Get the username of the user from a ClaimsIdentity
            </summary>
            <param name="identity"></param>
            <returns>Username of the user</returns>
        </member>
        <member name="M:Umbraco.Extensions.ClaimsIdentityExtensions.GetCultureString(System.Security.Claims.ClaimsIdentity)">
            <summary>
                Get the culture string from a ClaimsIdentity
            </summary>
            <param name="identity"></param>
            <returns>Culture string</returns>
        </member>
        <member name="M:Umbraco.Extensions.ClaimsIdentityExtensions.GetSecurityStamp(System.Security.Claims.ClaimsIdentity)">
            <summary>
                Get the security stamp from a ClaimsIdentity
            </summary>
            <param name="identity"></param>
            <returns>Security stamp</returns>
        </member>
        <member name="M:Umbraco.Extensions.ClaimsIdentityExtensions.GetRoles(System.Security.Claims.ClaimsIdentity)">
            <summary>
                Get the roles assigned to a user from a ClaimsIdentity
            </summary>
            <param name="identity"></param>
            <returns>Array of roles</returns>
        </member>
        <member name="M:Umbraco.Extensions.ClaimsIdentityExtensions.AddOrUpdateClaim(System.Security.Claims.ClaimsIdentity,System.Security.Claims.Claim)">
            <summary>
                Adds or updates and existing claim.
            </summary>
        </member>
        <member name="T:Umbraco.Extensions.ConfigurationExtensions">
            <summary>
            Extensions for <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" />.
            </summary>
        </member>
        <member name="F:Umbraco.Extensions.ConfigurationExtensions.ProviderNamePostfix">
            <summary>
            The postfix used to identify a connection string provider setting.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ConfigurationExtensions.GetConnectionStringProviderName(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            Gets the provider name for the connection string name (shorthand for <c>GetSection("ConnectionStrings")[name + "_ProviderName"]</c>).
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="name">The connection string key.</param>
            <returns>
            The provider name.
            </returns>
            <remarks>
            This uses the same convention as the <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-6.0#connection-string-prefixes">Configuration API for connection string environment variables</a>.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.ConfigurationExtensions.GetUmbracoConnectionString(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            Gets the Umbraco connection string (shorthand for <c>GetSection("ConnectionStrings")[name]</c> and replacing the <c>|DataDirectory|</c> placeholder).
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="name">The connection string key.</param>
            <returns>
            The Umbraco connection string.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ConfigurationExtensions.GetUmbracoConnectionString(Microsoft.Extensions.Configuration.IConfiguration,System.String@)">
            <summary>
            Gets the Umbraco connection string and provider name (shorthand for <c>GetSection("ConnectionStrings")[Constants.System.UmbracoConnectionName]</c> and replacing the <c>|DataDirectory|</c> placeholder).
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="providerName">The provider name.</param>
            <returns>
            The Umbraco connection string.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ConfigurationExtensions.GetUmbracoConnectionString(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.String@)">
            <summary>
            Gets the Umbraco connection string and provider name (shorthand for <c>GetSection("ConnectionStrings")[name]</c> and replacing the <c>|DataDirectory|</c> placeholder).
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="name">The name.</param>
            <param name="providerName">The provider name.</param>
            <returns>
            The Umbraco connection string.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ConfigurationExtensions.GetRuntimeMode(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Gets the Umbraco runtime mode.
            </summary>
            <param name="configuration">The configuration.</param>
            <returns>
            The Umbraco runtime mode.
            </returns>
        </member>
        <member name="T:Umbraco.Extensions.ConnectionStringExtensions">
            <summary>
            Extension methods for a connection string.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ConnectionStringExtensions.IsConnectionStringConfigured(Umbraco.Cms.Core.Configuration.Models.ConnectionStrings)">
            <summary>
            Determines whether the connection string is configured (set to a non-empty value).
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>
              <c>true</c> if the connection string is configured; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentExtensions.TryGetMediaPath(Umbraco.Cms.Core.Models.IContentBase,System.String,Umbraco.Cms.Core.PropertyEditors.MediaUrlGeneratorCollection,System.String@,System.String,System.String)">
            <summary>
                Returns the path to a media item stored in a property if the property editor is <see cref="T:Umbraco.Cms.Core.Models.IMediaUrlGenerator" />
            </summary>
            <param name="content"></param>
            <param name="propertyTypeAlias"></param>
            <param name="mediaUrlGenerators"></param>
            <param name="mediaFilePath"></param>
            <param name="culture"></param>
            <param name="segment"></param>
            <returns>True if the file path can be resolved and the property is <see cref="T:Umbraco.Cms.Core.Models.IMediaUrlGenerator" /></returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentExtensions.SanitizeEntityPropertiesForXmlStorage(Umbraco.Cms.Core.Models.IContentBase)">
            <summary>
                Removes characters that are not valid XML characters from all entity properties
                of type string. See: http://stackoverflow.com/a/961504/5018
            </summary>
            <returns></returns>
            <remarks>
                If this is not done then the xml cache can get corrupt and it will throw YSODs upon reading it.
            </remarks>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Extensions.ContentExtensions.GetPropertiesByEditor(Umbraco.Cms.Core.Models.IContentBase,System.String)">
            <summary>
                Returns all properties based on the editorAlias
            </summary>
            <param name="content"></param>
            <param name="editorAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentExtensions.HasChildren(Umbraco.Cms.Core.Models.IContentBase,Umbraco.Cms.Core.Services.ServiceContext)">
            <summary>
                Checks if the IContentBase has children
            </summary>
            <param name="content"></param>
            <param name="services"></param>
            <returns></returns>
            <remarks>
                This is a bit of a hack because we need to type check!
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.ContentExtensions.GetCreatorProfile(Umbraco.Cms.Core.Models.IContentBase,Umbraco.Cms.Core.Services.IUserService)">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Models.Membership.IProfile" /> for the Creator of this content item.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ContentExtensions.GetWriterProfile(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Services.IUserService)">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Models.Membership.IProfile" /> for the Writer of this content.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ContentExtensions.GetWriterProfile(Umbraco.Cms.Core.Models.IMedia,Umbraco.Cms.Core.Services.IUserService)">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Models.Membership.IProfile" /> for the Writer of this content.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ContentExtensions.GetCreatorProfile(Umbraco.Cms.Core.Models.IMedia,Umbraco.Cms.Core.Services.IUserService)">
            <summary>
                Gets the <see cref="T:Umbraco.Cms.Core.Models.Membership.IProfile" /> for the Creator of this media item.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ContentExtensions.GetNonGroupedProperties(Umbraco.Cms.Core.Models.IContentBase)">
            <summary>
                Returns properties that do not belong to a group
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentExtensions.GetPropertiesForGroup(Umbraco.Cms.Core.Models.IContentBase,Umbraco.Cms.Core.Models.PropertyGroup)">
            <summary>
                Returns the Property object for the given property group
            </summary>
            <param name="content"></param>
            <param name="propertyGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentExtensions.ToDeepXml(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Services.IEntityXmlSerializer)">
            <summary>
                Creates the full xml representation for the <see cref="T:Umbraco.Cms.Core.Models.IContent" /> object and all of it's descendants
            </summary>
            <param name="content"><see cref="T:Umbraco.Cms.Core.Models.IContent" /> to generate xml for</param>
            <param name="serializer"></param>
            <returns>Xml representation of the passed in <see cref="T:Umbraco.Cms.Core.Models.IContent" /></returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentExtensions.ToXml(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Services.IEntityXmlSerializer)">
            <summary>
                Creates the xml representation for the <see cref="T:Umbraco.Cms.Core.Models.IContent" /> object
            </summary>
            <param name="content"><see cref="T:Umbraco.Cms.Core.Models.IContent" /> to generate xml for</param>
            <param name="serializer"></param>
            <returns>Xml representation of the passed in <see cref="T:Umbraco.Cms.Core.Models.IContent" /></returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentExtensions.ToXml(Umbraco.Cms.Core.Models.IMedia,Umbraco.Cms.Core.Services.IEntityXmlSerializer)">
            <summary>
                Creates the xml representation for the <see cref="T:Umbraco.Cms.Core.Models.IMedia" /> object
            </summary>
            <param name="media"><see cref="T:Umbraco.Cms.Core.Models.IContent" /> to generate xml for</param>
            <param name="serializer"></param>
            <returns>Xml representation of the passed in <see cref="T:Umbraco.Cms.Core.Models.IContent" /></returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentExtensions.ToXml(Umbraco.Cms.Core.Models.IMember,Umbraco.Cms.Core.Services.IEntityXmlSerializer)">
            <summary>
                Creates the xml representation for the <see cref="T:Umbraco.Cms.Core.Models.IMember" /> object
            </summary>
            <param name="member"><see cref="T:Umbraco.Cms.Core.Models.IMember" /> to generate xml for</param>
            <param name="serializer"></param>
            <returns>Xml representation of the passed in <see cref="T:Umbraco.Cms.Core.Models.IContent" /></returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentExtensions.GetStatus(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Models.ContentScheduleCollection,System.String)">
            <summary>
                Gets the current status of the Content
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ContentExtensions.GetAncestorIds(Umbraco.Cms.Core.Models.IContent)">
            <summary>
                Gets a collection containing the ids of all ancestors.
            </summary>
            <param name="content"><see cref="T:Umbraco.Cms.Core.Models.IContent" /> to retrieve ancestors for</param>
            <returns>An Enumerable list of integer ids</returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentExtensions.SetValue(Umbraco.Cms.Core.Models.IContentBase,Umbraco.Cms.Core.IO.MediaFileManager,Umbraco.Cms.Core.PropertyEditors.MediaUrlGeneratorCollection,Umbraco.Cms.Core.Strings.IShortStringHelper,Umbraco.Cms.Core.Services.IContentTypeBaseServiceProvider,System.String,System.String,System.IO.Stream,System.String,System.String)">
            <summary>
                Sets the posted file value of a property.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ContentExtensions.StoreFile(Umbraco.Cms.Core.Models.IContentBase,Umbraco.Cms.Core.IO.MediaFileManager,Umbraco.Cms.Core.Services.IContentTypeBaseServiceProvider,System.String,System.String,System.IO.Stream,System.String)">
            <summary>
                Stores a file.
            </summary>
            <param name="content"><see cref="T:Umbraco.Cms.Core.Models.IContentBase" />A content item.</param>
            <param name="mediaFileManager">The media file manager.</param>
            <param name="contentTypeBaseServiceProvider">The content type base service provider.</param>
            <param name="propertyTypeAlias">The property alias.</param>
            <param name="filename">The name of the file.</param>
            <param name="filestream">A stream containing the file data.</param>
            <param name="filepath">The original file path, if any.</param>
            <returns>The path to the file, relative to the media filesystem.</returns>
            <remarks>
                <para>
                    Does NOT set the property value, so one should probably store the file and then do
                    something alike: property.Value = MediaHelper.FileSystem.GetUrl(filepath).
                </para>
                <para>
                    The original file path is used, in the old media file path scheme, to try and reuse
                    the "folder number" that was assigned to the previous file referenced by the property,
                    if any.
                </para>
            </remarks>
        </member>
        <member name="T:Umbraco.Extensions.ContentVariationExtensions">
            <summary>
                Provides extension methods for content variations.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.VariesByNothing(Umbraco.Cms.Core.Models.ISimpleContentType)">
            <summary>
                Determines whether the content type is invariant.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>
                A value indicating whether the content type is invariant.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.VariesByNothing(Umbraco.Cms.Core.Models.IContentTypeBase)">
            <summary>
                Determines whether the content type is invariant.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>
                A value indicating whether the content type is invariant.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.VariesByNothing(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType)">
            <summary>
                Determines whether the content type is invariant.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>
                A value indicating whether the content type is invariant.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.VariesByNothing(Umbraco.Cms.Core.Models.IPropertyType)">
            <summary>
                Determines whether the property type is invariant.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>
                A value indicating whether the property type is invariant.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.VariesByNothing(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <summary>
                Determines whether the property type is invariant.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>
                A value indicating whether the property type is invariant.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.VariesByNothing(Umbraco.Cms.Core.Models.ContentVariation)">
            <summary>
                Determines whether a variation is invariant.
            </summary>
            <param name="variation">The variation.</param>
            <returns>
                A value indicating whether the variation is invariant.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.VariesByCulture(Umbraco.Cms.Core.Models.ISimpleContentType)">
            <summary>
                Determines whether the content type varies by culture.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>
                A value indicating whether the content type varies by culture.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.VariesByCulture(Umbraco.Cms.Core.Models.IContentTypeBase)">
            <summary>
                Determines whether the content type varies by culture.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>
                A value indicating whether the content type varies by culture.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.VariesByCulture(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType)">
            <summary>
                Determines whether the content type varies by culture.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>
                A value indicating whether the content type varies by culture.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.VariesByCulture(Umbraco.Cms.Core.Models.IPropertyType)">
            <summary>
                Determines whether the property type varies by culture.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>
                A value indicating whether the property type varies by culture.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.VariesByCulture(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <summary>
                Determines whether the property type varies by culture.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>
                A value indicating whether the property type varies by culture.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.VariesByCulture(Umbraco.Cms.Core.Models.ContentVariation)">
            <summary>
                Determines whether a variation varies by culture.
            </summary>
            <param name="variation">The variation.</param>
            <returns>
                A value indicating whether the variation varies by culture.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.VariesBySegment(Umbraco.Cms.Core.Models.ISimpleContentType)">
            <summary>
                Determines whether the content type varies by segment.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>
                A value indicating whether the content type varies by segment.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.VariesBySegment(Umbraco.Cms.Core.Models.IContentTypeBase)">
            <summary>
                Determines whether the content type varies by segment.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>
                A value indicating whether the content type varies by segment.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.VariesBySegment(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType)">
            <summary>
                Determines whether the content type varies by segment.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>
                A value indicating whether the content type varies by segment.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.VariesBySegment(Umbraco.Cms.Core.Models.IPropertyType)">
            <summary>
                Determines whether the property type varies by segment.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>
                A value indicating whether the property type varies by segment.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.VariesBySegment(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <summary>
                Determines whether the property type varies by segment.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>
                A value indicating whether the property type varies by segment.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.VariesBySegment(Umbraco.Cms.Core.Models.ContentVariation)">
            <summary>
                Determines whether a variation varies by segment.
            </summary>
            <param name="variation">The variation.</param>
            <returns>
                A value indicating whether the variation varies by segment.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.VariesByCultureAndSegment(Umbraco.Cms.Core.Models.ISimpleContentType)">
            <summary>
                Determines whether the content type varies by culture and segment.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>
                A value indicating whether the content type varies by culture and segment.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.VariesByCultureAndSegment(Umbraco.Cms.Core.Models.IContentTypeBase)">
            <summary>
                Determines whether the content type varies by culture and segment.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>
                A value indicating whether the content type varies by culture and segment.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.VariesByCultureAndSegment(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContentType)">
            <summary>
                Determines whether the content type varies by culture and segment.
            </summary>
            <param name="contentType">The content type.</param>
            <returns>
                A value indicating whether the content type varies by culture and segment.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.VariesByCultureAndSegment(Umbraco.Cms.Core.Models.IPropertyType)">
            <summary>
                Determines whether the property type varies by culture and segment.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>
                A value indicating whether the property type varies by culture and segment.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.VariesByCultureAndSegment(Umbraco.Cms.Core.Models.PublishedContent.IPublishedPropertyType)">
            <summary>
                Determines whether the property type varies by culture and segment.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>
                A value indicating whether the property type varies by culture and segment.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.VariesByCultureAndSegment(Umbraco.Cms.Core.Models.ContentVariation)">
            <summary>
                Determines whether a variation varies by culture and segment.
            </summary>
            <param name="variation">The variation.</param>
            <returns>
                A value indicating whether the variation varies by culture and segment.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.SetVariesBy(Umbraco.Cms.Core.Models.IContentTypeBase,Umbraco.Cms.Core.Models.ContentVariation,System.Boolean)">
            <summary>
                Sets or removes the content type variation depending on the specified value.
            </summary>
            <param name="contentType">The content type.</param>
            <param name="variation">The variation to set or remove.</param>
            <param name="value">If set to <c>true</c> sets the variation; otherwise, removes the variation.</param>
            <remarks>
                This method does not support setting the variation to nothing.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.SetVariesBy(Umbraco.Cms.Core.Models.IPropertyType,Umbraco.Cms.Core.Models.ContentVariation,System.Boolean)">
            <summary>
                Sets or removes the property type variation depending on the specified value.
            </summary>
            <param name="propertyType">The property type.</param>
            <param name="variation">The variation to set or remove.</param>
            <param name="value">If set to <c>true</c> sets the variation; otherwise, removes the variation.</param>
            <remarks>
                This method does not support setting the variation to nothing.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.SetFlag(Umbraco.Cms.Core.Models.ContentVariation,Umbraco.Cms.Core.Models.ContentVariation,System.Boolean)">
            <summary>
                Returns the variations with the variation set or removed depending on the specified value.
            </summary>
            <param name="variations">The existing variations.</param>
            <param name="variation">The variation to set or remove.</param>
            <param name="value">If set to <c>true</c> sets the variation; otherwise, removes the variation.</param>
            <returns>
                The variations with the variation set or removed.
            </returns>
            <remarks>
                This method does not support setting the variation to nothing.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.ContentVariationExtensions.ValidateVariation(Umbraco.Cms.Core.Models.ContentVariation,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Validates that a combination of culture and segment is valid for the variation.
            </summary>
            <param name="variation">The variation.</param>
            <param name="culture">The culture.</param>
            <param name="segment">The segment.</param>
            <param name="exact">A value indicating whether to perform exact validation.</param>
            <param name="wildcards">A value indicating whether to support wildcards.</param>
            <param name="throwIfInvalid">
                A value indicating whether to throw a <see cref="T:System.NotSupportedException" /> when the
                combination is invalid.
            </param>
            <returns>
                <c>true</c> if the combination is valid; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.NotSupportedException">
                Occurs when the combination is invalid, and <paramref name="throwIfInvalid" />
                is true.
            </exception>
            <remarks>
                <para>
                    When validation is exact, the combination must match the variation exactly. For instance, if the variation is
                    Culture, then
                    a culture is required. When validation is not strict, the combination must be equivalent, or more restrictive:
                    if the variation is
                    Culture, an invariant combination is ok.
                </para>
                <para>
                    Basically, exact is for one content type, or one property type, and !exact is for "all property types" of one
                    content type.
                </para>
                <para>Both <paramref name="culture" /> and <paramref name="segment" /> can be "*" to indicate "all of them".</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Extensions.CoreCacheHelperExtensions">
            <summary>
                Extension methods for the cache helper
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.CoreCacheHelperExtensions.ClearPartialViewCache(Umbraco.Cms.Core.Cache.AppCaches)">
            <summary>
                Clears the cache for partial views
            </summary>
            <param name="appCaches"></param>
        </member>
        <member name="T:Umbraco.Extensions.DataTableExtensions">
            <summary>
                Static and extension methods for the DataTable object
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.DataTableExtensions.GenerateDataTable(System.String,System.Func{System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}},System.Func{System.Collections.Generic.IEnumerable{System.Tuple{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}}}})">
            <summary>
                Creates a DataTable with the specified alias and columns and uses a callback to populate the headers.
            </summary>
            <param name="tableAlias"></param>
            <param name="getHeaders"></param>
            <param name="rowData"> </param>
            <returns></returns>
            <remarks>
                This has been migrated from the Node class and uses proper locking now. It is now used by the Node class and the
                DynamicPublishedContent extensions for legacy reasons.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.DataTableExtensions.CreateTableData">
            <summary>
                Helper method to return this ugly object
            </summary>
            <returns></returns>
            <remarks>
                This is for legacy code, I didn't want to go creating custom classes for these
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.DataTableExtensions.AddRowData(System.Collections.Generic.List{System.Tuple{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
                Helper method to deal with these ugly objects
            </summary>
            <param name="rowData"></param>
            <param name="standardVals"></param>
            <param name="userVals"></param>
            <remarks>
                This is for legacy code, I didn't want to go creating custom classes for these
            </remarks>
        </member>
        <member name="T:Umbraco.Extensions.DateTimeExtensions.DateTruncate">
            <summary>
            Defines the levels to truncate a date to.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.DateTimeExtensions.ToIsoString(System.DateTime)">
            <summary>
                Returns the DateTime as an ISO formatted string that is globally expectable
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.DateTimeExtensions.TruncateTo(System.DateTime,Umbraco.Extensions.DateTimeExtensions.DateTruncate)">
            <summary>
            Truncates the date to the specified level, i.e. if you pass in DateTruncate.Hour it will truncate the date to the hour.
            </summary>
            <param name="dt">The date.</param>
            <param name="truncateTo">The level to truncate the date to.</param>
            <returns>The truncated date.</returns>
        </member>
        <member name="T:Umbraco.Extensions.DecimalExtensions">
            <summary>
                Provides extension methods for System.Decimal.
            </summary>
            <remarks>
                See System.Decimal on MSDN and also
                http://stackoverflow.com/questions/4298719/parse-decimal-and-filter-extra-0-on-the-right/4298787#4298787.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.DecimalExtensions.Normalize(System.Decimal)">
            <summary>
                Gets the normalized value.
            </summary>
            <param name="value">The value to normalize.</param>
            <returns>The normalized value.</returns>
            <remarks>
                Normalizing changes the scaling factor and removes trailing zeros,
                so 1.2500m comes out as 1.25m.
            </remarks>
        </member>
        <member name="T:Umbraco.Extensions.DictionaryExtensions">
            <summary>
                Extension methods for Dictionary &amp; ConcurrentDictionary.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.DictionaryExtensions.GetOrCreate``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
                Method to Get a value by the key. If the key doesn't exist it will create a new TVal object for the key and return
                it.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TVal"></typeparam>
            <param name="dict"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.DictionaryExtensions.TryUpdate``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,System.Func{``1,``1})">
            <summary>
                Updates an item with the specified key with the specified value
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="updateFactory"></param>
            <returns></returns>
            <remarks>
                Taken from:
                http://stackoverflow.com/questions/12240219/is-there-a-way-to-use-concurrentdictionary-tryupdate-with-a-lambda-expression
                If there is an item in the dictionary with the key, it will keep trying to update it until it can
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.DictionaryExtensions.TryUpdateOptimisitic``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,System.Func{``1,``1})">
            <summary>
                Updates an item with the specified key with the specified value
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="updateFactory"></param>
            <returns></returns>
            <remarks>
                Taken from:
                http://stackoverflow.com/questions/12240219/is-there-a-way-to-use-concurrentdictionary-tryupdate-with-a-lambda-expression
                WARNING: If the value changes after we've retrieved it, then the item will not be updated
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.DictionaryExtensions.ConvertTo``2(System.Collections.IDictionary)">
            <summary>
                Converts a dictionary to another type by only using direct casting
            </summary>
            <typeparam name="TKeyOut"></typeparam>
            <typeparam name="TValOut"></typeparam>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.DictionaryExtensions.ConvertTo``2(System.Collections.IDictionary,System.Func{System.Object,``0},System.Func{System.Object,``1})">
            <summary>
                Converts a dictionary to another type using the specified converters
            </summary>
            <typeparam name="TKeyOut"></typeparam>
            <typeparam name="TValOut"></typeparam>
            <param name="d"></param>
            <param name="keyConverter"></param>
            <param name="valConverter"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.DictionaryExtensions.ToNameValueCollection(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Converts a dictionary to a NameValueCollection
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.DictionaryExtensions.MergeLeft``3(``0,System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{``1,``2}},System.Boolean)">
            <summary>
                Merges all key/values from the sources dictionaries into the destination dictionary
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TK"></typeparam>
            <typeparam name="TV"></typeparam>
            <param name="destination">The source dictionary to merge other dictionaries into</param>
            <param name="overwrite">
                By default all values will be retained in the destination if the same keys exist in the sources but
                this can changed if overwrite = true, then any key/value found in any of the sources will overwritten in the
                destination. Note that
                it will just use the last found key/value if this is true.
            </param>
            <param name="sources">The other dictionaries to merge values from</param>
        </member>
        <member name="M:Umbraco.Extensions.DictionaryExtensions.MergeLeft``3(``0,System.Collections.Generic.IDictionary{``1,``2},System.Boolean)">
            <summary>
                Merges all key/values from the sources dictionaries into the destination dictionary
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TK"></typeparam>
            <typeparam name="TV"></typeparam>
            <param name="destination">The source dictionary to merge other dictionaries into</param>
            <param name="overwrite">
                By default all values will be retained in the destination if the same keys exist in the sources but
                this can changed if overwrite = true, then any key/value found in any of the sources will overwritten in the
                destination. Note that
                it will just use the last found key/value if this is true.
            </param>
            <param name="source">The other dictionary to merge values from</param>
        </member>
        <member name="M:Umbraco.Extensions.DictionaryExtensions.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                Returns the value of the key value based on the key, if the key is not found, a null value is returned
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TVal">The type of the val.</typeparam>
            <param name="d">The d.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.DictionaryExtensions.GetValueAsString``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
                Returns the value of the key value based on the key as it's string value, if the key is not found, then an empty
                string is returned
            </summary>
            <param name="d"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.DictionaryExtensions.GetValueAsString``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.String)">
            <summary>
                Returns the value of the key value based on the key as it's string value, if the key is not found or is an empty
                string, then the provided default value is returned
            </summary>
            <param name="d"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.DictionaryExtensions.ContainsKeyIgnoreCase``1(System.Collections.Generic.IDictionary{System.String,``0},System.String)">
            <summary>contains key ignore case.</summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <typeparam name="TValue">Value Type</typeparam>
            <returns>The contains key ignore case.</returns>
        </member>
        <member name="M:Umbraco.Extensions.DictionaryExtensions.ToQueryString(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                Converts a dictionary object to a query string representation such as:
                firstname=shannon&amp;lastname=deminick.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.DictionaryExtensions.GetValueIgnoreCase``1(System.Collections.Generic.IDictionary{System.String,``0},System.String)">
            <summary>The get entry ignore case.</summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <typeparam name="TValue">The type</typeparam>
            <returns>The entry</returns>
        </member>
        <member name="M:Umbraco.Extensions.DictionaryExtensions.GetValueIgnoreCase``1(System.Collections.Generic.IDictionary{System.String,``0},System.String,``0)">
            <summary>The get entry ignore case.</summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <typeparam name="TValue">The type</typeparam>
            <returns>The entry</returns>
        </member>
        <member name="T:Umbraco.Extensions.EnumerableExtensions">
            <summary>
                Extensions for enumerable sources
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.EnumerableExtensions.Yield``1(``0)">
            <summary>
                Wraps this object instance into an IEnumerable{T} consisting of a single item.
            </summary>
            <typeparam name="T"> Type of the object. </typeparam>
            <param name="item"> The instance that will be wrapped. </param>
            <returns> An IEnumerable{T} consisting of a single item. </returns>
        </member>
        <member name="M:Umbraco.Extensions.EnumerableExtensions.Range``1(System.Func{System.Int32,``0},System.Int32)">
            <summary>
                Returns a sequence of length <paramref name="count" /> whose elements are the result of invoking
                <paramref name="factory" />.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory">The factory.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.EnumerableExtensions.IfNotNull``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>The if not null.</summary>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
            <typeparam name="TItem">The type</typeparam>
        </member>
        <member name="M:Umbraco.Extensions.EnumerableExtensions.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns true if all items in the other collection exist in this collection
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.EnumerableExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns true if the source contains any of the items in the other list
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.EnumerableExtensions.RemoveAll``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
                Removes all matching items from an <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="predicate">The predicate.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Extensions.EnumerableExtensions.RemoveAll``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
                Removes all matching items from an <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="predicate">The predicate.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Extensions.EnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Filters a sequence of values to ignore those which are null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="coll">The coll.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Extensions.EnumerableExtensions.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Finds the index of the first item matching an expression in an enumerable.
            </summary>
            <typeparam name="T">The type of the enumerated objects.</typeparam>
            <param name="items">The enumerable to search.</param>
            <param name="predicate">The expression to test the items against.</param>
            <returns>The index of the first matching item, or -1.</returns>
        </member>
        <member name="M:Umbraco.Extensions.EnumerableExtensions.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Boolean})">
            <summary>
                Finds the index of the first item matching an expression in an enumerable.
            </summary>
            <typeparam name="T">The type of the enumerated objects.</typeparam>
            <param name="items">The enumerable to search.</param>
            <param name="startIndex">The index to start at.</param>
            <param name="predicate">The expression to test the items against.</param>
            <returns>The index of the first matching item, or -1.</returns>
        </member>
        <member name="M:Umbraco.Extensions.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Finds the index of the first occurrence of an item in an enumerable.</summary>
            <param name="items">The enumerable to search.</param>
            <param name="item">The item to find.</param>
            <returns>The index of the first matching item, or -1 if the item was not found.</returns>
        </member>
        <member name="M:Umbraco.Extensions.EnumerableExtensions.UnsortedSequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Determines if 2 lists have equal elements within them regardless of how they are sorted
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="other"></param>
            <returns></returns>
            <remarks>
                The logic for this is taken from:
                http://stackoverflow.com/questions/4576723/test-whether-two-ienumerablet-have-the-same-values-with-the-same-frequencies
                There's a few answers, this one seems the best for it's simplicity and based on the comment of Eamon
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.EnumerableExtensions.Transform``2(System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1}})">
            <summary>
                Transforms an enumerable.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
            <param name="source"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.EnumerableExtensions.EmptyNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Gets a null IEnumerable as an empty IEnumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Extensions.EnumExtensions">
            <summary>
            Provides extension methods to <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.EnumExtensions.HasFlagAny``1(``0,``0)">
            <summary>
            Determines whether any of the flags/bits are set within the enum value.
            </summary>
            <typeparam name="T">The enum type.</typeparam>
            <param name="value">The value.</param>
            <param name="flags">The flags.</param>
            <returns>
              <c>true</c> if any of the flags/bits are set within the enum value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.HtmlEncodedStringExtensions.IsNullOrWhiteSpace(Umbraco.Cms.Core.Strings.IHtmlEncodedString,System.Boolean)">
            <summary>
            Checks if the specified <see cref="T:Umbraco.Cms.Core.Strings.IHtmlEncodedString" /> is <c>null</c> or only contains whitespace, optionally after all HTML tags have been stripped/removed.
            </summary>
            <param name="htmlEncodedString">The encoded HTML string.</param>
            <param name="stripHtml">If set to <c>true</c> strips/removes all HTML tags.</param>
            <returns>
            Returns <c>true</c> if the HTML string is <c>null</c> or only contains whitespace, optionally after all HTML tags have been stripped/removed.
            </returns>
        </member>
        <member name="T:Umbraco.Extensions.IfExtensions">
            <summary>
                Extension methods for 'If' checking like checking If something is null or not null
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.IfExtensions.IfNotNull``1(``0,System.Action{``0})">
            <summary>The if not null.</summary>
            <param name="item">The item.</param>
            <param name="action">The action.</param>
            <typeparam name="TItem">The type</typeparam>
        </member>
        <member name="M:Umbraco.Extensions.IfExtensions.IfTrue(System.Boolean,System.Action)">
            <summary>The if true.</summary>
            <param name="predicate">The predicate.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Umbraco.Extensions.IfExtensions.IfNotNull``2(``1,System.Func{``1,``0},``0)">
            <summary>
                Checks if the item is not null, and if so returns an action on that item, or a default value
            </summary>
            <typeparam name="TResult">the result type</typeparam>
            <typeparam name="TItem">The type</typeparam>
            <param name="item">The item.</param>
            <param name="action">The action.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.IfExtensions.IfNull``1(``0,System.Func{``0,``0})">
            <summary>
                Checks if the value is null, if it is it returns the value specified, otherwise returns the non-null value
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="item"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.IntExtensions.Times(System.Int32,System.Action{System.Int32})">
            <summary>
                Does something 'x' amount of times.
            </summary>
            <param name="n">Number of times to execute the action.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Umbraco.Extensions.IntExtensions.ToGuid(System.Int32)">
            <summary>
                Creates a Guid based on an integer value.
            </summary>
            <param name="value">The <see cref="T:System.Int32" /> value to convert.</param>
            <returns>
                The converted <see cref="T:System.Guid" />.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.IntExtensions.TryParseFromGuid(System.Guid,System.Nullable{System.Int32}@)">
            <summary>
                Restores a GUID previously created from an integer value using <see cref="M:Umbraco.Extensions.IntExtensions.ToGuid(System.Int32)" />.
            </summary>
            <param name="value">The <see cref="T:System.Guid" /> value to convert.</param>
            <param name="result">The converted <see cref="T:System.Int32" />.</param>
            <returns>
                True if the <see cref="T:System.Int32" /> value could be created, otherwise false.
            </returns>
        </member>
        <member name="T:Umbraco.Extensions.KeyValuePairExtensions">
            <summary>
                Provides extension methods for the <see cref="T:System.Collections.Generic.KeyValuePair`2" /> struct.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.KeyValuePairExtensions.Deconstruct``2(System.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <summary>
                Implements key/value pair deconstruction.
            </summary>
            <remarks>Allows for <c>foreach ((var k, var v) in ...)</c>.</remarks>
        </member>
        <member name="T:Umbraco.Extensions.ObjectExtensions">
            <summary>
                Provides object extension methods.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ObjectExtensions.AsEnumerableOfOne``1(``0)">
            <summary>
            </summary>
            <param name="input"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.ObjectExtensions.DisposeIfDisposable(System.Object)">
            <summary>
            Disposes the object if it implements <see cref="T:System.IDisposable" />.
            </summary>
            <param name="input">The object.</param>
        </member>
        <member name="M:Umbraco.Extensions.ObjectExtensions.SafeCast``1(System.Object)">
            <summary>
                Provides a shortcut way of safely casting an input when you cannot guarantee the <typeparamref name="T" /> is
                an instance type (i.e., when the C# AS keyword is not applicable).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.ObjectExtensions.TryConvertTo``1(System.Object)">
            <summary>
                Attempts to convert the input object to the output type.
            </summary>
            <remarks>This code is an optimized version of the original Umbraco method</remarks>
            <typeparam name="T">The type to convert to</typeparam>
            <param name="input">The input.</param>
            <returns>The <see cref="T:Umbraco.Cms.Core.Attempt`1" /></returns>
        </member>
        <member name="M:Umbraco.Extensions.ObjectExtensions.TryConvertTo(System.Object,System.Type)">
            <summary>
                Attempts to convert the input object to the output type.
            </summary>
            <remarks>This code is an optimized version of the original Umbraco method</remarks>
            <param name="input">The input.</param>
            <param name="target">The type to convert to</param>
            <returns>The <see cref="T:Umbraco.Cms.Core.Attempt`1" /></returns>
        </member>
        <member name="M:Umbraco.Extensions.ObjectExtensions.ToDictionary``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}}[])">
            <summary>
                Converts an object into a dictionary
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <typeparam name="TVal"> </typeparam>
            <param name="o"></param>
            <param name="ignoreProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.ObjectExtensions.TryConvertToFromString(System.String,System.Type)">
            <summary>
                Attempts to convert the input string to the output type.
            </summary>
            <remarks>This code is an optimized version of the original Umbraco method</remarks>
            <param name="input">The input.</param>
            <param name="target">The type to convert to</param>
            <returns>The <see cref="T:System.Nullable`1" /></returns>
        </member>
        <member name="M:Umbraco.Extensions.ObjectExtensions.ToDictionary``1(System.Object,System.String[])">
            <summary>
                Turns object into dictionary
            </summary>
            <param name="o"></param>
            <param name="ignoreProperties">Properties to ignore</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.ObjectExtensions.ToXmlString(System.Object,System.Type)">
            <summary>
                Returns an XmlSerialized safe string representation for the value
            </summary>
            <param name="value"></param>
            <param name="type">The Type can only be a primitive type or Guid and byte[] otherwise an exception is thrown</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.ObjectExtensions.TryConvertToXmlString(System.Object,System.Type)">
            <summary>
                Attempts to serialize the value to an XmlString using ToXmlString
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.ObjectExtensions.ToXmlString``1(System.Object)">
            <summary>
                Returns an XmlSerialized safe string representation for the value and type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.PasswordConfigurationExtensions.GetConfiguration(Umbraco.Cms.Core.Configuration.IPasswordConfiguration,System.Boolean)">
            <summary>
                Returns the configuration of the membership provider used to configure change password editors
            </summary>
            <param name="passwordConfiguration"></param>
            <param name="allowManuallyChangingPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.Name(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Models.PublishedContent.IVariationContextAccessor,System.String)">
            <summary>
                Gets the name of the content item.
            </summary>
            <param name="content">The content item.</param>
            <param name="variationContextAccessor"></param>
            <param name="culture">
                The specific culture to get the name for. If null is used the current culture is used (Default is
                null).
            </param>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.UrlSegment(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Models.PublishedContent.IVariationContextAccessor,System.String)">
            <summary>
                Gets the URL segment of the content item.
            </summary>
            <param name="content">The content item.</param>
            <param name="variationContextAccessor"></param>
            <param name="culture">
                The specific culture to get the URL segment for. If null is used the current culture is used
                (Default is null).
            </param>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.IsComposedOf(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
                Gets a value indicating whether the content is of a content type composed of the given alias
            </summary>
            <param name="content">The content.</param>
            <param name="alias">The content type alias.</param>
            <returns>
                A value indicating whether the content is of a content type composed of a content type identified by the
                alias.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.Parent``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService)">
            <summary>
                Gets the parent of the content, of a given content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <param name="navigationQueryService">The query service for the in-memory navigation structure.</param>
            <param name="publishedStatusFilteringService"></param>
            <returns>The parent of content, of the given content type, else null.</returns>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.Url(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Routing.IPublishedUrlProvider,System.String,Umbraco.Cms.Core.Models.PublishedContent.UrlMode)">
            <summary>
                Gets the url of the content item.
            </summary>
            <remarks>
                <para>
                    If the content item is a document, then this method returns the url of the
                    document. If it is a media, then this methods return the media url for the
                    'umbracoFile' property. Use the MediaUrl() method to get the media url for other
                    properties.
                </para>
                <para>
                    The value of this property is contextual. It depends on the 'current' request uri,
                    if any. In addition, when the content type is multi-lingual, this is the url for the
                    specified culture. Otherwise, it is the invariant url.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.HasCulture(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
                Determines whether the content has a culture.
            </summary>
            <remarks>Culture is case-insensitive.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.IsInvariantOrHasCulture(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
                Determines whether the content is invariant, or has a culture.
            </summary>
            <remarks>Culture is case-insensitive.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.CultureDate(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Models.PublishedContent.IVariationContextAccessor,System.String)">
            <summary>
                Gets the culture date of the content item.
            </summary>
            <param name="content">The content item.</param>
            <param name="variationContextAccessor"></param>
            <param name="culture">
                The specific culture to get the name for. If null is used the current culture is used (Default is
                null).
            </param>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.GetTemplateAlias(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.IFileService)">
            <summary>
                Returns the current template Alias
            </summary>
            <returns>Empty string if none is set.</returns>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.HasValue(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Models.PublishedContent.IPublishedValueFallback,System.String,System.String,System.String,Umbraco.Cms.Core.Models.PublishedContent.Fallback)">
            <summary>
                Gets a value indicating whether the content has a value for a property identified by its alias.
            </summary>
            <param name="content">The content.</param>
            <param name="publishedValueFallback">The published value fallback implementation.</param>
            <param name="alias">The property alias.</param>
            <param name="culture">The variation language.</param>
            <param name="segment">The variation segment.</param>
            <param name="fallback">Optional fallback strategy.</param>
            <returns>A value indicating whether the content has a value for the property identified by the alias.</returns>
            <remarks>Returns true if HasValue is true, or a fallback strategy can provide a value.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.Value(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Models.PublishedContent.IPublishedValueFallback,System.String,System.String,System.String,Umbraco.Cms.Core.Models.PublishedContent.Fallback,System.Object)">
            <summary>
                Gets the value of a content's property identified by its alias, if it exists, otherwise a default value.
            </summary>
            <param name="content">The content.</param>
            <param name="publishedValueFallback">The published value fallback implementation.</param>
            <param name="alias">The property alias.</param>
            <param name="culture">The variation language.</param>
            <param name="segment">The variation segment.</param>
            <param name="fallback">Optional fallback strategy.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value of the content's property identified by the alias, if it exists, otherwise a default value.</returns>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.Value``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Models.PublishedContent.IPublishedValueFallback,System.String,System.String,System.String,Umbraco.Cms.Core.Models.PublishedContent.Fallback,``0)">
            <summary>
                Gets the value of a content's property identified by its alias, converted to a specified type.
            </summary>
            <typeparam name="T">The target property type.</typeparam>
            <param name="content">The content.</param>
            <param name="publishedValueFallback">The published value fallback implementation.</param>
            <param name="alias">The property alias.</param>
            <param name="culture">The variation language.</param>
            <param name="segment">The variation segment.</param>
            <param name="fallback">Optional fallback strategy.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value of the content's property identified by the alias, converted to the specified type.</returns>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.IsDocumentType(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
                Determines whether the specified content is a specified content type.
            </summary>
            <param name="content">The content to determine content type of.</param>
            <param name="docTypeAlias">The alias of the content type to test against.</param>
            <returns>True if the content is of the specified content type; otherwise false.</returns>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.IsDocumentType(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.String,System.Boolean)">
            <summary>
                Determines whether the specified content is a specified content type or it's derived types.
            </summary>
            <param name="content">The content to determine content type of.</param>
            <param name="docTypeAlias">The alias of the content type to test against.</param>
            <param name="recursive">
                When true, recurses up the content type tree to check inheritance; when false just calls
                IsDocumentType(this IPublishedContent content, string docTypeAlias).
            </param>
            <returns>True if the content is of the specified content type or a derived content type; otherwise false.</returns>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.Ancestors(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService)">
            <summary>
                Gets the ancestors of the content.
            </summary>
            <param name="content">The content.</param>
            <param name="navigationQueryService">The query service for the in-memory navigation structure.</param>
            <param name="publishedStatusFilteringService"></param>
            <returns>The ancestors of the content, in down-top order.</returns>
            <remarks>Does not consider the content itself.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.Ancestors(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,System.Int32)">
            <summary>
                Gets the ancestors of the content, at a level lesser or equal to a specified level.
            </summary>
            <param name="content">The content.</param>
            <param name="navigationQueryService">The query service for the in-memory navigation structure.</param>
            <param name="publishedStatusFilteringService"></param>
            <param name="maxLevel">The level.</param>
            <returns>The ancestors of the content, at a level lesser or equal to the specified level, in down-top order.</returns>
            <remarks>Does not consider the content itself. Only content that are "high enough" in the tree are returned.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.Ancestors(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,System.String)">
            <summary>
                Gets the ancestors of the content, of a specified content type.
            </summary>
            <param name="content">The content.</param>
            <param name="navigationQueryService">The query service for the in-memory navigation structure.</param>
            <param name="publishedStatusFilteringService"></param>
            <param name="contentTypeAlias">The content type.</param>
            <returns>The ancestors of the content, of the specified content type, in down-top order.</returns>
            <remarks>Does not consider the content itself. Returns all ancestors, of the specified content type.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.Ancestors``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService)">
            <summary>
                Gets the ancestors of the content, of a specified content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <param name="navigationQueryService">The query service for the in-memory navigation structure.</param>
            <param name="publishedStatusFilteringService"></param>
            <returns>The ancestors of the content, of the specified content type, in down-top order.</returns>
            <remarks>Does not consider the content itself. Returns all ancestors, of the specified content type.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.Ancestors``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,System.Int32)">
            <summary>
                Gets the ancestors of the content, at a level lesser or equal to a specified level, and of a specified content
                type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <param name="publishedStatusFilteringService"></param>
            <param name="maxLevel">The level.</param>
            <returns>
                The ancestors of the content, at a level lesser or equal to the specified level, and of the specified
                content type, in down-top order.
            </returns>
            <remarks>
                Does not consider the content itself. Only content that are "high enough" in the trees, and of the
                specified content type, are returned.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.AncestorsOrSelf(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService)">
            <summary>
                Gets the content and its ancestors.
            </summary>
            <param name="content">The content.</param>
            <param name="navigationQueryService">The query service for the in-memory navigation structure.</param>
            <param name="publishedStatusFilteringService"></param>
            <returns>The content and its ancestors, in down-top order.</returns>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.AncestorsOrSelf(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,System.Int32)">
            <summary>
                Gets the content and its ancestors, at a level lesser or equal to a specified level.
            </summary>
            <param name="content">The content.</param>
            <param name="navigationQueryService">The query service for the in-memory navigation structure.</param>
            <param name="publishedStatusFilteringService"></param>
            <param name="maxLevel">The level.</param>
            <returns>
                The content and its ancestors, at a level lesser or equal to the specified level,
                in down-top order.
            </returns>
            <remarks>
                Only content that are "high enough" in the tree are returned. So it may or may not begin
                with the content itself, depending on its level.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.AncestorsOrSelf(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,System.String)">
            <summary>
                Gets the content and its ancestors, of a specified content type.
            </summary>
            <param name="content">The content.</param>
            <param name="navigationQueryService">The query service for the in-memory navigation structure.</param>
            <param name="publishedStatusFilteringService"></param>
            <param name="contentTypeAlias">The content type.</param>
            <returns>The content and its ancestors, of the specified content type, in down-top order.</returns>
            <remarks>May or may not begin with the content itself, depending on its content type.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.AncestorsOrSelf``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService)">
            <summary>
                Gets the content and its ancestors, of a specified content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <param name="navigationQueryService">The query service for the in-memory navigation structure.</param>
            <param name="publishedStatusFilteringService"></param>
            <returns>The content and its ancestors, of the specified content type, in down-top order.</returns>
            <remarks>May or may not begin with the content itself, depending on its content type.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.AncestorsOrSelf``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,System.Int32)">
            <summary>
                Gets the content and its ancestor, at a lever lesser or equal to a specified level, and of a specified content
                type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <param name="navigationQueryService">The query service for the in-memory navigation structure.</param>
            <param name="publishedStatusFilteringService"></param>
            <param name="maxLevel">The level.</param>
            <returns>
                The content and its ancestors, at a level lesser or equal to the specified level, and of the specified
                content type, in down-top order.
            </returns>
            <remarks>May or may not begin with the content itself, depending on its level and content type.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.Ancestor(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService)">
            <summary>
                Gets the ancestor of the content, ie its parent.
            </summary>
            <param name="content">The content.</param>
            <param name="navigationQueryService">The query service for the in-memory navigation structure.</param>
            <param name="publishedStatusFilteringService"></param>
            <returns>The ancestor of the content.</returns>
            <remarks>This method is here for consistency purposes but does not make much sense.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.Ancestor(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,System.Int32)">
            <summary>
                Gets the nearest ancestor of the content, at a lever lesser or equal to a specified level.
            </summary>
            <param name="content">The content.</param>
            <param name="navigationQueryService">The query service for the in-memory navigation structure.</param>
            <param name="publishedStatusFilteringService"></param>
            <param name="maxLevel">The level.</param>
            <returns>The nearest (in down-top order) ancestor of the content, at a level lesser or equal to the specified level.</returns>
            <remarks>Does not consider the content itself. May return <c>null</c>.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.Ancestor(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,System.String)">
            <summary>
                Gets the nearest ancestor of the content, of a specified content type.
            </summary>
            <param name="content">The content.</param>
            <param name="navigationQueryService">The query service for the in-memory navigation structure.</param>
            <param name="publishedStatusFilteringService"></param>
            <param name="contentTypeAlias">The content type alias.</param>
            <returns>The nearest (in down-top order) ancestor of the content, of the specified content type.</returns>
            <remarks>Does not consider the content itself. May return <c>null</c>.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.Ancestor``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService)">
            <summary>
                Gets the nearest ancestor of the content, of a specified content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <param name="navigationQueryService">The query service for the in-memory navigation structure.</param>
            <param name="publishedStatusFilteringService"></param>
            <returns>The nearest (in down-top order) ancestor of the content, of the specified content type.</returns>
            <remarks>Does not consider the content itself. May return <c>null</c>.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.Ancestor``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,System.Int32)">
            <summary>
                Gets the nearest ancestor of the content, at the specified level and of the specified content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <param name="navigationQueryService">The query service for the in-memory navigation structure.</param>
            <param name="publishedStatusFilteringService"></param>
            <param name="maxLevel">The level.</param>
            <returns>The ancestor of the content, at the specified level and of the specified content type.</returns>
            <remarks>
                Does not consider the content itself. If the ancestor at the specified level is
                not of the specified type, returns <c>null</c>.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.AncestorOrSelf(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
                Gets the content or its nearest ancestor.
            </summary>
            <param name="content">The content.</param>
            <returns>The content.</returns>
            <remarks>This method is here for consistency purposes but does not make much sense.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.AncestorOrSelf(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,System.Int32)">
            <summary>
                Gets the content or its nearest ancestor, at a lever lesser or equal to a specified level.
            </summary>
            <param name="content">The content.</param>
            <param name="navigationQueryService">The query service for the in-memory navigation structure.</param>
            <param name="publishedStatusFilteringService"></param>
            <param name="maxLevel">The level.</param>
            <returns>The content or its nearest (in down-top order) ancestor, at a level lesser or equal to the specified level.</returns>
            <remarks>May or may not return the content itself depending on its level. May return <c>null</c>.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.AncestorOrSelf(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,System.String)">
            <summary>
                Gets the content or its nearest ancestor, of a specified content type.
            </summary>
            <param name="content">The content.</param>
            <param name="navigationQueryService">The query service for the in-memory navigation structure.</param>
            <param name="publishedStatusFilteringService"></param>
            <param name="contentTypeAlias">The content type.</param>
            <returns>The content or its nearest (in down-top order) ancestor, of the specified content type.</returns>
            <remarks>May or may not return the content itself depending on its content type. May return <c>null</c>.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.AncestorOrSelf``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService)">
            <summary>
                Gets the content or its nearest ancestor, of a specified content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <param name="navigationQueryService">The query service for the in-memory navigation structure.</param>
            <param name="publishedStatusFilteringService"></param>
            <returns>The content or its nearest (in down-top order) ancestor, of the specified content type.</returns>
            <remarks>May or may not return the content itself depending on its content type. May return <c>null</c>.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.AncestorOrSelf``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,System.Int32)">
            <summary>
                Gets the content or its nearest ancestor, at a lever lesser or equal to a specified level, and of a specified
                content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <param name="navigationQueryService">The query service for the in-memory navigation structure.</param>
            <param name="publishedStatusFilteringService"></param>
            <param name="maxLevel">The level.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.Breadcrumbs(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,System.Boolean)">
            <summary>
                Gets the breadcrumbs (ancestors and self, top to bottom) for the specified <paramref name="content" />.
            </summary>
            <param name="content">The content.</param>
            <param name="navigationQueryService">The query service for the in-memory navigation structure.</param>
            <param name="publishedStatusFilteringService"></param>
            <param name="andSelf">Indicates whether the specified content should be included.</param>
            <returns>
                The breadcrumbs (ancestors and self, top to bottom) for the specified <paramref name="content" />.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.Breadcrumbs(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,System.Int32,System.Boolean)">
            <summary>
                Gets the breadcrumbs (ancestors and self, top to bottom) for the specified <paramref name="content" /> at a level
                higher or equal to <paramref name="minLevel" />.
            </summary>
            <param name="content">The content.</param>
            <param name="navigationQueryService">The query service for the in-memory navigation structure.</param>
            <param name="publishedStatusFilteringService"></param>
            <param name="minLevel">The minimum level.</param>
            <param name="andSelf">Indicates whether the specified content should be included.</param>
            <returns>
                The breadcrumbs (ancestors and self, top to bottom) for the specified <paramref name="content" /> at a level higher
                or equal to <paramref name="minLevel" />.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.Breadcrumbs``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,System.Boolean)">
            <summary>
                Gets the breadcrumbs (ancestors and self, top to bottom) for the specified <paramref name="content" /> at a level
                higher or equal to the specified root content type <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The root content type.</typeparam>
            <param name="content">The content.</param>
            <param name="navigationQueryService">The query service for the in-memory navigation structure.</param>
            <param name="publishedStatusFilteringService"></param>
            <param name="andSelf">Indicates whether the specified content should be included.</param>
            <returns>
                The breadcrumbs (ancestors and self, top to bottom) for the specified <paramref name="content" /> at a level higher
                or equal to the specified root content type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.Children(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,System.String)">
            <summary>
                Gets the children of the content item.
            </summary>
            <param name="content">The content item.</param>
            <param name="navigationQueryService"></param>
            <param name="publishedStatusFilteringService"></param>
            <param name="culture">
                The specific culture to get the URL children for. Default is null which will use the current culture in
                <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.VariationContext" />
            </param>
            <param name="publishedCache"></param>
            <remarks>
                <para>Gets children that are available for the specified culture.</para>
                <para>Children are sorted by their sortOrder.</para>
                <para>
                    For culture,
                    if null is used the current culture is used.
                    If an empty string is used only invariant children are returned.
                    If "*" is used all children are returned.
                </para>
                <para>
                    If a variant culture is specified or there is a current culture in the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.VariationContext" /> then the
                    Children returned
                    will include both the variant children matching the culture AND the invariant children because the invariant
                    children flow with the current culture.
                    However, if an empty string is specified only invariant children are returned.
                </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.Children(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,System.Func{Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.Boolean},System.String)">
            <summary>
                Gets the children of the content, filtered by a predicate.
            </summary>
            <param name="content">The content.</param>
            <param name="navigationQueryService"></param>
            <param name="publishedStatusFilteringService"></param>
            <param name="predicate">The predicate.</param>
            <param name="culture">
                The specific culture to filter for. If null is used the current culture is used. (Default is
                null)
            </param>
            <param name="publishedCache"></param>
            <returns>The children of the content, filtered by the predicate.</returns>
            <remarks>
                <para>Children are sorted by their sortOrder.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.ChildrenOfType(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,System.String,System.String)">
            <summary>
                Gets the children of the content, of any of the specified types.
            </summary>
            <param name="content">The content.</param>
            <param name="navigationQueryService"></param>
            <param name="publishedStatusFilteringService"></param>
            <param name="contentTypeAlias">The content type alias.</param>
            <param name="culture">
                The specific culture to filter for. If null is used the current culture is used. (Default is
                null)
            </param>
            <returns>The children of the content, of any of the specified types.</returns>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.Children``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,System.String)">
            <summary>
                Gets the children of the content, of a given content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <param name="variationContextAccessor">The accessor for the VariationContext</param>
            <param name="navigationQueryService"></param>
            <param name="publishStatusQueryService"></param>
            <param name="culture">
                The specific culture to filter for. If null is used the current culture is used. (Default is
                null)
            </param>
            <param name="publishedCache"></param>
            <returns>The children of content, of the given content type.</returns>
            <remarks>
                <para>Children are sorted by their sortOrder.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.FirstChildOfType(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,System.String,System.String)">
            <summary>
                Gets the first child of the content, of a given content type.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.Siblings(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,System.String)">
            <summary>
                Gets the siblings of the content.
            </summary>
            <param name="content">The content.</param>
            <param name="navigationQueryService">The navigation service</param>
            <param name="publishedStatusFilteringService"></param>
            <param name="culture">
                The specific culture to filter for. If null is used the current culture is used. (Default is
                null)
            </param>
            <returns>The siblings of the content.</returns>
            <remarks>
                <para>Note that in V7 this method also return the content node self.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.SiblingsOfType(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,System.String,System.String)">
            <summary>
                Gets the siblings of the content, of a given content type.
            </summary>
            <param name="content">The content.</param>
            <param name="navigationQueryService"></param>
            <param name="publishedStatusFilteringService"></param>
            <param name="culture">
                The specific culture to filter for. If null is used the current culture is used. (Default is
                null)
            </param>
            <param name="contentTypeAlias">The content type alias.</param>
            <returns>The siblings of the content, of the given content type.</returns>
            <remarks>
                <para>Note that in V7 this method also return the content node self.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.Siblings``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,System.String)">
            <summary>
                Gets the siblings of the content, of a given content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <param name="navigationQueryService"></param>
            <param name="publishedStatusFilteringService"></param>
            <param name="culture">
                The specific culture to filter for. If null is used the current culture is used. (Default is
                null)
            </param>
            <returns>The siblings of the content, of the given content type.</returns>
            <remarks>
                <para>Note that in V7 this method also return the content node self.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.SiblingsAndSelf(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,System.String)">
            <summary>
                Gets the siblings of the content including the node itself to indicate the position.
            </summary>
            <param name="content">The content.</param>
            <param name="navigationQueryService">The navigation service.</param>
            <param name="publishedStatusFilteringService"></param>
            <param name="culture">
                The specific culture to filter for. If null is used the current culture is used. (Default is
                null)
            </param>
            <returns>The siblings of the content including the node itself.</returns>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.SiblingsAndSelfOfType(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,System.String,System.String)">
            <summary>
                Gets the siblings of the content including the node itself to indicate the position, of a given content type.
            </summary>
            <param name="content">The content.</param>
            <param name="navigationQueryService"></param>
            <param name="publishedStatusFilteringService"></param>
            <param name="culture">
                The specific culture to filter for. If null is used the current culture is used. (Default is
                null)
            </param>
            <param name="contentTypeAlias">The content type alias.</param>
            <returns>The siblings of the content including the node itself, of the given content type.</returns>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.SiblingsAndSelf``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,System.String)">
            <summary>
                Gets the siblings of the content including the node itself to indicate the position, of a given content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <param name="navigationQueryService"></param>
            <param name="publishedStatusFilteringService"></param>
            <param name="culture">
                The specific culture to filter for. If null is used the current culture is used. (Default is
                null)
            </param>
            <returns>The siblings of the content including the node itself, of the given content type.</returns>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.Root(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService)">
            <summary>
                Gets the root content (ancestor or self at level 1) for the specified <paramref name="content" />.
            </summary>
            <param name="content">The content.</param>
            <param name="navigationQueryService">The query service for the in-memory navigation structure.</param>
            <param name="publishedStatusFilteringService"></param>
            <returns>
                The root content (ancestor or self at level 1) for the specified <paramref name="content" />.
            </returns>
            <remarks>
                This is the same as calling
                <see cref="M:Umbraco.Extensions.PublishedContentExtensions.AncestorOrSelf(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.Int32)" /> with <c>maxLevel</c>
                set to 1.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.Root``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService)">
            <summary>
                Gets the root content (ancestor or self at level 1) for the specified <paramref name="content" /> if it's of the
                specified content type <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <param name="navigationQueryService">The query service for the in-memory navigation structure.</param>
            <param name="publishedStatusFilteringService"></param>
            <returns>
                The root content (ancestor or self at level 1) for the specified <paramref name="content" /> of content type
                <typeparamref name="T" />.
            </returns>
            <remarks>
                This is the same as calling
                <see cref="M:Umbraco.Extensions.PublishedContentExtensions.AncestorOrSelf``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,System.Int32)" /> with
                <c>maxLevel</c> set to 1.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensions.ChildrenAsTable(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Services.Navigation.INavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedStatusFilteringService,Umbraco.Cms.Core.Services.IContentTypeService,Umbraco.Cms.Core.Services.IMediaTypeService,Umbraco.Cms.Core.Services.IMemberTypeService,Umbraco.Cms.Core.Routing.IPublishedUrlProvider,System.String,System.String)">
            <summary>
                Gets the children of the content in a DataTable.
            </summary>
            <param name="content">The content.</param>
            <param name="navigationQueryService"></param>
            <param name="publishedStatusFilteringService"></param>
            <param name="contentTypeService">The content type service.</param>
            <param name="mediaTypeService">The media type service.</param>
            <param name="memberTypeService">The member type service.</param>
            <param name="publishedUrlProvider">The published url provider.</param>
            <param name="contentTypeAliasFilter">An optional content type alias.</param>
            <param name="culture">
                The specific culture to filter for. If null is used the current culture is used. (Default is
                null)
            </param>
            <returns>The children of the content.</returns>
        </member>
        <member name="P:Umbraco.Extensions.PublishedContentExtensions.GetPropertyAliasesAndNames">
            <summary>
                This is used only for unit tests to set the delegate to look up aliases/names dictionary of a content type
            </summary>
        </member>
        <member name="T:Umbraco.Extensions.PublishedElementExtensions">
            <summary>
                Provides extension methods for <c>IPublishedElement</c>.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.PublishedElementExtensions.IsComposedOf(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,System.String)">
            <summary>
                Gets a value indicating whether the content is of a content type composed of the given alias
            </summary>
            <param name="content">The content.</param>
            <param name="alias">The content type alias.</param>
            <returns>
                A value indicating whether the content is of a content type composed of a content type identified by the
                alias.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.PublishedElementExtensions.HasProperty(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,System.String)">
            <summary>
                Gets a value indicating whether the content has a property identified by its alias.
            </summary>
            <param name="content">The content.</param>
            <param name="alias">The property alias.</param>
            <returns>A value indicating whether the content has the property identified by the alias.</returns>
            <remarks>The content may have a property, and that property may not have a value.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedElementExtensions.HasValue(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,System.String,System.String,System.String)">
            <summary>
                Gets a value indicating whether the content has a value for a property identified by its alias.
            </summary>
            <remarks>
                Returns true if <c>GetProperty(alias)</c> is not <c>null</c> and <c>GetProperty(alias).HasValue</c> is
                <c>true</c>.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedElementExtensions.Value(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,Umbraco.Cms.Core.Models.PublishedContent.IPublishedValueFallback,System.String,System.String,System.String,Umbraco.Cms.Core.Models.PublishedContent.Fallback,System.Object)">
            <summary>
                Gets the value of a content's property identified by its alias.
            </summary>
            <param name="content">The content.</param>
            <param name="publishedValueFallback">The published value fallback implementation.</param>
            <param name="alias">The property alias.</param>
            <param name="culture">The variation language.</param>
            <param name="segment">The variation segment.</param>
            <param name="fallback">Optional fallback strategy.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value of the content's property identified by the alias, if it exists, otherwise a default value.</returns>
            <remarks>
                <para>
                    The value comes from <c>IPublishedProperty</c> field <c>Value</c> ie it is suitable for use when rendering
                    content.
                </para>
                <para>
                    If no property with the specified alias exists, or if the property has no value, returns
                    <paramref name="defaultValue" />.
                </para>
                <para>
                    If eg a numeric property wants to default to 0 when value source is empty, this has to be done in the
                    converter.
                </para>
                <para>The alias is case-insensitive.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedElementExtensions.Value``1(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,Umbraco.Cms.Core.Models.PublishedContent.IPublishedValueFallback,System.String,System.String,System.String,Umbraco.Cms.Core.Models.PublishedContent.Fallback,``0)">
            <summary>
                Gets the value of a content's property identified by its alias, converted to a specified type.
            </summary>
            <typeparam name="T">The target property type.</typeparam>
            <param name="content">The content.</param>
            <param name="publishedValueFallback">The published value fallback implementation.</param>
            <param name="alias">The property alias.</param>
            <param name="culture">The variation language.</param>
            <param name="segment">The variation segment.</param>
            <param name="fallback">Optional fallback strategy.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value of the content's property identified by the alias, converted to the specified type.</returns>
            <remarks>
                <para>
                    The value comes from <c>IPublishedProperty</c> field <c>Value</c> ie it is suitable for use when rendering
                    content.
                </para>
                <para>
                    If no property with the specified alias exists, or if the property has no value, or if it could not be
                    converted, returns <c>default(T)</c>.
                </para>
                <para>
                    If eg a numeric property wants to default to 0 when value source is empty, this has to be done in the
                    converter.
                </para>
                <para>The alias is case-insensitive.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedElementExtensions.IsVisible(Umbraco.Cms.Core.Models.PublishedContent.IPublishedElement,Umbraco.Cms.Core.Models.PublishedContent.IPublishedValueFallback)">
            <summary>
                Gets a value indicating whether the content is visible.
            </summary>
            <param name="content">The content.</param>
            <param name="publishedValueFallback">The published value fallback implementation.</param>
            <returns>A value indicating whether the content is visible.</returns>
            <remarks>
                A content is not visible if it has an umbracoNaviHide property with a value of "1". Otherwise,
                the content is visible.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.PublishedElementExtensions.MediaUrl(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Routing.IPublishedUrlProvider,System.String,Umbraco.Cms.Core.Models.PublishedContent.UrlMode,System.String)">
            <summary>
                Gets the url for a media.
            </summary>
            <param name="content">The content item.</param>
            <param name="publishedUrlProvider">The published url provider.</param>
            <param name="culture">The culture (use current culture by default).</param>
            <param name="mode">The url mode (use site configuration by default).</param>
            <param name="propertyAlias">The alias of the property (use 'umbracoFile' by default).</param>
            <returns>The url for the media.</returns>
            <remarks>
                <para>
                    The value of this property is contextual. It depends on the 'current' request uri,
                    if any. In addition, when the content type is multi-lingual, this is the url for the
                    specified culture. Otherwise, it is the invariant url.
                </para>
            </remarks>
        </member>
        <member name="T:Umbraco.Extensions.PublishedModelFactoryExtensions">
            <summary>
                Provides extension methods for <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedModelFactory" />.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.PublishedModelFactoryExtensions.IsLiveFactoryEnabled(Umbraco.Cms.Core.Models.PublishedContent.IPublishedModelFactory)">
            <summary>
                Returns true if the current <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedModelFactory" /> is an implementation of
                <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IAutoPublishedModelFactory" /> and is enabled
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.PublishedModelFactoryExtensions.WithSafeLiveFactoryReset(Umbraco.Cms.Core.Models.PublishedContent.IPublishedModelFactory,System.Action)">
            <summary>
                Sets a flag to reset the ModelsBuilder models if the <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IPublishedModelFactory" /> is
                <see cref="T:Umbraco.Cms.Core.Models.PublishedContent.IAutoPublishedModelFactory" />
            </summary>
            <remarks>
                This does not recompile the InMemory models, only sets a flag to tell models builder to recompile when they are
                requested.
            </remarks>
        </member>
        <member name="T:Umbraco.Extensions.PublishedPropertyExtension">
            <summary>
                Provides extension methods for <c>IPublishedProperty</c>.
            </summary>
        </member>
        <member name="T:Umbraco.Extensions.RequestHandlerSettingsExtension">
            <summary>
                Get concatenated user and default character replacements
                taking into account <see cref="P:Umbraco.Cms.Core.Configuration.Models.RequestHandlerSettings.EnableDefaultCharReplacements" />.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.RequestHandlerSettingsExtension.GetCharReplacements(Umbraco.Cms.Core.Configuration.Models.RequestHandlerSettings)">
            <summary>
                Get concatenated user and default character replacements
                taking into account <see cref="P:Umbraco.Cms.Core.Configuration.Models.RequestHandlerSettings.EnableDefaultCharReplacements" />.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.RequestHandlerSettingsExtension.MergeUnique(System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Configuration.Models.CharItem},System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Configuration.Models.CharItem})">
            <summary>
                Merges two IEnumerable of CharItem without any duplicates, items in priorityReplacements will override those in alternativeReplacements.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.RuntimeStateExtensions.EnableInstaller(Umbraco.Cms.Core.Services.IRuntimeState)">
            <summary>
                Returns true if the installer is enabled based on the current runtime state
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.RuntimeStateExtensions.UmbracoCanBoot(Umbraco.Cms.Core.Services.IRuntimeState)">
            <summary>
                Returns true if Umbraco <see cref="T:Umbraco.Cms.Core.Services.IRuntimeState" /> is greater than <see cref="F:Umbraco.Cms.Core.RuntimeLevel.BootFailed" />
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.RuntimeStateExtensions.RunUnattendedBootLogic(Umbraco.Cms.Core.Services.IRuntimeState)">
            <summary>
                Returns true if the runtime state indicates that unattended boot logic should execute
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Extensions.StringExtensions">
            <summary>
                String extension methods
            </summary>
        </member>
        <member name="F:Umbraco.Extensions.StringExtensions.UrlNamespace">
            <summary>
                The namespace for URLs (from RFC 4122, Appendix C).
                See <a href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.GetIdsFromPathReversed(System.String)">
            <summary>
                Convert a path to node ids in the order from right to left (deepest to shallowest)
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.StripWhitespace(System.String)">
            <summary>
                Removes new lines and tabs
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.GetFileExtension(System.String)">
            <summary>
                Determines the extension of the path or URL
            </summary>
            <param name="file"></param>
            <returns>Extension of the file</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.DetectIsJson(System.String)">
            <summary>
                This tries to detect a json string, this is not a fail safe way but it is quicker than doing
                a try/catch when deserializing when it is not json.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.CleanForXss(System.String,System.Char[])">
            <summary>
                Cleans string to aid in preventing xss attacks.
            </summary>
            <param name="input"></param>
            <param name="ignoreFromClean"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.AppendQueryStringToUrl(System.String,System.String[])">
            <summary>
                This will append the query string to the URL
            </summary>
            <param name="url"></param>
            <param name="queryStrings"></param>
            <returns></returns>
            <remarks>
                This methods ensures that the resulting URL is structured correctly, that there's only one '?' and that things are
                delimited properly with '&amp;'
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.GenerateStreamFromString(System.String)">
            <summary>
                Returns a stream from a string
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.Trim(System.String,System.String)">
            <summary>
                Trims the specified value from a string; accepts a string input whereas the in-built implementation only accepts
                char or char[].
            </summary>
            <param name="value">The value.</param>
            <param name="forRemoving">For removing.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
                Indicates whether a specified string is null, empty, or
                consists only of white-space characters.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
                Returns <see langword="true" /> if the value is null,
                empty, or consists only of white-space characters, otherwise
                returns <see langword="false" />.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ToDelimitedList(System.String,System.String)">
            <summary>The to delimited list.</summary>
            <param name="list">The list.</param>
            <param name="delimiter">The delimiter.</param>
            <returns>the list</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.EnumTryParse``1(System.String,System.Boolean,``0@)">
            <summary>enum try parse.</summary>
            <param name="strType">The str type.</param>
            <param name="ignoreCase">The ignore case.</param>
            <param name="result">The result.</param>
            <typeparam name="T">The type</typeparam>
            <returns>The enum try parse.</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.EnumParse``1(System.String,System.Boolean)">
            <summary>
                Parse string to Enum
            </summary>
            <typeparam name="T">The enum type</typeparam>
            <param name="strType">The string to parse</param>
            <param name="ignoreCase">The ignore case</param>
            <returns>The parsed enum</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.StripHtml(System.String)">
            <summary>
                Strips all HTML from a string.
            </summary>
            <param name="text">The text.</param>
            <returns>Returns the string without any HTML tags.</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.EncodeAsGuid(System.String)">
            <summary>
                Encodes as GUID.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ConvertToHex(System.String)">
            <summary>
                Converts to hex.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ToUrlBase64(System.String)">
            <summary>
                Encodes a string to a safe URL base64 string
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.FromUrlBase64(System.String)">
            <summary>
                Decodes a URL safe base64 string back
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.InvariantFormat(System.String,System.Object[])">
            <summary>
                formats the string with invariant culture
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ToInvariantString(System.Int32)">
            <summary>
                Converts an integer to an invariant formatted string
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.InvariantEquals(System.String,System.String)">
            <summary>
                Compares 2 strings with invariant culture and case ignored
            </summary>
            <param name="compare">The compare.</param>
            <param name="compareTo">The compare to.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ParseInto``1(System.String)">
            <summary>
                Tries to parse a string into the supplied type by finding and using the Type's "Parse" method
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ParseInto(System.String,System.Type)">
            <summary>
                Tries to parse a string into the supplied type by finding and using the Type's "Parse" method
            </summary>
            <param name="val"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.GenerateHash(System.String)">
            <summary>
                Generates a hash of a string based on the FIPS compliance setting.
            </summary>
            <param name="str">Refers to itself</param>
            <returns>The hashed string</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.GenerateHash``1(System.String)">
            <summary>
                Generate a hash of a string based on the specified hash algorithm.
            </summary>
            <typeparam name="T">The hash algorithm implementation to use.</typeparam>
            <param name="str">The <see cref="T:System.String" /> to hash.</param>
            <returns>
                The hashed string.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ToSHA1(System.String)">
            <summary>
                Converts the string to SHA1
            </summary>
            <param name="stringToConvert">refers to itself</param>
            <returns>The SHA1 hashed string</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.UrlTokenDecode(System.String)">
            <summary>
                Decodes a string that was encoded with UrlTokenEncode
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.GenerateHash(System.String,System.String)">
            <summary>
                Generate a hash of a string based on the hashType passed in
            </summary>
            <param name="str">Refers to itself</param>
            <param name="hashType">
                String with the hash type.  See remarks section of the CryptoConfig Class in MSDN docs for a
                list of possible values.
            </param>
            <returns>The hashed string</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.UrlTokenEncode(System.Byte[])">
            <summary>
                Encodes a string so that it is 'safe' for URLs, files, etc..
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.NormaliseDirectoryPath(System.String)">
            <summary>
                Ensures that the folder path ends with a DirectorySeparatorChar
            </summary>
            <param name="currentFolder"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.Truncate(System.String,System.Int32,System.String)">
            <summary>
                Truncates the specified text string.
            </summary>
            <param name="text">The text.</param>
            <param name="maxLength">Length of the max.</param>
            <param name="suffix">The suffix.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.StripNewLines(System.String)">
            <summary>
                Strips carrage returns and line feeds from the specified text.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ToSingleLine(System.String)">
            <summary>
                Converts to single line by replacing line breaks with spaces.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ToFirstUpper(System.String)">
            <summary>
                Returns a copy of the string with the first character converted to uppercase.
            </summary>
            <param name="input">The string.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ToFirstLower(System.String)">
            <summary>
                Returns a copy of the string with the first character converted to lowercase.
            </summary>
            <param name="input">The string.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ToFirstUpper(System.String,System.Globalization.CultureInfo)">
            <summary>
                Returns a copy of the string with the first character converted to uppercase using the casing rules of the
                specified culture.
            </summary>
            <param name="input">The string.</param>
            <param name="culture">The culture.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ToFirstLower(System.String,System.Globalization.CultureInfo)">
            <summary>
                Returns a copy of the string with the first character converted to lowercase using the casing rules of the
                specified culture.
            </summary>
            <param name="input">The string.</param>
            <param name="culture">The culture.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ToFirstUpperInvariant(System.String)">
            <summary>
                Returns a copy of the string with the first character converted to uppercase using the casing rules of the
                invariant culture.
            </summary>
            <param name="input">The string.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ToFirstLowerInvariant(System.String)">
            <summary>
                Returns a copy of the string with the first character converted to lowercase using the casing rules of the
                invariant culture.
            </summary>
            <param name="input">The string.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ReplaceMany(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Returns a new string in which all occurrences of specified strings are replaced by other specified strings.
            </summary>
            <param name="text">The string to filter.</param>
            <param name="replacements">The replacements definition.</param>
            <returns>The filtered string.</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ReplaceMany(System.String,System.Char[],System.Char)">
            <summary>
                Returns a new string in which all occurrences of specified characters are replaced by a specified character.
            </summary>
            <param name="text">The string to filter.</param>
            <param name="chars">The characters to replace.</param>
            <param name="replacement">The replacement character.</param>
            <returns>The filtered string.</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ReplaceFirst(System.String,System.String,System.String)">
            <summary>
                Returns a new string in which only the first occurrence of a specified string is replaced by a specified
                replacement string.
            </summary>
            <param name="text">The string to filter.</param>
            <param name="search">The string to replace.</param>
            <param name="replace">The replacement string.</param>
            <returns>The filtered string.</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
                An extension method that returns a new string in which all occurrences of a
                specified string in the current instance are replaced with another specified string.
                StringComparison specifies the type of search to use for the specified string.
            </summary>
            <param name="source">Current instance of the string</param>
            <param name="oldString">Specified string to replace</param>
            <param name="newString">Specified string to inject</param>
            <param name="stringComparison">String Comparison object to specify search type</param>
            <returns>Updated string</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ToCSharpString(System.String)">
            <summary>
                Converts a literal string into a C# expression.
            </summary>
            <param name="s">Current instance of the string.</param>
            <returns>The string in a C# format.</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ContainsAny(System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparison)">
            <summary>
                Checks whether a string "haystack" contains within it any of the strings in the "needles" collection and returns
                true if it does or false if it doesn't
            </summary>
            <param name="haystack">The string to check</param>
            <param name="needles">The collection of strings to check are contained within the first string</param>
            <param name="comparison">
                The type of comparison to perform - defaults to <see cref="F:System.StringComparison.CurrentCulture" />
            </param>
            <returns>True if any of the needles are contained with haystack; otherwise returns false</returns>
            Added fix to ensure the comparison is used - see http://issues.umbraco.org/issue/U4-11313
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ToFriendlyName(System.String)">
            <summary>
                Converts a file name to a friendly name for a content item
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ToValidXmlString(System.String)">
            <summary>
                An extension method that returns a new string in which all occurrences of an
                unicode characters that are invalid in XML files are replaced with an empty string.
            </summary>
            <param name="text">Current instance of the string</param>
            <returns>Updated string</returns>
            <summary>
                removes any unusual unicode characters that can't be encoded into XML
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ToGuid(System.String)">
            <summary>
                Converts a string to a Guid - WARNING, depending on the string, this may not be unique
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.NullOrWhiteSpaceAsNull(System.String)">
            <summary>
                Turns an null-or-whitespace string into a null string.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.CreateGuidFromHash(System.Guid,System.String,System.Int32)">
            <summary>
                Creates a name-based UUID using the algorithm from RFC 4122 §4.3.
                See
                <a href="https://github.com/LogosBible/Logos.Utility/blob/master/src/Logos.Utility/GuidUtility.cs#L34">GuidUtility.cs</a>
                for original implementation.
            </summary>
            <param name="namespaceId">The ID of the namespace.</param>
            <param name="name">The name (within that namespace).</param>
            <param name="version">
                The version number of the UUID to create; this value must be either
                3 (for MD5 hashing) or 5 (for SHA-1 hashing).
            </param>
            <returns>A UUID derived from the namespace and name.</returns>
            <remarks>
                See
                <a href="http://code.logos.com/blog/2011/04/generating_a_deterministic_guid.html">Generating a deterministic GUID</a>
                .
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.IsFullPath(System.String)">
            <summary>
                Checks if a given path is a full path including drive letter
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ToSafeAlias(System.String,Umbraco.Cms.Core.Strings.IShortStringHelper)">
            <summary>
                Cleans a string to produce a string that can safely be used in an alias.
            </summary>
            <param name="alias">The text to filter.</param>
            <param name="shortStringHelper">The short string helper.</param>
            <returns>The safe alias.</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ToSafeAlias(System.String,Umbraco.Cms.Core.Strings.IShortStringHelper,System.Boolean)">
            <summary>
                Cleans a string to produce a string that can safely be used in an alias.
            </summary>
            <param name="alias">The text to filter.</param>
            <param name="camel">A value indicating that we want to camel-case the alias.</param>
            <param name="shortStringHelper">The short string helper.</param>
            <returns>The safe alias.</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ToSafeAlias(System.String,Umbraco.Cms.Core.Strings.IShortStringHelper,System.String)">
            <summary>
                Cleans a string, in the context of a specified culture, to produce a string that can safely be used in an alias.
            </summary>
            <param name="alias">The text to filter.</param>
            <param name="culture">The culture.</param>
            <param name="shortStringHelper">The short string helper.</param>
            <returns>The safe alias.</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ToUrlSegment(System.String,Umbraco.Cms.Core.Strings.IShortStringHelper)">
            <summary>
                Cleans a string to produce a string that can safely be used in an url segment.
            </summary>
            <param name="text">The text to filter.</param>
            <param name="shortStringHelper">The short string helper.</param>
            <returns>The safe url segment.</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ToUrlSegment(System.String,Umbraco.Cms.Core.Strings.IShortStringHelper,System.String)">
            <summary>
                Cleans a string, in the context of a specified culture, to produce a string that can safely be used in an url
                segment.
            </summary>
            <param name="text">The text to filter.</param>
            <param name="shortStringHelper">The short string helper.</param>
            <param name="culture">The culture.</param>
            <returns>The safe url segment.</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ToCleanString(System.String,Umbraco.Cms.Core.Strings.IShortStringHelper,Umbraco.Cms.Core.Strings.CleanStringType)">
            <summary>
                Cleans a string.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="shortStringHelper">The short string helper.</param>
            <param name="stringType">
                A flag indicating the target casing and encoding of the string. By default,
                strings are cleaned up to camelCase and Ascii.
            </param>
            <returns>The clean string.</returns>
            <remarks>The string is cleaned in the context of the ICurrent.ShortStringHelper default culture.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ToCleanString(System.String,Umbraco.Cms.Core.Strings.IShortStringHelper,Umbraco.Cms.Core.Strings.CleanStringType,System.Char)">
            <summary>
                Cleans a string, using a specified separator.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="shortStringHelper">The short string helper.</param>
            <param name="stringType">
                A flag indicating the target casing and encoding of the string. By default,
                strings are cleaned up to camelCase and Ascii.
            </param>
            <param name="separator">The separator.</param>
            <returns>The clean string.</returns>
            <remarks>The string is cleaned in the context of the ICurrent.ShortStringHelper default culture.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ToCleanString(System.String,Umbraco.Cms.Core.Strings.IShortStringHelper,Umbraco.Cms.Core.Strings.CleanStringType,System.String)">
            <summary>
                Cleans a string in the context of a specified culture.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="shortStringHelper">The short string helper.</param>
            <param name="stringType">
                A flag indicating the target casing and encoding of the string. By default,
                strings are cleaned up to camelCase and Ascii.
            </param>
            <param name="culture">The culture.</param>
            <returns>The clean string.</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ToCleanString(System.String,Umbraco.Cms.Core.Strings.IShortStringHelper,Umbraco.Cms.Core.Strings.CleanStringType,System.Char,System.String)">
            <summary>
                Cleans a string in the context of a specified culture, using a specified separator.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="shortStringHelper">The short string helper.</param>
            <param name="stringType">
                A flag indicating the target casing and encoding of the string. By default,
                strings are cleaned up to camelCase and Ascii.
            </param>
            <param name="separator">The separator.</param>
            <param name="culture">The culture.</param>
            <returns>The clean string.</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.SplitPascalCasing(System.String,Umbraco.Cms.Core.Strings.IShortStringHelper)">
            <summary>
                Splits a Pascal cased string into a phrase separated by spaces.
            </summary>
            <param name="phrase">The text to split.</param>
            <param name="shortStringHelper"></param>
            <returns>The split text.</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ToSafeFileName(System.String,Umbraco.Cms.Core.Strings.IShortStringHelper)">
            <summary>
                Cleans a string, in the context of the invariant culture, to produce a string that can safely be used as a
                filename,
                both internally (on disk) and externally (as a url).
            </summary>
            <param name="text">The text to filter.</param>
            <param name="shortStringHelper"></param>
            <returns>The safe filename.</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.ToSafeFileName(System.String,Umbraco.Cms.Core.Strings.IShortStringHelper,System.String)">
            <summary>
                Cleans a string, in the context of the invariant culture, to produce a string that can safely be used as a
                filename,
                both internally (on disk) and externally (as a url).
            </summary>
            <param name="text">The text to filter.</param>
            <param name="shortStringHelper"></param>
            <param name="culture">The culture.</param>
            <returns>The safe filename.</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.EscapedSplit(System.String,System.Char,System.Char)">
            <summary>
                Splits a string with an escape character that allows for the split character to exist in a string
            </summary>
            <param name="value">The string to split</param>
            <param name="splitChar">The character to split on</param>
            <param name="escapeChar">The character which can be used to escape the character to split on</param>
            <returns>The string split into substrings delimited by the split character</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.IsEmail(System.String)">
            <summary>
                Checks whether a string is a valid email address.
            </summary>
            <param name="email">The string check</param>
            <returns>Returns a bool indicating whether the string is an email address.</returns>
        </member>
        <member name="M:Umbraco.Extensions.StringExtensions.EnsureCultureCode(System.String)">
            <summary>
            Verifies the provided string is a valid culture code and returns it in a consistent casing.
            </summary>
            <param name="culture">Culture code.</param>
            <returns>Culture code in standard casing.</returns>
        </member>
        <member name="M:Umbraco.Extensions.TypeExtensions.IsAnonymousType(System.Type)">
            <summary>
                Checks if the type is an anonymous type
            </summary>
            <param name="type"></param>
            <returns></returns>
            <remarks>
                reference: http://jclaes.blogspot.com/2011/05/checking-for-anonymous-types.html
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.TypeExtensions.HasParameters(System.Reflection.MethodInfo,System.Type[])">
            <summary>
                Determines whether the specified type is enumerable.
            </summary>
            <param name="method">The type.</param>
            <param name="parameterTypes"></param>
        </member>
        <member name="M:Umbraco.Extensions.TypeExtensions.IsEnumerable(System.Type)">
            <returns>
                <c>true</c> if the specified type is enumerable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.TypeExtensions.IsOfGenericType(System.Type,System.Type)">
            <summary>
                Determines whether [is of generic type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <param name="genericType">Type of the generic.</param>
            <returns>
                <c>true</c> if [is of generic type] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.TypeExtensions.TryGetGenericArguments(System.Type,System.Type,System.Type[]@)">
            <summary>
                Will find the generic type of the 'type' parameter passed in that is equal to the 'genericType' parameter passed in
            </summary>
            <param name="type"></param>
            <param name="genericType"></param>
            <param name="genericArgType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.TypeExtensions.GetAllProperties(System.Type)">
            <summary>
                Gets all properties in a flat hierarchy
            </summary>
            <remarks>Includes both Public and Non-Public properties</remarks>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.TypeExtensions.GetPublicProperties(System.Type)">
            <summary>
                Returns public properties including inherited properties even for interfaces
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.TypeExtensions.GetPublicMethods(System.Type)">
            <summary>
                Returns public methods including inherited methods even for interfaces
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.TypeExtensions.GetAllMethods(System.Type)">
            <summary>
                Returns all methods including inherited methods even for interfaces
            </summary>
            <remarks>Includes both Public and Non-Public methods</remarks>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.TypeExtensions.IsType``1(System.Type)">
            <summary>
                Determines whether the specified actual type is type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="actualType">The actual type.</param>
            <returns>
                <c>true</c> if the specified actual type is type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.TypeExtensions.GetFullNameWithAssembly(System.Type)">
            <summary>
                Returns the full type name with the assembly but without all of the assembly specific version information.
            </summary>
            <param name="type"></param>
            <returns></returns>
            <remarks>
                This method is like an 'in between' of Type.FullName and Type.AssemblyQualifiedName which returns the type and the
                assembly separated
                by a comma.
            </remarks>
            <example>
                The output of this class would be:
                Umbraco.Core.TypeExtensions, Umbraco.Core
            </example>
        </member>
        <member name="M:Umbraco.Extensions.TypeExtensions.IsAssignableFromGtd(System.Type,System.Type)">
            <summary>
                Determines whether an instance of a specified type can be assigned to the current type instance.
            </summary>
            <param name="type">The current type.</param>
            <param name="c">The type to compare with the current type.</param>
            <returns>A value indicating whether an instance of the specified type can be assigned to the current type instance.</returns>
            <remarks>
                This extended version supports the current type being a generic type definition, and will
                consider that eg <c>List{int}</c> is "assignable to" <c>IList{}</c>.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.TypeExtensions.GetEnumeratedType(System.Type)">
            <summary>
                If the given <paramref name="type" /> is an array or some other collection
                comprised of 0 or more instances of a "subtype", get that type
            </summary>
            <param name="type">the source type</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.TypeExtensions.GetMemberIgnoreCase(System.Type,Umbraco.Cms.Core.Strings.IShortStringHelper,System.Object,System.String)">
            <summary>
                Tries to return a value based on a property name for an object but ignores case sensitivity
            </summary>
            <param name="type"></param>
            <param name="shortStringHelper"></param>
            <param name="target"></param>
            <param name="memberName"></param>
            <returns></returns>
            <remarks>
                Currently this will only work for ProperCase and camelCase properties, see the TODO below to enable complete case
                insensitivity
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.TypeExtensions.GetAllMemberInfos``1(System.Type,System.Func{System.Type,``0[]})">
            <remarks>
                taken from
                http://stackoverflow.com/questions/358835/getproperties-to-return-all-properties-for-an-interface-inheritance-hierarchy
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.TypeLoaderExtensions.GetDataEditors(Umbraco.Cms.Core.Composing.TypeLoader)">
            <summary>
                Gets all types implementing <see cref="T:Umbraco.Cms.Core.PropertyEditors.IDataEditor" />.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.TypeLoaderExtensions.GetCacheRefreshers(Umbraco.Cms.Core.Composing.TypeLoader)">
            <summary>
                Gets all types implementing ICacheRefresher.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.TypeLoaderExtensions.GetActions(Umbraco.Cms.Core.Composing.TypeLoader)">
            <summary>
                Gets all types implementing <see cref="T:Umbraco.Cms.Core.Actions.IAction" />
            </summary>
            <param name="mgr"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Extensions.UdiGetterExtensions">
            <summary>
            Provides extension methods that return UDIs for Umbraco entities.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.UdiGetterExtensions.GetUdi(Umbraco.Cms.Core.Models.Entities.IEntity)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            The entity identifier of the entity.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.UdiGetterExtensions.GetUdi(Umbraco.Cms.Core.Models.EntityContainer)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            The entity identifier of the entity.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.UdiGetterExtensions.GetUdi(Umbraco.Cms.Core.Models.IContentBase)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            The entity identifier of the entity.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.UdiGetterExtensions.GetUdi(Umbraco.Cms.Core.Models.IContent)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            The entity identifier of the entity.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.UdiGetterExtensions.GetUdi(Umbraco.Cms.Core.Models.IMedia)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            The entity identifier of the entity.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.UdiGetterExtensions.GetUdi(Umbraco.Cms.Core.Models.IMember)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            The entity identifier of the entity.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.UdiGetterExtensions.GetUdi(Umbraco.Cms.Core.Models.IContentTypeComposition)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            The entity identifier of the entity.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.UdiGetterExtensions.GetUdi(Umbraco.Cms.Core.Models.IContentType)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            The entity identifier of the entity.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.UdiGetterExtensions.GetUdi(Umbraco.Cms.Core.Models.IMediaType)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            The entity identifier of the entity.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.UdiGetterExtensions.GetUdi(Umbraco.Cms.Core.Models.IMemberType)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            The entity identifier of the entity.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.UdiGetterExtensions.GetUdi(Umbraco.Cms.Core.Models.IDataType)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            The entity identifier of the entity.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.UdiGetterExtensions.GetUdi(Umbraco.Cms.Core.Models.IDictionaryItem)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            The entity identifier of the entity.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.UdiGetterExtensions.GetUdi(Umbraco.Cms.Core.Models.ILanguage)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            The entity identifier of the entity.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.UdiGetterExtensions.GetUdi(Umbraco.Cms.Core.Models.IMemberGroup)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            The entity identifier of the entity.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.UdiGetterExtensions.GetUdi(Umbraco.Cms.Core.Models.IPartialView)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            The entity identifier of the entity.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.UdiGetterExtensions.GetUdi(Umbraco.Cms.Core.Models.IRelation)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            The entity identifier of the entity.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.UdiGetterExtensions.GetUdi(Umbraco.Cms.Core.Models.IRelationType)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            The entity identifier of the entity.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.UdiGetterExtensions.GetUdi(Umbraco.Cms.Core.Models.IScript)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            The entity identifier of the entity.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.UdiGetterExtensions.GetUdi(Umbraco.Cms.Core.Models.IStylesheet)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            The entity identifier of the entity.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.UdiGetterExtensions.GetUdi(Umbraco.Cms.Core.Models.ITemplate)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            The entity identifier of the entity.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.UdiGetterExtensions.GetUdi(Umbraco.Cms.Core.Models.Membership.IUser)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            The entity identifier of the entity.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.UdiGetterExtensions.GetUdi(Umbraco.Cms.Core.Models.Membership.IUserGroup)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            The entity identifier of the entity.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.UdiGetterExtensions.GetUdi(Umbraco.Cms.Core.Models.IWebhook)">
            <summary>
            Gets the entity identifier of the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            The entity identifier of the entity.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.UdiGetterExtensions.GetUdiFromPath(System.String,System.String)">
            <summary>
            Gets the UDI from a path.
            </summary>
            <param name="entityType">The type of the entity.</param>
            <param name="path">The path.</param>
            <returns>
            The entity identifier of the entity.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.UmbracoContextExtensions.IsFrontEndUmbracoRequest(Umbraco.Cms.Core.Web.IUmbracoContext)">
            <summary>
                Boolean value indicating whether the current request is a front-end umbraco request
            </summary>
        </member>
        <member name="T:Umbraco.Extensions.UriExtensions">
            <summary>
                Provides extension methods to <see cref="T:System.Uri" />.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.UriExtensions.Rewrite(System.Uri,System.String)">
            <summary>
                Rewrites the path of uri.
            </summary>
            <param name="uri">The uri.</param>
            <param name="path">The new path, which must begin with a slash.</param>
            <returns>The rewritten uri.</returns>
            <remarks>Everything else remains unchanged, except for the fragment which is removed.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.UriExtensions.Rewrite(System.Uri,System.String,System.String)">
            <summary>
                Rewrites the path and query of a uri.
            </summary>
            <param name="uri">The uri.</param>
            <param name="path">The new path, which must begin with a slash.</param>
            <param name="query">The new query, which must be empty or begin with a question mark.</param>
            <returns>The rewritten uri.</returns>
            <remarks>Everything else remains unchanged, except for the fragment which is removed.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.UriExtensions.GetSafeAbsolutePath(System.Uri)">
            <summary>
                Gets the absolute path of the uri, even if the uri is relative.
            </summary>
            <param name="uri">The uri.</param>
            <returns>The absolute path of the uri.</returns>
            <remarks>Default uri.AbsolutePath does not support relative uris.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.UriExtensions.GetAbsolutePathDecoded(System.Uri)">
            <summary>
                Gets the decoded, absolute path of the uri.
            </summary>
            <param name="uri">The uri.</param>
            <returns>The absolute path of the uri.</returns>
            <remarks>Only for absolute uris.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.UriExtensions.GetSafeAbsolutePathDecoded(System.Uri)">
            <summary>
                Gets the decoded, absolute path of the uri, even if the uri is relative.
            </summary>
            <param name="uri">The uri.</param>
            <returns>The absolute path of the uri.</returns>
            <remarks>Default uri.AbsolutePath does not support relative uris.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.UriExtensions.EndPathWithSlash(System.Uri)">
            <summary>
                Rewrites the path of the uri so it ends with a slash.
            </summary>
            <param name="uri">The uri.</param>
            <returns>The rewritten uri.</returns>
            <remarks>Everything else remains unchanged.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.UriExtensions.TrimPathEndSlash(System.Uri)">
            <summary>
                Rewrites the path of the uri so it does not end with a slash.
            </summary>
            <param name="uri">The uri.</param>
            <returns>The rewritten uri.</returns>
            <remarks>Everything else remains unchanged.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.UriExtensions.MakeAbsolute(System.Uri,System.Uri)">
            <summary>
                Transforms a relative uri into an absolute uri.
            </summary>
            <param name="uri">The relative uri.</param>
            <param name="baseUri">The base absolute uri.</param>
            <returns>The absolute uri.</returns>
        </member>
        <member name="M:Umbraco.Extensions.UriExtensions.WithoutPort(System.Uri)">
            <summary>
                Removes the port from the uri.
            </summary>
            <param name="uri">The uri.</param>
            <returns>The same uri, without its port.</returns>
        </member>
        <member name="M:Umbraco.Extensions.UriExtensions.ReplaceHost(System.Uri,System.String)">
            <summary>
                Replaces the host of a uri.
            </summary>
            <param name="uri">The uri.</param>
            <param name="host">A replacement host.</param>
            <returns>The same uri, with its host replaced.</returns>
        </member>
        <member name="T:Umbraco.Extensions.XmlExtensions">
            <summary>
                Extension methods for xml objects
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.XmlExtensions.ToXmlDocument(System.Xml.Linq.XDocument)">
            <summary>
                Converts from an XDocument to an XmlDocument
            </summary>
            <param name="xDocument"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.XmlExtensions.ToXDocument(System.Xml.XmlDocument)">
            <summary>
                Converts from an XmlDocument to an XDocument
            </summary>
            <param name="xmlDocument"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.XmlExtensions.ToXElement(System.Xml.XmlNode)">
            <summary>
                Converts from an XmlElement to an XElement
            </summary>
            <param name="xmlElement"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.FileSystemExtensions.OpenReadWithRetry(System.IO.FileInfo,System.Int32,System.Int32)">
            <summary>
                Attempts to open the file at <code>filePath</code> up to <code>maxRetries</code> times,
                with a thread sleep time of <code>sleepPerRetryInMilliseconds</code> between retries.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.FileSystemExtensions.TryCreateFileProvider(Umbraco.Cms.Core.IO.IFileSystem,Microsoft.Extensions.FileProviders.IFileProvider@)">
            <summary>
                Creates a new <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /> from the file system.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="fileProvider">
                When this method returns, contains an <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /> created from the file
                system.
            </param>
            <returns>
                <c>true</c> if the <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /> was successfully created; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.IOHelperExtensions.ResolveRelativeOrVirtualUrl(Umbraco.Cms.Core.IO.IIOHelper,System.String)">
            <summary>
                Will resolve a virtual path URL to an absolute path, else if it is not a virtual path (i.e. starts with ~/) then
                it will just return the path as-is (relative).
            </summary>
            <param name="ioHelper"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.IOHelperExtensions.TryCreateDirectory(Umbraco.Cms.Core.IO.IIOHelper,System.String)">
            <summary>
                Tries to create a directory.
            </summary>
            <param name="ioHelper">The IOHelper.</param>
            <param name="dir">the directory path.</param>
            <returns>true if the directory was created, false otherwise.</returns>
        </member>
        <member name="M:Umbraco.Extensions.LogHttpRequest.TryGetCurrentHttpRequestId(System.Nullable{System.Guid}@,Umbraco.Cms.Core.Cache.IRequestCache)">
            <summary>
                Retrieve the id assigned to the currently-executing HTTP request, if any.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="requestCache"></param>
            <returns><c>true</c> if there is a request in progress; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Umbraco.Extensions.ImageDimensionExtractorExtensions.IsSupportedImageFormat(Umbraco.Cms.Core.Media.IImageDimensionExtractor,System.String)">
            <summary>
            Gets a value indicating whether the file extension corresponds to a supported image.
            </summary>
            <param name="imageDimensionExtractor">The image dimension extractor implementation that provides detail on which image extensions are supported.</param>
            <param name="extension">The file extension.</param>
            <returns>
            A value indicating whether the file extension corresponds to an image.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ImageUrlGeneratorExtensions.IsSupportedImageFormat(Umbraco.Cms.Core.Media.IImageUrlGenerator,System.String)">
            <summary>
            Gets a value indicating whether the file extension corresponds to a supported image.
            </summary>
            <param name="imageUrlGenerator">The image URL generator implementation that provides detail on which image extensions are supported.</param>
            <param name="extension">The file extension.</param>
            <returns>
            A value indicating whether the file extension corresponds to an image.
            </returns>
        </member>
        <member name="T:Umbraco.Extensions.ConsentExtensions">
            <summary>
                Provides extension methods for the <see cref="T:Umbraco.Cms.Core.Models.IConsent" /> interface.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ConsentExtensions.IsGranted(Umbraco.Cms.Core.Models.IConsent)">
            <summary>
                Determines whether the consent is granted.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ConsentExtensions.IsRevoked(Umbraco.Cms.Core.Models.IConsent)">
            <summary>
                Determines whether the consent is revoked.
            </summary>
        </member>
        <member name="T:Umbraco.Extensions.ContentBaseExtensions">
            <summary>
                Provides extension methods to IContentBase to get URL segments.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ContentBaseExtensions.GetUrlSegment(Umbraco.Cms.Core.Models.IContentBase,Umbraco.Cms.Core.Strings.IShortStringHelper,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Strings.IUrlSegmentProvider},System.String,System.Boolean)">
            <summary>
            Gets a single URL segment for a specified content and culture.
            </summary>
            <param name="content">The content.</param>
            <param name="shortStringHelper"></param>
            <param name="urlSegmentProviders"></param>
            <param name="culture">The culture.</param>
            <param name="published">Whether to get the published or draft.</param>
            <returns>The URL segment.</returns>
            <remarks>
            If more than one URL segment provider is available, the first one that returns a non-null value will be returned.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.ContentBaseExtensions.GetUrlSegments(Umbraco.Cms.Core.Models.IContentBase,Umbraco.Cms.Core.Strings.IShortStringHelper,System.Collections.Generic.IEnumerable{Umbraco.Cms.Core.Strings.IUrlSegmentProvider},System.String,System.Boolean)">
            <summary>
            Gets all URL segments for a specified content and culture.
            </summary>
            <param name="content">The content.</param>
            <param name="shortStringHelper"></param>
            <param name="urlSegmentProviders"></param>
            <param name="culture">The culture.</param>
            <param name="published">Whether to get the published or draft.</param>
            <returns>The collection of URL segments.</returns>
        </member>
        <member name="T:Umbraco.Extensions.ContentRepositoryExtensions">
            <summary>
                Extension methods used to manipulate content variations by the document repository
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ContentRepositoryExtensions.TouchCulture(Umbraco.Cms.Core.Models.IContentBase,System.String)">
            <summary>
                Updates a culture date, if the culture exists.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ContentRepositoryExtensions.AdjustDates(Umbraco.Cms.Core.Models.IContent,System.DateTime,System.Boolean)">
            <summary>
                Used to synchronize all culture dates to the same date if they've been modified
            </summary>
            <param name="content"></param>
            <param name="date"></param>
            <param name="publishing"></param>
            <remarks>
                This is so that in an operation where (for example) 2 languages are updates like french and english, it is possible
                that
                these dates assigned to them differ by a couple of Ticks, but we need to ensure they are persisted at the exact
                same time.
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.ContentRepositoryExtensions.GetCulturesUnpublishing(Umbraco.Cms.Core.Models.IContent)">
            <summary>
                Gets the cultures that have been flagged for unpublishing.
            </summary>
            <remarks>Gets cultures for which content.UnpublishCulture() has been invoked.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.ContentRepositoryExtensions.CopyFrom(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Models.IContent,System.String)">
            <summary>
                Copies values from another document.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ContentRepositoryExtensions.PublishCulture(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Models.CultureImpact,System.DateTime,Umbraco.Cms.Core.PropertyEditors.PropertyEditorCollection)">
            <summary>
                Sets the publishing values for names and properties.
            </summary>
            <param name="content"></param>
            <param name="impact"></param>
            <param name="publishTime"></param>
            <param name="propertyEditorCollection"></param>
            <returns>
                A value indicating whether it was possible to publish the names and values for the specified
                culture(s). The method may fail if required names are not set, but it does NOT validate property data
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentRepositoryExtensions.UnpublishCulture(Umbraco.Cms.Core.Models.IContent,System.String)">
            <summary>
                Returns false if the culture is already unpublished
            </summary>
            <param name="content"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentRepositoryExtensions.ClearPublishInfo(Umbraco.Cms.Core.Models.IContent,System.String)">
            <summary>
                Returns false if the culture is already unpublished
            </summary>
            <param name="content"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Extensions.ContentTagsExtensions">
            <summary>
                Provides extension methods for the <see cref="T:Umbraco.Cms.Core.Models.IContentBase" /> class, to manage tags.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ContentTagsExtensions.AssignTags(Umbraco.Cms.Core.Models.IContentBase,Umbraco.Cms.Core.PropertyEditors.PropertyEditorCollection,Umbraco.Cms.Core.Services.IDataTypeService,Umbraco.Cms.Core.Serialization.IJsonSerializer,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String)">
            <summary>
                Assign tags.
            </summary>
            <param name="content">The content item.</param>
            <param name="dataTypeService"></param>
            <param name="propertyTypeAlias">The property alias.</param>
            <param name="tags">The tags.</param>
            <param name="merge">A value indicating whether to merge the tags with existing tags instead of replacing them.</param>
            <param name="culture">A culture, for multi-lingual properties.</param>
            <param name="propertyEditors"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:Umbraco.Extensions.ContentTagsExtensions.RemoveTags(Umbraco.Cms.Core.Models.IContentBase,Umbraco.Cms.Core.PropertyEditors.PropertyEditorCollection,Umbraco.Cms.Core.Services.IDataTypeService,Umbraco.Cms.Core.Serialization.IJsonSerializer,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
                Remove tags.
            </summary>
            <param name="content">The content item.</param>
            <param name="dataTypeService"></param>
            <param name="propertyTypeAlias">The property alias.</param>
            <param name="tags">The tags.</param>
            <param name="culture">A culture, for multi-lingual properties.</param>
            <param name="propertyEditors"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Umbraco.Extensions.ContentTypeBaseExtensions">
            <summary>
                Provides extensions methods for <see cref="T:Umbraco.Cms.Core.Models.IContentTypeBase" />.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ContentTypeBaseExtensions.WasPropertyTypeVariationChanged(Umbraco.Cms.Core.Models.IContentTypeBase)">
            <summary>
                Used to check if any property type was changed between variant/invariant
            </summary>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentTypeBaseExtensions.WasPropertyTypeVariationChanged(Umbraco.Cms.Core.Models.IContentTypeBase,System.Collections.Generic.IReadOnlyCollection{System.String}@)">
            <summary>
                Used to check if any property type was changed between variant/invariant
            </summary>
            <param name="contentType"></param>
            <param name="aliases"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Extensions.DataTypeExtensions">
            <summary>
                Provides extensions methods for <see cref="T:Umbraco.Cms.Core.Models.IDataType" />.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.DataTypeExtensions.ConfigurationAs``1(Umbraco.Cms.Core.Models.IDataType)">
            <summary>
                Gets the configuration object.
            </summary>
            <typeparam name="T">The expected type of the configuration object.</typeparam>
            <param name="dataType">This datatype.</param>
            <exception cref="T:System.InvalidCastException">When the datatype configuration is not of the expected type.</exception>
        </member>
        <member name="M:Umbraco.Extensions.DataTypeExtensions.IsBuildInDataType(Umbraco.Cms.Core.Models.IDataType)">
            <summary>
                Returns true if this data type is build-in/default.
            </summary>
            <param name="dataType">The data type definition.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.DataTypeExtensions.IsBuildInDataType(System.Guid)">
            <summary>
                Returns true if this data type is build-in/default.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.DataTypeExtensions.IsDeletableDataType(Umbraco.Cms.Core.Models.IDataType)">
            <summary>
                Returns true if this data type can be deleted.
            </summary>
            <param name="dataType">The data type definition.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.DataTypeExtensions.IsDeletableDataType(System.Guid)">
            <summary>
                Returns true if this data type can be deleted.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.DictionaryItemExtensions.GetTranslatedValue(Umbraco.Cms.Core.Models.IDictionaryItem,System.String)">
            <summary>
                Returns the translation value for the language ISO code, if no translation is found it returns an empty string
            </summary>
            <param name="d"></param>
            <param name="isoCode"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.DictionaryItemExtensions.AddOrUpdateDictionaryValue(Umbraco.Cms.Core.Models.IDictionaryItem,Umbraco.Cms.Core.Models.ILanguage,System.String)">
            <summary>
                Adds or updates a translation for a dictionary item and language
            </summary>
            <param name="item"></param>
            <param name="language"></param>
            <param name="value"></param>
        </member>
        <member name="M:Umbraco.Extensions.EntityExtensions.UpdatingEntity(Umbraco.Cms.Core.Models.Entities.IEntity)">
            <summary>
                Updates the entity when it is being saved.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.EntityExtensions.AddingEntity(Umbraco.Cms.Core.Models.Entities.IEntity)">
            <summary>
                Updates the entity when it is being saved for the first time.
            </summary>
        </member>
        <member name="T:Umbraco.Extensions.MapperContextExtensions">
            <summary>
                Provides extension methods for the <see cref="T:Umbraco.Cms.Core.Mapping.MapperContext" /> class.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.MapperContextExtensions.GetCulture(Umbraco.Cms.Core.Mapping.MapperContext)">
            <summary>
                Gets the context culture.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.MapperContextExtensions.GetSegment(Umbraco.Cms.Core.Mapping.MapperContext)">
            <summary>
                Gets the context segment.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.MapperContextExtensions.SetCulture(Umbraco.Cms.Core.Mapping.MapperContext,System.String)">
            <summary>
                Sets a context culture.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.MapperContextExtensions.SetSegment(Umbraco.Cms.Core.Mapping.MapperContext,System.String)">
            <summary>
                Sets a context segment.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.MapperContextExtensions.GetIncludedProperties(Umbraco.Cms.Core.Mapping.MapperContext)">
            <summary>
                Get included properties.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.MapperContextExtensions.SetIncludedProperties(Umbraco.Cms.Core.Mapping.MapperContext,System.String[])">
            <summary>
                Sets included properties.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.MediaExtensions.GetUrl(Umbraco.Cms.Core.Models.IMedia,System.String,Umbraco.Cms.Core.PropertyEditors.MediaUrlGeneratorCollection)">
            <summary>
                Gets the URL of a media item.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.MediaExtensions.GetUrls(Umbraco.Cms.Core.Models.IMedia,Umbraco.Cms.Core.Configuration.Models.ContentSettings,Umbraco.Cms.Core.PropertyEditors.MediaUrlGeneratorCollection)">
            <summary>
                Gets the URLs of a media item.
            </summary>
        </member>
        <member name="T:Umbraco.Extensions.PropertyTagsExtensions">
            <summary>
                Provides extension methods for the <see cref="T:Umbraco.Cms.Core.Models.Property" /> class to manage tags.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.PropertyTagsExtensions.AssignTags(Umbraco.Cms.Core.Models.IProperty,Umbraco.Cms.Core.PropertyEditors.PropertyEditorCollection,Umbraco.Cms.Core.Services.IDataTypeService,Umbraco.Cms.Core.Serialization.IJsonSerializer,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String)">
            <summary>
                Assign tags.
            </summary>
            <param name="property">The property.</param>
            <param name="serializer"></param>
            <param name="tags">The tags.</param>
            <param name="merge">A value indicating whether to merge the tags with existing tags instead of replacing them.</param>
            <param name="culture">A culture, for multi-lingual properties.</param>
            <param name="propertyEditors"></param>
            <param name="dataTypeService"></param>
        </member>
        <member name="M:Umbraco.Extensions.PropertyTagsExtensions.RemoveTags(Umbraco.Cms.Core.Models.IProperty,Umbraco.Cms.Core.PropertyEditors.PropertyEditorCollection,Umbraco.Cms.Core.Services.IDataTypeService,Umbraco.Cms.Core.Serialization.IJsonSerializer,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
                Removes tags.
            </summary>
            <param name="property">The property.</param>
            <param name="serializer"></param>
            <param name="tags">The tags.</param>
            <param name="culture">A culture, for multi-lingual properties.</param>
            <param name="propertyEditors"></param>
            <param name="dataTypeService"></param>
        </member>
        <member name="M:Umbraco.Extensions.PropertyTagsExtensions.SetTagsValue(Umbraco.Cms.Core.Models.IProperty,Umbraco.Cms.Core.Serialization.IJsonSerializer,System.Object,Umbraco.Cms.Core.PropertyEditors.TagConfiguration,System.String)">
            <summary>
                Sets tags on a content property, based on the property editor tags configuration.
            </summary>
            <param name="property">The property.</param>
            <param name="serializer"></param>
            <param name="value">The property value.</param>
            <param name="tagConfiguration">The datatype configuration.</param>
            <param name="culture">A culture, for multi-lingual properties.</param>
            <remarks>
                <para>The value is either a string (delimited string) or an enumeration of strings (tag list).</para>
                <para>
                    This is used both by the content repositories to initialize a property with some tag values, and by the
                    content controllers to update a property with values received from the property editor.
                </para>
            </remarks>
        </member>
        <member name="T:Umbraco.Extensions.PublishedContentExtensionsForModels">
            <summary>
                Provides strongly typed published content models services.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.PublishedContentExtensionsForModels.CreateModel(Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent,Umbraco.Cms.Core.Models.PublishedContent.IPublishedModelFactory)">
            <summary>
                Creates a strongly typed published content model for an internal published content.
            </summary>
            <param name="content">The internal published content.</param>
            <param name="publishedModelFactory">The published model factory</param>
            <returns>The strongly typed published content model.</returns>
        </member>
        <member name="M:Umbraco.Extensions.UmbracoUserExtensions.IsSuper(Umbraco.Cms.Core.Models.Membership.IUser)">
            <summary>
                Determines whether this user is the 'super' user.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.UmbracoUserExtensions.IsAdmin(Umbraco.Cms.Core.Models.Membership.IUser)">
            <summary>
                Determines whether this user belongs to the administrators group.
            </summary>
            <remarks>The 'super' user does not automatically belongs to the administrators group.</remarks>
        </member>
        <member name="M:Umbraco.Extensions.UmbracoUserExtensions.GetUserCulture(Umbraco.Cms.Core.Models.Membership.IUser,Umbraco.Cms.Core.Services.ILocalizedTextService,Umbraco.Cms.Core.Configuration.Models.GlobalSettings)">
            <summary>
                Returns the culture info associated with this user, based on the language they're assigned to in the back office
            </summary>
            <param name="user"></param>
            <param name="textService"></param>
            <param name="globalSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.UrlProviderExtensions.GetContentUrlsAsync(Umbraco.Cms.Core.Models.IContent,Umbraco.Cms.Core.Routing.IPublishedRouter,Umbraco.Cms.Core.Web.IUmbracoContext,Umbraco.Cms.Core.Services.ILanguageService,Umbraco.Cms.Core.Services.ILocalizedTextService,Umbraco.Cms.Core.Services.IContentService,Umbraco.Cms.Core.Models.PublishedContent.IVariationContextAccessor,Microsoft.Extensions.Logging.ILogger{Umbraco.Cms.Core.Models.IContent},Umbraco.Cms.Core.Routing.UriUtility,Umbraco.Cms.Core.Routing.IPublishedUrlProvider,Umbraco.Cms.Core.Services.Navigation.IDocumentNavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedContentStatusFilteringService)">
            <summary>
                Gets the URLs of the content item.
            </summary>
            <remarks>
                <para>Use when displaying URLs. If errors occur when generating the URLs, they will show in the list.</para>
                <para>Contains all the URLs that we can figure out (based upon domains, etc).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Extensions.UrlProviderExtensions.GetContentUrlsByCultureAsync(Umbraco.Cms.Core.Models.IContent,System.Collections.Generic.IEnumerable{System.String},Umbraco.Cms.Core.Routing.IPublishedRouter,Umbraco.Cms.Core.Web.IUmbracoContext,Umbraco.Cms.Core.Services.IContentService,Umbraco.Cms.Core.Services.ILocalizedTextService,Umbraco.Cms.Core.Models.PublishedContent.IVariationContextAccessor,Microsoft.Extensions.Logging.ILogger,Umbraco.Cms.Core.Routing.UriUtility,Umbraco.Cms.Core.Routing.IPublishedUrlProvider,Umbraco.Cms.Core.Services.Navigation.IDocumentNavigationQueryService,Umbraco.Cms.Core.Services.Navigation.IPublishedContentStatusFilteringService)">
            <summary>
                Tries to return a <see cref="T:Umbraco.Cms.Core.Routing.UrlInfo" /> for each culture for the content while detecting collisions/errors
            </summary>
        </member>
        <member name="T:Umbraco.Extensions.AuthenticationExtensions">
            <summary>
            Extension methods for <see cref="T:System.Security.Principal.IIdentity" />.
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.AuthenticationExtensions.EnsureCulture(System.Security.Principal.IIdentity)">
            <summary>
            Ensures that the thread culture is set based on the back office user's culture.
            </summary>
            <param name="identity">The identity.</param>
        </member>
        <member name="M:Umbraco.Extensions.AuthenticationExtensions.GetCultureString(System.Security.Principal.IIdentity)">
            <summary>
            Gets the culture string from the back office user.
            </summary>
            <param name="identity">The identity.</param>
            <returns>
            The culture string.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.AuthenticationExtensions.GetCulture(System.Security.Principal.IIdentity)">
            <summary>
            Gets the culture from the back office user.
            </summary>
            <param name="identity">The identity.</param>
            <returns>
            The culture.
            </returns>
        </member>
        <member name="M:Umbraco.Extensions.ClaimsPrincipalExtensions.GetUmbracoIdentity(System.Security.Principal.IPrincipal)">
            <summary>
                This will return the current back office identity if the IPrincipal is the correct type and authenticated.
            </summary>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.ClaimsPrincipalExtensions.GetRemainingAuthSeconds(System.Security.Principal.IPrincipal)">
            <summary>
                Returns the remaining seconds on an auth ticket for the user based on the claim applied to the user durnig
                authentication
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.ClaimsPrincipalExtensions.GetRemainingAuthSeconds(System.Security.Principal.IPrincipal,System.DateTimeOffset)">
            <summary>
                Returns the remaining seconds on an auth ticket for the user based on the claim applied to the user durnig
                authentication
            </summary>
            <param name="user"></param>
            <param name="now"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Extensions.ContentServiceExtensions">
            <summary>
                Content service extension methods
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.ContentServiceExtensions.CreateContent(Umbraco.Cms.Core.Services.IContentService,System.String,Umbraco.Cms.Core.Udi,System.String,System.Int32)">
            <summary>
                Method to create an IContent object based on the Udi of a parent
            </summary>
            <param name="contentService"></param>
            <param name="name"></param>
            <param name="parentId"></param>
            <param name="contentTypeAlias"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentServiceExtensions.RemoveContentPermissions(Umbraco.Cms.Core.Services.IContentService,System.Int32)">
            <summary>
                Remove all permissions for this user for all nodes
            </summary>
            <param name="contentService"></param>
            <param name="contentId"></param>
        </member>
        <member name="M:Umbraco.Extensions.ContentTypeServiceExtensions.GetAllElementTypes(Umbraco.Cms.Core.Services.IContentTypeService)">
            <summary>
                Gets all of the element types (e.g. content types that have been marked as an element type).
            </summary>
            <param name="contentTypeService">The content type service.</param>
            <returns>Returns all the element types.</returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentTypeServiceExtensions.GetAvailableCompositeContentTypes(Umbraco.Cms.Core.Services.IContentTypeService,Umbraco.Cms.Core.Models.IContentTypeComposition,Umbraco.Cms.Core.Models.IContentTypeComposition[],System.String[],System.String[],System.Boolean)">
            <summary>
                Returns the available composite content types for a given content type
            </summary>
            <param name="allContentTypes"></param>
            <param name="filterContentTypes">
                This is normally an empty list but if additional content type aliases are passed in, any content types containing
                those aliases will be filtered out
                along with any content types that have matching property types that are included in the filtered content types
            </param>
            <param name="ctService"></param>
            <param name="source"></param>
            <param name="filterPropertyTypes">
                This is normally an empty list but if additional property type aliases are passed in, any content types that have
                these aliases will be filtered out.
                This is required because in the case of creating/modifying a content type because new property types being added to
                it are not yet persisted so cannot
                be looked up via the db, they need to be passed in.
            </param>
            <param name="isElement">Whether the composite content types should be applicable for an element type</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.ContentTypeServiceExtensions.GetDirectOrIndirect(Umbraco.Cms.Core.Models.IContentTypeComposition)">
            <summary>
                Get those that we use directly
            </summary>
            <param name="ctype"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Extensions.LocalizedTextServiceExtensions">
            <summary>
                Extension methods for ILocalizedTextService
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.LocalizedTextServiceExtensions.Localize(Umbraco.Cms.Core.Services.ILocalizedTextService,System.String,System.String,System.String[])">
            <summary>
                Localize using the current thread culture
            </summary>
            <param name="manager"></param>
            <param name="area"></param>
            <param name="alias"></param>
            <param name="tokens"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.LocalizedTextServiceExtensions.Localize(Umbraco.Cms.Core.Services.ILocalizedTextService,System.String,System.String,System.Globalization.CultureInfo,System.String[])">
            <summary>
                Localize a key without any variables
            </summary>
            <param name="manager"></param>
            <param name="area"></param>
            <param name="alias"></param>
            <param name="culture"></param>
            <param name="tokens"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.LocalizedTextServiceExtensions.ConvertToDictionaryVars(System.String[])">
            <summary>
                Convert an array of strings to a dictionary of indices -> values
            </summary>
            <param name="variables"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Extensions.MediaServiceExtensions">
            <summary>
                Media service extension methods
            </summary>
            <remarks>
                Many of these have to do with UDI lookups but we don't need to add these methods to the service interface since a
                UDI is just a GUID
                and the services already support GUIDs
            </remarks>
        </member>
        <member name="T:Umbraco.Extensions.PublicAccessServiceExtensions">
            <summary>
                Extension methods for the IPublicAccessService
            </summary>
        </member>
        <member name="M:Umbraco.Extensions.PublicAccessServiceExtensions.HasAccessAsync(Umbraco.Cms.Core.Services.IPublicAccessService,System.String,System.String,System.Func{System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.String}}})">
            <summary>
                Checks if the member with the specified username has access to the path which is also based on the passed in roles
                for the member
            </summary>
            <param name="publicAccessService"></param>
            <param name="path"></param>
            <param name="username"></param>
            <param name="rolesCallback">A callback to retrieve the roles for this member</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Extensions.UserServiceExtensions.GetPermissions(Umbraco.Cms.Core.Services.IUserService,Umbraco.Cms.Core.Models.Membership.IUserGroup,System.Boolean,System.Int32[])">
            <summary>
                Get explicitly assigned permissions for a group and optional node Ids
            </summary>
            <param name="service"></param>
            <param name="group"></param>
            <param name="fallbackToDefaultPermissions">
                Flag indicating if we want to include the default group permissions for each result if there are not explicit
                permissions set
            </param>
            <param name="nodeIds">Specifying nothing will return all permissions for all nodes</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Cms.Core.Models.Membership.EntityPermission" /></returns>
        </member>
        <member name="M:Umbraco.Extensions.UserServiceExtensions.GetPermissionsForPath(Umbraco.Cms.Core.Services.IUserService,Umbraco.Cms.Core.Models.Membership.IUserGroup,System.String,System.Boolean)">
            <summary>
                Gets the permissions for the provided group and path
            </summary>
            <param name="service"></param>
            <param name="group"></param>
            <param name="path">Path to check permissions for</param>
            <param name="fallbackToDefaultPermissions">
                Flag indicating if we want to include the default group permissions for each result if there are not explicit
                permissions set
            </param>
        </member>
        <member name="M:Umbraco.Extensions.UserServiceExtensions.RemoveUserGroupPermissions(Umbraco.Cms.Core.Services.IUserService,System.Int32,System.Int32[])">
            <summary>
                Remove all permissions for this user group for all nodes specified
            </summary>
            <param name="userService"></param>
            <param name="groupId"></param>
            <param name="entityIds"></param>
        </member>
        <member name="M:Umbraco.Extensions.UserServiceExtensions.RemoveUserGroupPermissions(Umbraco.Cms.Core.Services.IUserService,System.Int32)">
            <summary>
                Remove all permissions for this user group for all nodes
            </summary>
            <param name="userService"></param>
            <param name="groupId"></param>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LayoutRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the LayoutRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.LayoutRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LayoutRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LayoutRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LayoutRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LayoutRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LayoutRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LayoutRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LayoutRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ValidClientId_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ValidClientId method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ValidClientId_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ValidClientId_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ValidClientId_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ValidClientId_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ValidClientId_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ValidClientId_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ValidClientId_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ValidClientId_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.HeaderRegex_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the HeaderRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.HeaderRegex_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.HeaderRegex_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.HeaderRegex_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.HeaderRegex_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.HeaderRegex_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.HeaderRegex_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.HeaderRegex_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.HeaderRegex_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_indexOfString_361308DD034DAF68B560499755C7FC5B82D510731407B3BF7373738D3036B74D">
            <summary>Supports searching for the string "@inherits".</summary>
        </member>
    </members>
</doc>
