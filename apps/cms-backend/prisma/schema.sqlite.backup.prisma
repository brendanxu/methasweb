// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Note: SQLite doesn't support enums, using String with validation in app
// enum UserRole { ADMIN, EDITOR, VIEWER }
// enum ContentStatus { DRAFT, PUBLISHED, ARCHIVED }

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  passwordHash String  @map("password_hash")
  name        String
  role        String @default("EDITOR")
  avatarUrl   String?  @map("avatar_url")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  caseStudies  CaseStudy[]
  newsArticles NewsArticle[]
  mediaFiles   MediaFile[]

  @@map("users")
}

model Service {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?
  iconUrl     String? @map("icon_url")
  color       String? // HEX color code
  isActive    Boolean @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  caseStudyServices CaseStudyService[]

  @@map("services")
}

model Industry {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?
  isActive    Boolean @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  caseStudies CaseStudy[]

  @@map("industries")
}

model Category {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?
  color       String? // HEX color code
  isActive    Boolean @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  newsArticles NewsArticle[]

  @@map("categories")
}

model CaseStudy {
  id            String        @id @default(cuid())
  title         String
  slug          String        @unique
  clientName    String        @map("client_name")
  heroImageUrl  String?       @map("hero_image_url")
  summary       String
  theGoal       String        @map("the_goal")
  theChallenge  String        @map("the_challenge")
  theSolution   String        @map("the_solution")
  status        String @default("DRAFT")
  metaTitle     String?       @map("meta_title")
  metaDescription String?     @map("meta_description")
  publishedAt   DateTime?     @map("published_at")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  // Foreign Keys
  industryId String? @map("industry_id")
  authorId   String  @map("author_id")

  // Relations
  industry Industry? @relation(fields: [industryId], references: [id])
  author   User      @relation(fields: [authorId], references: [id])
  services CaseStudyService[]
  mediaFiles MediaFile[]

  @@map("case_studies")
}

model NewsArticle {
  id              String        @id @default(cuid())
  title           String
  slug            String        @unique
  heroImageUrl    String?       @map("hero_image_url")
  summary         String
  content         String
  status          String @default("DRAFT")
  metaTitle       String?       @map("meta_title")
  metaDescription String?       @map("meta_description")
  publishedAt     DateTime?     @map("published_at")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // Foreign Keys
  categoryId String @map("category_id")
  authorId   String @map("author_id")

  // Relations
  category   Category    @relation(fields: [categoryId], references: [id])
  author     User        @relation(fields: [authorId], references: [id])
  mediaFiles MediaFile[]

  @@map("news_articles")
}

model CaseStudyService {
  id           String @id @default(cuid())
  caseStudyId  String @map("case_study_id")
  serviceId    String @map("service_id")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  caseStudy CaseStudy @relation(fields: [caseStudyId], references: [id], onDelete: Cascade)
  service   Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([caseStudyId, serviceId])
  @@map("case_study_services")
}

model MediaFile {
  id           String  @id @default(cuid())
  filename     String
  originalName String  @map("original_name")
  filePath     String  @map("file_path")
  fileUrl      String  @map("file_url")
  fileSize     Int     @map("file_size")
  mimeType     String  @map("mime_type")
  width        Int?
  height       Int?
  altText      String? @map("alt_text")
  caption      String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Foreign Keys
  uploaderId    String? @map("uploader_id")
  caseStudyId   String? @map("case_study_id")
  newsArticleId String? @map("news_article_id")

  // Relations
  uploader    User?        @relation(fields: [uploaderId], references: [id])
  caseStudy   CaseStudy?   @relation(fields: [caseStudyId], references: [id])
  newsArticle NewsArticle? @relation(fields: [newsArticleId], references: [id])

  @@map("media_files")
}