version: '3.8'

services:
  # Main website
  main-site:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: southpole-main-site
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://api:3001/api}
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
    ports:
      - "3000:3000"
    depends_on:
      - api
      - postgres
    networks:
      - southpole-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.main-site.rule=Host(`${MAIN_DOMAIN:-southpole.com}`)"
      - "traefik.http.routers.main-site.tls=true"
      - "traefik.http.routers.main-site.tls.certresolver=letsencrypt"
      - "traefik.http.services.main-site.loadbalancer.server.port=3000"

  # API Backend
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: southpole-api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - PORT=3001
      - CORS_ORIGIN=${CORS_ORIGIN:-https://southpole.com}
    ports:
      - "3001:3001"
    depends_on:
      - postgres
    networks:
      - southpole-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`${API_DOMAIN:-api.southpole.com}`)"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=3001"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: southpole-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-southpole}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - southpole-network
    command: postgres -c shared_preload_libraries=pg_stat_statements

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: southpole-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - southpole-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: southpole-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - main-site
      - api
    networks:
      - southpole-network

  # SSL Certificate management
  certbot:
    image: certbot/certbot
    container_name: southpole-certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot --force-renewal --email ${SSL_EMAIL} -d ${MAIN_DOMAIN} -d ${API_DOMAIN} --agree-tos

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: southpole-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - southpole-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: southpole-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - southpole-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  southpole-network:
    driver: bridge